
Calculating_Pi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000049d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00802000  000049d8  00004a6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c9b  00802040  00802040  00004aac  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004aac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004b08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000770  00000000  00000000  00004b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e76d  00000000  00000000  000052b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004f5f  00000000  00000000  00013a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004e66  00000000  00000000  00018984  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000017a0  00000000  00000000  0001d7ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000056e3  00000000  00000000  0001ef8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008dee  00000000  00000000  0002466f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000828  00000000  00000000  0002d45d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__ctors_end>
       4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
       8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
       c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      10:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      14:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      18:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      1c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      20:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      24:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      28:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      2c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      30:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      34:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      38:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__vector_14>
      3c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      40:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      44:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      48:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      4c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      50:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      54:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      58:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      5c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      60:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      64:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      68:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      6c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      70:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      74:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      78:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      7c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      80:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      84:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      88:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      8c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      90:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      94:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      98:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      9c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      a0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      a4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      a8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      ac:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      b0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      b4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      b8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      bc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      c0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      c4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      c8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      cc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      d0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      d4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      d8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      dc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      e0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      e4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      e8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      ec:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      f0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      f4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      f8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      fc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     100:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     104:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     108:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     10c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     110:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     114:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     118:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     11c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     120:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     124:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     128:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     12c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     130:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     134:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     138:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     13c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     140:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     144:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     148:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     14c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     150:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     154:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     158:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     15c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     160:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     164:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     168:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     16c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     170:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     174:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     178:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     17c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     180:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     184:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     188:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     18c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     190:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     194:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     198:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     19c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1a0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1a4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1a8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1ac:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1b0:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__vector_108>
     1b4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1b8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1bc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1c0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1c4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1c8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1cc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1d0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1d4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1d8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1dc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1e0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1e4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1e8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1ec:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1f0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1f4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1f8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1fc:	41 14       	cp	r4, r1
     1fe:	41 14       	cp	r4, r1
     200:	41 14       	cp	r4, r1
     202:	8e 14       	cp	r8, r14
     204:	76 14       	cp	r7, r6
     206:	8b 14       	cp	r8, r11
     208:	41 14       	cp	r4, r1
     20a:	41 14       	cp	r4, r1
     20c:	8e 14       	cp	r8, r14
     20e:	76 14       	cp	r7, r6

00000210 <__trampolines_start>:
     210:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <vButtonTask>
     214:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <vDisplayUpdateTask>
     218:	0c 94 8e 14 	jmp	0x291c	; 0x291c <prvTimerTask+0x212>
     21c:	0c 94 82 04 	jmp	0x904	; 0x904 <vEventGroupSetBitsCallback>
     220:	0c 94 41 14 	jmp	0x2882	; 0x2882 <prvTimerTask+0x178>
     224:	0c 94 85 13 	jmp	0x270a	; 0x270a <prvTimerTask>
     228:	0c 94 8b 14 	jmp	0x2916	; 0x2916 <prvTimerTask+0x20c>
     22c:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <vLeibniz>
     230:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <prvTimerTask+0x1e2>
     234:	0c 94 69 15 	jmp	0x2ad2	; 0x2ad2 <vSteuerTask>
     238:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <prvIdleTask>

0000023c <__trampolines_end>:
     23c:	6e 61       	ori	r22, 0x1E	; 30
     23e:	6e 00       	.word	0x006e	; ????

00000240 <__c.2332>:
     240:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     250:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     260:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     270:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     280:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     290:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2a0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2b0:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2c0:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2d0:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2e0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2f0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     300:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     310:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     320:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     330:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000033e <__ctors_end>:
     33e:	11 24       	eor	r1, r1
     340:	1f be       	out	0x3f, r1	; 63
     342:	cf ef       	ldi	r28, 0xFF	; 255
     344:	cd bf       	out	0x3d, r28	; 61
     346:	df e3       	ldi	r29, 0x3F	; 63
     348:	de bf       	out	0x3e, r29	; 62
     34a:	00 e0       	ldi	r16, 0x00	; 0
     34c:	0c bf       	out	0x3c, r16	; 60

0000034e <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     34e:	eb ed       	ldi	r30, 0xDB	; 219
     350:	fc e2       	ldi	r31, 0x2C	; 44
     352:	8a ea       	ldi	r24, 0xAA	; 170
     354:	90 e4       	ldi	r25, 0x40	; 64
     356:	81 93       	st	Z+, r24
     358:	e0 30       	cpi	r30, 0x00	; 0
     35a:	f9 07       	cpc	r31, r25
     35c:	e0 f3       	brcs	.-8      	; 0x356 <init_mem+0x8>

0000035e <__do_copy_data>:
     35e:	10 e2       	ldi	r17, 0x20	; 32
     360:	a0 e0       	ldi	r26, 0x00	; 0
     362:	b0 e2       	ldi	r27, 0x20	; 32
     364:	e8 ed       	ldi	r30, 0xD8	; 216
     366:	f9 e4       	ldi	r31, 0x49	; 73
     368:	00 e0       	ldi	r16, 0x00	; 0
     36a:	0b bf       	out	0x3b, r16	; 59
     36c:	02 c0       	rjmp	.+4      	; 0x372 <__do_copy_data+0x14>
     36e:	07 90       	elpm	r0, Z+
     370:	0d 92       	st	X+, r0
     372:	a0 34       	cpi	r26, 0x40	; 64
     374:	b1 07       	cpc	r27, r17
     376:	d9 f7       	brne	.-10     	; 0x36e <__do_copy_data+0x10>

00000378 <__do_clear_bss>:
     378:	2c e2       	ldi	r18, 0x2C	; 44
     37a:	a0 e4       	ldi	r26, 0x40	; 64
     37c:	b0 e2       	ldi	r27, 0x20	; 32
     37e:	01 c0       	rjmp	.+2      	; 0x382 <.do_clear_bss_start>

00000380 <.do_clear_bss_loop>:
     380:	1d 92       	st	X+, r1

00000382 <.do_clear_bss_start>:
     382:	ab 3d       	cpi	r26, 0xDB	; 219
     384:	b2 07       	cpc	r27, r18
     386:	e1 f7       	brne	.-8      	; 0x380 <.do_clear_bss_loop>
     388:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <main>
     38c:	0c 94 ea 24 	jmp	0x49d4	; 0x49d4 <_exit>

00000390 <__bad_interrupt>:
     390:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000394 <initButtons>:
 #define BUTTON_PRESS_LONG			500

 

 void initButtons(void) {
	PORTF.DIRCLR = PIN4_bm; //SW1
     394:	e0 ea       	ldi	r30, 0xA0	; 160
     396:	f6 e0       	ldi	r31, 0x06	; 6
     398:	80 e1       	ldi	r24, 0x10	; 16
     39a:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRCLR = PIN5_bm; //SW2
     39c:	80 e2       	ldi	r24, 0x20	; 32
     39e:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRCLR = PIN6_bm; //SW3
     3a0:	80 e4       	ldi	r24, 0x40	; 64
     3a2:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRCLR = PIN7_bm; //SW4
     3a4:	80 e8       	ldi	r24, 0x80	; 128
     3a6:	82 83       	std	Z+2, r24	; 0x02
     3a8:	08 95       	ret

000003aa <updateButtons>:
 void updateButtons(void) {
	static uint16_t b1Count = 0;
	static uint16_t b2Count = 0;
	static uint16_t b3Count = 0;
	static uint16_t b4Count = 0;
	if(Button1_Value == 0) {
     3aa:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
     3ae:	84 fd       	sbrc	r24, 4
     3b0:	0e c0       	rjmp	.+28     	; 0x3ce <updateButtons+0x24>
		if(b1Count < 60000) {
     3b2:	80 91 46 20 	lds	r24, 0x2046	; 0x802046 <b1Count.3829>
     3b6:	90 91 47 20 	lds	r25, 0x2047	; 0x802047 <b1Count.3829+0x1>
     3ba:	80 36       	cpi	r24, 0x60	; 96
     3bc:	2a ee       	ldi	r18, 0xEA	; 234
     3be:	92 07       	cpc	r25, r18
     3c0:	e8 f4       	brcc	.+58     	; 0x3fc <updateButtons+0x52>
			b1Count++;
     3c2:	01 96       	adiw	r24, 0x01	; 1
     3c4:	80 93 46 20 	sts	0x2046, r24	; 0x802046 <b1Count.3829>
     3c8:	90 93 47 20 	sts	0x2047, r25	; 0x802047 <b1Count.3829+0x1>
     3cc:	17 c0       	rjmp	.+46     	; 0x3fc <updateButtons+0x52>
		}
	} else {
		if(b1Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     3ce:	80 91 46 20 	lds	r24, 0x2046	; 0x802046 <b1Count.3829>
     3d2:	90 91 47 20 	lds	r25, 0x2047	; 0x802047 <b1Count.3829+0x1>
     3d6:	8b 30       	cpi	r24, 0x0B	; 11
     3d8:	91 05       	cpc	r25, r1
     3da:	48 f0       	brcs	.+18     	; 0x3ee <updateButtons+0x44>
			if(b1Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     3dc:	c3 97       	sbiw	r24, 0x33	; 51
     3de:	18 f0       	brcs	.+6      	; 0x3e6 <updateButtons+0x3c>
				//Button was pressed Long
				b1Status = LONG_PRESSED;
     3e0:	10 92 cc 2c 	sts	0x2CCC, r1	; 0x802ccc <b1Status>
     3e4:	07 c0       	rjmp	.+14     	; 0x3f4 <updateButtons+0x4a>
			} else {
				//Button was pressed Short	
				b1Status = SHORT_PRESSED;
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	80 93 cc 2c 	sts	0x2CCC, r24	; 0x802ccc <b1Status>
     3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <updateButtons+0x4a>
			}
		} else {
			b1Status = NOT_PRESSED;
     3ee:	82 e0       	ldi	r24, 0x02	; 2
     3f0:	80 93 cc 2c 	sts	0x2CCC, r24	; 0x802ccc <b1Status>
		}
		b1Count = 0;
     3f4:	10 92 46 20 	sts	0x2046, r1	; 0x802046 <b1Count.3829>
     3f8:	10 92 47 20 	sts	0x2047, r1	; 0x802047 <b1Count.3829+0x1>
	}
	if(Button2_Value == 0) {
     3fc:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
     400:	85 fd       	sbrc	r24, 5
     402:	0e c0       	rjmp	.+28     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		if(b2Count < 60000) {
     404:	80 91 44 20 	lds	r24, 0x2044	; 0x802044 <b2Count.3830>
     408:	90 91 45 20 	lds	r25, 0x2045	; 0x802045 <b2Count.3830+0x1>
     40c:	80 36       	cpi	r24, 0x60	; 96
     40e:	2a ee       	ldi	r18, 0xEA	; 234
     410:	92 07       	cpc	r25, r18
     412:	e8 f4       	brcc	.+58     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			b2Count++;
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	80 93 44 20 	sts	0x2044, r24	; 0x802044 <b2Count.3830>
     41a:	90 93 45 20 	sts	0x2045, r25	; 0x802045 <b2Count.3830+0x1>
     41e:	17 c0       	rjmp	.+46     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
		}
	} else {
		if(b2Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     420:	80 91 44 20 	lds	r24, 0x2044	; 0x802044 <b2Count.3830>
     424:	90 91 45 20 	lds	r25, 0x2045	; 0x802045 <b2Count.3830+0x1>
     428:	8b 30       	cpi	r24, 0x0B	; 11
     42a:	91 05       	cpc	r25, r1
     42c:	48 f0       	brcs	.+18     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			if(b2Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     42e:	c3 97       	sbiw	r24, 0x33	; 51
     430:	18 f0       	brcs	.+6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
				//Button was pressed Long
				b2Status = LONG_PRESSED;
     432:	10 92 cd 2c 	sts	0x2CCD, r1	; 0x802ccd <b2Status>
     436:	07 c0       	rjmp	.+14     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
				} else {
				//Button was pressed Short
				b2Status = SHORT_PRESSED;
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	80 93 cd 2c 	sts	0x2CCD, r24	; 0x802ccd <b2Status>
     43e:	03 c0       	rjmp	.+6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			}
		} else {
			b2Status = NOT_PRESSED;			
     440:	82 e0       	ldi	r24, 0x02	; 2
     442:	80 93 cd 2c 	sts	0x2CCD, r24	; 0x802ccd <b2Status>
		}
		b2Count = 0;
     446:	10 92 44 20 	sts	0x2044, r1	; 0x802044 <b2Count.3830>
     44a:	10 92 45 20 	sts	0x2045, r1	; 0x802045 <b2Count.3830+0x1>
	}
	if(Button3_Value == 0) {
     44e:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
     452:	86 fd       	sbrc	r24, 6
     454:	0e c0       	rjmp	.+28     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
		if(b3Count < 60000) {
     456:	80 91 42 20 	lds	r24, 0x2042	; 0x802042 <b3Count.3831>
     45a:	90 91 43 20 	lds	r25, 0x2043	; 0x802043 <b3Count.3831+0x1>
     45e:	80 36       	cpi	r24, 0x60	; 96
     460:	2a ee       	ldi	r18, 0xEA	; 234
     462:	92 07       	cpc	r25, r18
     464:	e8 f4       	brcc	.+58     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
			b3Count++;
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	80 93 42 20 	sts	0x2042, r24	; 0x802042 <b3Count.3831>
     46c:	90 93 43 20 	sts	0x2043, r25	; 0x802043 <b3Count.3831+0x1>
     470:	17 c0       	rjmp	.+46     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
		}
	} else {
		if(b3Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     472:	80 91 42 20 	lds	r24, 0x2042	; 0x802042 <b3Count.3831>
     476:	90 91 43 20 	lds	r25, 0x2043	; 0x802043 <b3Count.3831+0x1>
     47a:	8b 30       	cpi	r24, 0x0B	; 11
     47c:	91 05       	cpc	r25, r1
     47e:	48 f0       	brcs	.+18     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
			if(b3Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     480:	c3 97       	sbiw	r24, 0x33	; 51
     482:	18 f0       	brcs	.+6      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
				//Button was pressed Long
				b3Status = LONG_PRESSED;
     484:	10 92 ce 2c 	sts	0x2CCE, r1	; 0x802cce <b3Status>
     488:	07 c0       	rjmp	.+14     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
				} else {
				//Button was pressed Short
				b3Status = SHORT_PRESSED;
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	80 93 ce 2c 	sts	0x2CCE, r24	; 0x802cce <b3Status>
     490:	03 c0       	rjmp	.+6      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
			}
		} else {
			b3Status = NOT_PRESSED;
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	80 93 ce 2c 	sts	0x2CCE, r24	; 0x802cce <b3Status>
		}
		b3Count = 0;
     498:	10 92 42 20 	sts	0x2042, r1	; 0x802042 <b3Count.3831>
     49c:	10 92 43 20 	sts	0x2043, r1	; 0x802043 <b3Count.3831+0x1>
	}
	if(Button4_Value == 0) {
     4a0:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
     4a4:	88 23       	and	r24, r24
     4a6:	74 f0       	brlt	.+28     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
		if(b4Count < 60000) {
     4a8:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <__data_end>
     4ac:	90 91 41 20 	lds	r25, 0x2041	; 0x802041 <__data_end+0x1>
     4b0:	80 36       	cpi	r24, 0x60	; 96
     4b2:	2a ee       	ldi	r18, 0xEA	; 234
     4b4:	92 07       	cpc	r25, r18
     4b6:	e8 f4       	brcc	.+58     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
			b4Count++;
     4b8:	01 96       	adiw	r24, 0x01	; 1
     4ba:	80 93 40 20 	sts	0x2040, r24	; 0x802040 <__data_end>
     4be:	90 93 41 20 	sts	0x2041, r25	; 0x802041 <__data_end+0x1>
     4c2:	08 95       	ret
		}
	} else {
		if(b4Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     4c4:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <__data_end>
     4c8:	90 91 41 20 	lds	r25, 0x2041	; 0x802041 <__data_end+0x1>
     4cc:	8b 30       	cpi	r24, 0x0B	; 11
     4ce:	91 05       	cpc	r25, r1
     4d0:	48 f0       	brcs	.+18     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
			if(b4Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     4d2:	c3 97       	sbiw	r24, 0x33	; 51
     4d4:	18 f0       	brcs	.+6      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
				//Button was pressed Long
				b4Status = LONG_PRESSED;
     4d6:	10 92 cf 2c 	sts	0x2CCF, r1	; 0x802ccf <b4Status>
     4da:	07 c0       	rjmp	.+14     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
				} else {
				//Button was pressed Short
				b4Status = SHORT_PRESSED;
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	80 93 cf 2c 	sts	0x2CCF, r24	; 0x802ccf <b4Status>
     4e2:	03 c0       	rjmp	.+6      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
			}
		} else {
			b4Status = NOT_PRESSED;
     4e4:	82 e0       	ldi	r24, 0x02	; 2
     4e6:	80 93 cf 2c 	sts	0x2CCF, r24	; 0x802ccf <b4Status>
		}
		b4Count = 0;
     4ea:	10 92 40 20 	sts	0x2040, r1	; 0x802040 <__data_end>
     4ee:	10 92 41 20 	sts	0x2041, r1	; 0x802041 <__data_end+0x1>
     4f2:	08 95       	ret

000004f4 <getButtonPress>:
	}
 }

 button_press_t getButtonPress(button_t button) {
	switch(button) {
     4f4:	81 30       	cpi	r24, 0x01	; 1
     4f6:	49 f0       	breq	.+18     	; 0x50a <getButtonPress+0x16>
     4f8:	28 f0       	brcs	.+10     	; 0x504 <getButtonPress+0x10>
     4fa:	82 30       	cpi	r24, 0x02	; 2
     4fc:	49 f0       	breq	.+18     	; 0x510 <getButtonPress+0x1c>
     4fe:	83 30       	cpi	r24, 0x03	; 3
     500:	51 f0       	breq	.+20     	; 0x516 <getButtonPress+0x22>
     502:	0c c0       	rjmp	.+24     	; 0x51c <getButtonPress+0x28>
		case BUTTON1:
			return b1Status;
     504:	80 91 cc 2c 	lds	r24, 0x2CCC	; 0x802ccc <b1Status>
     508:	08 95       	ret
		break;
		case BUTTON2:
			return b2Status;
     50a:	80 91 cd 2c 	lds	r24, 0x2CCD	; 0x802ccd <b2Status>
     50e:	08 95       	ret
		break;
		case BUTTON3:
			return b3Status;
     510:	80 91 ce 2c 	lds	r24, 0x2CCE	; 0x802cce <b3Status>
     514:	08 95       	ret
		break;
		case BUTTON4:
			return b4Status;
     516:	80 91 cf 2c 	lds	r24, 0x2CCF	; 0x802ccf <b4Status>
     51a:	08 95       	ret
		break;
	}
	return NOT_PRESSED;
     51c:	82 e0       	ldi	r24, 0x02	; 2
     51e:	08 95       	ret

00000520 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     520:	0f 93       	push	r16
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	1f 92       	push	r1
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     52c:	2f b7       	in	r18, 0x3f	; 63
     52e:	29 83       	std	Y+1, r18	; 0x01
     530:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     532:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     534:	fc 01       	movw	r30, r24
     536:	08 ed       	ldi	r16, 0xD8	; 216
     538:	04 bf       	out	0x34, r16	; 52
     53a:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     53c:	89 81       	ldd	r24, Y+1	; 0x01
     53e:	8f bf       	out	0x3f, r24	; 63
#endif
}
     540:	0f 90       	pop	r0
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	0f 91       	pop	r16
     548:	08 95       	ret

0000054a <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
     54a:	61 11       	cpse	r22, r1
     54c:	02 c0       	rjmp	.+4      	; 0x552 <CLKSYS_XOSC_Config+0x8>
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	01 c0       	rjmp	.+2      	; 0x554 <CLKSYS_XOSC_Config+0xa>
     552:	90 e2       	ldi	r25, 0x20	; 32
     554:	84 2b       	or	r24, r20
     556:	89 2b       	or	r24, r25
     558:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
     55c:	08 95       	ret

0000055e <CLKSYS_PLL_Config>:
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     55e:	6f 71       	andi	r22, 0x1F	; 31
     560:	86 2b       	or	r24, r22
     562:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
     566:	08 95       	ret

00000568 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
     568:	e0 e5       	ldi	r30, 0x50	; 80
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	90 81       	ld	r25, Z
     56e:	28 2f       	mov	r18, r24
     570:	20 95       	com	r18
     572:	92 23       	and	r25, r18
     574:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     576:	90 81       	ld	r25, Z
	return clkEnabled;
}
     578:	89 23       	and	r24, r25
     57a:	08 95       	ret

0000057c <CLKSYS_Prescalers_Config>:
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
     57c:	68 2b       	or	r22, r24
     57e:	81 e4       	ldi	r24, 0x41	; 65
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 90 02 	call	0x520	; 0x520 <CCPWrite>
     586:	08 95       	ret

00000588 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
     58c:	cf 93       	push	r28
     58e:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     590:	00 e4       	ldi	r16, 0x40	; 64
     592:	10 e0       	ldi	r17, 0x00	; 0
     594:	f8 01       	movw	r30, r16
     596:	60 81       	ld	r22, Z
	CCPWrite( &CLK.CTRL, clkCtrl );
     598:	68 7f       	andi	r22, 0xF8	; 248
     59a:	68 2b       	or	r22, r24
     59c:	80 e4       	ldi	r24, 0x40	; 64
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 90 02 	call	0x520	; 0x520 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     5a4:	f8 01       	movw	r30, r16
     5a6:	80 81       	ld	r24, Z
	return clkCtrl;
}
     5a8:	8c 23       	and	r24, r28
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	08 95       	ret

000005b2 <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
     5b2:	fc 01       	movw	r30, r24
     5b4:	90 81       	ld	r25, Z
     5b6:	90 7f       	andi	r25, 0xF0	; 240
     5b8:	69 2b       	or	r22, r25
     5ba:	60 83       	st	Z, r22
     5bc:	08 95       	ret

000005be <TC0_ConfigWGM>:
     5be:	fc 01       	movw	r30, r24
     5c0:	91 81       	ldd	r25, Z+1	; 0x01
     5c2:	98 7f       	andi	r25, 0xF8	; 248
     5c4:	69 2b       	or	r22, r25
     5c6:	61 83       	std	Z+1, r22	; 0x01
     5c8:	08 95       	ret

000005ca <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     5ca:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     5cc:	96 81       	ldd	r25, Z+6	; 0x06
     5ce:	9c 7f       	andi	r25, 0xFC	; 252
     5d0:	69 2b       	or	r22, r25
     5d2:	66 83       	std	Z+6, r22	; 0x06
     5d4:	08 95       	ret

000005d6 <software_reset>:
	 // TODO from here:
	 //
	 // - log the occurance of any error in flash mem (inc counter)
	 // - print a message

	 software_reset();
     5d6:	00 00       	nop
     5d8:	88 ed       	ldi	r24, 0xD8	; 216
     5da:	84 bf       	out	0x34, r24	; 52
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     5e2:	08 95       	ret

000005e4 <vApplicationStackOverflowHook>:
     5e4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <software_reset>
     5e8:	08 95       	ret

000005ea <xEventGroupCreate>:
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
}
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	80 e1       	ldi	r24, 0x10	; 16
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 92 04 	call	0x924	; 0x924 <pvPortMalloc>
     5f6:	ec 01       	movw	r28, r24
     5f8:	00 97       	sbiw	r24, 0x00	; 0
     5fa:	41 f0       	breq	.+16     	; 0x60c <xEventGroupCreate+0x22>
     5fc:	fc 01       	movw	r30, r24
     5fe:	11 92       	st	Z+, r1
     600:	11 92       	st	Z+, r1
     602:	11 92       	st	Z+, r1
     604:	11 92       	st	Z+, r1
     606:	cf 01       	movw	r24, r30
     608:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialise>
     60c:	ce 01       	movw	r24, r28
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	08 95       	ret

00000614 <xEventGroupWaitBits>:
     614:	2f 92       	push	r2
     616:	3f 92       	push	r3
     618:	4f 92       	push	r4
     61a:	5f 92       	push	r5
     61c:	6f 92       	push	r6
     61e:	7f 92       	push	r7
     620:	8f 92       	push	r8
     622:	9f 92       	push	r9
     624:	af 92       	push	r10
     626:	bf 92       	push	r11
     628:	cf 92       	push	r12
     62a:	df 92       	push	r13
     62c:	ef 92       	push	r14
     62e:	ff 92       	push	r15
     630:	0f 93       	push	r16
     632:	1f 93       	push	r17
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	ec 01       	movw	r28, r24
     63a:	4a 01       	movw	r8, r20
     63c:	5b 01       	movw	r10, r22
     63e:	62 2e       	mov	r6, r18
     640:	70 2e       	mov	r7, r16
     642:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <vTaskSuspendAll>
     646:	28 80       	ld	r2, Y
     648:	39 80       	ldd	r3, Y+1	; 0x01
     64a:	4a 80       	ldd	r4, Y+2	; 0x02
     64c:	5b 80       	ldd	r5, Y+3	; 0x03
     64e:	01 11       	cpse	r16, r1
     650:	0d c0       	rjmp	.+26     	; 0x66c <xEventGroupWaitBits+0x58>
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	b2 01       	movw	r22, r4
     656:	a1 01       	movw	r20, r2
     658:	48 21       	and	r20, r8
     65a:	59 21       	and	r21, r9
     65c:	6a 21       	and	r22, r10
     65e:	7b 21       	and	r23, r11
     660:	45 2b       	or	r20, r21
     662:	46 2b       	or	r20, r22
     664:	47 2b       	or	r20, r23
     666:	79 f4       	brne	.+30     	; 0x686 <xEventGroupWaitBits+0x72>
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	0d c0       	rjmp	.+26     	; 0x686 <xEventGroupWaitBits+0x72>
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	b2 01       	movw	r22, r4
     670:	a1 01       	movw	r20, r2
     672:	48 21       	and	r20, r8
     674:	59 21       	and	r21, r9
     676:	6a 21       	and	r22, r10
     678:	7b 21       	and	r23, r11
     67a:	48 15       	cp	r20, r8
     67c:	59 05       	cpc	r21, r9
     67e:	6a 05       	cpc	r22, r10
     680:	7b 05       	cpc	r23, r11
     682:	09 f0       	breq	.+2      	; 0x686 <xEventGroupWaitBits+0x72>
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	88 23       	and	r24, r24
     688:	81 f0       	breq	.+32     	; 0x6aa <xEventGroupWaitBits+0x96>
     68a:	66 20       	and	r6, r6
     68c:	09 f4       	brne	.+2      	; 0x690 <xEventGroupWaitBits+0x7c>
     68e:	70 c0       	rjmp	.+224    	; 0x770 <xEventGroupWaitBits+0x15c>
     690:	80 94       	com	r8
     692:	90 94       	com	r9
     694:	a0 94       	com	r10
     696:	b0 94       	com	r11
     698:	82 20       	and	r8, r2
     69a:	93 20       	and	r9, r3
     69c:	a4 20       	and	r10, r4
     69e:	b5 20       	and	r11, r5
     6a0:	88 82       	st	Y, r8
     6a2:	99 82       	std	Y+1, r9	; 0x01
     6a4:	aa 82       	std	Y+2, r10	; 0x02
     6a6:	bb 82       	std	Y+3, r11	; 0x03
     6a8:	63 c0       	rjmp	.+198    	; 0x770 <xEventGroupWaitBits+0x15c>
     6aa:	c1 14       	cp	r12, r1
     6ac:	d1 04       	cpc	r13, r1
     6ae:	e1 04       	cpc	r14, r1
     6b0:	f1 04       	cpc	r15, r1
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <xEventGroupWaitBits+0xa2>
     6b4:	5d c0       	rjmp	.+186    	; 0x770 <xEventGroupWaitBits+0x15c>
     6b6:	66 20       	and	r6, r6
     6b8:	29 f0       	breq	.+10     	; 0x6c4 <xEventGroupWaitBits+0xb0>
     6ba:	40 e0       	ldi	r20, 0x00	; 0
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	60 e0       	ldi	r22, 0x00	; 0
     6c0:	71 e0       	ldi	r23, 0x01	; 1
     6c2:	03 c0       	rjmp	.+6      	; 0x6ca <xEventGroupWaitBits+0xb6>
     6c4:	40 e0       	ldi	r20, 0x00	; 0
     6c6:	50 e0       	ldi	r21, 0x00	; 0
     6c8:	ba 01       	movw	r22, r20
     6ca:	71 10       	cpse	r7, r1
     6cc:	74 60       	ori	r23, 0x04	; 4
     6ce:	48 29       	or	r20, r8
     6d0:	59 29       	or	r21, r9
     6d2:	6a 29       	or	r22, r10
     6d4:	7b 29       	or	r23, r11
     6d6:	97 01       	movw	r18, r14
     6d8:	86 01       	movw	r16, r12
     6da:	ce 01       	movw	r24, r28
     6dc:	04 96       	adiw	r24, 0x04	; 4
     6de:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <vTaskPlaceOnUnorderedEventList>
     6e2:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <xTaskResumeAll>
     6e6:	81 11       	cpse	r24, r1
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <xEventGroupWaitBits+0xda>
     6ea:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
     6ee:	0e 94 ab 10 	call	0x2156	; 0x2156 <uxTaskResetEventItemValue>
     6f2:	91 fd       	sbrc	r25, 1
     6f4:	39 c0       	rjmp	.+114    	; 0x768 <xEventGroupWaitBits+0x154>
     6f6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     6fa:	ff 93       	push	r31
     6fc:	f8 7f       	andi	r31, 0xF8	; 248
     6fe:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     702:	68 81       	ld	r22, Y
     704:	79 81       	ldd	r23, Y+1	; 0x01
     706:	8a 81       	ldd	r24, Y+2	; 0x02
     708:	9b 81       	ldd	r25, Y+3	; 0x03
     70a:	71 10       	cpse	r7, r1
     70c:	0d c0       	rjmp	.+26     	; 0x728 <xEventGroupWaitBits+0x114>
     70e:	21 e0       	ldi	r18, 0x01	; 1
     710:	75 01       	movw	r14, r10
     712:	64 01       	movw	r12, r8
     714:	c6 22       	and	r12, r22
     716:	d7 22       	and	r13, r23
     718:	e8 22       	and	r14, r24
     71a:	f9 22       	and	r15, r25
     71c:	cd 28       	or	r12, r13
     71e:	ce 28       	or	r12, r14
     720:	cf 28       	or	r12, r15
     722:	79 f4       	brne	.+30     	; 0x742 <xEventGroupWaitBits+0x12e>
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	0d c0       	rjmp	.+26     	; 0x742 <xEventGroupWaitBits+0x12e>
     728:	21 e0       	ldi	r18, 0x01	; 1
     72a:	75 01       	movw	r14, r10
     72c:	64 01       	movw	r12, r8
     72e:	c6 22       	and	r12, r22
     730:	d7 22       	and	r13, r23
     732:	e8 22       	and	r14, r24
     734:	f9 22       	and	r15, r25
     736:	c8 14       	cp	r12, r8
     738:	d9 04       	cpc	r13, r9
     73a:	ea 04       	cpc	r14, r10
     73c:	fb 04       	cpc	r15, r11
     73e:	09 f0       	breq	.+2      	; 0x742 <xEventGroupWaitBits+0x12e>
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	22 23       	and	r18, r18
     744:	71 f0       	breq	.+28     	; 0x762 <xEventGroupWaitBits+0x14e>
     746:	66 20       	and	r6, r6
     748:	61 f0       	breq	.+24     	; 0x762 <xEventGroupWaitBits+0x14e>
     74a:	80 94       	com	r8
     74c:	90 94       	com	r9
     74e:	a0 94       	com	r10
     750:	b0 94       	com	r11
     752:	86 22       	and	r8, r22
     754:	97 22       	and	r9, r23
     756:	a8 22       	and	r10, r24
     758:	b9 22       	and	r11, r25
     75a:	88 82       	st	Y, r8
     75c:	99 82       	std	Y+1, r9	; 0x01
     75e:	aa 82       	std	Y+2, r10	; 0x02
     760:	bb 82       	std	Y+3, r11	; 0x03
     762:	ff 91       	pop	r31
     764:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     768:	1b 01       	movw	r2, r22
     76a:	2c 01       	movw	r4, r24
     76c:	55 24       	eor	r5, r5
     76e:	02 c0       	rjmp	.+4      	; 0x774 <xEventGroupWaitBits+0x160>
     770:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <xTaskResumeAll>
     774:	c2 01       	movw	r24, r4
     776:	b1 01       	movw	r22, r2
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	0f 91       	pop	r16
     780:	ff 90       	pop	r15
     782:	ef 90       	pop	r14
     784:	df 90       	pop	r13
     786:	cf 90       	pop	r12
     788:	bf 90       	pop	r11
     78a:	af 90       	pop	r10
     78c:	9f 90       	pop	r9
     78e:	8f 90       	pop	r8
     790:	7f 90       	pop	r7
     792:	6f 90       	pop	r6
     794:	5f 90       	pop	r5
     796:	4f 90       	pop	r4
     798:	3f 90       	pop	r3
     79a:	2f 90       	pop	r2
     79c:	08 95       	ret

0000079e <xEventGroupClearBits>:
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     7a6:	ff 93       	push	r31
     7a8:	f8 7f       	andi	r31, 0xF8	; 248
     7aa:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     7ae:	fc 01       	movw	r30, r24
     7b0:	00 81       	ld	r16, Z
     7b2:	11 81       	ldd	r17, Z+1	; 0x01
     7b4:	22 81       	ldd	r18, Z+2	; 0x02
     7b6:	33 81       	ldd	r19, Z+3	; 0x03
     7b8:	40 95       	com	r20
     7ba:	50 95       	com	r21
     7bc:	60 95       	com	r22
     7be:	70 95       	com	r23
     7c0:	40 23       	and	r20, r16
     7c2:	51 23       	and	r21, r17
     7c4:	62 23       	and	r22, r18
     7c6:	73 23       	and	r23, r19
     7c8:	40 83       	st	Z, r20
     7ca:	51 83       	std	Z+1, r21	; 0x01
     7cc:	62 83       	std	Z+2, r22	; 0x02
     7ce:	73 83       	std	Z+3, r23	; 0x03
     7d0:	ff 91       	pop	r31
     7d2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     7d6:	c9 01       	movw	r24, r18
     7d8:	b8 01       	movw	r22, r16
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	08 95       	ret

000007e0 <xEventGroupSetBits>:
     7e0:	4f 92       	push	r4
     7e2:	5f 92       	push	r5
     7e4:	6f 92       	push	r6
     7e6:	7f 92       	push	r7
     7e8:	af 92       	push	r10
     7ea:	bf 92       	push	r11
     7ec:	cf 92       	push	r12
     7ee:	df 92       	push	r13
     7f0:	ef 92       	push	r14
     7f2:	ff 92       	push	r15
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	ec 01       	movw	r28, r24
     7fe:	6a 01       	movw	r12, r20
     800:	7b 01       	movw	r14, r22
     802:	8c 01       	movw	r16, r24
     804:	09 5f       	subi	r16, 0xF9	; 249
     806:	1f 4f       	sbci	r17, 0xFF	; 255
     808:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <vTaskSuspendAll>
     80c:	eb 85       	ldd	r30, Y+11	; 0x0b
     80e:	fc 85       	ldd	r31, Y+12	; 0x0c
     810:	88 81       	ld	r24, Y
     812:	99 81       	ldd	r25, Y+1	; 0x01
     814:	aa 81       	ldd	r26, Y+2	; 0x02
     816:	bb 81       	ldd	r27, Y+3	; 0x03
     818:	c8 2a       	or	r12, r24
     81a:	d9 2a       	or	r13, r25
     81c:	ea 2a       	or	r14, r26
     81e:	fb 2a       	or	r15, r27
     820:	c8 82       	st	Y, r12
     822:	d9 82       	std	Y+1, r13	; 0x01
     824:	ea 82       	std	Y+2, r14	; 0x02
     826:	fb 82       	std	Y+3, r15	; 0x03
     828:	0e 17       	cp	r16, r30
     82a:	1f 07       	cpc	r17, r31
     82c:	09 f4       	brne	.+2      	; 0x830 <xEventGroupSetBits+0x50>
     82e:	42 c0       	rjmp	.+132    	; 0x8b4 <xEventGroupSetBits+0xd4>
     830:	c1 2c       	mov	r12, r1
     832:	d1 2c       	mov	r13, r1
     834:	76 01       	movw	r14, r12
     836:	a4 80       	ldd	r10, Z+4	; 0x04
     838:	b5 80       	ldd	r11, Z+5	; 0x05
     83a:	80 81       	ld	r24, Z
     83c:	91 81       	ldd	r25, Z+1	; 0x01
     83e:	a2 81       	ldd	r26, Z+2	; 0x02
     840:	b3 81       	ldd	r27, Z+3	; 0x03
     842:	ac 01       	movw	r20, r24
     844:	bd 01       	movw	r22, r26
     846:	77 27       	eor	r23, r23
     848:	b2 fd       	sbrc	r27, 2
     84a:	0f c0       	rjmp	.+30     	; 0x86a <xEventGroupSetBits+0x8a>
     84c:	48 80       	ld	r4, Y
     84e:	59 80       	ldd	r5, Y+1	; 0x01
     850:	6a 80       	ldd	r6, Y+2	; 0x02
     852:	7b 80       	ldd	r7, Y+3	; 0x03
     854:	44 22       	and	r4, r20
     856:	55 22       	and	r5, r21
     858:	66 22       	and	r6, r22
     85a:	77 22       	and	r7, r23
     85c:	21 e0       	ldi	r18, 0x01	; 1
     85e:	45 28       	or	r4, r5
     860:	46 28       	or	r4, r6
     862:	47 28       	or	r4, r7
     864:	89 f4       	brne	.+34     	; 0x888 <xEventGroupSetBits+0xa8>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	0f c0       	rjmp	.+30     	; 0x888 <xEventGroupSetBits+0xa8>
     86a:	48 80       	ld	r4, Y
     86c:	59 80       	ldd	r5, Y+1	; 0x01
     86e:	6a 80       	ldd	r6, Y+2	; 0x02
     870:	7b 80       	ldd	r7, Y+3	; 0x03
     872:	44 22       	and	r4, r20
     874:	55 22       	and	r5, r21
     876:	66 22       	and	r6, r22
     878:	77 22       	and	r7, r23
     87a:	21 e0       	ldi	r18, 0x01	; 1
     87c:	44 16       	cp	r4, r20
     87e:	55 06       	cpc	r5, r21
     880:	66 06       	cpc	r6, r22
     882:	77 06       	cpc	r7, r23
     884:	09 f0       	breq	.+2      	; 0x888 <xEventGroupSetBits+0xa8>
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	22 23       	and	r18, r18
     88a:	71 f0       	breq	.+28     	; 0x8a8 <xEventGroupSetBits+0xc8>
     88c:	b0 ff       	sbrs	r27, 0
     88e:	04 c0       	rjmp	.+8      	; 0x898 <xEventGroupSetBits+0xb8>
     890:	c4 2a       	or	r12, r20
     892:	d5 2a       	or	r13, r21
     894:	e6 2a       	or	r14, r22
     896:	f7 2a       	or	r15, r23
     898:	48 81       	ld	r20, Y
     89a:	59 81       	ldd	r21, Y+1	; 0x01
     89c:	6a 81       	ldd	r22, Y+2	; 0x02
     89e:	7b 81       	ldd	r23, Y+3	; 0x03
     8a0:	72 60       	ori	r23, 0x02	; 2
     8a2:	cf 01       	movw	r24, r30
     8a4:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <vTaskRemoveFromUnorderedEventList>
     8a8:	ea 2d       	mov	r30, r10
     8aa:	fb 2d       	mov	r31, r11
     8ac:	0e 17       	cp	r16, r30
     8ae:	1f 07       	cpc	r17, r31
     8b0:	11 f6       	brne	.-124    	; 0x836 <xEventGroupSetBits+0x56>
     8b2:	03 c0       	rjmp	.+6      	; 0x8ba <xEventGroupSetBits+0xda>
     8b4:	c1 2c       	mov	r12, r1
     8b6:	d1 2c       	mov	r13, r1
     8b8:	76 01       	movw	r14, r12
     8ba:	c0 94       	com	r12
     8bc:	d0 94       	com	r13
     8be:	e0 94       	com	r14
     8c0:	f0 94       	com	r15
     8c2:	88 81       	ld	r24, Y
     8c4:	99 81       	ldd	r25, Y+1	; 0x01
     8c6:	aa 81       	ldd	r26, Y+2	; 0x02
     8c8:	bb 81       	ldd	r27, Y+3	; 0x03
     8ca:	c8 22       	and	r12, r24
     8cc:	d9 22       	and	r13, r25
     8ce:	ea 22       	and	r14, r26
     8d0:	fb 22       	and	r15, r27
     8d2:	c8 82       	st	Y, r12
     8d4:	d9 82       	std	Y+1, r13	; 0x01
     8d6:	ea 82       	std	Y+2, r14	; 0x02
     8d8:	fb 82       	std	Y+3, r15	; 0x03
     8da:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <xTaskResumeAll>
     8de:	68 81       	ld	r22, Y
     8e0:	79 81       	ldd	r23, Y+1	; 0x01
     8e2:	8a 81       	ldd	r24, Y+2	; 0x02
     8e4:	9b 81       	ldd	r25, Y+3	; 0x03
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	1f 91       	pop	r17
     8ec:	0f 91       	pop	r16
     8ee:	ff 90       	pop	r15
     8f0:	ef 90       	pop	r14
     8f2:	df 90       	pop	r13
     8f4:	cf 90       	pop	r12
     8f6:	bf 90       	pop	r11
     8f8:	af 90       	pop	r10
     8fa:	7f 90       	pop	r7
     8fc:	6f 90       	pop	r6
     8fe:	5f 90       	pop	r5
     900:	4f 90       	pop	r4
     902:	08 95       	ret

00000904 <vEventGroupSetBitsCallback>:
     904:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <xEventGroupSetBits>
     908:	08 95       	ret

0000090a <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     90e:	89 01       	movw	r16, r18
     910:	9a 01       	movw	r18, r20
     912:	ab 01       	movw	r20, r22
     914:	bc 01       	movw	r22, r24
     916:	82 e8       	ldi	r24, 0x82	; 130
     918:	94 e0       	ldi	r25, 0x04	; 4
     91a:	0e 94 b4 14 	call	0x2968	; 0x2968 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	08 95       	ret

00000924 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     92a:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     92e:	20 91 48 20 	lds	r18, 0x2048	; 0x802048 <xNextFreeByte>
     932:	30 91 49 20 	lds	r19, 0x2049	; 0x802049 <xNextFreeByte+0x1>
     936:	c9 01       	movw	r24, r18
     938:	8c 0f       	add	r24, r28
     93a:	9d 1f       	adc	r25, r29
     93c:	88 3b       	cpi	r24, 0xB8	; 184
     93e:	4b e0       	ldi	r20, 0x0B	; 11
     940:	94 07       	cpc	r25, r20
     942:	58 f4       	brcc	.+22     	; 0x95a <pvPortMalloc+0x36>
     944:	28 17       	cp	r18, r24
     946:	39 07       	cpc	r19, r25
     948:	58 f4       	brcc	.+22     	; 0x960 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     94a:	e9 01       	movw	r28, r18
     94c:	c6 5b       	subi	r28, 0xB6	; 182
     94e:	df 4d       	sbci	r29, 0xDF	; 223
			xNextFreeByte += xWantedSize;			
     950:	80 93 48 20 	sts	0x2048, r24	; 0x802048 <xNextFreeByte>
     954:	90 93 49 20 	sts	0x2049, r25	; 0x802049 <xNextFreeByte+0x1>
     958:	05 c0       	rjmp	.+10     	; 0x964 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     95a:	c0 e0       	ldi	r28, 0x00	; 0
     95c:	d0 e0       	ldi	r29, 0x00	; 0
     95e:	02 c0       	rjmp	.+4      	; 0x964 <pvPortMalloc+0x40>
     960:	c0 e0       	ldi	r28, 0x00	; 0
     962:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     964:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     968:	ce 01       	movw	r24, r28
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	08 95       	ret

00000970 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     970:	08 95       	ret

00000972 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     972:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     974:	03 96       	adiw	r24, 0x03	; 3
     976:	81 83       	std	Z+1, r24	; 0x01
     978:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     97a:	4f ef       	ldi	r20, 0xFF	; 255
     97c:	5f ef       	ldi	r21, 0xFF	; 255
     97e:	ba 01       	movw	r22, r20
     980:	43 83       	std	Z+3, r20	; 0x03
     982:	54 83       	std	Z+4, r21	; 0x04
     984:	65 83       	std	Z+5, r22	; 0x05
     986:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     988:	87 83       	std	Z+7, r24	; 0x07
     98a:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     98c:	81 87       	std	Z+9, r24	; 0x09
     98e:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     990:	10 82       	st	Z, r1
     992:	08 95       	ret

00000994 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     994:	fc 01       	movw	r30, r24
     996:	12 86       	std	Z+10, r1	; 0x0a
     998:	13 86       	std	Z+11, r1	; 0x0b
     99a:	08 95       	ret

0000099c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	9c 01       	movw	r18, r24
     9a2:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     9a4:	dc 01       	movw	r26, r24
     9a6:	11 96       	adiw	r26, 0x01	; 1
     9a8:	cd 91       	ld	r28, X+
     9aa:	dc 91       	ld	r29, X
     9ac:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     9ae:	c4 83       	std	Z+4, r28	; 0x04
     9b0:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     9b2:	8e 81       	ldd	r24, Y+6	; 0x06
     9b4:	9f 81       	ldd	r25, Y+7	; 0x07
     9b6:	86 83       	std	Z+6, r24	; 0x06
     9b8:	97 83       	std	Z+7, r25	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     9ba:	8e 81       	ldd	r24, Y+6	; 0x06
     9bc:	9f 81       	ldd	r25, Y+7	; 0x07
     9be:	dc 01       	movw	r26, r24
     9c0:	14 96       	adiw	r26, 0x04	; 4
     9c2:	6d 93       	st	X+, r22
     9c4:	7c 93       	st	X, r23
     9c6:	15 97       	sbiw	r26, 0x05	; 5
	pxIndex->pxPrevious = pxNewListItem;
     9c8:	6e 83       	std	Y+6, r22	; 0x06
     9ca:	7f 83       	std	Y+7, r23	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     9cc:	22 87       	std	Z+10, r18	; 0x0a
     9ce:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
     9d0:	f9 01       	movw	r30, r18
     9d2:	80 81       	ld	r24, Z
     9d4:	8f 5f       	subi	r24, 0xFF	; 255
     9d6:	80 83       	st	Z, r24
}
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	08 95       	ret

000009de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     9e8:	08 81       	ld	r16, Y
     9ea:	19 81       	ldd	r17, Y+1	; 0x01
     9ec:	2a 81       	ldd	r18, Y+2	; 0x02
     9ee:	3b 81       	ldd	r19, Y+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     9f0:	0f 3f       	cpi	r16, 0xFF	; 255
     9f2:	4f ef       	ldi	r20, 0xFF	; 255
     9f4:	14 07       	cpc	r17, r20
     9f6:	24 07       	cpc	r18, r20
     9f8:	34 07       	cpc	r19, r20
     9fa:	21 f4       	brne	.+8      	; 0xa04 <vListInsert+0x26>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     9fc:	fc 01       	movw	r30, r24
     9fe:	a1 85       	ldd	r26, Z+9	; 0x09
     a00:	b2 85       	ldd	r27, Z+10	; 0x0a
     a02:	11 c0       	rjmp	.+34     	; 0xa26 <vListInsert+0x48>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a04:	dc 01       	movw	r26, r24
     a06:	13 96       	adiw	r26, 0x03	; 3
     a08:	01 c0       	rjmp	.+2      	; 0xa0c <vListInsert+0x2e>
     a0a:	df 01       	movw	r26, r30
     a0c:	14 96       	adiw	r26, 0x04	; 4
     a0e:	ed 91       	ld	r30, X+
     a10:	fc 91       	ld	r31, X
     a12:	15 97       	sbiw	r26, 0x05	; 5
     a14:	40 81       	ld	r20, Z
     a16:	51 81       	ldd	r21, Z+1	; 0x01
     a18:	62 81       	ldd	r22, Z+2	; 0x02
     a1a:	73 81       	ldd	r23, Z+3	; 0x03
     a1c:	04 17       	cp	r16, r20
     a1e:	15 07       	cpc	r17, r21
     a20:	26 07       	cpc	r18, r22
     a22:	37 07       	cpc	r19, r23
     a24:	90 f7       	brcc	.-28     	; 0xa0a <vListInsert+0x2c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     a26:	14 96       	adiw	r26, 0x04	; 4
     a28:	ed 91       	ld	r30, X+
     a2a:	fc 91       	ld	r31, X
     a2c:	15 97       	sbiw	r26, 0x05	; 5
     a2e:	ec 83       	std	Y+4, r30	; 0x04
     a30:	fd 83       	std	Y+5, r31	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     a32:	c6 83       	std	Z+6, r28	; 0x06
     a34:	d7 83       	std	Z+7, r29	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
     a36:	ae 83       	std	Y+6, r26	; 0x06
     a38:	bf 83       	std	Y+7, r27	; 0x07
	pxIterator->pxNext = pxNewListItem;
     a3a:	14 96       	adiw	r26, 0x04	; 4
     a3c:	cd 93       	st	X+, r28
     a3e:	dc 93       	st	X, r29
     a40:	15 97       	sbiw	r26, 0x05	; 5

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     a42:	8a 87       	std	Y+10, r24	; 0x0a
     a44:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
     a46:	fc 01       	movw	r30, r24
     a48:	20 81       	ld	r18, Z
     a4a:	2f 5f       	subi	r18, 0xFF	; 255
     a4c:	20 83       	st	Z, r18
}
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	0f 91       	pop	r16
     a56:	08 95       	ret

00000a58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     a5e:	a2 85       	ldd	r26, Z+10	; 0x0a
     a60:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a62:	c4 81       	ldd	r28, Z+4	; 0x04
     a64:	d5 81       	ldd	r29, Z+5	; 0x05
     a66:	86 81       	ldd	r24, Z+6	; 0x06
     a68:	97 81       	ldd	r25, Z+7	; 0x07
     a6a:	8e 83       	std	Y+6, r24	; 0x06
     a6c:	9f 83       	std	Y+7, r25	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a6e:	c6 81       	ldd	r28, Z+6	; 0x06
     a70:	d7 81       	ldd	r29, Z+7	; 0x07
     a72:	84 81       	ldd	r24, Z+4	; 0x04
     a74:	95 81       	ldd	r25, Z+5	; 0x05
     a76:	8c 83       	std	Y+4, r24	; 0x04
     a78:	9d 83       	std	Y+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     a7a:	11 96       	adiw	r26, 0x01	; 1
     a7c:	8d 91       	ld	r24, X+
     a7e:	9c 91       	ld	r25, X
     a80:	12 97       	sbiw	r26, 0x02	; 2
     a82:	e8 17       	cp	r30, r24
     a84:	f9 07       	cpc	r31, r25
     a86:	31 f4       	brne	.+12     	; 0xa94 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     a88:	86 81       	ldd	r24, Z+6	; 0x06
     a8a:	97 81       	ldd	r25, Z+7	; 0x07
     a8c:	11 96       	adiw	r26, 0x01	; 1
     a8e:	8d 93       	st	X+, r24
     a90:	9c 93       	st	X, r25
     a92:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     a94:	12 86       	std	Z+10, r1	; 0x0a
     a96:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
     a98:	8c 91       	ld	r24, X
     a9a:	81 50       	subi	r24, 0x01	; 1
     a9c:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     a9e:	8c 91       	ld	r24, X
}
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	08 95       	ret

00000aa6 <_portSetInterruptMaskFromIsr>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     aa6:	e0 ea       	ldi	r30, 0xA0	; 160
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	82 81       	ldd	r24, Z+2	; 0x02
     aac:	92 81       	ldd	r25, Z+2	; 0x02
     aae:	98 7f       	andi	r25, 0xF8	; 248
     ab0:	92 83       	std	Z+2, r25	; 0x02
     ab2:	08 95       	ret

00000ab4 <pxPortInitialiseStack>:
     ab4:	cf 92       	push	r12
     ab6:	df 92       	push	r13
     ab8:	ef 92       	push	r14
     aba:	ff 92       	push	r15
     abc:	31 e1       	ldi	r19, 0x11	; 17
     abe:	fc 01       	movw	r30, r24
     ac0:	30 83       	st	Z, r19
     ac2:	31 97       	sbiw	r30, 0x01	; 1
     ac4:	22 e2       	ldi	r18, 0x22	; 34
     ac6:	20 83       	st	Z, r18
     ac8:	31 97       	sbiw	r30, 0x01	; 1
     aca:	a3 e3       	ldi	r26, 0x33	; 51
     acc:	a0 83       	st	Z, r26
     ace:	6b 01       	movw	r12, r22
     ad0:	e1 2c       	mov	r14, r1
     ad2:	f1 2c       	mov	r15, r1
     ad4:	31 97       	sbiw	r30, 0x01	; 1
     ad6:	60 83       	st	Z, r22
     ad8:	31 97       	sbiw	r30, 0x01	; 1
     ada:	d0 82       	st	Z, r13
     adc:	31 97       	sbiw	r30, 0x01	; 1
     ade:	e0 82       	st	Z, r14
     ae0:	31 97       	sbiw	r30, 0x01	; 1
     ae2:	61 e3       	ldi	r22, 0x31	; 49
     ae4:	60 83       	st	Z, r22
     ae6:	31 97       	sbiw	r30, 0x01	; 1
     ae8:	60 e8       	ldi	r22, 0x80	; 128
     aea:	60 83       	st	Z, r22
     aec:	31 97       	sbiw	r30, 0x01	; 1
     aee:	67 e8       	ldi	r22, 0x87	; 135
     af0:	60 83       	st	Z, r22
     af2:	31 97       	sbiw	r30, 0x01	; 1
     af4:	10 82       	st	Z, r1
     af6:	31 97       	sbiw	r30, 0x01	; 1
     af8:	10 82       	st	Z, r1
     afa:	31 97       	sbiw	r30, 0x01	; 1
     afc:	62 e0       	ldi	r22, 0x02	; 2
     afe:	60 83       	st	Z, r22
     b00:	31 97       	sbiw	r30, 0x01	; 1
     b02:	63 e0       	ldi	r22, 0x03	; 3
     b04:	60 83       	st	Z, r22
     b06:	31 97       	sbiw	r30, 0x01	; 1
     b08:	64 e0       	ldi	r22, 0x04	; 4
     b0a:	60 83       	st	Z, r22
     b0c:	31 97       	sbiw	r30, 0x01	; 1
     b0e:	65 e0       	ldi	r22, 0x05	; 5
     b10:	60 83       	st	Z, r22
     b12:	31 97       	sbiw	r30, 0x01	; 1
     b14:	66 e0       	ldi	r22, 0x06	; 6
     b16:	60 83       	st	Z, r22
     b18:	31 97       	sbiw	r30, 0x01	; 1
     b1a:	67 e0       	ldi	r22, 0x07	; 7
     b1c:	60 83       	st	Z, r22
     b1e:	31 97       	sbiw	r30, 0x01	; 1
     b20:	68 e0       	ldi	r22, 0x08	; 8
     b22:	60 83       	st	Z, r22
     b24:	31 97       	sbiw	r30, 0x01	; 1
     b26:	69 e0       	ldi	r22, 0x09	; 9
     b28:	60 83       	st	Z, r22
     b2a:	31 97       	sbiw	r30, 0x01	; 1
     b2c:	60 e1       	ldi	r22, 0x10	; 16
     b2e:	60 83       	st	Z, r22
     b30:	31 97       	sbiw	r30, 0x01	; 1
     b32:	30 83       	st	Z, r19
     b34:	31 97       	sbiw	r30, 0x01	; 1
     b36:	32 e1       	ldi	r19, 0x12	; 18
     b38:	30 83       	st	Z, r19
     b3a:	31 97       	sbiw	r30, 0x01	; 1
     b3c:	33 e1       	ldi	r19, 0x13	; 19
     b3e:	30 83       	st	Z, r19
     b40:	31 97       	sbiw	r30, 0x01	; 1
     b42:	34 e1       	ldi	r19, 0x14	; 20
     b44:	30 83       	st	Z, r19
     b46:	31 97       	sbiw	r30, 0x01	; 1
     b48:	35 e1       	ldi	r19, 0x15	; 21
     b4a:	30 83       	st	Z, r19
     b4c:	31 97       	sbiw	r30, 0x01	; 1
     b4e:	36 e1       	ldi	r19, 0x16	; 22
     b50:	30 83       	st	Z, r19
     b52:	31 97       	sbiw	r30, 0x01	; 1
     b54:	37 e1       	ldi	r19, 0x17	; 23
     b56:	30 83       	st	Z, r19
     b58:	31 97       	sbiw	r30, 0x01	; 1
     b5a:	38 e1       	ldi	r19, 0x18	; 24
     b5c:	30 83       	st	Z, r19
     b5e:	31 97       	sbiw	r30, 0x01	; 1
     b60:	39 e1       	ldi	r19, 0x19	; 25
     b62:	30 83       	st	Z, r19
     b64:	31 97       	sbiw	r30, 0x01	; 1
     b66:	30 e2       	ldi	r19, 0x20	; 32
     b68:	30 83       	st	Z, r19
     b6a:	31 97       	sbiw	r30, 0x01	; 1
     b6c:	31 e2       	ldi	r19, 0x21	; 33
     b6e:	30 83       	st	Z, r19
     b70:	31 97       	sbiw	r30, 0x01	; 1
     b72:	20 83       	st	Z, r18
     b74:	31 97       	sbiw	r30, 0x01	; 1
     b76:	23 e2       	ldi	r18, 0x23	; 35
     b78:	20 83       	st	Z, r18
     b7a:	6a 01       	movw	r12, r20
     b7c:	31 97       	sbiw	r30, 0x01	; 1
     b7e:	40 83       	st	Z, r20
     b80:	31 97       	sbiw	r30, 0x01	; 1
     b82:	d0 82       	st	Z, r13
     b84:	31 97       	sbiw	r30, 0x01	; 1
     b86:	26 e2       	ldi	r18, 0x26	; 38
     b88:	20 83       	st	Z, r18
     b8a:	31 97       	sbiw	r30, 0x01	; 1
     b8c:	27 e2       	ldi	r18, 0x27	; 39
     b8e:	20 83       	st	Z, r18
     b90:	31 97       	sbiw	r30, 0x01	; 1
     b92:	28 e2       	ldi	r18, 0x28	; 40
     b94:	20 83       	st	Z, r18
     b96:	31 97       	sbiw	r30, 0x01	; 1
     b98:	29 e2       	ldi	r18, 0x29	; 41
     b9a:	20 83       	st	Z, r18
     b9c:	31 97       	sbiw	r30, 0x01	; 1
     b9e:	20 e3       	ldi	r18, 0x30	; 48
     ba0:	20 83       	st	Z, r18
     ba2:	88 97       	sbiw	r24, 0x28	; 40
     ba4:	ff 90       	pop	r15
     ba6:	ef 90       	pop	r14
     ba8:	df 90       	pop	r13
     baa:	cf 90       	pop	r12
     bac:	08 95       	ret

00000bae <xPortStartScheduler>:
     bae:	83 ef       	ldi	r24, 0xF3	; 243
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     bb6:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
     bba:	65 e0       	ldi	r22, 0x05	; 5
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	98 e0       	ldi	r25, 0x08	; 8
     bc0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <TC0_ConfigClockSource>
     bc4:	61 e0       	ldi	r22, 0x01	; 1
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	98 e0       	ldi	r25, 0x08	; 8
     bca:	0e 94 e5 02 	call	0x5ca	; 0x5ca <TC0_SetOverflowIntLevel>
     bce:	a0 91 7c 2c 	lds	r26, 0x2C7C	; 0x802c7c <pxCurrentTCB>
     bd2:	b0 91 7d 2c 	lds	r27, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
     bd6:	0d 90       	ld	r0, X+
     bd8:	0d be       	out	0x3d, r0	; 61
     bda:	0d 90       	ld	r0, X+
     bdc:	0e be       	out	0x3e, r0	; 62
     bde:	ef 91       	pop	r30
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	bf 91       	pop	r27
     be6:	af 91       	pop	r26
     be8:	9f 91       	pop	r25
     bea:	8f 91       	pop	r24
     bec:	7f 91       	pop	r23
     bee:	6f 91       	pop	r22
     bf0:	5f 91       	pop	r21
     bf2:	4f 91       	pop	r20
     bf4:	3f 91       	pop	r19
     bf6:	2f 91       	pop	r18
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	ff 90       	pop	r15
     bfe:	ef 90       	pop	r14
     c00:	df 90       	pop	r13
     c02:	cf 90       	pop	r12
     c04:	bf 90       	pop	r11
     c06:	af 90       	pop	r10
     c08:	9f 90       	pop	r9
     c0a:	8f 90       	pop	r8
     c0c:	7f 90       	pop	r7
     c0e:	6f 90       	pop	r6
     c10:	5f 90       	pop	r5
     c12:	4f 90       	pop	r4
     c14:	3f 90       	pop	r3
     c16:	2f 90       	pop	r2
     c18:	1f 90       	pop	r1
     c1a:	0f 90       	pop	r0
     c1c:	ff 91       	pop	r31
     c1e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     c22:	ff 91       	pop	r31
     c24:	ff bf       	out	0x3f, r31	; 63
     c26:	ff 91       	pop	r31
     c28:	08 95       	ret
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	08 95       	ret

00000c2e <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     c2e:	ff 93       	push	r31
     c30:	ff b7       	in	r31, 0x3f	; 63
     c32:	ff 93       	push	r31
     c34:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     c38:	ff 93       	push	r31
     c3a:	f8 7f       	andi	r31, 0xF8	; 248
     c3c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     c40:	0f 92       	push	r0
     c42:	1f 92       	push	r1
     c44:	11 24       	eor	r1, r1
     c46:	2f 92       	push	r2
     c48:	3f 92       	push	r3
     c4a:	4f 92       	push	r4
     c4c:	5f 92       	push	r5
     c4e:	6f 92       	push	r6
     c50:	7f 92       	push	r7
     c52:	8f 92       	push	r8
     c54:	9f 92       	push	r9
     c56:	af 92       	push	r10
     c58:	bf 92       	push	r11
     c5a:	cf 92       	push	r12
     c5c:	df 92       	push	r13
     c5e:	ef 92       	push	r14
     c60:	ff 92       	push	r15
     c62:	0f 93       	push	r16
     c64:	1f 93       	push	r17
     c66:	2f 93       	push	r18
     c68:	3f 93       	push	r19
     c6a:	4f 93       	push	r20
     c6c:	5f 93       	push	r21
     c6e:	6f 93       	push	r22
     c70:	7f 93       	push	r23
     c72:	8f 93       	push	r24
     c74:	9f 93       	push	r25
     c76:	af 93       	push	r26
     c78:	bf 93       	push	r27
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	ef 93       	push	r30
     c80:	a0 91 7c 2c 	lds	r26, 0x2C7C	; 0x802c7c <pxCurrentTCB>
     c84:	b0 91 7d 2c 	lds	r27, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
     c88:	0d b6       	in	r0, 0x3d	; 61
     c8a:	0d 92       	st	X+, r0
     c8c:	0e b6       	in	r0, 0x3e	; 62
     c8e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     c90:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     c94:	a0 91 7c 2c 	lds	r26, 0x2C7C	; 0x802c7c <pxCurrentTCB>
     c98:	b0 91 7d 2c 	lds	r27, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
     c9c:	0d 90       	ld	r0, X+
     c9e:	0d be       	out	0x3d, r0	; 61
     ca0:	0d 90       	ld	r0, X+
     ca2:	0e be       	out	0x3e, r0	; 62
     ca4:	ef 91       	pop	r30
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	bf 91       	pop	r27
     cac:	af 91       	pop	r26
     cae:	9f 91       	pop	r25
     cb0:	8f 91       	pop	r24
     cb2:	7f 91       	pop	r23
     cb4:	6f 91       	pop	r22
     cb6:	5f 91       	pop	r21
     cb8:	4f 91       	pop	r20
     cba:	3f 91       	pop	r19
     cbc:	2f 91       	pop	r18
     cbe:	1f 91       	pop	r17
     cc0:	0f 91       	pop	r16
     cc2:	ff 90       	pop	r15
     cc4:	ef 90       	pop	r14
     cc6:	df 90       	pop	r13
     cc8:	cf 90       	pop	r12
     cca:	bf 90       	pop	r11
     ccc:	af 90       	pop	r10
     cce:	9f 90       	pop	r9
     cd0:	8f 90       	pop	r8
     cd2:	7f 90       	pop	r7
     cd4:	6f 90       	pop	r6
     cd6:	5f 90       	pop	r5
     cd8:	4f 90       	pop	r4
     cda:	3f 90       	pop	r3
     cdc:	2f 90       	pop	r2
     cde:	1f 90       	pop	r1
     ce0:	0f 90       	pop	r0
     ce2:	ff 91       	pop	r31
     ce4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ce8:	ff 91       	pop	r31
     cea:	ff bf       	out	0x3f, r31	; 63
     cec:	ff 91       	pop	r31
	asm volatile ( "ret" );
     cee:	08 95       	ret

00000cf0 <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
     cf0:	cf 93       	push	r28
		intTaskSwitchPending |= xSwitchRequired;					
     cf2:	90 91 d0 2c 	lds	r25, 0x2CD0	; 0x802cd0 <intTaskSwitchPending>
     cf6:	89 2b       	or	r24, r25
     cf8:	80 93 d0 2c 	sts	0x2CD0, r24	; 0x802cd0 <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
     cfc:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     d00:	91 30       	cpi	r25, 0x01	; 1
     d02:	41 f0       	breq	.+16     	; 0xd14 <portTaskSwitchContext+0x24>
     d04:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     d08:	92 30       	cpi	r25, 0x02	; 2
     d0a:	21 f0       	breq	.+8      	; 0xd14 <portTaskSwitchContext+0x24>
     d0c:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     d10:	94 30       	cpi	r25, 0x04	; 4
     d12:	59 f4       	brne	.+22     	; 0xd2a <portTaskSwitchContext+0x3a>
     d14:	88 23       	and	r24, r24
     d16:	49 f0       	breq	.+18     	; 0xd2a <portTaskSwitchContext+0x3a>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
     d18:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_portSetInterruptMaskFromIsr>
     d1c:	c8 2f       	mov	r28, r24
			intTaskSwitchPending = 0;								
     d1e:	10 92 d0 2c 	sts	0x2CD0, r1	; 0x802cd0 <intTaskSwitchPending>
			vTaskSwitchContext();                   				
     d22:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
     d26:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		}                                          					
	}
     d2a:	cf 91       	pop	r28
     d2c:	08 95       	ret

00000d2e <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
     d2e:	ff 93       	push	r31
     d30:	ff b7       	in	r31, 0x3f	; 63
     d32:	ff 93       	push	r31
     d34:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d38:	ff 93       	push	r31
     d3a:	f8 7f       	andi	r31, 0xF8	; 248
     d3c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d40:	0f 92       	push	r0
     d42:	1f 92       	push	r1
     d44:	11 24       	eor	r1, r1
     d46:	2f 92       	push	r2
     d48:	3f 92       	push	r3
     d4a:	4f 92       	push	r4
     d4c:	5f 92       	push	r5
     d4e:	6f 92       	push	r6
     d50:	7f 92       	push	r7
     d52:	8f 92       	push	r8
     d54:	9f 92       	push	r9
     d56:	af 92       	push	r10
     d58:	bf 92       	push	r11
     d5a:	cf 92       	push	r12
     d5c:	df 92       	push	r13
     d5e:	ef 92       	push	r14
     d60:	ff 92       	push	r15
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	2f 93       	push	r18
     d68:	3f 93       	push	r19
     d6a:	4f 93       	push	r20
     d6c:	5f 93       	push	r21
     d6e:	6f 93       	push	r22
     d70:	7f 93       	push	r23
     d72:	8f 93       	push	r24
     d74:	9f 93       	push	r25
     d76:	af 93       	push	r26
     d78:	bf 93       	push	r27
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	ef 93       	push	r30
     d80:	a0 91 7c 2c 	lds	r26, 0x2C7C	; 0x802c7c <pxCurrentTCB>
     d84:	b0 91 7d 2c 	lds	r27, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
     d88:	0d b6       	in	r0, 0x3d	; 61
     d8a:	0d 92       	st	X+, r0
     d8c:	0e b6       	in	r0, 0x3e	; 62
     d8e:	0d 92       	st	X+, r0
	//
	static void portTaskIncrementTick( void )
	{
		register unsigned portBASE_TYPE uxSavedPmicCtrlReg;

 		uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR();
     d90:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_portSetInterruptMaskFromIsr>
     d94:	c8 2f       	mov	r28, r24
		xTaskIncrementTick();
     d96:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <xTaskIncrementTick>
 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedPmicCtrlReg );
     d9a:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
		portTaskIncrementTick();
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	0e 94 78 06 	call	0xcf0	; 0xcf0 <portTaskSwitchContext>
     da4:	a0 91 7c 2c 	lds	r26, 0x2C7C	; 0x802c7c <pxCurrentTCB>
     da8:	b0 91 7d 2c 	lds	r27, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
     dac:	0d 90       	ld	r0, X+
     dae:	0d be       	out	0x3d, r0	; 61
     db0:	0d 90       	ld	r0, X+
     db2:	0e be       	out	0x3e, r0	; 62
     db4:	ef 91       	pop	r30
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	bf 91       	pop	r27
     dbc:	af 91       	pop	r26
     dbe:	9f 91       	pop	r25
     dc0:	8f 91       	pop	r24
     dc2:	7f 91       	pop	r23
     dc4:	6f 91       	pop	r22
     dc6:	5f 91       	pop	r21
     dc8:	4f 91       	pop	r20
     dca:	3f 91       	pop	r19
     dcc:	2f 91       	pop	r18
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	ff 90       	pop	r15
     dd4:	ef 90       	pop	r14
     dd6:	df 90       	pop	r13
     dd8:	cf 90       	pop	r12
     dda:	bf 90       	pop	r11
     ddc:	af 90       	pop	r10
     dde:	9f 90       	pop	r9
     de0:	8f 90       	pop	r8
     de2:	7f 90       	pop	r7
     de4:	6f 90       	pop	r6
     de6:	5f 90       	pop	r5
     de8:	4f 90       	pop	r4
     dea:	3f 90       	pop	r3
     dec:	2f 90       	pop	r2
     dee:	1f 90       	pop	r1
     df0:	0f 90       	pop	r0
     df2:	ff 91       	pop	r31
     df4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     df8:	ff 91       	pop	r31
     dfa:	ff bf       	out	0x3f, r31	; 63
     dfc:	ff 91       	pop	r31
     dfe:	18 95       	reti

00000e00 <prvIsQueueEmpty>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
     e00:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e04:	ff 93       	push	r31
     e06:	f8 7f       	andi	r31, 0xF8	; 248
     e08:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e0c:	fc 01       	movw	r30, r24
     e0e:	96 8d       	ldd	r25, Z+30	; 0x1e
     e10:	ff 91       	pop	r31
     e12:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	91 11       	cpse	r25, r1
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	08 95       	ret

00000e1e <prvIsQueueFull>:
     e1e:	dc 01       	movw	r26, r24
     e20:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e24:	ff 93       	push	r31
     e26:	f8 7f       	andi	r31, 0xF8	; 248
     e28:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e2c:	5e 96       	adiw	r26, 0x1e	; 30
     e2e:	9c 91       	ld	r25, X
     e30:	5e 97       	sbiw	r26, 0x1e	; 30
     e32:	ff 91       	pop	r31
     e34:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	5f 96       	adiw	r26, 0x1f	; 31
     e3c:	2c 91       	ld	r18, X
     e3e:	29 13       	cpse	r18, r25
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	08 95       	ret

00000e44 <prvCopyDataToQueue>:
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	ec 01       	movw	r28, r24
     e4e:	04 2f       	mov	r16, r20
     e50:	1e 8d       	ldd	r17, Y+30	; 0x1e
     e52:	48 a1       	ldd	r20, Y+32	; 0x20
     e54:	44 23       	and	r20, r20
     e56:	b9 f1       	breq	.+110    	; 0xec6 <prvCopyDataToQueue+0x82>
     e58:	01 11       	cpse	r16, r1
     e5a:	16 c0       	rjmp	.+44     	; 0xe88 <prvCopyDataToQueue+0x44>
     e5c:	50 e0       	ldi	r21, 0x00	; 0
     e5e:	8c 81       	ldd	r24, Y+4	; 0x04
     e60:	9d 81       	ldd	r25, Y+5	; 0x05
     e62:	0e 94 d7 23 	call	0x47ae	; 0x47ae <memcpy>
     e66:	28 a1       	ldd	r18, Y+32	; 0x20
     e68:	8c 81       	ldd	r24, Y+4	; 0x04
     e6a:	9d 81       	ldd	r25, Y+5	; 0x05
     e6c:	82 0f       	add	r24, r18
     e6e:	91 1d       	adc	r25, r1
     e70:	8c 83       	std	Y+4, r24	; 0x04
     e72:	9d 83       	std	Y+5, r25	; 0x05
     e74:	2a 81       	ldd	r18, Y+2	; 0x02
     e76:	3b 81       	ldd	r19, Y+3	; 0x03
     e78:	82 17       	cp	r24, r18
     e7a:	93 07       	cpc	r25, r19
     e7c:	20 f1       	brcs	.+72     	; 0xec6 <prvCopyDataToQueue+0x82>
     e7e:	88 81       	ld	r24, Y
     e80:	99 81       	ldd	r25, Y+1	; 0x01
     e82:	8c 83       	std	Y+4, r24	; 0x04
     e84:	9d 83       	std	Y+5, r25	; 0x05
     e86:	1f c0       	rjmp	.+62     	; 0xec6 <prvCopyDataToQueue+0x82>
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	8e 81       	ldd	r24, Y+6	; 0x06
     e8c:	9f 81       	ldd	r25, Y+7	; 0x07
     e8e:	0e 94 d7 23 	call	0x47ae	; 0x47ae <memcpy>
     e92:	88 a1       	ldd	r24, Y+32	; 0x20
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	91 95       	neg	r25
     e98:	81 95       	neg	r24
     e9a:	91 09       	sbc	r25, r1
     e9c:	2e 81       	ldd	r18, Y+6	; 0x06
     e9e:	3f 81       	ldd	r19, Y+7	; 0x07
     ea0:	28 0f       	add	r18, r24
     ea2:	39 1f       	adc	r19, r25
     ea4:	2e 83       	std	Y+6, r18	; 0x06
     ea6:	3f 83       	std	Y+7, r19	; 0x07
     ea8:	48 81       	ld	r20, Y
     eaa:	59 81       	ldd	r21, Y+1	; 0x01
     eac:	24 17       	cp	r18, r20
     eae:	35 07       	cpc	r19, r21
     eb0:	30 f4       	brcc	.+12     	; 0xebe <prvCopyDataToQueue+0x7a>
     eb2:	2a 81       	ldd	r18, Y+2	; 0x02
     eb4:	3b 81       	ldd	r19, Y+3	; 0x03
     eb6:	82 0f       	add	r24, r18
     eb8:	93 1f       	adc	r25, r19
     eba:	8e 83       	std	Y+6, r24	; 0x06
     ebc:	9f 83       	std	Y+7, r25	; 0x07
     ebe:	02 30       	cpi	r16, 0x02	; 2
     ec0:	11 f4       	brne	.+4      	; 0xec6 <prvCopyDataToQueue+0x82>
     ec2:	11 11       	cpse	r17, r1
     ec4:	11 50       	subi	r17, 0x01	; 1
     ec6:	1f 5f       	subi	r17, 0xFF	; 255
     ec8:	1e 8f       	std	Y+30, r17	; 0x1e
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	1f 91       	pop	r17
     ed2:	0f 91       	pop	r16
     ed4:	08 95       	ret

00000ed6 <prvCopyDataFromQueue>:
     ed6:	fc 01       	movw	r30, r24
     ed8:	40 a1       	ldd	r20, Z+32	; 0x20
     eda:	44 23       	and	r20, r20
     edc:	a9 f0       	breq	.+42     	; 0xf08 <prvCopyDataFromQueue+0x32>
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	26 81       	ldd	r18, Z+6	; 0x06
     ee2:	37 81       	ldd	r19, Z+7	; 0x07
     ee4:	24 0f       	add	r18, r20
     ee6:	35 1f       	adc	r19, r21
     ee8:	26 83       	std	Z+6, r18	; 0x06
     eea:	37 83       	std	Z+7, r19	; 0x07
     eec:	82 81       	ldd	r24, Z+2	; 0x02
     eee:	93 81       	ldd	r25, Z+3	; 0x03
     ef0:	28 17       	cp	r18, r24
     ef2:	39 07       	cpc	r19, r25
     ef4:	20 f0       	brcs	.+8      	; 0xefe <prvCopyDataFromQueue+0x28>
     ef6:	80 81       	ld	r24, Z
     ef8:	91 81       	ldd	r25, Z+1	; 0x01
     efa:	86 83       	std	Z+6, r24	; 0x06
     efc:	97 83       	std	Z+7, r25	; 0x07
     efe:	cb 01       	movw	r24, r22
     f00:	66 81       	ldd	r22, Z+6	; 0x06
     f02:	77 81       	ldd	r23, Z+7	; 0x07
     f04:	0e 94 d7 23 	call	0x47ae	; 0x47ae <memcpy>
     f08:	08 95       	ret

00000f0a <prvUnlockQueue>:
     f0a:	ef 92       	push	r14
     f0c:	ff 92       	push	r15
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	cf 93       	push	r28
     f14:	8c 01       	movw	r16, r24
     f16:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f1a:	ff 93       	push	r31
     f1c:	f8 7f       	andi	r31, 0xF8	; 248
     f1e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f22:	fc 01       	movw	r30, r24
     f24:	c2 a1       	ldd	r28, Z+34	; 0x22
     f26:	1c 16       	cp	r1, r28
     f28:	ac f4       	brge	.+42     	; 0xf54 <prvUnlockQueue+0x4a>
     f2a:	83 89       	ldd	r24, Z+19	; 0x13
     f2c:	81 11       	cpse	r24, r1
     f2e:	06 c0       	rjmp	.+12     	; 0xf3c <prvUnlockQueue+0x32>
     f30:	11 c0       	rjmp	.+34     	; 0xf54 <prvUnlockQueue+0x4a>
     f32:	f8 01       	movw	r30, r16
     f34:	83 89       	ldd	r24, Z+19	; 0x13
     f36:	81 11       	cpse	r24, r1
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <prvUnlockQueue+0x3a>
     f3a:	0c c0       	rjmp	.+24     	; 0xf54 <prvUnlockQueue+0x4a>
     f3c:	78 01       	movw	r14, r16
     f3e:	f3 e1       	ldi	r31, 0x13	; 19
     f40:	ef 0e       	add	r14, r31
     f42:	f1 1c       	adc	r15, r1
     f44:	c7 01       	movw	r24, r14
     f46:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <xTaskRemoveFromEventList>
     f4a:	81 11       	cpse	r24, r1
     f4c:	0e 94 99 10 	call	0x2132	; 0x2132 <vTaskMissedYield>
     f50:	c1 50       	subi	r28, 0x01	; 1
     f52:	79 f7       	brne	.-34     	; 0xf32 <prvUnlockQueue+0x28>
     f54:	8f ef       	ldi	r24, 0xFF	; 255
     f56:	f8 01       	movw	r30, r16
     f58:	82 a3       	std	Z+34, r24	; 0x22
     f5a:	ff 91       	pop	r31
     f5c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f60:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f64:	ff 93       	push	r31
     f66:	f8 7f       	andi	r31, 0xF8	; 248
     f68:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f6c:	f8 01       	movw	r30, r16
     f6e:	c1 a1       	ldd	r28, Z+33	; 0x21
     f70:	1c 16       	cp	r1, r28
     f72:	ac f4       	brge	.+42     	; 0xf9e <prvUnlockQueue+0x94>
     f74:	80 85       	ldd	r24, Z+8	; 0x08
     f76:	81 11       	cpse	r24, r1
     f78:	06 c0       	rjmp	.+12     	; 0xf86 <prvUnlockQueue+0x7c>
     f7a:	11 c0       	rjmp	.+34     	; 0xf9e <prvUnlockQueue+0x94>
     f7c:	f8 01       	movw	r30, r16
     f7e:	80 85       	ldd	r24, Z+8	; 0x08
     f80:	81 11       	cpse	r24, r1
     f82:	05 c0       	rjmp	.+10     	; 0xf8e <prvUnlockQueue+0x84>
     f84:	0c c0       	rjmp	.+24     	; 0xf9e <prvUnlockQueue+0x94>
     f86:	78 01       	movw	r14, r16
     f88:	f8 e0       	ldi	r31, 0x08	; 8
     f8a:	ef 0e       	add	r14, r31
     f8c:	f1 1c       	adc	r15, r1
     f8e:	c7 01       	movw	r24, r14
     f90:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <xTaskRemoveFromEventList>
     f94:	81 11       	cpse	r24, r1
     f96:	0e 94 99 10 	call	0x2132	; 0x2132 <vTaskMissedYield>
     f9a:	c1 50       	subi	r28, 0x01	; 1
     f9c:	79 f7       	brne	.-34     	; 0xf7c <prvUnlockQueue+0x72>
     f9e:	8f ef       	ldi	r24, 0xFF	; 255
     fa0:	f8 01       	movw	r30, r16
     fa2:	81 a3       	std	Z+33, r24	; 0x21
     fa4:	ff 91       	pop	r31
     fa6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     faa:	cf 91       	pop	r28
     fac:	1f 91       	pop	r17
     fae:	0f 91       	pop	r16
     fb0:	ff 90       	pop	r15
     fb2:	ef 90       	pop	r14
     fb4:	08 95       	ret

00000fb6 <xQueueGenericReset>:
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	ec 01       	movw	r28, r24
     fbc:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     fc0:	ff 93       	push	r31
     fc2:	f8 7f       	andi	r31, 0xF8	; 248
     fc4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     fc8:	48 81       	ld	r20, Y
     fca:	59 81       	ldd	r21, Y+1	; 0x01
     fcc:	28 a1       	ldd	r18, Y+32	; 0x20
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	7f 8d       	ldd	r23, Y+31	; 0x1f
     fd2:	72 9f       	mul	r23, r18
     fd4:	c0 01       	movw	r24, r0
     fd6:	73 9f       	mul	r23, r19
     fd8:	90 0d       	add	r25, r0
     fda:	11 24       	eor	r1, r1
     fdc:	fa 01       	movw	r30, r20
     fde:	e8 0f       	add	r30, r24
     fe0:	f9 1f       	adc	r31, r25
     fe2:	ea 83       	std	Y+2, r30	; 0x02
     fe4:	fb 83       	std	Y+3, r31	; 0x03
     fe6:	1e 8e       	std	Y+30, r1	; 0x1e
     fe8:	4c 83       	std	Y+4, r20	; 0x04
     fea:	5d 83       	std	Y+5, r21	; 0x05
     fec:	82 1b       	sub	r24, r18
     fee:	93 0b       	sbc	r25, r19
     ff0:	84 0f       	add	r24, r20
     ff2:	95 1f       	adc	r25, r21
     ff4:	8e 83       	std	Y+6, r24	; 0x06
     ff6:	9f 83       	std	Y+7, r25	; 0x07
     ff8:	8f ef       	ldi	r24, 0xFF	; 255
     ffa:	89 a3       	std	Y+33, r24	; 0x21
     ffc:	8a a3       	std	Y+34, r24	; 0x22
     ffe:	61 11       	cpse	r22, r1
    1000:	0c c0       	rjmp	.+24     	; 0x101a <xQueueGenericReset+0x64>
    1002:	88 85       	ldd	r24, Y+8	; 0x08
    1004:	88 23       	and	r24, r24
    1006:	89 f0       	breq	.+34     	; 0x102a <xQueueGenericReset+0x74>
    1008:	ce 01       	movw	r24, r28
    100a:	08 96       	adiw	r24, 0x08	; 8
    100c:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <xTaskRemoveFromEventList>
    1010:	88 23       	and	r24, r24
    1012:	59 f0       	breq	.+22     	; 0x102a <xQueueGenericReset+0x74>
    1014:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
    1018:	08 c0       	rjmp	.+16     	; 0x102a <xQueueGenericReset+0x74>
    101a:	ce 01       	movw	r24, r28
    101c:	08 96       	adiw	r24, 0x08	; 8
    101e:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialise>
    1022:	ce 01       	movw	r24, r28
    1024:	43 96       	adiw	r24, 0x13	; 19
    1026:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialise>
    102a:	ff 91       	pop	r31
    102c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	08 95       	ret

00001038 <xQueueGenericCreate>:
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	08 2f       	mov	r16, r24
    1044:	16 2f       	mov	r17, r22
    1046:	f4 2e       	mov	r15, r20
    1048:	66 23       	and	r22, r22
    104a:	c9 f0       	breq	.+50     	; 0x107e <xQueueGenericCreate+0x46>
    104c:	86 9f       	mul	r24, r22
    104e:	c0 01       	movw	r24, r0
    1050:	11 24       	eor	r1, r1
    1052:	85 96       	adiw	r24, 0x25	; 37
    1054:	0e 94 92 04 	call	0x924	; 0x924 <pvPortMalloc>
    1058:	ec 01       	movw	r28, r24
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	49 f4       	brne	.+18     	; 0x1070 <xQueueGenericCreate+0x38>
    105e:	16 c0       	rjmp	.+44     	; 0x108c <xQueueGenericCreate+0x54>
    1060:	0f 8f       	std	Y+31, r16	; 0x1f
    1062:	18 a3       	std	Y+32, r17	; 0x20
    1064:	61 e0       	ldi	r22, 0x01	; 1
    1066:	ce 01       	movw	r24, r28
    1068:	0e 94 db 07 	call	0xfb6	; 0xfb6 <xQueueGenericReset>
    106c:	fc a2       	std	Y+36, r15	; 0x24
    106e:	0e c0       	rjmp	.+28     	; 0x108c <xQueueGenericCreate+0x54>
    1070:	85 96       	adiw	r24, 0x25	; 37
    1072:	88 83       	st	Y, r24
    1074:	99 83       	std	Y+1, r25	; 0x01
    1076:	f4 cf       	rjmp	.-24     	; 0x1060 <xQueueGenericCreate+0x28>
    1078:	c8 83       	st	Y, r28
    107a:	d9 83       	std	Y+1, r29	; 0x01
    107c:	f1 cf       	rjmp	.-30     	; 0x1060 <xQueueGenericCreate+0x28>
    107e:	85 e2       	ldi	r24, 0x25	; 37
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0e 94 92 04 	call	0x924	; 0x924 <pvPortMalloc>
    1086:	ec 01       	movw	r28, r24
    1088:	89 2b       	or	r24, r25
    108a:	b1 f7       	brne	.-20     	; 0x1078 <xQueueGenericCreate+0x40>
    108c:	ce 01       	movw	r24, r28
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	1f 91       	pop	r17
    1094:	0f 91       	pop	r16
    1096:	ff 90       	pop	r15
    1098:	08 95       	ret

0000109a <xQueueGenericSend>:
    109a:	af 92       	push	r10
    109c:	bf 92       	push	r11
    109e:	cf 92       	push	r12
    10a0:	df 92       	push	r13
    10a2:	ef 92       	push	r14
    10a4:	ff 92       	push	r15
    10a6:	0f 93       	push	r16
    10a8:	1f 93       	push	r17
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	29 97       	sbiw	r28, 0x09	; 9
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	7c 01       	movw	r14, r24
    10ba:	5b 01       	movw	r10, r22
    10bc:	2e 83       	std	Y+6, r18	; 0x06
    10be:	3f 83       	std	Y+7, r19	; 0x07
    10c0:	48 87       	std	Y+8, r20	; 0x08
    10c2:	59 87       	std	Y+9, r21	; 0x09
    10c4:	10 e0       	ldi	r17, 0x00	; 0
    10c6:	6c 01       	movw	r12, r24
    10c8:	88 e0       	ldi	r24, 0x08	; 8
    10ca:	c8 0e       	add	r12, r24
    10cc:	d1 1c       	adc	r13, r1
    10ce:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    10d2:	ff 93       	push	r31
    10d4:	f8 7f       	andi	r31, 0xF8	; 248
    10d6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    10da:	f7 01       	movw	r30, r14
    10dc:	96 8d       	ldd	r25, Z+30	; 0x1e
    10de:	87 8d       	ldd	r24, Z+31	; 0x1f
    10e0:	98 17       	cp	r25, r24
    10e2:	10 f0       	brcs	.+4      	; 0x10e8 <xQueueGenericSend+0x4e>
    10e4:	02 30       	cpi	r16, 0x02	; 2
    10e6:	d1 f4       	brne	.+52     	; 0x111c <xQueueGenericSend+0x82>
    10e8:	40 2f       	mov	r20, r16
    10ea:	b5 01       	movw	r22, r10
    10ec:	c7 01       	movw	r24, r14
    10ee:	0e 94 22 07 	call	0xe44	; 0xe44 <prvCopyDataToQueue>
    10f2:	f7 01       	movw	r30, r14
    10f4:	93 89       	ldd	r25, Z+19	; 0x13
    10f6:	99 23       	and	r25, r25
    10f8:	49 f0       	breq	.+18     	; 0x110c <xQueueGenericSend+0x72>
    10fa:	c7 01       	movw	r24, r14
    10fc:	43 96       	adiw	r24, 0x13	; 19
    10fe:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <xTaskRemoveFromEventList>
    1102:	88 23       	and	r24, r24
    1104:	31 f0       	breq	.+12     	; 0x1112 <xQueueGenericSend+0x78>
    1106:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
    110a:	03 c0       	rjmp	.+6      	; 0x1112 <xQueueGenericSend+0x78>
    110c:	81 11       	cpse	r24, r1
    110e:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
    1112:	ff 91       	pop	r31
    1114:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	57 c0       	rjmp	.+174    	; 0x11ca <xQueueGenericSend+0x130>
    111c:	8e 81       	ldd	r24, Y+6	; 0x06
    111e:	9f 81       	ldd	r25, Y+7	; 0x07
    1120:	a8 85       	ldd	r26, Y+8	; 0x08
    1122:	b9 85       	ldd	r27, Y+9	; 0x09
    1124:	89 2b       	or	r24, r25
    1126:	8a 2b       	or	r24, r26
    1128:	8b 2b       	or	r24, r27
    112a:	29 f4       	brne	.+10     	; 0x1136 <xQueueGenericSend+0x9c>
    112c:	ff 91       	pop	r31
    112e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	4a c0       	rjmp	.+148    	; 0x11ca <xQueueGenericSend+0x130>
    1136:	11 11       	cpse	r17, r1
    1138:	05 c0       	rjmp	.+10     	; 0x1144 <xQueueGenericSend+0xaa>
    113a:	ce 01       	movw	r24, r28
    113c:	01 96       	adiw	r24, 0x01	; 1
    113e:	0e 94 2a 10 	call	0x2054	; 0x2054 <vTaskInternalSetTimeOutState>
    1142:	11 e0       	ldi	r17, 0x01	; 1
    1144:	ff 91       	pop	r31
    1146:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    114a:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <vTaskSuspendAll>
    114e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1152:	ff 93       	push	r31
    1154:	f8 7f       	andi	r31, 0xF8	; 248
    1156:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    115a:	f7 01       	movw	r30, r14
    115c:	81 a1       	ldd	r24, Z+33	; 0x21
    115e:	8f 3f       	cpi	r24, 0xFF	; 255
    1160:	09 f4       	brne	.+2      	; 0x1164 <xQueueGenericSend+0xca>
    1162:	11 a2       	std	Z+33, r1	; 0x21
    1164:	f7 01       	movw	r30, r14
    1166:	82 a1       	ldd	r24, Z+34	; 0x22
    1168:	8f 3f       	cpi	r24, 0xFF	; 255
    116a:	09 f4       	brne	.+2      	; 0x116e <xQueueGenericSend+0xd4>
    116c:	12 a2       	std	Z+34, r1	; 0x22
    116e:	ff 91       	pop	r31
    1170:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1174:	be 01       	movw	r22, r28
    1176:	6a 5f       	subi	r22, 0xFA	; 250
    1178:	7f 4f       	sbci	r23, 0xFF	; 255
    117a:	ce 01       	movw	r24, r28
    117c:	01 96       	adiw	r24, 0x01	; 1
    117e:	0e 94 3b 10 	call	0x2076	; 0x2076 <xTaskCheckForTimeOut>
    1182:	81 11       	cpse	r24, r1
    1184:	1c c0       	rjmp	.+56     	; 0x11be <xQueueGenericSend+0x124>
    1186:	c7 01       	movw	r24, r14
    1188:	0e 94 0f 07 	call	0xe1e	; 0xe1e <prvIsQueueFull>
    118c:	88 23       	and	r24, r24
    118e:	89 f0       	breq	.+34     	; 0x11b2 <xQueueGenericSend+0x118>
    1190:	4e 81       	ldd	r20, Y+6	; 0x06
    1192:	5f 81       	ldd	r21, Y+7	; 0x07
    1194:	68 85       	ldd	r22, Y+8	; 0x08
    1196:	79 85       	ldd	r23, Y+9	; 0x09
    1198:	c6 01       	movw	r24, r12
    119a:	0e 94 56 0f 	call	0x1eac	; 0x1eac <vTaskPlaceOnEventList>
    119e:	c7 01       	movw	r24, r14
    11a0:	0e 94 85 07 	call	0xf0a	; 0xf0a <prvUnlockQueue>
    11a4:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <xTaskResumeAll>
    11a8:	81 11       	cpse	r24, r1
    11aa:	91 cf       	rjmp	.-222    	; 0x10ce <xQueueGenericSend+0x34>
    11ac:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
    11b0:	8e cf       	rjmp	.-228    	; 0x10ce <xQueueGenericSend+0x34>
    11b2:	c7 01       	movw	r24, r14
    11b4:	0e 94 85 07 	call	0xf0a	; 0xf0a <prvUnlockQueue>
    11b8:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <xTaskResumeAll>
    11bc:	88 cf       	rjmp	.-240    	; 0x10ce <xQueueGenericSend+0x34>
    11be:	c7 01       	movw	r24, r14
    11c0:	0e 94 85 07 	call	0xf0a	; 0xf0a <prvUnlockQueue>
    11c4:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <xTaskResumeAll>
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	29 96       	adiw	r28, 0x09	; 9
    11cc:	cd bf       	out	0x3d, r28	; 61
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	1f 91       	pop	r17
    11d6:	0f 91       	pop	r16
    11d8:	ff 90       	pop	r15
    11da:	ef 90       	pop	r14
    11dc:	df 90       	pop	r13
    11de:	cf 90       	pop	r12
    11e0:	bf 90       	pop	r11
    11e2:	af 90       	pop	r10
    11e4:	08 95       	ret

000011e6 <xQueueGenericSendFromISR>:
    11e6:	af 92       	push	r10
    11e8:	bf 92       	push	r11
    11ea:	cf 92       	push	r12
    11ec:	df 92       	push	r13
    11ee:	ff 92       	push	r15
    11f0:	0f 93       	push	r16
    11f2:	1f 93       	push	r17
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	ec 01       	movw	r28, r24
    11fa:	6b 01       	movw	r12, r22
    11fc:	5a 01       	movw	r10, r20
    11fe:	02 2f       	mov	r16, r18
    1200:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_portSetInterruptMaskFromIsr>
    1204:	f8 2e       	mov	r15, r24
    1206:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1208:	8f 8d       	ldd	r24, Y+31	; 0x1f
    120a:	98 17       	cp	r25, r24
    120c:	10 f0       	brcs	.+4      	; 0x1212 <xQueueGenericSendFromISR+0x2c>
    120e:	02 30       	cpi	r16, 0x02	; 2
    1210:	e1 f4       	brne	.+56     	; 0x124a <xQueueGenericSendFromISR+0x64>
    1212:	1a a1       	ldd	r17, Y+34	; 0x22
    1214:	40 2f       	mov	r20, r16
    1216:	b6 01       	movw	r22, r12
    1218:	ce 01       	movw	r24, r28
    121a:	0e 94 22 07 	call	0xe44	; 0xe44 <prvCopyDataToQueue>
    121e:	1f 3f       	cpi	r17, 0xFF	; 255
    1220:	81 f4       	brne	.+32     	; 0x1242 <xQueueGenericSendFromISR+0x5c>
    1222:	8b 89       	ldd	r24, Y+19	; 0x13
    1224:	88 23       	and	r24, r24
    1226:	99 f0       	breq	.+38     	; 0x124e <xQueueGenericSendFromISR+0x68>
    1228:	ce 01       	movw	r24, r28
    122a:	43 96       	adiw	r24, 0x13	; 19
    122c:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <xTaskRemoveFromEventList>
    1230:	88 23       	and	r24, r24
    1232:	79 f0       	breq	.+30     	; 0x1252 <xQueueGenericSendFromISR+0x6c>
    1234:	a1 14       	cp	r10, r1
    1236:	b1 04       	cpc	r11, r1
    1238:	71 f0       	breq	.+28     	; 0x1256 <xQueueGenericSendFromISR+0x70>
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	f5 01       	movw	r30, r10
    123e:	80 83       	st	Z, r24
    1240:	0b c0       	rjmp	.+22     	; 0x1258 <xQueueGenericSendFromISR+0x72>
    1242:	1f 5f       	subi	r17, 0xFF	; 255
    1244:	1a a3       	std	Y+34, r17	; 0x22
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	07 c0       	rjmp	.+14     	; 0x1258 <xQueueGenericSendFromISR+0x72>
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	05 c0       	rjmp	.+10     	; 0x1258 <xQueueGenericSendFromISR+0x72>
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	03 c0       	rjmp	.+6      	; 0x1258 <xQueueGenericSendFromISR+0x72>
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	01 c0       	rjmp	.+2      	; 0x1258 <xQueueGenericSendFromISR+0x72>
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	f0 92 a2 00 	sts	0x00A2, r15	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	ff 90       	pop	r15
    1266:	df 90       	pop	r13
    1268:	cf 90       	pop	r12
    126a:	bf 90       	pop	r11
    126c:	af 90       	pop	r10
    126e:	08 95       	ret

00001270 <xQueueReceive>:
    1270:	af 92       	push	r10
    1272:	bf 92       	push	r11
    1274:	cf 92       	push	r12
    1276:	df 92       	push	r13
    1278:	ef 92       	push	r14
    127a:	ff 92       	push	r15
    127c:	0f 93       	push	r16
    127e:	1f 93       	push	r17
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	29 97       	sbiw	r28, 0x09	; 9
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	8c 01       	movw	r16, r24
    1290:	5b 01       	movw	r10, r22
    1292:	2e 83       	std	Y+6, r18	; 0x06
    1294:	3f 83       	std	Y+7, r19	; 0x07
    1296:	48 87       	std	Y+8, r20	; 0x08
    1298:	59 87       	std	Y+9, r21	; 0x09
    129a:	e1 2c       	mov	r14, r1
    129c:	6c 01       	movw	r12, r24
    129e:	83 e1       	ldi	r24, 0x13	; 19
    12a0:	c8 0e       	add	r12, r24
    12a2:	d1 1c       	adc	r13, r1
    12a4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    12a8:	ff 93       	push	r31
    12aa:	f8 7f       	andi	r31, 0xF8	; 248
    12ac:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    12b0:	f8 01       	movw	r30, r16
    12b2:	f6 8c       	ldd	r15, Z+30	; 0x1e
    12b4:	ff 20       	and	r15, r15
    12b6:	b1 f0       	breq	.+44     	; 0x12e4 <xQueueReceive+0x74>
    12b8:	b5 01       	movw	r22, r10
    12ba:	c8 01       	movw	r24, r16
    12bc:	0e 94 6b 07 	call	0xed6	; 0xed6 <prvCopyDataFromQueue>
    12c0:	fa 94       	dec	r15
    12c2:	f8 01       	movw	r30, r16
    12c4:	f6 8e       	std	Z+30, r15	; 0x1e
    12c6:	80 85       	ldd	r24, Z+8	; 0x08
    12c8:	88 23       	and	r24, r24
    12ca:	39 f0       	breq	.+14     	; 0x12da <xQueueReceive+0x6a>
    12cc:	c8 01       	movw	r24, r16
    12ce:	08 96       	adiw	r24, 0x08	; 8
    12d0:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <xTaskRemoveFromEventList>
    12d4:	81 11       	cpse	r24, r1
    12d6:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
    12da:	ff 91       	pop	r31
    12dc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	5e c0       	rjmp	.+188    	; 0x13a0 <xQueueReceive+0x130>
    12e4:	8e 81       	ldd	r24, Y+6	; 0x06
    12e6:	9f 81       	ldd	r25, Y+7	; 0x07
    12e8:	a8 85       	ldd	r26, Y+8	; 0x08
    12ea:	b9 85       	ldd	r27, Y+9	; 0x09
    12ec:	89 2b       	or	r24, r25
    12ee:	8a 2b       	or	r24, r26
    12f0:	8b 2b       	or	r24, r27
    12f2:	29 f4       	brne	.+10     	; 0x12fe <xQueueReceive+0x8e>
    12f4:	ff 91       	pop	r31
    12f6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	51 c0       	rjmp	.+162    	; 0x13a0 <xQueueReceive+0x130>
    12fe:	e1 10       	cpse	r14, r1
    1300:	06 c0       	rjmp	.+12     	; 0x130e <xQueueReceive+0x9e>
    1302:	ce 01       	movw	r24, r28
    1304:	01 96       	adiw	r24, 0x01	; 1
    1306:	0e 94 2a 10 	call	0x2054	; 0x2054 <vTaskInternalSetTimeOutState>
    130a:	ee 24       	eor	r14, r14
    130c:	e3 94       	inc	r14
    130e:	ff 91       	pop	r31
    1310:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1314:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <vTaskSuspendAll>
    1318:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    131c:	ff 93       	push	r31
    131e:	f8 7f       	andi	r31, 0xF8	; 248
    1320:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1324:	f8 01       	movw	r30, r16
    1326:	81 a1       	ldd	r24, Z+33	; 0x21
    1328:	8f 3f       	cpi	r24, 0xFF	; 255
    132a:	09 f4       	brne	.+2      	; 0x132e <xQueueReceive+0xbe>
    132c:	11 a2       	std	Z+33, r1	; 0x21
    132e:	f8 01       	movw	r30, r16
    1330:	82 a1       	ldd	r24, Z+34	; 0x22
    1332:	8f 3f       	cpi	r24, 0xFF	; 255
    1334:	09 f4       	brne	.+2      	; 0x1338 <xQueueReceive+0xc8>
    1336:	12 a2       	std	Z+34, r1	; 0x22
    1338:	ff 91       	pop	r31
    133a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    133e:	be 01       	movw	r22, r28
    1340:	6a 5f       	subi	r22, 0xFA	; 250
    1342:	7f 4f       	sbci	r23, 0xFF	; 255
    1344:	ce 01       	movw	r24, r28
    1346:	01 96       	adiw	r24, 0x01	; 1
    1348:	0e 94 3b 10 	call	0x2076	; 0x2076 <xTaskCheckForTimeOut>
    134c:	81 11       	cpse	r24, r1
    134e:	1c c0       	rjmp	.+56     	; 0x1388 <xQueueReceive+0x118>
    1350:	c8 01       	movw	r24, r16
    1352:	0e 94 00 07 	call	0xe00	; 0xe00 <prvIsQueueEmpty>
    1356:	88 23       	and	r24, r24
    1358:	89 f0       	breq	.+34     	; 0x137c <xQueueReceive+0x10c>
    135a:	4e 81       	ldd	r20, Y+6	; 0x06
    135c:	5f 81       	ldd	r21, Y+7	; 0x07
    135e:	68 85       	ldd	r22, Y+8	; 0x08
    1360:	79 85       	ldd	r23, Y+9	; 0x09
    1362:	c6 01       	movw	r24, r12
    1364:	0e 94 56 0f 	call	0x1eac	; 0x1eac <vTaskPlaceOnEventList>
    1368:	c8 01       	movw	r24, r16
    136a:	0e 94 85 07 	call	0xf0a	; 0xf0a <prvUnlockQueue>
    136e:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <xTaskResumeAll>
    1372:	81 11       	cpse	r24, r1
    1374:	97 cf       	rjmp	.-210    	; 0x12a4 <xQueueReceive+0x34>
    1376:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
    137a:	94 cf       	rjmp	.-216    	; 0x12a4 <xQueueReceive+0x34>
    137c:	c8 01       	movw	r24, r16
    137e:	0e 94 85 07 	call	0xf0a	; 0xf0a <prvUnlockQueue>
    1382:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <xTaskResumeAll>
    1386:	8e cf       	rjmp	.-228    	; 0x12a4 <xQueueReceive+0x34>
    1388:	c8 01       	movw	r24, r16
    138a:	0e 94 85 07 	call	0xf0a	; 0xf0a <prvUnlockQueue>
    138e:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <xTaskResumeAll>
    1392:	c8 01       	movw	r24, r16
    1394:	0e 94 00 07 	call	0xe00	; 0xe00 <prvIsQueueEmpty>
    1398:	88 23       	and	r24, r24
    139a:	09 f4       	brne	.+2      	; 0x139e <xQueueReceive+0x12e>
    139c:	83 cf       	rjmp	.-250    	; 0x12a4 <xQueueReceive+0x34>
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	29 96       	adiw	r28, 0x09	; 9
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	ff 90       	pop	r15
    13b0:	ef 90       	pop	r14
    13b2:	df 90       	pop	r13
    13b4:	cf 90       	pop	r12
    13b6:	bf 90       	pop	r11
    13b8:	af 90       	pop	r10
    13ba:	08 95       	ret

000013bc <uxQueueMessagesWaiting>:
    13bc:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13c0:	ff 93       	push	r31
    13c2:	f8 7f       	andi	r31, 0xF8	; 248
    13c4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13c8:	fc 01       	movw	r30, r24
    13ca:	86 8d       	ldd	r24, Z+30	; 0x1e
    13cc:	ff 91       	pop	r31
    13ce:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13d2:	08 95       	ret

000013d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    13da:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13de:	ff 93       	push	r31
    13e0:	f8 7f       	andi	r31, 0xF8	; 248
    13e2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13e6:	89 a1       	ldd	r24, Y+33	; 0x21
    13e8:	8f 3f       	cpi	r24, 0xFF	; 255
    13ea:	09 f4       	brne	.+2      	; 0x13ee <vQueueWaitForMessageRestricted+0x1a>
    13ec:	19 a2       	std	Y+33, r1	; 0x21
    13ee:	8a a1       	ldd	r24, Y+34	; 0x22
    13f0:	8f 3f       	cpi	r24, 0xFF	; 255
    13f2:	09 f4       	brne	.+2      	; 0x13f6 <vQueueWaitForMessageRestricted+0x22>
    13f4:	1a a2       	std	Y+34, r1	; 0x22
    13f6:	ff 91       	pop	r31
    13f8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    13fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13fe:	81 11       	cpse	r24, r1
    1400:	04 c0       	rjmp	.+8      	; 0x140a <vQueueWaitForMessageRestricted+0x36>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1402:	ce 01       	movw	r24, r28
    1404:	43 96       	adiw	r24, 0x13	; 19
    1406:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    140a:	ce 01       	movw	r24, r28
    140c:	0e 94 85 07 	call	0xf0a	; 0xf0a <prvUnlockQueue>
	}
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	08 95       	ret

00001416 <prvResetNextTaskUnblockTime>:
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
		}
		taskEXIT_CRITICAL();

		return ulReturn;
	}
    1416:	e0 91 38 2c 	lds	r30, 0x2C38	; 0x802c38 <pxDelayedTaskList>
    141a:	f0 91 39 2c 	lds	r31, 0x2C39	; 0x802c39 <pxDelayedTaskList+0x1>
    141e:	80 81       	ld	r24, Z
    1420:	81 11       	cpse	r24, r1
    1422:	0c c0       	rjmp	.+24     	; 0x143c <prvResetNextTaskUnblockTime+0x26>
    1424:	8f ef       	ldi	r24, 0xFF	; 255
    1426:	9f ef       	ldi	r25, 0xFF	; 255
    1428:	dc 01       	movw	r26, r24
    142a:	80 93 05 2c 	sts	0x2C05, r24	; 0x802c05 <xNextTaskUnblockTime>
    142e:	90 93 06 2c 	sts	0x2C06, r25	; 0x802c06 <xNextTaskUnblockTime+0x1>
    1432:	a0 93 07 2c 	sts	0x2C07, r26	; 0x802c07 <xNextTaskUnblockTime+0x2>
    1436:	b0 93 08 2c 	sts	0x2C08, r27	; 0x802c08 <xNextTaskUnblockTime+0x3>
    143a:	08 95       	ret
    143c:	e0 91 38 2c 	lds	r30, 0x2C38	; 0x802c38 <pxDelayedTaskList>
    1440:	f0 91 39 2c 	lds	r31, 0x2C39	; 0x802c39 <pxDelayedTaskList+0x1>
    1444:	07 80       	ldd	r0, Z+7	; 0x07
    1446:	f0 85       	ldd	r31, Z+8	; 0x08
    1448:	e0 2d       	mov	r30, r0
    144a:	00 84       	ldd	r0, Z+8	; 0x08
    144c:	f1 85       	ldd	r31, Z+9	; 0x09
    144e:	e0 2d       	mov	r30, r0
    1450:	82 81       	ldd	r24, Z+2	; 0x02
    1452:	93 81       	ldd	r25, Z+3	; 0x03
    1454:	a4 81       	ldd	r26, Z+4	; 0x04
    1456:	b5 81       	ldd	r27, Z+5	; 0x05
    1458:	80 93 05 2c 	sts	0x2C05, r24	; 0x802c05 <xNextTaskUnblockTime>
    145c:	90 93 06 2c 	sts	0x2C06, r25	; 0x802c06 <xNextTaskUnblockTime+0x1>
    1460:	a0 93 07 2c 	sts	0x2C07, r26	; 0x802c07 <xNextTaskUnblockTime+0x2>
    1464:	b0 93 08 2c 	sts	0x2C08, r27	; 0x802c08 <xNextTaskUnblockTime+0x3>
    1468:	08 95       	ret

0000146a <prvAddCurrentTaskToDelayedList>:
    146a:	8f 92       	push	r8
    146c:	9f 92       	push	r9
    146e:	af 92       	push	r10
    1470:	bf 92       	push	r11
    1472:	cf 92       	push	r12
    1474:	df 92       	push	r13
    1476:	ef 92       	push	r14
    1478:	ff 92       	push	r15
    147a:	cf 93       	push	r28
    147c:	6b 01       	movw	r12, r22
    147e:	7c 01       	movw	r14, r24
    1480:	c4 2f       	mov	r28, r20
    1482:	80 90 0f 2c 	lds	r8, 0x2C0F	; 0x802c0f <xTickCount>
    1486:	90 90 10 2c 	lds	r9, 0x2C10	; 0x802c10 <xTickCount+0x1>
    148a:	a0 90 11 2c 	lds	r10, 0x2C11	; 0x802c11 <xTickCount+0x2>
    148e:	b0 90 12 2c 	lds	r11, 0x2C12	; 0x802c12 <xTickCount+0x3>
    1492:	80 91 7c 2c 	lds	r24, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    1496:	90 91 7d 2c 	lds	r25, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    149a:	02 96       	adiw	r24, 0x02	; 2
    149c:	0e 94 2c 05 	call	0xa58	; 0xa58 <uxListRemove>
    14a0:	8f ef       	ldi	r24, 0xFF	; 255
    14a2:	c8 16       	cp	r12, r24
    14a4:	d8 06       	cpc	r13, r24
    14a6:	e8 06       	cpc	r14, r24
    14a8:	f8 06       	cpc	r15, r24
    14aa:	69 f4       	brne	.+26     	; 0x14c6 <prvAddCurrentTaskToDelayedList+0x5c>
    14ac:	cc 23       	and	r28, r28
    14ae:	59 f0       	breq	.+22     	; 0x14c6 <prvAddCurrentTaskToDelayedList+0x5c>
    14b0:	60 91 7c 2c 	lds	r22, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    14b4:	70 91 7d 2c 	lds	r23, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    14b8:	6e 5f       	subi	r22, 0xFE	; 254
    14ba:	7f 4f       	sbci	r23, 0xFF	; 255
    14bc:	84 e1       	ldi	r24, 0x14	; 20
    14be:	9c e2       	ldi	r25, 0x2C	; 44
    14c0:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
    14c4:	3f c0       	rjmp	.+126    	; 0x1544 <prvAddCurrentTaskToDelayedList+0xda>
    14c6:	c8 0c       	add	r12, r8
    14c8:	d9 1c       	adc	r13, r9
    14ca:	ea 1c       	adc	r14, r10
    14cc:	fb 1c       	adc	r15, r11
    14ce:	e0 91 7c 2c 	lds	r30, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    14d2:	f0 91 7d 2c 	lds	r31, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    14d6:	c2 82       	std	Z+2, r12	; 0x02
    14d8:	d3 82       	std	Z+3, r13	; 0x03
    14da:	e4 82       	std	Z+4, r14	; 0x04
    14dc:	f5 82       	std	Z+5, r15	; 0x05
    14de:	c8 14       	cp	r12, r8
    14e0:	d9 04       	cpc	r13, r9
    14e2:	ea 04       	cpc	r14, r10
    14e4:	fb 04       	cpc	r15, r11
    14e6:	68 f4       	brcc	.+26     	; 0x1502 <prvAddCurrentTaskToDelayedList+0x98>
    14e8:	60 91 7c 2c 	lds	r22, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    14ec:	70 91 7d 2c 	lds	r23, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    14f0:	80 91 36 2c 	lds	r24, 0x2C36	; 0x802c36 <pxOverflowDelayedTaskList>
    14f4:	90 91 37 2c 	lds	r25, 0x2C37	; 0x802c37 <pxOverflowDelayedTaskList+0x1>
    14f8:	6e 5f       	subi	r22, 0xFE	; 254
    14fa:	7f 4f       	sbci	r23, 0xFF	; 255
    14fc:	0e 94 ef 04 	call	0x9de	; 0x9de <vListInsert>
    1500:	21 c0       	rjmp	.+66     	; 0x1544 <prvAddCurrentTaskToDelayedList+0xda>
    1502:	60 91 7c 2c 	lds	r22, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    1506:	70 91 7d 2c 	lds	r23, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    150a:	80 91 38 2c 	lds	r24, 0x2C38	; 0x802c38 <pxDelayedTaskList>
    150e:	90 91 39 2c 	lds	r25, 0x2C39	; 0x802c39 <pxDelayedTaskList+0x1>
    1512:	6e 5f       	subi	r22, 0xFE	; 254
    1514:	7f 4f       	sbci	r23, 0xFF	; 255
    1516:	0e 94 ef 04 	call	0x9de	; 0x9de <vListInsert>
    151a:	80 91 05 2c 	lds	r24, 0x2C05	; 0x802c05 <xNextTaskUnblockTime>
    151e:	90 91 06 2c 	lds	r25, 0x2C06	; 0x802c06 <xNextTaskUnblockTime+0x1>
    1522:	a0 91 07 2c 	lds	r26, 0x2C07	; 0x802c07 <xNextTaskUnblockTime+0x2>
    1526:	b0 91 08 2c 	lds	r27, 0x2C08	; 0x802c08 <xNextTaskUnblockTime+0x3>
    152a:	c8 16       	cp	r12, r24
    152c:	d9 06       	cpc	r13, r25
    152e:	ea 06       	cpc	r14, r26
    1530:	fb 06       	cpc	r15, r27
    1532:	40 f4       	brcc	.+16     	; 0x1544 <prvAddCurrentTaskToDelayedList+0xda>
    1534:	c0 92 05 2c 	sts	0x2C05, r12	; 0x802c05 <xNextTaskUnblockTime>
    1538:	d0 92 06 2c 	sts	0x2C06, r13	; 0x802c06 <xNextTaskUnblockTime+0x1>
    153c:	e0 92 07 2c 	sts	0x2C07, r14	; 0x802c07 <xNextTaskUnblockTime+0x2>
    1540:	f0 92 08 2c 	sts	0x2C08, r15	; 0x802c08 <xNextTaskUnblockTime+0x3>
    1544:	cf 91       	pop	r28
    1546:	ff 90       	pop	r15
    1548:	ef 90       	pop	r14
    154a:	df 90       	pop	r13
    154c:	cf 90       	pop	r12
    154e:	bf 90       	pop	r11
    1550:	af 90       	pop	r10
    1552:	9f 90       	pop	r9
    1554:	8f 90       	pop	r8
    1556:	08 95       	ret

00001558 <prvIdleTask>:
    1558:	00 e2       	ldi	r16, 0x20	; 32
    155a:	1c e2       	ldi	r17, 0x2C	; 44
    155c:	0f 2e       	mov	r0, r31
    155e:	f0 e5       	ldi	r31, 0x50	; 80
    1560:	ef 2e       	mov	r14, r31
    1562:	fc e2       	ldi	r31, 0x2C	; 44
    1564:	ff 2e       	mov	r15, r31
    1566:	f0 2d       	mov	r31, r0
    1568:	80 91 1f 2c 	lds	r24, 0x2C1F	; 0x802c1f <uxDeletedTasksWaitingCleanUp>
    156c:	88 23       	and	r24, r24
    156e:	49 f1       	breq	.+82     	; 0x15c2 <prvIdleTask+0x6a>
    1570:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1574:	ff 93       	push	r31
    1576:	f8 7f       	andi	r31, 0xF8	; 248
    1578:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    157c:	d8 01       	movw	r26, r16
    157e:	17 96       	adiw	r26, 0x07	; 7
    1580:	ed 91       	ld	r30, X+
    1582:	fc 91       	ld	r31, X
    1584:	18 97       	sbiw	r26, 0x08	; 8
    1586:	c0 85       	ldd	r28, Z+8	; 0x08
    1588:	d1 85       	ldd	r29, Z+9	; 0x09
    158a:	ce 01       	movw	r24, r28
    158c:	02 96       	adiw	r24, 0x02	; 2
    158e:	0e 94 2c 05 	call	0xa58	; 0xa58 <uxListRemove>
    1592:	80 91 13 2c 	lds	r24, 0x2C13	; 0x802c13 <uxCurrentNumberOfTasks>
    1596:	81 50       	subi	r24, 0x01	; 1
    1598:	80 93 13 2c 	sts	0x2C13, r24	; 0x802c13 <uxCurrentNumberOfTasks>
    159c:	80 91 1f 2c 	lds	r24, 0x2C1F	; 0x802c1f <uxDeletedTasksWaitingCleanUp>
    15a0:	81 50       	subi	r24, 0x01	; 1
    15a2:	80 93 1f 2c 	sts	0x2C1F, r24	; 0x802c1f <uxDeletedTasksWaitingCleanUp>
    15a6:	ff 91       	pop	r31
    15a8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    15ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15b0:	0e 94 b8 04 	call	0x970	; 0x970 <vPortFree>
    15b4:	ce 01       	movw	r24, r28
    15b6:	0e 94 b8 04 	call	0x970	; 0x970 <vPortFree>
    15ba:	80 91 1f 2c 	lds	r24, 0x2C1F	; 0x802c1f <uxDeletedTasksWaitingCleanUp>
    15be:	81 11       	cpse	r24, r1
    15c0:	d7 cf       	rjmp	.-82     	; 0x1570 <prvIdleTask+0x18>
    15c2:	f7 01       	movw	r30, r14
    15c4:	80 81       	ld	r24, Z
    15c6:	82 30       	cpi	r24, 0x02	; 2
    15c8:	10 f0       	brcs	.+4      	; 0x15ce <prvIdleTask+0x76>
    15ca:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
    15ce:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <vApplicationIdleHook>
    15d2:	ca cf       	rjmp	.-108    	; 0x1568 <prvIdleTask+0x10>

000015d4 <xTaskCreate>:
    15d4:	4f 92       	push	r4
    15d6:	5f 92       	push	r5
    15d8:	6f 92       	push	r6
    15da:	7f 92       	push	r7
    15dc:	8f 92       	push	r8
    15de:	9f 92       	push	r9
    15e0:	af 92       	push	r10
    15e2:	bf 92       	push	r11
    15e4:	cf 92       	push	r12
    15e6:	df 92       	push	r13
    15e8:	ef 92       	push	r14
    15ea:	ff 92       	push	r15
    15ec:	0f 93       	push	r16
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	4c 01       	movw	r8, r24
    15f4:	6b 01       	movw	r12, r22
    15f6:	5a 01       	movw	r10, r20
    15f8:	29 01       	movw	r4, r18
    15fa:	ca 01       	movw	r24, r20
    15fc:	0e 94 92 04 	call	0x924	; 0x924 <pvPortMalloc>
    1600:	3c 01       	movw	r6, r24
    1602:	89 2b       	or	r24, r25
    1604:	09 f4       	brne	.+2      	; 0x1608 <xTaskCreate+0x34>
    1606:	ef c0       	rjmp	.+478    	; 0x17e6 <xTaskCreate+0x212>
    1608:	8c e2       	ldi	r24, 0x2C	; 44
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	0e 94 92 04 	call	0x924	; 0x924 <pvPortMalloc>
    1610:	ec 01       	movw	r28, r24
    1612:	89 2b       	or	r24, r25
    1614:	b1 f0       	breq	.+44     	; 0x1642 <xTaskCreate+0x6e>
    1616:	6b 8e       	std	Y+27, r6	; 0x1b
    1618:	7c 8e       	std	Y+28, r7	; 0x1c
    161a:	a5 01       	movw	r20, r10
    161c:	65 ea       	ldi	r22, 0xA5	; 165
    161e:	70 e0       	ldi	r23, 0x00	; 0
    1620:	c3 01       	movw	r24, r6
    1622:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <memset>
    1626:	21 e0       	ldi	r18, 0x01	; 1
    1628:	a2 1a       	sub	r10, r18
    162a:	b1 08       	sbc	r11, r1
    162c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    162e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1630:	a8 0e       	add	r10, r24
    1632:	b9 1e       	adc	r11, r25
    1634:	d6 01       	movw	r26, r12
    1636:	8c 91       	ld	r24, X
    1638:	8d 8f       	std	Y+29, r24	; 0x1d
    163a:	8c 91       	ld	r24, X
    163c:	81 11       	cpse	r24, r1
    163e:	05 c0       	rjmp	.+10     	; 0x164a <xTaskCreate+0x76>
    1640:	18 c0       	rjmp	.+48     	; 0x1672 <xTaskCreate+0x9e>
    1642:	c3 01       	movw	r24, r6
    1644:	0e 94 b8 04 	call	0x970	; 0x970 <vPortFree>
    1648:	ce c0       	rjmp	.+412    	; 0x17e6 <xTaskCreate+0x212>
    164a:	ae 01       	movw	r20, r28
    164c:	42 5e       	subi	r20, 0xE2	; 226
    164e:	5f 4f       	sbci	r21, 0xFF	; 255
    1650:	f6 01       	movw	r30, r12
    1652:	31 96       	adiw	r30, 0x01	; 1
    1654:	b8 e0       	ldi	r27, 0x08	; 8
    1656:	cb 0e       	add	r12, r27
    1658:	d1 1c       	adc	r13, r1
    165a:	cf 01       	movw	r24, r30
    165c:	21 91       	ld	r18, Z+
    165e:	da 01       	movw	r26, r20
    1660:	2d 93       	st	X+, r18
    1662:	ad 01       	movw	r20, r26
    1664:	dc 01       	movw	r26, r24
    1666:	8c 91       	ld	r24, X
    1668:	88 23       	and	r24, r24
    166a:	19 f0       	breq	.+6      	; 0x1672 <xTaskCreate+0x9e>
    166c:	ec 15       	cp	r30, r12
    166e:	fd 05       	cpc	r31, r13
    1670:	a1 f7       	brne	.-24     	; 0x165a <xTaskCreate+0x86>
    1672:	1c a2       	std	Y+36, r1	; 0x24
    1674:	04 30       	cpi	r16, 0x04	; 4
    1676:	08 f0       	brcs	.+2      	; 0x167a <xTaskCreate+0xa6>
    1678:	03 e0       	ldi	r16, 0x03	; 3
    167a:	0a 8f       	std	Y+26, r16	; 0x1a
    167c:	6e 01       	movw	r12, r28
    167e:	b2 e0       	ldi	r27, 0x02	; 2
    1680:	cb 0e       	add	r12, r27
    1682:	d1 1c       	adc	r13, r1
    1684:	c6 01       	movw	r24, r12
    1686:	0e 94 ca 04 	call	0x994	; 0x994 <vListInitialiseItem>
    168a:	ce 01       	movw	r24, r28
    168c:	0e 96       	adiw	r24, 0x0e	; 14
    168e:	0e 94 ca 04 	call	0x994	; 0x994 <vListInitialiseItem>
    1692:	ca 87       	std	Y+10, r28	; 0x0a
    1694:	db 87       	std	Y+11, r29	; 0x0b
    1696:	84 e0       	ldi	r24, 0x04	; 4
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	a0 e0       	ldi	r26, 0x00	; 0
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	80 1b       	sub	r24, r16
    16a0:	91 09       	sbc	r25, r1
    16a2:	a1 09       	sbc	r26, r1
    16a4:	b1 09       	sbc	r27, r1
    16a6:	8e 87       	std	Y+14, r24	; 0x0e
    16a8:	9f 87       	std	Y+15, r25	; 0x0f
    16aa:	a8 8b       	std	Y+16, r26	; 0x10
    16ac:	b9 8b       	std	Y+17, r27	; 0x11
    16ae:	ce 8b       	std	Y+22, r28	; 0x16
    16b0:	df 8b       	std	Y+23, r29	; 0x17
    16b2:	1f a2       	std	Y+39, r1	; 0x27
    16b4:	18 a6       	std	Y+40, r1	; 0x28
    16b6:	19 a6       	std	Y+41, r1	; 0x29
    16b8:	1a a6       	std	Y+42, r1	; 0x2a
    16ba:	1b a6       	std	Y+43, r1	; 0x2b
    16bc:	a2 01       	movw	r20, r4
    16be:	b4 01       	movw	r22, r8
    16c0:	c5 01       	movw	r24, r10
    16c2:	0e 94 5a 05 	call	0xab4	; 0xab4 <pxPortInitialiseStack>
    16c6:	88 83       	st	Y, r24
    16c8:	99 83       	std	Y+1, r25	; 0x01
    16ca:	e1 14       	cp	r14, r1
    16cc:	f1 04       	cpc	r15, r1
    16ce:	19 f0       	breq	.+6      	; 0x16d6 <xTaskCreate+0x102>
    16d0:	f7 01       	movw	r30, r14
    16d2:	c0 83       	st	Z, r28
    16d4:	d1 83       	std	Z+1, r29	; 0x01
    16d6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    16da:	ff 93       	push	r31
    16dc:	f8 7f       	andi	r31, 0xF8	; 248
    16de:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    16e2:	80 91 13 2c 	lds	r24, 0x2C13	; 0x802c13 <uxCurrentNumberOfTasks>
    16e6:	8f 5f       	subi	r24, 0xFF	; 255
    16e8:	80 93 13 2c 	sts	0x2C13, r24	; 0x802c13 <uxCurrentNumberOfTasks>
    16ec:	80 91 7c 2c 	lds	r24, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    16f0:	90 91 7d 2c 	lds	r25, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    16f4:	89 2b       	or	r24, r25
    16f6:	d1 f5       	brne	.+116    	; 0x176c <xTaskCreate+0x198>
    16f8:	c0 93 7c 2c 	sts	0x2C7C, r28	; 0x802c7c <pxCurrentTCB>
    16fc:	d0 93 7d 2c 	sts	0x2C7D, r29	; 0x802c7d <pxCurrentTCB+0x1>
    1700:	80 91 13 2c 	lds	r24, 0x2C13	; 0x802c13 <uxCurrentNumberOfTasks>
    1704:	81 30       	cpi	r24, 0x01	; 1
    1706:	09 f0       	breq	.+2      	; 0x170a <xTaskCreate+0x136>
    1708:	41 c0       	rjmp	.+130    	; 0x178c <xTaskCreate+0x1b8>
    170a:	80 e5       	ldi	r24, 0x50	; 80
    170c:	9c e2       	ldi	r25, 0x2C	; 44
    170e:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialise>
    1712:	8b e5       	ldi	r24, 0x5B	; 91
    1714:	9c e2       	ldi	r25, 0x2C	; 44
    1716:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialise>
    171a:	86 e6       	ldi	r24, 0x66	; 102
    171c:	9c e2       	ldi	r25, 0x2C	; 44
    171e:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialise>
    1722:	81 e7       	ldi	r24, 0x71	; 113
    1724:	9c e2       	ldi	r25, 0x2C	; 44
    1726:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialise>
    172a:	85 e4       	ldi	r24, 0x45	; 69
    172c:	9c e2       	ldi	r25, 0x2C	; 44
    172e:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialise>
    1732:	8a e3       	ldi	r24, 0x3A	; 58
    1734:	9c e2       	ldi	r25, 0x2C	; 44
    1736:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialise>
    173a:	8b e2       	ldi	r24, 0x2B	; 43
    173c:	9c e2       	ldi	r25, 0x2C	; 44
    173e:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialise>
    1742:	80 e2       	ldi	r24, 0x20	; 32
    1744:	9c e2       	ldi	r25, 0x2C	; 44
    1746:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialise>
    174a:	84 e1       	ldi	r24, 0x14	; 20
    174c:	9c e2       	ldi	r25, 0x2C	; 44
    174e:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialise>
    1752:	85 e4       	ldi	r24, 0x45	; 69
    1754:	9c e2       	ldi	r25, 0x2C	; 44
    1756:	80 93 38 2c 	sts	0x2C38, r24	; 0x802c38 <pxDelayedTaskList>
    175a:	90 93 39 2c 	sts	0x2C39, r25	; 0x802c39 <pxDelayedTaskList+0x1>
    175e:	8a e3       	ldi	r24, 0x3A	; 58
    1760:	9c e2       	ldi	r25, 0x2C	; 44
    1762:	80 93 36 2c 	sts	0x2C36, r24	; 0x802c36 <pxOverflowDelayedTaskList>
    1766:	90 93 37 2c 	sts	0x2C37, r25	; 0x802c37 <pxOverflowDelayedTaskList+0x1>
    176a:	10 c0       	rjmp	.+32     	; 0x178c <xTaskCreate+0x1b8>
    176c:	80 91 0d 2c 	lds	r24, 0x2C0D	; 0x802c0d <xSchedulerRunning>
    1770:	81 11       	cpse	r24, r1
    1772:	0c c0       	rjmp	.+24     	; 0x178c <xTaskCreate+0x1b8>
    1774:	e0 91 7c 2c 	lds	r30, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    1778:	f0 91 7d 2c 	lds	r31, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    177c:	92 8d       	ldd	r25, Z+26	; 0x1a
    177e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1780:	89 17       	cp	r24, r25
    1782:	20 f0       	brcs	.+8      	; 0x178c <xTaskCreate+0x1b8>
    1784:	c0 93 7c 2c 	sts	0x2C7C, r28	; 0x802c7c <pxCurrentTCB>
    1788:	d0 93 7d 2c 	sts	0x2C7D, r29	; 0x802c7d <pxCurrentTCB+0x1>
    178c:	80 91 09 2c 	lds	r24, 0x2C09	; 0x802c09 <uxTaskNumber>
    1790:	8f 5f       	subi	r24, 0xFF	; 255
    1792:	80 93 09 2c 	sts	0x2C09, r24	; 0x802c09 <uxTaskNumber>
    1796:	8d a3       	std	Y+37, r24	; 0x25
    1798:	8a 8d       	ldd	r24, Y+26	; 0x1a
    179a:	90 91 0e 2c 	lds	r25, 0x2C0E	; 0x802c0e <uxTopReadyPriority>
    179e:	98 17       	cp	r25, r24
    17a0:	10 f4       	brcc	.+4      	; 0x17a6 <xTaskCreate+0x1d2>
    17a2:	80 93 0e 2c 	sts	0x2C0E, r24	; 0x802c0e <uxTopReadyPriority>
    17a6:	fb e0       	ldi	r31, 0x0B	; 11
    17a8:	8f 9f       	mul	r24, r31
    17aa:	c0 01       	movw	r24, r0
    17ac:	11 24       	eor	r1, r1
    17ae:	b6 01       	movw	r22, r12
    17b0:	80 5b       	subi	r24, 0xB0	; 176
    17b2:	93 4d       	sbci	r25, 0xD3	; 211
    17b4:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
    17b8:	ff 91       	pop	r31
    17ba:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    17be:	80 91 0d 2c 	lds	r24, 0x2C0D	; 0x802c0d <xSchedulerRunning>
    17c2:	88 23       	and	r24, r24
    17c4:	61 f0       	breq	.+24     	; 0x17de <xTaskCreate+0x20a>
    17c6:	e0 91 7c 2c 	lds	r30, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    17ca:	f0 91 7d 2c 	lds	r31, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    17ce:	92 8d       	ldd	r25, Z+26	; 0x1a
    17d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17d2:	98 17       	cp	r25, r24
    17d4:	30 f4       	brcc	.+12     	; 0x17e2 <xTaskCreate+0x20e>
    17d6:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	05 c0       	rjmp	.+10     	; 0x17e8 <xTaskCreate+0x214>
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	03 c0       	rjmp	.+6      	; 0x17e8 <xTaskCreate+0x214>
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	01 c0       	rjmp	.+2      	; 0x17e8 <xTaskCreate+0x214>
    17e6:	8f ef       	ldi	r24, 0xFF	; 255
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	0f 91       	pop	r16
    17ee:	ff 90       	pop	r15
    17f0:	ef 90       	pop	r14
    17f2:	df 90       	pop	r13
    17f4:	cf 90       	pop	r12
    17f6:	bf 90       	pop	r11
    17f8:	af 90       	pop	r10
    17fa:	9f 90       	pop	r9
    17fc:	8f 90       	pop	r8
    17fe:	7f 90       	pop	r7
    1800:	6f 90       	pop	r6
    1802:	5f 90       	pop	r5
    1804:	4f 90       	pop	r4
    1806:	08 95       	ret

00001808 <vTaskDelete>:
    1808:	0f 93       	push	r16
    180a:	1f 93       	push	r17
    180c:	cf 93       	push	r28
    180e:	df 93       	push	r29
    1810:	ec 01       	movw	r28, r24
    1812:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1816:	ff 93       	push	r31
    1818:	f8 7f       	andi	r31, 0xF8	; 248
    181a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    181e:	89 2b       	or	r24, r25
    1820:	21 f4       	brne	.+8      	; 0x182a <vTaskDelete+0x22>
    1822:	c0 91 7c 2c 	lds	r28, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    1826:	d0 91 7d 2c 	lds	r29, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    182a:	8e 01       	movw	r16, r28
    182c:	0e 5f       	subi	r16, 0xFE	; 254
    182e:	1f 4f       	sbci	r17, 0xFF	; 255
    1830:	c8 01       	movw	r24, r16
    1832:	0e 94 2c 05 	call	0xa58	; 0xa58 <uxListRemove>
    1836:	88 8d       	ldd	r24, Y+24	; 0x18
    1838:	99 8d       	ldd	r25, Y+25	; 0x19
    183a:	89 2b       	or	r24, r25
    183c:	21 f0       	breq	.+8      	; 0x1846 <vTaskDelete+0x3e>
    183e:	ce 01       	movw	r24, r28
    1840:	0e 96       	adiw	r24, 0x0e	; 14
    1842:	0e 94 2c 05 	call	0xa58	; 0xa58 <uxListRemove>
    1846:	80 91 09 2c 	lds	r24, 0x2C09	; 0x802c09 <uxTaskNumber>
    184a:	8f 5f       	subi	r24, 0xFF	; 255
    184c:	80 93 09 2c 	sts	0x2C09, r24	; 0x802c09 <uxTaskNumber>
    1850:	80 91 7c 2c 	lds	r24, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    1854:	90 91 7d 2c 	lds	r25, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    1858:	c8 17       	cp	r28, r24
    185a:	d9 07       	cpc	r29, r25
    185c:	59 f4       	brne	.+22     	; 0x1874 <vTaskDelete+0x6c>
    185e:	b8 01       	movw	r22, r16
    1860:	80 e2       	ldi	r24, 0x20	; 32
    1862:	9c e2       	ldi	r25, 0x2C	; 44
    1864:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
    1868:	80 91 1f 2c 	lds	r24, 0x2C1F	; 0x802c1f <uxDeletedTasksWaitingCleanUp>
    186c:	8f 5f       	subi	r24, 0xFF	; 255
    186e:	80 93 1f 2c 	sts	0x2C1F, r24	; 0x802c1f <uxDeletedTasksWaitingCleanUp>
    1872:	0e c0       	rjmp	.+28     	; 0x1890 <vTaskDelete+0x88>
    1874:	80 91 13 2c 	lds	r24, 0x2C13	; 0x802c13 <uxCurrentNumberOfTasks>
    1878:	81 50       	subi	r24, 0x01	; 1
    187a:	80 93 13 2c 	sts	0x2C13, r24	; 0x802c13 <uxCurrentNumberOfTasks>
    187e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1880:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1882:	0e 94 b8 04 	call	0x970	; 0x970 <vPortFree>
    1886:	ce 01       	movw	r24, r28
    1888:	0e 94 b8 04 	call	0x970	; 0x970 <vPortFree>
    188c:	0e 94 0b 0a 	call	0x1416	; 0x1416 <prvResetNextTaskUnblockTime>
    1890:	ff 91       	pop	r31
    1892:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1896:	80 91 0d 2c 	lds	r24, 0x2C0D	; 0x802c0d <xSchedulerRunning>
    189a:	88 23       	and	r24, r24
    189c:	49 f0       	breq	.+18     	; 0x18b0 <vTaskDelete+0xa8>
    189e:	80 91 7c 2c 	lds	r24, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    18a2:	90 91 7d 2c 	lds	r25, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    18a6:	c8 17       	cp	r28, r24
    18a8:	d9 07       	cpc	r29, r25
    18aa:	11 f4       	brne	.+4      	; 0x18b0 <vTaskDelete+0xa8>
    18ac:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	1f 91       	pop	r17
    18b6:	0f 91       	pop	r16
    18b8:	08 95       	ret

000018ba <vTaskResume>:
    18ba:	0f 93       	push	r16
    18bc:	1f 93       	push	r17
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	09 f4       	brne	.+2      	; 0x18c8 <vTaskResume+0xe>
    18c6:	41 c0       	rjmp	.+130    	; 0x194a <vTaskResume+0x90>
    18c8:	20 91 7c 2c 	lds	r18, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    18cc:	30 91 7d 2c 	lds	r19, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    18d0:	82 17       	cp	r24, r18
    18d2:	93 07       	cpc	r25, r19
    18d4:	09 f4       	brne	.+2      	; 0x18d8 <vTaskResume+0x1e>
    18d6:	39 c0       	rjmp	.+114    	; 0x194a <vTaskResume+0x90>
    18d8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    18dc:	ff 93       	push	r31
    18de:	f8 7f       	andi	r31, 0xF8	; 248
    18e0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    18e4:	fc 01       	movw	r30, r24
    18e6:	24 85       	ldd	r18, Z+12	; 0x0c
    18e8:	35 85       	ldd	r19, Z+13	; 0x0d
    18ea:	24 51       	subi	r18, 0x14	; 20
    18ec:	3c 42       	sbci	r19, 0x2C	; 44
    18ee:	51 f5       	brne	.+84     	; 0x1944 <vTaskResume+0x8a>
    18f0:	fc 01       	movw	r30, r24
    18f2:	20 8d       	ldd	r18, Z+24	; 0x18
    18f4:	31 8d       	ldd	r19, Z+25	; 0x19
    18f6:	fc e2       	ldi	r31, 0x2C	; 44
    18f8:	2b 32       	cpi	r18, 0x2B	; 43
    18fa:	3f 07       	cpc	r19, r31
    18fc:	19 f1       	breq	.+70     	; 0x1944 <vTaskResume+0x8a>
    18fe:	23 2b       	or	r18, r19
    1900:	09 f5       	brne	.+66     	; 0x1944 <vTaskResume+0x8a>
    1902:	ec 01       	movw	r28, r24
    1904:	8c 01       	movw	r16, r24
    1906:	0e 5f       	subi	r16, 0xFE	; 254
    1908:	1f 4f       	sbci	r17, 0xFF	; 255
    190a:	c8 01       	movw	r24, r16
    190c:	0e 94 2c 05 	call	0xa58	; 0xa58 <uxListRemove>
    1910:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1912:	90 91 0e 2c 	lds	r25, 0x2C0E	; 0x802c0e <uxTopReadyPriority>
    1916:	98 17       	cp	r25, r24
    1918:	10 f4       	brcc	.+4      	; 0x191e <vTaskResume+0x64>
    191a:	80 93 0e 2c 	sts	0x2C0E, r24	; 0x802c0e <uxTopReadyPriority>
    191e:	2b e0       	ldi	r18, 0x0B	; 11
    1920:	82 9f       	mul	r24, r18
    1922:	c0 01       	movw	r24, r0
    1924:	11 24       	eor	r1, r1
    1926:	b8 01       	movw	r22, r16
    1928:	80 5b       	subi	r24, 0xB0	; 176
    192a:	93 4d       	sbci	r25, 0xD3	; 211
    192c:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
    1930:	e0 91 7c 2c 	lds	r30, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    1934:	f0 91 7d 2c 	lds	r31, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    1938:	9a 8d       	ldd	r25, Y+26	; 0x1a
    193a:	82 8d       	ldd	r24, Z+26	; 0x1a
    193c:	98 17       	cp	r25, r24
    193e:	10 f0       	brcs	.+4      	; 0x1944 <vTaskResume+0x8a>
    1940:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
    1944:	ff 91       	pop	r31
    1946:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    194a:	df 91       	pop	r29
    194c:	cf 91       	pop	r28
    194e:	1f 91       	pop	r17
    1950:	0f 91       	pop	r16
    1952:	08 95       	ret

00001954 <vTaskStartScheduler>:
    1954:	ef 92       	push	r14
    1956:	ff 92       	push	r15
    1958:	0f 93       	push	r16
    195a:	0f 2e       	mov	r0, r31
    195c:	f3 e0       	ldi	r31, 0x03	; 3
    195e:	ef 2e       	mov	r14, r31
    1960:	fc e2       	ldi	r31, 0x2C	; 44
    1962:	ff 2e       	mov	r15, r31
    1964:	f0 2d       	mov	r31, r0
    1966:	00 e0       	ldi	r16, 0x00	; 0
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	48 ec       	ldi	r20, 0xC8	; 200
    196e:	50 e0       	ldi	r21, 0x00	; 0
    1970:	60 e0       	ldi	r22, 0x00	; 0
    1972:	70 e2       	ldi	r23, 0x20	; 32
    1974:	8c ea       	ldi	r24, 0xAC	; 172
    1976:	9a e0       	ldi	r25, 0x0A	; 10
    1978:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <xTaskCreate>
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	09 f5       	brne	.+66     	; 0x19c2 <vTaskStartScheduler+0x6e>
    1980:	0e 94 72 12 	call	0x24e4	; 0x24e4 <xTimerCreateTimerTask>
    1984:	81 30       	cpi	r24, 0x01	; 1
    1986:	e9 f4       	brne	.+58     	; 0x19c2 <vTaskStartScheduler+0x6e>
    1988:	e0 ea       	ldi	r30, 0xA0	; 160
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	82 81       	ldd	r24, Z+2	; 0x02
    198e:	88 7f       	andi	r24, 0xF8	; 248
    1990:	82 83       	std	Z+2, r24	; 0x02
    1992:	8f ef       	ldi	r24, 0xFF	; 255
    1994:	9f ef       	ldi	r25, 0xFF	; 255
    1996:	dc 01       	movw	r26, r24
    1998:	80 93 05 2c 	sts	0x2C05, r24	; 0x802c05 <xNextTaskUnblockTime>
    199c:	90 93 06 2c 	sts	0x2C06, r25	; 0x802c06 <xNextTaskUnblockTime+0x1>
    19a0:	a0 93 07 2c 	sts	0x2C07, r26	; 0x802c07 <xNextTaskUnblockTime+0x2>
    19a4:	b0 93 08 2c 	sts	0x2C08, r27	; 0x802c08 <xNextTaskUnblockTime+0x3>
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	80 93 0d 2c 	sts	0x2C0D, r24	; 0x802c0d <xSchedulerRunning>
    19ae:	10 92 0f 2c 	sts	0x2C0F, r1	; 0x802c0f <xTickCount>
    19b2:	10 92 10 2c 	sts	0x2C10, r1	; 0x802c10 <xTickCount+0x1>
    19b6:	10 92 11 2c 	sts	0x2C11, r1	; 0x802c11 <xTickCount+0x2>
    19ba:	10 92 12 2c 	sts	0x2C12, r1	; 0x802c12 <xTickCount+0x3>
    19be:	0e 94 d7 05 	call	0xbae	; 0xbae <xPortStartScheduler>
    19c2:	0f 91       	pop	r16
    19c4:	ff 90       	pop	r15
    19c6:	ef 90       	pop	r14
    19c8:	08 95       	ret

000019ca <vTaskSuspendAll>:
    19ca:	80 91 02 2c 	lds	r24, 0x2C02	; 0x802c02 <uxSchedulerSuspended>
    19ce:	8f 5f       	subi	r24, 0xFF	; 255
    19d0:	80 93 02 2c 	sts	0x2C02, r24	; 0x802c02 <uxSchedulerSuspended>
    19d4:	08 95       	ret

000019d6 <xTaskGetTickCount>:
    19d6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    19da:	ff 93       	push	r31
    19dc:	f8 7f       	andi	r31, 0xF8	; 248
    19de:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    19e2:	60 91 0f 2c 	lds	r22, 0x2C0F	; 0x802c0f <xTickCount>
    19e6:	70 91 10 2c 	lds	r23, 0x2C10	; 0x802c10 <xTickCount+0x1>
    19ea:	80 91 11 2c 	lds	r24, 0x2C11	; 0x802c11 <xTickCount+0x2>
    19ee:	90 91 12 2c 	lds	r25, 0x2C12	; 0x802c12 <xTickCount+0x3>
    19f2:	ff 91       	pop	r31
    19f4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    19f8:	08 95       	ret

000019fa <xTaskIncrementTick>:
    19fa:	af 92       	push	r10
    19fc:	bf 92       	push	r11
    19fe:	cf 92       	push	r12
    1a00:	df 92       	push	r13
    1a02:	ef 92       	push	r14
    1a04:	ff 92       	push	r15
    1a06:	0f 93       	push	r16
    1a08:	1f 93       	push	r17
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	80 91 02 2c 	lds	r24, 0x2C02	; 0x802c02 <uxSchedulerSuspended>
    1a12:	81 11       	cpse	r24, r1
    1a14:	ad c0       	rjmp	.+346    	; 0x1b70 <xTaskIncrementTick+0x176>
    1a16:	c0 90 0f 2c 	lds	r12, 0x2C0F	; 0x802c0f <xTickCount>
    1a1a:	d0 90 10 2c 	lds	r13, 0x2C10	; 0x802c10 <xTickCount+0x1>
    1a1e:	e0 90 11 2c 	lds	r14, 0x2C11	; 0x802c11 <xTickCount+0x2>
    1a22:	f0 90 12 2c 	lds	r15, 0x2C12	; 0x802c12 <xTickCount+0x3>
    1a26:	8f ef       	ldi	r24, 0xFF	; 255
    1a28:	c8 1a       	sub	r12, r24
    1a2a:	d8 0a       	sbc	r13, r24
    1a2c:	e8 0a       	sbc	r14, r24
    1a2e:	f8 0a       	sbc	r15, r24
    1a30:	c0 92 0f 2c 	sts	0x2C0F, r12	; 0x802c0f <xTickCount>
    1a34:	d0 92 10 2c 	sts	0x2C10, r13	; 0x802c10 <xTickCount+0x1>
    1a38:	e0 92 11 2c 	sts	0x2C11, r14	; 0x802c11 <xTickCount+0x2>
    1a3c:	f0 92 12 2c 	sts	0x2C12, r15	; 0x802c12 <xTickCount+0x3>
    1a40:	c1 14       	cp	r12, r1
    1a42:	d1 04       	cpc	r13, r1
    1a44:	e1 04       	cpc	r14, r1
    1a46:	f1 04       	cpc	r15, r1
    1a48:	b9 f4       	brne	.+46     	; 0x1a78 <xTaskIncrementTick+0x7e>
    1a4a:	80 91 38 2c 	lds	r24, 0x2C38	; 0x802c38 <pxDelayedTaskList>
    1a4e:	90 91 39 2c 	lds	r25, 0x2C39	; 0x802c39 <pxDelayedTaskList+0x1>
    1a52:	20 91 36 2c 	lds	r18, 0x2C36	; 0x802c36 <pxOverflowDelayedTaskList>
    1a56:	30 91 37 2c 	lds	r19, 0x2C37	; 0x802c37 <pxOverflowDelayedTaskList+0x1>
    1a5a:	20 93 38 2c 	sts	0x2C38, r18	; 0x802c38 <pxDelayedTaskList>
    1a5e:	30 93 39 2c 	sts	0x2C39, r19	; 0x802c39 <pxDelayedTaskList+0x1>
    1a62:	80 93 36 2c 	sts	0x2C36, r24	; 0x802c36 <pxOverflowDelayedTaskList>
    1a66:	90 93 37 2c 	sts	0x2C37, r25	; 0x802c37 <pxOverflowDelayedTaskList+0x1>
    1a6a:	80 91 0a 2c 	lds	r24, 0x2C0A	; 0x802c0a <xNumOfOverflows>
    1a6e:	8f 5f       	subi	r24, 0xFF	; 255
    1a70:	80 93 0a 2c 	sts	0x2C0A, r24	; 0x802c0a <xNumOfOverflows>
    1a74:	0e 94 0b 0a 	call	0x1416	; 0x1416 <prvResetNextTaskUnblockTime>
    1a78:	80 91 05 2c 	lds	r24, 0x2C05	; 0x802c05 <xNextTaskUnblockTime>
    1a7c:	90 91 06 2c 	lds	r25, 0x2C06	; 0x802c06 <xNextTaskUnblockTime+0x1>
    1a80:	a0 91 07 2c 	lds	r26, 0x2C07	; 0x802c07 <xNextTaskUnblockTime+0x2>
    1a84:	b0 91 08 2c 	lds	r27, 0x2C08	; 0x802c08 <xNextTaskUnblockTime+0x3>
    1a88:	c8 16       	cp	r12, r24
    1a8a:	d9 06       	cpc	r13, r25
    1a8c:	ea 06       	cpc	r14, r26
    1a8e:	fb 06       	cpc	r15, r27
    1a90:	10 f4       	brcc	.+4      	; 0x1a96 <xTaskIncrementTick+0x9c>
    1a92:	b1 2c       	mov	r11, r1
    1a94:	5c c0       	rjmp	.+184    	; 0x1b4e <xTaskIncrementTick+0x154>
    1a96:	b1 2c       	mov	r11, r1
    1a98:	0f 2e       	mov	r0, r31
    1a9a:	fb e0       	ldi	r31, 0x0B	; 11
    1a9c:	af 2e       	mov	r10, r31
    1a9e:	f0 2d       	mov	r31, r0
    1aa0:	e0 91 38 2c 	lds	r30, 0x2C38	; 0x802c38 <pxDelayedTaskList>
    1aa4:	f0 91 39 2c 	lds	r31, 0x2C39	; 0x802c39 <pxDelayedTaskList+0x1>
    1aa8:	80 81       	ld	r24, Z
    1aaa:	81 11       	cpse	r24, r1
    1aac:	0c c0       	rjmp	.+24     	; 0x1ac6 <xTaskIncrementTick+0xcc>
    1aae:	8f ef       	ldi	r24, 0xFF	; 255
    1ab0:	9f ef       	ldi	r25, 0xFF	; 255
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	80 93 05 2c 	sts	0x2C05, r24	; 0x802c05 <xNextTaskUnblockTime>
    1ab8:	90 93 06 2c 	sts	0x2C06, r25	; 0x802c06 <xNextTaskUnblockTime+0x1>
    1abc:	a0 93 07 2c 	sts	0x2C07, r26	; 0x802c07 <xNextTaskUnblockTime+0x2>
    1ac0:	b0 93 08 2c 	sts	0x2C08, r27	; 0x802c08 <xNextTaskUnblockTime+0x3>
    1ac4:	44 c0       	rjmp	.+136    	; 0x1b4e <xTaskIncrementTick+0x154>
    1ac6:	e0 91 38 2c 	lds	r30, 0x2C38	; 0x802c38 <pxDelayedTaskList>
    1aca:	f0 91 39 2c 	lds	r31, 0x2C39	; 0x802c39 <pxDelayedTaskList+0x1>
    1ace:	07 80       	ldd	r0, Z+7	; 0x07
    1ad0:	f0 85       	ldd	r31, Z+8	; 0x08
    1ad2:	e0 2d       	mov	r30, r0
    1ad4:	c0 85       	ldd	r28, Z+8	; 0x08
    1ad6:	d1 85       	ldd	r29, Z+9	; 0x09
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	9b 81       	ldd	r25, Y+3	; 0x03
    1adc:	ac 81       	ldd	r26, Y+4	; 0x04
    1ade:	bd 81       	ldd	r27, Y+5	; 0x05
    1ae0:	c8 16       	cp	r12, r24
    1ae2:	d9 06       	cpc	r13, r25
    1ae4:	ea 06       	cpc	r14, r26
    1ae6:	fb 06       	cpc	r15, r27
    1ae8:	48 f4       	brcc	.+18     	; 0x1afc <xTaskIncrementTick+0x102>
    1aea:	80 93 05 2c 	sts	0x2C05, r24	; 0x802c05 <xNextTaskUnblockTime>
    1aee:	90 93 06 2c 	sts	0x2C06, r25	; 0x802c06 <xNextTaskUnblockTime+0x1>
    1af2:	a0 93 07 2c 	sts	0x2C07, r26	; 0x802c07 <xNextTaskUnblockTime+0x2>
    1af6:	b0 93 08 2c 	sts	0x2C08, r27	; 0x802c08 <xNextTaskUnblockTime+0x3>
    1afa:	29 c0       	rjmp	.+82     	; 0x1b4e <xTaskIncrementTick+0x154>
    1afc:	8e 01       	movw	r16, r28
    1afe:	0e 5f       	subi	r16, 0xFE	; 254
    1b00:	1f 4f       	sbci	r17, 0xFF	; 255
    1b02:	c8 01       	movw	r24, r16
    1b04:	0e 94 2c 05 	call	0xa58	; 0xa58 <uxListRemove>
    1b08:	88 8d       	ldd	r24, Y+24	; 0x18
    1b0a:	99 8d       	ldd	r25, Y+25	; 0x19
    1b0c:	89 2b       	or	r24, r25
    1b0e:	21 f0       	breq	.+8      	; 0x1b18 <xTaskIncrementTick+0x11e>
    1b10:	ce 01       	movw	r24, r28
    1b12:	0e 96       	adiw	r24, 0x0e	; 14
    1b14:	0e 94 2c 05 	call	0xa58	; 0xa58 <uxListRemove>
    1b18:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b1a:	90 91 0e 2c 	lds	r25, 0x2C0E	; 0x802c0e <uxTopReadyPriority>
    1b1e:	98 17       	cp	r25, r24
    1b20:	10 f4       	brcc	.+4      	; 0x1b26 <xTaskIncrementTick+0x12c>
    1b22:	80 93 0e 2c 	sts	0x2C0E, r24	; 0x802c0e <uxTopReadyPriority>
    1b26:	a8 9e       	mul	r10, r24
    1b28:	c0 01       	movw	r24, r0
    1b2a:	11 24       	eor	r1, r1
    1b2c:	b8 01       	movw	r22, r16
    1b2e:	80 5b       	subi	r24, 0xB0	; 176
    1b30:	93 4d       	sbci	r25, 0xD3	; 211
    1b32:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
    1b36:	e0 91 7c 2c 	lds	r30, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    1b3a:	f0 91 7d 2c 	lds	r31, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    1b3e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b40:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b42:	98 17       	cp	r25, r24
    1b44:	08 f4       	brcc	.+2      	; 0x1b48 <xTaskIncrementTick+0x14e>
    1b46:	ac cf       	rjmp	.-168    	; 0x1aa0 <xTaskIncrementTick+0xa6>
    1b48:	bb 24       	eor	r11, r11
    1b4a:	b3 94       	inc	r11
    1b4c:	a9 cf       	rjmp	.-174    	; 0x1aa0 <xTaskIncrementTick+0xa6>
    1b4e:	e0 91 7c 2c 	lds	r30, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    1b52:	f0 91 7d 2c 	lds	r31, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    1b56:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1b58:	8b e0       	ldi	r24, 0x0B	; 11
    1b5a:	e8 9f       	mul	r30, r24
    1b5c:	f0 01       	movw	r30, r0
    1b5e:	11 24       	eor	r1, r1
    1b60:	e0 5b       	subi	r30, 0xB0	; 176
    1b62:	f3 4d       	sbci	r31, 0xD3	; 211
    1b64:	80 81       	ld	r24, Z
    1b66:	82 30       	cpi	r24, 0x02	; 2
    1b68:	48 f0       	brcs	.+18     	; 0x1b7c <xTaskIncrementTick+0x182>
    1b6a:	bb 24       	eor	r11, r11
    1b6c:	b3 94       	inc	r11
    1b6e:	06 c0       	rjmp	.+12     	; 0x1b7c <xTaskIncrementTick+0x182>
    1b70:	80 91 0c 2c 	lds	r24, 0x2C0C	; 0x802c0c <uxPendedTicks>
    1b74:	8f 5f       	subi	r24, 0xFF	; 255
    1b76:	80 93 0c 2c 	sts	0x2C0C, r24	; 0x802c0c <uxPendedTicks>
    1b7a:	b1 2c       	mov	r11, r1
    1b7c:	80 91 0b 2c 	lds	r24, 0x2C0B	; 0x802c0b <xYieldPending>
    1b80:	88 23       	and	r24, r24
    1b82:	11 f0       	breq	.+4      	; 0x1b88 <xTaskIncrementTick+0x18e>
    1b84:	bb 24       	eor	r11, r11
    1b86:	b3 94       	inc	r11
    1b88:	8b 2d       	mov	r24, r11
    1b8a:	df 91       	pop	r29
    1b8c:	cf 91       	pop	r28
    1b8e:	1f 91       	pop	r17
    1b90:	0f 91       	pop	r16
    1b92:	ff 90       	pop	r15
    1b94:	ef 90       	pop	r14
    1b96:	df 90       	pop	r13
    1b98:	cf 90       	pop	r12
    1b9a:	bf 90       	pop	r11
    1b9c:	af 90       	pop	r10
    1b9e:	08 95       	ret

00001ba0 <xTaskResumeAll>:
    1ba0:	cf 92       	push	r12
    1ba2:	df 92       	push	r13
    1ba4:	ef 92       	push	r14
    1ba6:	ff 92       	push	r15
    1ba8:	0f 93       	push	r16
    1baa:	1f 93       	push	r17
    1bac:	cf 93       	push	r28
    1bae:	df 93       	push	r29
    1bb0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1bb4:	ff 93       	push	r31
    1bb6:	f8 7f       	andi	r31, 0xF8	; 248
    1bb8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1bbc:	80 91 02 2c 	lds	r24, 0x2C02	; 0x802c02 <uxSchedulerSuspended>
    1bc0:	81 50       	subi	r24, 0x01	; 1
    1bc2:	80 93 02 2c 	sts	0x2C02, r24	; 0x802c02 <uxSchedulerSuspended>
    1bc6:	80 91 02 2c 	lds	r24, 0x2C02	; 0x802c02 <uxSchedulerSuspended>
    1bca:	81 11       	cpse	r24, r1
    1bcc:	5c c0       	rjmp	.+184    	; 0x1c86 <xTaskResumeAll+0xe6>
    1bce:	80 91 13 2c 	lds	r24, 0x2C13	; 0x802c13 <uxCurrentNumberOfTasks>
    1bd2:	81 11       	cpse	r24, r1
    1bd4:	2c c0       	rjmp	.+88     	; 0x1c2e <xTaskResumeAll+0x8e>
    1bd6:	5a c0       	rjmp	.+180    	; 0x1c8c <xTaskResumeAll+0xec>
    1bd8:	d7 01       	movw	r26, r14
    1bda:	17 96       	adiw	r26, 0x07	; 7
    1bdc:	ed 91       	ld	r30, X+
    1bde:	fc 91       	ld	r31, X
    1be0:	18 97       	sbiw	r26, 0x08	; 8
    1be2:	c0 85       	ldd	r28, Z+8	; 0x08
    1be4:	d1 85       	ldd	r29, Z+9	; 0x09
    1be6:	ce 01       	movw	r24, r28
    1be8:	0e 96       	adiw	r24, 0x0e	; 14
    1bea:	0e 94 2c 05 	call	0xa58	; 0xa58 <uxListRemove>
    1bee:	8e 01       	movw	r16, r28
    1bf0:	0e 5f       	subi	r16, 0xFE	; 254
    1bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf4:	c8 01       	movw	r24, r16
    1bf6:	0e 94 2c 05 	call	0xa58	; 0xa58 <uxListRemove>
    1bfa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1bfc:	90 91 0e 2c 	lds	r25, 0x2C0E	; 0x802c0e <uxTopReadyPriority>
    1c00:	98 17       	cp	r25, r24
    1c02:	10 f4       	brcc	.+4      	; 0x1c08 <xTaskResumeAll+0x68>
    1c04:	80 93 0e 2c 	sts	0x2C0E, r24	; 0x802c0e <uxTopReadyPriority>
    1c08:	d8 9e       	mul	r13, r24
    1c0a:	c0 01       	movw	r24, r0
    1c0c:	11 24       	eor	r1, r1
    1c0e:	b8 01       	movw	r22, r16
    1c10:	80 5b       	subi	r24, 0xB0	; 176
    1c12:	93 4d       	sbci	r25, 0xD3	; 211
    1c14:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
    1c18:	e0 91 7c 2c 	lds	r30, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    1c1c:	f0 91 7d 2c 	lds	r31, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    1c20:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c22:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c24:	98 17       	cp	r25, r24
    1c26:	88 f0       	brcs	.+34     	; 0x1c4a <xTaskResumeAll+0xaa>
    1c28:	c0 92 0b 2c 	sts	0x2C0B, r12	; 0x802c0b <xYieldPending>
    1c2c:	0e c0       	rjmp	.+28     	; 0x1c4a <xTaskResumeAll+0xaa>
    1c2e:	c0 e0       	ldi	r28, 0x00	; 0
    1c30:	d0 e0       	ldi	r29, 0x00	; 0
    1c32:	0f 2e       	mov	r0, r31
    1c34:	fb e2       	ldi	r31, 0x2B	; 43
    1c36:	ef 2e       	mov	r14, r31
    1c38:	fc e2       	ldi	r31, 0x2C	; 44
    1c3a:	ff 2e       	mov	r15, r31
    1c3c:	f0 2d       	mov	r31, r0
    1c3e:	0f 2e       	mov	r0, r31
    1c40:	fb e0       	ldi	r31, 0x0B	; 11
    1c42:	df 2e       	mov	r13, r31
    1c44:	f0 2d       	mov	r31, r0
    1c46:	cc 24       	eor	r12, r12
    1c48:	c3 94       	inc	r12
    1c4a:	f7 01       	movw	r30, r14
    1c4c:	80 81       	ld	r24, Z
    1c4e:	81 11       	cpse	r24, r1
    1c50:	c3 cf       	rjmp	.-122    	; 0x1bd8 <xTaskResumeAll+0x38>
    1c52:	cd 2b       	or	r28, r29
    1c54:	11 f0       	breq	.+4      	; 0x1c5a <xTaskResumeAll+0xba>
    1c56:	0e 94 0b 0a 	call	0x1416	; 0x1416 <prvResetNextTaskUnblockTime>
    1c5a:	c0 91 0c 2c 	lds	r28, 0x2C0C	; 0x802c0c <uxPendedTicks>
    1c5e:	cc 23       	and	r28, r28
    1c60:	51 f0       	breq	.+20     	; 0x1c76 <xTaskResumeAll+0xd6>
    1c62:	d1 e0       	ldi	r29, 0x01	; 1
    1c64:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <xTaskIncrementTick>
    1c68:	81 11       	cpse	r24, r1
    1c6a:	d0 93 0b 2c 	sts	0x2C0B, r29	; 0x802c0b <xYieldPending>
    1c6e:	c1 50       	subi	r28, 0x01	; 1
    1c70:	c9 f7       	brne	.-14     	; 0x1c64 <xTaskResumeAll+0xc4>
    1c72:	10 92 0c 2c 	sts	0x2C0C, r1	; 0x802c0c <uxPendedTicks>
    1c76:	80 91 0b 2c 	lds	r24, 0x2C0B	; 0x802c0b <xYieldPending>
    1c7a:	88 23       	and	r24, r24
    1c7c:	31 f0       	breq	.+12     	; 0x1c8a <xTaskResumeAll+0xea>
    1c7e:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	03 c0       	rjmp	.+6      	; 0x1c8c <xTaskResumeAll+0xec>
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	01 c0       	rjmp	.+2      	; 0x1c8c <xTaskResumeAll+0xec>
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	ff 91       	pop	r31
    1c8e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	1f 91       	pop	r17
    1c98:	0f 91       	pop	r16
    1c9a:	ff 90       	pop	r15
    1c9c:	ef 90       	pop	r14
    1c9e:	df 90       	pop	r13
    1ca0:	cf 90       	pop	r12
    1ca2:	08 95       	ret

00001ca4 <vTaskDelay>:
    1ca4:	cf 92       	push	r12
    1ca6:	df 92       	push	r13
    1ca8:	ef 92       	push	r14
    1caa:	ff 92       	push	r15
    1cac:	6b 01       	movw	r12, r22
    1cae:	7c 01       	movw	r14, r24
    1cb0:	67 2b       	or	r22, r23
    1cb2:	68 2b       	or	r22, r24
    1cb4:	69 2b       	or	r22, r25
    1cb6:	59 f0       	breq	.+22     	; 0x1cce <vTaskDelay+0x2a>
    1cb8:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <vTaskSuspendAll>
    1cbc:	40 e0       	ldi	r20, 0x00	; 0
    1cbe:	c7 01       	movw	r24, r14
    1cc0:	b6 01       	movw	r22, r12
    1cc2:	0e 94 35 0a 	call	0x146a	; 0x146a <prvAddCurrentTaskToDelayedList>
    1cc6:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <xTaskResumeAll>
    1cca:	81 11       	cpse	r24, r1
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <vTaskDelay+0x2e>
    1cce:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
    1cd2:	ff 90       	pop	r15
    1cd4:	ef 90       	pop	r14
    1cd6:	df 90       	pop	r13
    1cd8:	cf 90       	pop	r12
    1cda:	08 95       	ret

00001cdc <vTaskSwitchContext>:
    1cdc:	80 91 02 2c 	lds	r24, 0x2C02	; 0x802c02 <uxSchedulerSuspended>
    1ce0:	88 23       	and	r24, r24
    1ce2:	21 f0       	breq	.+8      	; 0x1cec <vTaskSwitchContext+0x10>
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	80 93 0b 2c 	sts	0x2C0B, r24	; 0x802c0b <xYieldPending>
    1cea:	08 95       	ret
    1cec:	10 92 0b 2c 	sts	0x2C0B, r1	; 0x802c0b <xYieldPending>
    1cf0:	e0 91 7c 2c 	lds	r30, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    1cf4:	f0 91 7d 2c 	lds	r31, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    1cf8:	03 8c       	ldd	r0, Z+27	; 0x1b
    1cfa:	f4 8d       	ldd	r31, Z+28	; 0x1c
    1cfc:	e0 2d       	mov	r30, r0
    1cfe:	80 81       	ld	r24, Z
    1d00:	91 81       	ldd	r25, Z+1	; 0x01
    1d02:	a2 81       	ldd	r26, Z+2	; 0x02
    1d04:	b3 81       	ldd	r27, Z+3	; 0x03
    1d06:	85 3a       	cpi	r24, 0xA5	; 165
    1d08:	95 4a       	sbci	r25, 0xA5	; 165
    1d0a:	a5 4a       	sbci	r26, 0xA5	; 165
    1d0c:	b5 4a       	sbci	r27, 0xA5	; 165
    1d0e:	d9 f4       	brne	.+54     	; 0x1d46 <vTaskSwitchContext+0x6a>
    1d10:	84 81       	ldd	r24, Z+4	; 0x04
    1d12:	95 81       	ldd	r25, Z+5	; 0x05
    1d14:	a6 81       	ldd	r26, Z+6	; 0x06
    1d16:	b7 81       	ldd	r27, Z+7	; 0x07
    1d18:	85 3a       	cpi	r24, 0xA5	; 165
    1d1a:	95 4a       	sbci	r25, 0xA5	; 165
    1d1c:	a5 4a       	sbci	r26, 0xA5	; 165
    1d1e:	b5 4a       	sbci	r27, 0xA5	; 165
    1d20:	91 f4       	brne	.+36     	; 0x1d46 <vTaskSwitchContext+0x6a>
    1d22:	80 85       	ldd	r24, Z+8	; 0x08
    1d24:	91 85       	ldd	r25, Z+9	; 0x09
    1d26:	a2 85       	ldd	r26, Z+10	; 0x0a
    1d28:	b3 85       	ldd	r27, Z+11	; 0x0b
    1d2a:	85 3a       	cpi	r24, 0xA5	; 165
    1d2c:	95 4a       	sbci	r25, 0xA5	; 165
    1d2e:	a5 4a       	sbci	r26, 0xA5	; 165
    1d30:	b5 4a       	sbci	r27, 0xA5	; 165
    1d32:	49 f4       	brne	.+18     	; 0x1d46 <vTaskSwitchContext+0x6a>
    1d34:	84 85       	ldd	r24, Z+12	; 0x0c
    1d36:	95 85       	ldd	r25, Z+13	; 0x0d
    1d38:	a6 85       	ldd	r26, Z+14	; 0x0e
    1d3a:	b7 85       	ldd	r27, Z+15	; 0x0f
    1d3c:	85 3a       	cpi	r24, 0xA5	; 165
    1d3e:	95 4a       	sbci	r25, 0xA5	; 165
    1d40:	a5 4a       	sbci	r26, 0xA5	; 165
    1d42:	b5 4a       	sbci	r27, 0xA5	; 165
    1d44:	61 f0       	breq	.+24     	; 0x1d5e <vTaskSwitchContext+0x82>
    1d46:	60 91 7c 2c 	lds	r22, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    1d4a:	70 91 7d 2c 	lds	r23, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    1d4e:	80 91 7c 2c 	lds	r24, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    1d52:	90 91 7d 2c 	lds	r25, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    1d56:	63 5e       	subi	r22, 0xE3	; 227
    1d58:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <vApplicationStackOverflowHook>
    1d5e:	80 91 0e 2c 	lds	r24, 0x2C0E	; 0x802c0e <uxTopReadyPriority>
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	9b e0       	ldi	r25, 0x0B	; 11
    1d68:	89 9f       	mul	r24, r25
    1d6a:	f0 01       	movw	r30, r0
    1d6c:	11 24       	eor	r1, r1
    1d6e:	e0 5b       	subi	r30, 0xB0	; 176
    1d70:	f3 4d       	sbci	r31, 0xD3	; 211
    1d72:	90 81       	ld	r25, Z
    1d74:	91 11       	cpse	r25, r1
    1d76:	0e c0       	rjmp	.+28     	; 0x1d94 <vTaskSwitchContext+0xb8>
    1d78:	4b e0       	ldi	r20, 0x0B	; 11
    1d7a:	81 50       	subi	r24, 0x01	; 1
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	42 9f       	mul	r20, r18
    1d82:	f0 01       	movw	r30, r0
    1d84:	43 9f       	mul	r20, r19
    1d86:	f0 0d       	add	r31, r0
    1d88:	11 24       	eor	r1, r1
    1d8a:	e0 5b       	subi	r30, 0xB0	; 176
    1d8c:	f3 4d       	sbci	r31, 0xD3	; 211
    1d8e:	90 81       	ld	r25, Z
    1d90:	99 23       	and	r25, r25
    1d92:	99 f3       	breq	.-26     	; 0x1d7a <vTaskSwitchContext+0x9e>
    1d94:	9b e0       	ldi	r25, 0x0B	; 11
    1d96:	92 9f       	mul	r25, r18
    1d98:	a0 01       	movw	r20, r0
    1d9a:	93 9f       	mul	r25, r19
    1d9c:	50 0d       	add	r21, r0
    1d9e:	11 24       	eor	r1, r1
    1da0:	da 01       	movw	r26, r20
    1da2:	a0 5b       	subi	r26, 0xB0	; 176
    1da4:	b3 4d       	sbci	r27, 0xD3	; 211
    1da6:	11 96       	adiw	r26, 0x01	; 1
    1da8:	ed 91       	ld	r30, X+
    1daa:	fc 91       	ld	r31, X
    1dac:	12 97       	sbiw	r26, 0x02	; 2
    1dae:	04 80       	ldd	r0, Z+4	; 0x04
    1db0:	f5 81       	ldd	r31, Z+5	; 0x05
    1db2:	e0 2d       	mov	r30, r0
    1db4:	11 96       	adiw	r26, 0x01	; 1
    1db6:	ed 93       	st	X+, r30
    1db8:	fc 93       	st	X, r31
    1dba:	12 97       	sbiw	r26, 0x02	; 2
    1dbc:	4d 5a       	subi	r20, 0xAD	; 173
    1dbe:	53 4d       	sbci	r21, 0xD3	; 211
    1dc0:	e4 17       	cp	r30, r20
    1dc2:	f5 07       	cpc	r31, r21
    1dc4:	29 f4       	brne	.+10     	; 0x1dd0 <vTaskSwitchContext+0xf4>
    1dc6:	44 81       	ldd	r20, Z+4	; 0x04
    1dc8:	55 81       	ldd	r21, Z+5	; 0x05
    1dca:	fd 01       	movw	r30, r26
    1dcc:	41 83       	std	Z+1, r20	; 0x01
    1dce:	52 83       	std	Z+2, r21	; 0x02
    1dd0:	9b e0       	ldi	r25, 0x0B	; 11
    1dd2:	92 9f       	mul	r25, r18
    1dd4:	f0 01       	movw	r30, r0
    1dd6:	93 9f       	mul	r25, r19
    1dd8:	f0 0d       	add	r31, r0
    1dda:	11 24       	eor	r1, r1
    1ddc:	e0 5b       	subi	r30, 0xB0	; 176
    1dde:	f3 4d       	sbci	r31, 0xD3	; 211
    1de0:	01 80       	ldd	r0, Z+1	; 0x01
    1de2:	f2 81       	ldd	r31, Z+2	; 0x02
    1de4:	e0 2d       	mov	r30, r0
    1de6:	20 85       	ldd	r18, Z+8	; 0x08
    1de8:	31 85       	ldd	r19, Z+9	; 0x09
    1dea:	20 93 7c 2c 	sts	0x2C7C, r18	; 0x802c7c <pxCurrentTCB>
    1dee:	30 93 7d 2c 	sts	0x2C7D, r19	; 0x802c7d <pxCurrentTCB+0x1>
    1df2:	80 93 0e 2c 	sts	0x2C0E, r24	; 0x802c0e <uxTopReadyPriority>
    1df6:	08 95       	ret

00001df8 <vTaskSuspend>:
    1df8:	0f 93       	push	r16
    1dfa:	1f 93       	push	r17
    1dfc:	cf 93       	push	r28
    1dfe:	df 93       	push	r29
    1e00:	ec 01       	movw	r28, r24
    1e02:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e06:	ff 93       	push	r31
    1e08:	f8 7f       	andi	r31, 0xF8	; 248
    1e0a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e0e:	89 2b       	or	r24, r25
    1e10:	21 f4       	brne	.+8      	; 0x1e1a <vTaskSuspend+0x22>
    1e12:	c0 91 7c 2c 	lds	r28, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    1e16:	d0 91 7d 2c 	lds	r29, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    1e1a:	8e 01       	movw	r16, r28
    1e1c:	0e 5f       	subi	r16, 0xFE	; 254
    1e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e20:	c8 01       	movw	r24, r16
    1e22:	0e 94 2c 05 	call	0xa58	; 0xa58 <uxListRemove>
    1e26:	88 8d       	ldd	r24, Y+24	; 0x18
    1e28:	99 8d       	ldd	r25, Y+25	; 0x19
    1e2a:	89 2b       	or	r24, r25
    1e2c:	21 f0       	breq	.+8      	; 0x1e36 <vTaskSuspend+0x3e>
    1e2e:	ce 01       	movw	r24, r28
    1e30:	0e 96       	adiw	r24, 0x0e	; 14
    1e32:	0e 94 2c 05 	call	0xa58	; 0xa58 <uxListRemove>
    1e36:	b8 01       	movw	r22, r16
    1e38:	84 e1       	ldi	r24, 0x14	; 20
    1e3a:	9c e2       	ldi	r25, 0x2C	; 44
    1e3c:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
    1e40:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e42:	81 30       	cpi	r24, 0x01	; 1
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <vTaskSuspend+0x50>
    1e46:	1b a6       	std	Y+43, r1	; 0x2b
    1e48:	ff 91       	pop	r31
    1e4a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e4e:	80 91 0d 2c 	lds	r24, 0x2C0D	; 0x802c0d <xSchedulerRunning>
    1e52:	88 23       	and	r24, r24
    1e54:	59 f0       	breq	.+22     	; 0x1e6c <vTaskSuspend+0x74>
    1e56:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e5a:	ff 93       	push	r31
    1e5c:	f8 7f       	andi	r31, 0xF8	; 248
    1e5e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e62:	0e 94 0b 0a 	call	0x1416	; 0x1416 <prvResetNextTaskUnblockTime>
    1e66:	ff 91       	pop	r31
    1e68:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e6c:	80 91 7c 2c 	lds	r24, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    1e70:	90 91 7d 2c 	lds	r25, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    1e74:	c8 17       	cp	r28, r24
    1e76:	d9 07       	cpc	r29, r25
    1e78:	a1 f4       	brne	.+40     	; 0x1ea2 <vTaskSuspend+0xaa>
    1e7a:	80 91 0d 2c 	lds	r24, 0x2C0D	; 0x802c0d <xSchedulerRunning>
    1e7e:	88 23       	and	r24, r24
    1e80:	19 f0       	breq	.+6      	; 0x1e88 <vTaskSuspend+0x90>
    1e82:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
    1e86:	0d c0       	rjmp	.+26     	; 0x1ea2 <vTaskSuspend+0xaa>
    1e88:	90 91 14 2c 	lds	r25, 0x2C14	; 0x802c14 <xSuspendedTaskList>
    1e8c:	80 91 13 2c 	lds	r24, 0x2C13	; 0x802c13 <uxCurrentNumberOfTasks>
    1e90:	98 13       	cpse	r25, r24
    1e92:	05 c0       	rjmp	.+10     	; 0x1e9e <vTaskSuspend+0xa6>
    1e94:	10 92 7c 2c 	sts	0x2C7C, r1	; 0x802c7c <pxCurrentTCB>
    1e98:	10 92 7d 2c 	sts	0x2C7D, r1	; 0x802c7d <pxCurrentTCB+0x1>
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <vTaskSuspend+0xaa>
    1e9e:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <vTaskSwitchContext>
    1ea2:	df 91       	pop	r29
    1ea4:	cf 91       	pop	r28
    1ea6:	1f 91       	pop	r17
    1ea8:	0f 91       	pop	r16
    1eaa:	08 95       	ret

00001eac <vTaskPlaceOnEventList>:
    1eac:	cf 92       	push	r12
    1eae:	df 92       	push	r13
    1eb0:	ef 92       	push	r14
    1eb2:	ff 92       	push	r15
    1eb4:	6a 01       	movw	r12, r20
    1eb6:	7b 01       	movw	r14, r22
    1eb8:	60 91 7c 2c 	lds	r22, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    1ebc:	70 91 7d 2c 	lds	r23, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    1ec0:	62 5f       	subi	r22, 0xF2	; 242
    1ec2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec4:	0e 94 ef 04 	call	0x9de	; 0x9de <vListInsert>
    1ec8:	41 e0       	ldi	r20, 0x01	; 1
    1eca:	c7 01       	movw	r24, r14
    1ecc:	b6 01       	movw	r22, r12
    1ece:	0e 94 35 0a 	call	0x146a	; 0x146a <prvAddCurrentTaskToDelayedList>
    1ed2:	ff 90       	pop	r15
    1ed4:	ef 90       	pop	r14
    1ed6:	df 90       	pop	r13
    1ed8:	cf 90       	pop	r12
    1eda:	08 95       	ret

00001edc <vTaskPlaceOnUnorderedEventList>:
    1edc:	cf 92       	push	r12
    1ede:	df 92       	push	r13
    1ee0:	ef 92       	push	r14
    1ee2:	ff 92       	push	r15
    1ee4:	0f 93       	push	r16
    1ee6:	1f 93       	push	r17
    1ee8:	68 01       	movw	r12, r16
    1eea:	79 01       	movw	r14, r18
    1eec:	e0 91 7c 2c 	lds	r30, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    1ef0:	f0 91 7d 2c 	lds	r31, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    1ef4:	70 68       	ori	r23, 0x80	; 128
    1ef6:	46 87       	std	Z+14, r20	; 0x0e
    1ef8:	57 87       	std	Z+15, r21	; 0x0f
    1efa:	60 8b       	std	Z+16, r22	; 0x10
    1efc:	71 8b       	std	Z+17, r23	; 0x11
    1efe:	60 91 7c 2c 	lds	r22, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    1f02:	70 91 7d 2c 	lds	r23, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    1f06:	62 5f       	subi	r22, 0xF2	; 242
    1f08:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0a:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
    1f0e:	41 e0       	ldi	r20, 0x01	; 1
    1f10:	c7 01       	movw	r24, r14
    1f12:	b6 01       	movw	r22, r12
    1f14:	0e 94 35 0a 	call	0x146a	; 0x146a <prvAddCurrentTaskToDelayedList>
    1f18:	1f 91       	pop	r17
    1f1a:	0f 91       	pop	r16
    1f1c:	ff 90       	pop	r15
    1f1e:	ef 90       	pop	r14
    1f20:	df 90       	pop	r13
    1f22:	cf 90       	pop	r12
    1f24:	08 95       	ret

00001f26 <vTaskPlaceOnEventListRestricted>:
    1f26:	cf 92       	push	r12
    1f28:	df 92       	push	r13
    1f2a:	ef 92       	push	r14
    1f2c:	ff 92       	push	r15
    1f2e:	cf 93       	push	r28
    1f30:	6a 01       	movw	r12, r20
    1f32:	7b 01       	movw	r14, r22
    1f34:	c2 2f       	mov	r28, r18
    1f36:	60 91 7c 2c 	lds	r22, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    1f3a:	70 91 7d 2c 	lds	r23, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    1f3e:	62 5f       	subi	r22, 0xF2	; 242
    1f40:	7f 4f       	sbci	r23, 0xFF	; 255
    1f42:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
    1f46:	cc 23       	and	r28, r28
    1f48:	21 f0       	breq	.+8      	; 0x1f52 <vTaskPlaceOnEventListRestricted+0x2c>
    1f4a:	cc 24       	eor	r12, r12
    1f4c:	ca 94       	dec	r12
    1f4e:	dc 2c       	mov	r13, r12
    1f50:	76 01       	movw	r14, r12
    1f52:	4c 2f       	mov	r20, r28
    1f54:	c7 01       	movw	r24, r14
    1f56:	b6 01       	movw	r22, r12
    1f58:	0e 94 35 0a 	call	0x146a	; 0x146a <prvAddCurrentTaskToDelayedList>
    1f5c:	cf 91       	pop	r28
    1f5e:	ff 90       	pop	r15
    1f60:	ef 90       	pop	r14
    1f62:	df 90       	pop	r13
    1f64:	cf 90       	pop	r12
    1f66:	08 95       	ret

00001f68 <xTaskRemoveFromEventList>:
    1f68:	0f 93       	push	r16
    1f6a:	1f 93       	push	r17
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	dc 01       	movw	r26, r24
    1f72:	17 96       	adiw	r26, 0x07	; 7
    1f74:	ed 91       	ld	r30, X+
    1f76:	fc 91       	ld	r31, X
    1f78:	18 97       	sbiw	r26, 0x08	; 8
    1f7a:	c0 85       	ldd	r28, Z+8	; 0x08
    1f7c:	d1 85       	ldd	r29, Z+9	; 0x09
    1f7e:	8e 01       	movw	r16, r28
    1f80:	02 5f       	subi	r16, 0xF2	; 242
    1f82:	1f 4f       	sbci	r17, 0xFF	; 255
    1f84:	c8 01       	movw	r24, r16
    1f86:	0e 94 2c 05 	call	0xa58	; 0xa58 <uxListRemove>
    1f8a:	80 91 02 2c 	lds	r24, 0x2C02	; 0x802c02 <uxSchedulerSuspended>
    1f8e:	81 11       	cpse	r24, r1
    1f90:	16 c0       	rjmp	.+44     	; 0x1fbe <xTaskRemoveFromEventList+0x56>
    1f92:	0c 50       	subi	r16, 0x0C	; 12
    1f94:	11 09       	sbc	r17, r1
    1f96:	c8 01       	movw	r24, r16
    1f98:	0e 94 2c 05 	call	0xa58	; 0xa58 <uxListRemove>
    1f9c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f9e:	90 91 0e 2c 	lds	r25, 0x2C0E	; 0x802c0e <uxTopReadyPriority>
    1fa2:	98 17       	cp	r25, r24
    1fa4:	10 f4       	brcc	.+4      	; 0x1faa <xTaskRemoveFromEventList+0x42>
    1fa6:	80 93 0e 2c 	sts	0x2C0E, r24	; 0x802c0e <uxTopReadyPriority>
    1faa:	bb e0       	ldi	r27, 0x0B	; 11
    1fac:	8b 9f       	mul	r24, r27
    1fae:	c0 01       	movw	r24, r0
    1fb0:	11 24       	eor	r1, r1
    1fb2:	b8 01       	movw	r22, r16
    1fb4:	80 5b       	subi	r24, 0xB0	; 176
    1fb6:	93 4d       	sbci	r25, 0xD3	; 211
    1fb8:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
    1fbc:	05 c0       	rjmp	.+10     	; 0x1fc8 <xTaskRemoveFromEventList+0x60>
    1fbe:	b8 01       	movw	r22, r16
    1fc0:	8b e2       	ldi	r24, 0x2B	; 43
    1fc2:	9c e2       	ldi	r25, 0x2C	; 44
    1fc4:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
    1fc8:	e0 91 7c 2c 	lds	r30, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    1fcc:	f0 91 7d 2c 	lds	r31, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    1fd0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1fd2:	82 8d       	ldd	r24, Z+26	; 0x1a
    1fd4:	89 17       	cp	r24, r25
    1fd6:	20 f4       	brcc	.+8      	; 0x1fe0 <xTaskRemoveFromEventList+0x78>
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	80 93 0b 2c 	sts	0x2C0B, r24	; 0x802c0b <xYieldPending>
    1fde:	01 c0       	rjmp	.+2      	; 0x1fe2 <xTaskRemoveFromEventList+0x7a>
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	1f 91       	pop	r17
    1fe8:	0f 91       	pop	r16
    1fea:	08 95       	ret

00001fec <vTaskRemoveFromUnorderedEventList>:
    1fec:	0f 93       	push	r16
    1fee:	1f 93       	push	r17
    1ff0:	cf 93       	push	r28
    1ff2:	df 93       	push	r29
    1ff4:	70 68       	ori	r23, 0x80	; 128
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	40 83       	st	Z, r20
    1ffa:	51 83       	std	Z+1, r21	; 0x01
    1ffc:	62 83       	std	Z+2, r22	; 0x02
    1ffe:	73 83       	std	Z+3, r23	; 0x03
    2000:	c0 85       	ldd	r28, Z+8	; 0x08
    2002:	d1 85       	ldd	r29, Z+9	; 0x09
    2004:	0e 94 2c 05 	call	0xa58	; 0xa58 <uxListRemove>
    2008:	8e 01       	movw	r16, r28
    200a:	0e 5f       	subi	r16, 0xFE	; 254
    200c:	1f 4f       	sbci	r17, 0xFF	; 255
    200e:	c8 01       	movw	r24, r16
    2010:	0e 94 2c 05 	call	0xa58	; 0xa58 <uxListRemove>
    2014:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2016:	90 91 0e 2c 	lds	r25, 0x2C0E	; 0x802c0e <uxTopReadyPriority>
    201a:	98 17       	cp	r25, r24
    201c:	10 f4       	brcc	.+4      	; 0x2022 <vTaskRemoveFromUnorderedEventList+0x36>
    201e:	80 93 0e 2c 	sts	0x2C0E, r24	; 0x802c0e <uxTopReadyPriority>
    2022:	fb e0       	ldi	r31, 0x0B	; 11
    2024:	8f 9f       	mul	r24, r31
    2026:	c0 01       	movw	r24, r0
    2028:	11 24       	eor	r1, r1
    202a:	b8 01       	movw	r22, r16
    202c:	80 5b       	subi	r24, 0xB0	; 176
    202e:	93 4d       	sbci	r25, 0xD3	; 211
    2030:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
    2034:	e0 91 7c 2c 	lds	r30, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    2038:	f0 91 7d 2c 	lds	r31, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    203c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    203e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2040:	89 17       	cp	r24, r25
    2042:	18 f4       	brcc	.+6      	; 0x204a <vTaskRemoveFromUnorderedEventList+0x5e>
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	80 93 0b 2c 	sts	0x2C0B, r24	; 0x802c0b <xYieldPending>
    204a:	df 91       	pop	r29
    204c:	cf 91       	pop	r28
    204e:	1f 91       	pop	r17
    2050:	0f 91       	pop	r16
    2052:	08 95       	ret

00002054 <vTaskInternalSetTimeOutState>:
    2054:	20 91 0a 2c 	lds	r18, 0x2C0A	; 0x802c0a <xNumOfOverflows>
    2058:	fc 01       	movw	r30, r24
    205a:	20 83       	st	Z, r18
    205c:	40 91 0f 2c 	lds	r20, 0x2C0F	; 0x802c0f <xTickCount>
    2060:	50 91 10 2c 	lds	r21, 0x2C10	; 0x802c10 <xTickCount+0x1>
    2064:	60 91 11 2c 	lds	r22, 0x2C11	; 0x802c11 <xTickCount+0x2>
    2068:	70 91 12 2c 	lds	r23, 0x2C12	; 0x802c12 <xTickCount+0x3>
    206c:	41 83       	std	Z+1, r20	; 0x01
    206e:	52 83       	std	Z+2, r21	; 0x02
    2070:	63 83       	std	Z+3, r22	; 0x03
    2072:	74 83       	std	Z+4, r23	; 0x04
    2074:	08 95       	ret

00002076 <xTaskCheckForTimeOut>:
    2076:	cf 92       	push	r12
    2078:	df 92       	push	r13
    207a:	ef 92       	push	r14
    207c:	ff 92       	push	r15
    207e:	0f 93       	push	r16
    2080:	1f 93       	push	r17
    2082:	cf 93       	push	r28
    2084:	df 93       	push	r29
    2086:	db 01       	movw	r26, r22
    2088:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    208c:	ff 93       	push	r31
    208e:	f8 7f       	andi	r31, 0xF8	; 248
    2090:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2094:	40 91 0f 2c 	lds	r20, 0x2C0F	; 0x802c0f <xTickCount>
    2098:	50 91 10 2c 	lds	r21, 0x2C10	; 0x802c10 <xTickCount+0x1>
    209c:	60 91 11 2c 	lds	r22, 0x2C11	; 0x802c11 <xTickCount+0x2>
    20a0:	70 91 12 2c 	lds	r23, 0x2C12	; 0x802c12 <xTickCount+0x3>
    20a4:	0d 91       	ld	r16, X+
    20a6:	1d 91       	ld	r17, X+
    20a8:	2d 91       	ld	r18, X+
    20aa:	3c 91       	ld	r19, X
    20ac:	13 97       	sbiw	r26, 0x03	; 3
    20ae:	0f 3f       	cpi	r16, 0xFF	; 255
    20b0:	cf ef       	ldi	r28, 0xFF	; 255
    20b2:	1c 07       	cpc	r17, r28
    20b4:	2c 07       	cpc	r18, r28
    20b6:	3c 07       	cpc	r19, r28
    20b8:	69 f1       	breq	.+90     	; 0x2114 <xTaskCheckForTimeOut+0x9e>
    20ba:	fc 01       	movw	r30, r24
    20bc:	c1 80       	ldd	r12, Z+1	; 0x01
    20be:	d2 80       	ldd	r13, Z+2	; 0x02
    20c0:	e3 80       	ldd	r14, Z+3	; 0x03
    20c2:	f4 80       	ldd	r15, Z+4	; 0x04
    20c4:	e0 91 0a 2c 	lds	r30, 0x2C0A	; 0x802c0a <xNumOfOverflows>
    20c8:	ec 01       	movw	r28, r24
    20ca:	f8 81       	ld	r31, Y
    20cc:	fe 17       	cp	r31, r30
    20ce:	29 f0       	breq	.+10     	; 0x20da <xTaskCheckForTimeOut+0x64>
    20d0:	4c 15       	cp	r20, r12
    20d2:	5d 05       	cpc	r21, r13
    20d4:	6e 05       	cpc	r22, r14
    20d6:	7f 05       	cpc	r23, r15
    20d8:	f8 f4       	brcc	.+62     	; 0x2118 <xTaskCheckForTimeOut+0xa2>
    20da:	4c 19       	sub	r20, r12
    20dc:	5d 09       	sbc	r21, r13
    20de:	6e 09       	sbc	r22, r14
    20e0:	7f 09       	sbc	r23, r15
    20e2:	40 17       	cp	r20, r16
    20e4:	51 07       	cpc	r21, r17
    20e6:	62 07       	cpc	r22, r18
    20e8:	73 07       	cpc	r23, r19
    20ea:	68 f4       	brcc	.+26     	; 0x2106 <xTaskCheckForTimeOut+0x90>
    20ec:	fd 01       	movw	r30, r26
    20ee:	04 1b       	sub	r16, r20
    20f0:	15 0b       	sbc	r17, r21
    20f2:	26 0b       	sbc	r18, r22
    20f4:	37 0b       	sbc	r19, r23
    20f6:	00 83       	st	Z, r16
    20f8:	11 83       	std	Z+1, r17	; 0x01
    20fa:	22 83       	std	Z+2, r18	; 0x02
    20fc:	33 83       	std	Z+3, r19	; 0x03
    20fe:	0e 94 2a 10 	call	0x2054	; 0x2054 <vTaskInternalSetTimeOutState>
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	0a c0       	rjmp	.+20     	; 0x211a <xTaskCheckForTimeOut+0xa4>
    2106:	1d 92       	st	X+, r1
    2108:	1d 92       	st	X+, r1
    210a:	1d 92       	st	X+, r1
    210c:	1c 92       	st	X, r1
    210e:	13 97       	sbiw	r26, 0x03	; 3
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	03 c0       	rjmp	.+6      	; 0x211a <xTaskCheckForTimeOut+0xa4>
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	01 c0       	rjmp	.+2      	; 0x211a <xTaskCheckForTimeOut+0xa4>
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	ff 91       	pop	r31
    211c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2120:	df 91       	pop	r29
    2122:	cf 91       	pop	r28
    2124:	1f 91       	pop	r17
    2126:	0f 91       	pop	r16
    2128:	ff 90       	pop	r15
    212a:	ef 90       	pop	r14
    212c:	df 90       	pop	r13
    212e:	cf 90       	pop	r12
    2130:	08 95       	ret

00002132 <vTaskMissedYield>:
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	80 93 0b 2c 	sts	0x2C0B, r24	; 0x802c0b <xYieldPending>
    2138:	08 95       	ret

0000213a <xTaskGetSchedulerState>:
    213a:	80 91 0d 2c 	lds	r24, 0x2C0D	; 0x802c0d <xSchedulerRunning>
    213e:	88 23       	and	r24, r24
    2140:	31 f0       	breq	.+12     	; 0x214e <xTaskGetSchedulerState+0x14>
    2142:	80 91 02 2c 	lds	r24, 0x2C02	; 0x802c02 <uxSchedulerSuspended>
    2146:	88 23       	and	r24, r24
    2148:	21 f0       	breq	.+8      	; 0x2152 <xTaskGetSchedulerState+0x18>
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	08 95       	ret
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	08 95       	ret
    2152:	82 e0       	ldi	r24, 0x02	; 2
    2154:	08 95       	ret

00002156 <uxTaskResetEventItemValue>:
    2156:	cf 92       	push	r12
    2158:	df 92       	push	r13
    215a:	ef 92       	push	r14
    215c:	ff 92       	push	r15
    215e:	e0 91 7c 2c 	lds	r30, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    2162:	f0 91 7d 2c 	lds	r31, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    2166:	66 85       	ldd	r22, Z+14	; 0x0e
    2168:	77 85       	ldd	r23, Z+15	; 0x0f
    216a:	80 89       	ldd	r24, Z+16	; 0x10
    216c:	91 89       	ldd	r25, Z+17	; 0x11
    216e:	e0 91 7c 2c 	lds	r30, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    2172:	f0 91 7d 2c 	lds	r31, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    2176:	a0 91 7c 2c 	lds	r26, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    217a:	b0 91 7d 2c 	lds	r27, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    217e:	5a 96       	adiw	r26, 0x1a	; 26
    2180:	2c 91       	ld	r18, X
    2182:	c1 2c       	mov	r12, r1
    2184:	d1 2c       	mov	r13, r1
    2186:	76 01       	movw	r14, r12
    2188:	68 94       	set
    218a:	c2 f8       	bld	r12, 2
    218c:	c2 1a       	sub	r12, r18
    218e:	d1 08       	sbc	r13, r1
    2190:	e1 08       	sbc	r14, r1
    2192:	f1 08       	sbc	r15, r1
    2194:	c6 86       	std	Z+14, r12	; 0x0e
    2196:	d7 86       	std	Z+15, r13	; 0x0f
    2198:	e0 8a       	std	Z+16, r14	; 0x10
    219a:	f1 8a       	std	Z+17, r15	; 0x11
    219c:	ff 90       	pop	r15
    219e:	ef 90       	pop	r14
    21a0:	df 90       	pop	r13
    21a2:	cf 90       	pop	r12
    21a4:	08 95       	ret

000021a6 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    21a6:	4f 92       	push	r4
    21a8:	5f 92       	push	r5
    21aa:	6f 92       	push	r6
    21ac:	7f 92       	push	r7
    21ae:	8f 92       	push	r8
    21b0:	9f 92       	push	r9
    21b2:	af 92       	push	r10
    21b4:	bf 92       	push	r11
    21b6:	cf 92       	push	r12
    21b8:	df 92       	push	r13
    21ba:	ef 92       	push	r14
    21bc:	ff 92       	push	r15
    21be:	0f 93       	push	r16
    21c0:	1f 93       	push	r17
    21c2:	49 01       	movw	r8, r18
    21c4:	5a 01       	movw	r10, r20
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    21c6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    21ca:	ff 93       	push	r31
    21cc:	f8 7f       	andi	r31, 0xF8	; 248
    21ce:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    21d2:	e0 91 7c 2c 	lds	r30, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    21d6:	f0 91 7d 2c 	lds	r31, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    21da:	23 a5       	ldd	r18, Z+43	; 0x2b
    21dc:	22 30       	cpi	r18, 0x02	; 2
    21de:	41 f1       	breq	.+80     	; 0x2230 <xTaskNotifyWait+0x8a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    21e0:	e0 91 7c 2c 	lds	r30, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    21e4:	f0 91 7d 2c 	lds	r31, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    21e8:	47 a0       	ldd	r4, Z+39	; 0x27
    21ea:	50 a4       	ldd	r5, Z+40	; 0x28
    21ec:	61 a4       	ldd	r6, Z+41	; 0x29
    21ee:	72 a4       	ldd	r7, Z+42	; 0x2a
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	80 95       	com	r24
    21f6:	90 95       	com	r25
    21f8:	a0 95       	com	r26
    21fa:	b0 95       	com	r27
    21fc:	84 21       	and	r24, r4
    21fe:	95 21       	and	r25, r5
    2200:	a6 21       	and	r26, r6
    2202:	b7 21       	and	r27, r7
    2204:	87 a3       	std	Z+39, r24	; 0x27
    2206:	90 a7       	std	Z+40, r25	; 0x28
    2208:	a1 a7       	std	Z+41, r26	; 0x29
    220a:	b2 a7       	std	Z+42, r27	; 0x2a

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    220c:	e0 91 7c 2c 	lds	r30, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    2210:	f0 91 7d 2c 	lds	r31, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	83 a7       	std	Z+43, r24	; 0x2b

				if( xTicksToWait > ( TickType_t ) 0 )
    2218:	c1 14       	cp	r12, r1
    221a:	d1 04       	cpc	r13, r1
    221c:	e1 04       	cpc	r14, r1
    221e:	f1 04       	cpc	r15, r1
    2220:	39 f0       	breq	.+14     	; 0x2230 <xTaskNotifyWait+0x8a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    2222:	41 e0       	ldi	r20, 0x01	; 1
    2224:	c7 01       	movw	r24, r14
    2226:	b6 01       	movw	r22, r12
    2228:	0e 94 35 0a 	call	0x146a	; 0x146a <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    222c:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    2230:	ff 91       	pop	r31
    2232:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>

		taskENTER_CRITICAL();
    2236:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    223a:	ff 93       	push	r31
    223c:	f8 7f       	andi	r31, 0xF8	; 248
    223e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    2242:	01 15       	cp	r16, r1
    2244:	11 05       	cpc	r17, r1
    2246:	69 f0       	breq	.+26     	; 0x2262 <xTaskNotifyWait+0xbc>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    2248:	e0 91 7c 2c 	lds	r30, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    224c:	f0 91 7d 2c 	lds	r31, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    2250:	87 a1       	ldd	r24, Z+39	; 0x27
    2252:	90 a5       	ldd	r25, Z+40	; 0x28
    2254:	a1 a5       	ldd	r26, Z+41	; 0x29
    2256:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2258:	f8 01       	movw	r30, r16
    225a:	80 83       	st	Z, r24
    225c:	91 83       	std	Z+1, r25	; 0x01
    225e:	a2 83       	std	Z+2, r26	; 0x02
    2260:	b3 83       	std	Z+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    2262:	e0 91 7c 2c 	lds	r30, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    2266:	f0 91 7d 2c 	lds	r31, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    226a:	83 a5       	ldd	r24, Z+43	; 0x2b
    226c:	82 30       	cpi	r24, 0x02	; 2
    226e:	b1 f4       	brne	.+44     	; 0x229c <xTaskNotifyWait+0xf6>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    2270:	e0 91 7c 2c 	lds	r30, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    2274:	f0 91 7d 2c 	lds	r31, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    2278:	87 a1       	ldd	r24, Z+39	; 0x27
    227a:	90 a5       	ldd	r25, Z+40	; 0x28
    227c:	a1 a5       	ldd	r26, Z+41	; 0x29
    227e:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2280:	80 94       	com	r8
    2282:	90 94       	com	r9
    2284:	a0 94       	com	r10
    2286:	b0 94       	com	r11
    2288:	88 22       	and	r8, r24
    228a:	99 22       	and	r9, r25
    228c:	aa 22       	and	r10, r26
    228e:	bb 22       	and	r11, r27
    2290:	87 a2       	std	Z+39, r8	; 0x27
    2292:	90 a6       	std	Z+40, r9	; 0x28
    2294:	a1 a6       	std	Z+41, r10	; 0x29
    2296:	b2 a6       	std	Z+42, r11	; 0x2a
				xReturn = pdTRUE;
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	01 c0       	rjmp	.+2      	; 0x229e <xTaskNotifyWait+0xf8>
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    229c:	80 e0       	ldi	r24, 0x00	; 0
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
				xReturn = pdTRUE;
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    229e:	e0 91 7c 2c 	lds	r30, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    22a2:	f0 91 7d 2c 	lds	r31, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    22a6:	13 a6       	std	Z+43, r1	; 0x2b
		}
		taskEXIT_CRITICAL();
    22a8:	ff 91       	pop	r31
    22aa:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>

		return xReturn;
	}
    22ae:	1f 91       	pop	r17
    22b0:	0f 91       	pop	r16
    22b2:	ff 90       	pop	r15
    22b4:	ef 90       	pop	r14
    22b6:	df 90       	pop	r13
    22b8:	cf 90       	pop	r12
    22ba:	bf 90       	pop	r11
    22bc:	af 90       	pop	r10
    22be:	9f 90       	pop	r9
    22c0:	8f 90       	pop	r8
    22c2:	7f 90       	pop	r7
    22c4:	6f 90       	pop	r6
    22c6:	5f 90       	pop	r5
    22c8:	4f 90       	pop	r4
    22ca:	08 95       	ret

000022cc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    22cc:	cf 92       	push	r12
    22ce:	df 92       	push	r13
    22d0:	ef 92       	push	r14
    22d2:	ff 92       	push	r15
    22d4:	0f 93       	push	r16
    22d6:	1f 93       	push	r17
    22d8:	cf 93       	push	r28
    22da:	df 93       	push	r29
    22dc:	dc 01       	movw	r26, r24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
    22de:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    22e2:	ff 93       	push	r31
    22e4:	f8 7f       	andi	r31, 0xF8	; 248
    22e6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		{
			if( pulPreviousNotificationValue != NULL )
    22ea:	01 15       	cp	r16, r1
    22ec:	11 05       	cpc	r17, r1
    22ee:	59 f0       	breq	.+22     	; 0x2306 <xTaskGenericNotify+0x3a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    22f0:	97 96       	adiw	r26, 0x27	; 39
    22f2:	cd 90       	ld	r12, X+
    22f4:	dd 90       	ld	r13, X+
    22f6:	ed 90       	ld	r14, X+
    22f8:	fc 90       	ld	r15, X
    22fa:	9a 97       	sbiw	r26, 0x2a	; 42
    22fc:	f8 01       	movw	r30, r16
    22fe:	c0 82       	st	Z, r12
    2300:	d1 82       	std	Z+1, r13	; 0x01
    2302:	e2 82       	std	Z+2, r14	; 0x02
    2304:	f3 82       	std	Z+3, r15	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    2306:	9b 96       	adiw	r26, 0x2b	; 43
    2308:	8c 91       	ld	r24, X
    230a:	9b 97       	sbiw	r26, 0x2b	; 43

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    230c:	92 e0       	ldi	r25, 0x02	; 2
    230e:	9b 96       	adiw	r26, 0x2b	; 43
    2310:	9c 93       	st	X, r25
    2312:	9b 97       	sbiw	r26, 0x2b	; 43

			switch( eAction )
    2314:	22 30       	cpi	r18, 0x02	; 2
    2316:	d1 f0       	breq	.+52     	; 0x234c <xTaskGenericNotify+0x80>
    2318:	18 f4       	brcc	.+6      	; 0x2320 <xTaskGenericNotify+0x54>
    231a:	21 30       	cpi	r18, 0x01	; 1
    231c:	31 f0       	breq	.+12     	; 0x232a <xTaskGenericNotify+0x5e>
    231e:	36 c0       	rjmp	.+108    	; 0x238c <xTaskGenericNotify+0xc0>
    2320:	23 30       	cpi	r18, 0x03	; 3
    2322:	29 f1       	breq	.+74     	; 0x236e <xTaskGenericNotify+0xa2>
    2324:	24 30       	cpi	r18, 0x04	; 4
    2326:	51 f1       	breq	.+84     	; 0x237c <xTaskGenericNotify+0xb0>
    2328:	31 c0       	rjmp	.+98     	; 0x238c <xTaskGenericNotify+0xc0>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    232a:	97 96       	adiw	r26, 0x27	; 39
    232c:	0d 91       	ld	r16, X+
    232e:	1d 91       	ld	r17, X+
    2330:	2d 91       	ld	r18, X+
    2332:	3c 91       	ld	r19, X
    2334:	9a 97       	sbiw	r26, 0x2a	; 42
    2336:	40 2b       	or	r20, r16
    2338:	51 2b       	or	r21, r17
    233a:	62 2b       	or	r22, r18
    233c:	73 2b       	or	r23, r19
    233e:	97 96       	adiw	r26, 0x27	; 39
    2340:	4d 93       	st	X+, r20
    2342:	5d 93       	st	X+, r21
    2344:	6d 93       	st	X+, r22
    2346:	7c 93       	st	X, r23
    2348:	9a 97       	sbiw	r26, 0x2a	; 42
					break;
    234a:	20 c0       	rjmp	.+64     	; 0x238c <xTaskGenericNotify+0xc0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    234c:	97 96       	adiw	r26, 0x27	; 39
    234e:	4d 91       	ld	r20, X+
    2350:	5d 91       	ld	r21, X+
    2352:	6d 91       	ld	r22, X+
    2354:	7c 91       	ld	r23, X
    2356:	9a 97       	sbiw	r26, 0x2a	; 42
    2358:	4f 5f       	subi	r20, 0xFF	; 255
    235a:	5f 4f       	sbci	r21, 0xFF	; 255
    235c:	6f 4f       	sbci	r22, 0xFF	; 255
    235e:	7f 4f       	sbci	r23, 0xFF	; 255
    2360:	97 96       	adiw	r26, 0x27	; 39
    2362:	4d 93       	st	X+, r20
    2364:	5d 93       	st	X+, r21
    2366:	6d 93       	st	X+, r22
    2368:	7c 93       	st	X, r23
    236a:	9a 97       	sbiw	r26, 0x2a	; 42
					break;
    236c:	0f c0       	rjmp	.+30     	; 0x238c <xTaskGenericNotify+0xc0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    236e:	97 96       	adiw	r26, 0x27	; 39
    2370:	4d 93       	st	X+, r20
    2372:	5d 93       	st	X+, r21
    2374:	6d 93       	st	X+, r22
    2376:	7c 93       	st	X, r23
    2378:	9a 97       	sbiw	r26, 0x2a	; 42
					break;
    237a:	08 c0       	rjmp	.+16     	; 0x238c <xTaskGenericNotify+0xc0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    237c:	82 30       	cpi	r24, 0x02	; 2
    237e:	59 f1       	breq	.+86     	; 0x23d6 <xTaskGenericNotify+0x10a>
					{
						pxTCB->ulNotifiedValue = ulValue;
    2380:	97 96       	adiw	r26, 0x27	; 39
    2382:	4d 93       	st	X+, r20
    2384:	5d 93       	st	X+, r21
    2386:	6d 93       	st	X+, r22
    2388:	7c 93       	st	X, r23
    238a:	9a 97       	sbiw	r26, 0x2a	; 42

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    238c:	81 30       	cpi	r24, 0x01	; 1
    238e:	29 f5       	brne	.+74     	; 0x23da <xTaskGenericNotify+0x10e>
    2390:	ed 01       	movw	r28, r26
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2392:	8d 01       	movw	r16, r26
    2394:	0e 5f       	subi	r16, 0xFE	; 254
    2396:	1f 4f       	sbci	r17, 0xFF	; 255
    2398:	c8 01       	movw	r24, r16
    239a:	0e 94 2c 05 	call	0xa58	; 0xa58 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    239e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23a0:	90 91 0e 2c 	lds	r25, 0x2C0E	; 0x802c0e <uxTopReadyPriority>
    23a4:	98 17       	cp	r25, r24
    23a6:	10 f4       	brcc	.+4      	; 0x23ac <xTaskGenericNotify+0xe0>
    23a8:	80 93 0e 2c 	sts	0x2C0E, r24	; 0x802c0e <uxTopReadyPriority>
    23ac:	fb e0       	ldi	r31, 0x0B	; 11
    23ae:	8f 9f       	mul	r24, r31
    23b0:	c0 01       	movw	r24, r0
    23b2:	11 24       	eor	r1, r1
    23b4:	b8 01       	movw	r22, r16
    23b6:	80 5b       	subi	r24, 0xB0	; 176
    23b8:	93 4d       	sbci	r25, 0xD3	; 211
    23ba:	0e 94 ce 04 	call	0x99c	; 0x99c <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    23be:	e0 91 7c 2c 	lds	r30, 0x2C7C	; 0x802c7c <pxCurrentTCB>
    23c2:	f0 91 7d 2c 	lds	r31, 0x2C7D	; 0x802c7d <pxCurrentTCB+0x1>
    23c6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    23c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    23ca:	89 17       	cp	r24, r25
    23cc:	40 f4       	brcc	.+16     	; 0x23de <xTaskGenericNotify+0x112>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    23ce:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	05 c0       	rjmp	.+10     	; 0x23e0 <xTaskGenericNotify+0x114>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	03 c0       	rjmp	.+6      	; 0x23e0 <xTaskGenericNotify+0x114>
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	01 c0       	rjmp	.+2      	; 0x23e0 <xTaskGenericNotify+0x114>
    23de:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    23e0:	ff 91       	pop	r31
    23e2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>

		return xReturn;
	}
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	1f 91       	pop	r17
    23ec:	0f 91       	pop	r16
    23ee:	ff 90       	pop	r15
    23f0:	ef 90       	pop	r14
    23f2:	df 90       	pop	r13
    23f4:	cf 90       	pop	r12
    23f6:	08 95       	ret

000023f8 <prvInsertTimerInActiveList>:

	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
    23f8:	cf 92       	push	r12
    23fa:	df 92       	push	r13
    23fc:	ef 92       	push	r14
    23fe:	ff 92       	push	r15
    2400:	0f 93       	push	r16
    2402:	1f 93       	push	r17
    2404:	fc 01       	movw	r30, r24
    2406:	42 83       	std	Z+2, r20	; 0x02
    2408:	53 83       	std	Z+3, r21	; 0x03
    240a:	64 83       	std	Z+4, r22	; 0x04
    240c:	75 83       	std	Z+5, r23	; 0x05
    240e:	82 87       	std	Z+10, r24	; 0x0a
    2410:	93 87       	std	Z+11, r25	; 0x0b
    2412:	04 17       	cp	r16, r20
    2414:	15 07       	cpc	r17, r21
    2416:	26 07       	cpc	r18, r22
    2418:	37 07       	cpc	r19, r23
    241a:	c0 f0       	brcs	.+48     	; 0x244c <prvInsertTimerInActiveList+0x54>
    241c:	0c 19       	sub	r16, r12
    241e:	1d 09       	sbc	r17, r13
    2420:	2e 09       	sbc	r18, r14
    2422:	3f 09       	sbc	r19, r15
    2424:	86 85       	ldd	r24, Z+14	; 0x0e
    2426:	97 85       	ldd	r25, Z+15	; 0x0f
    2428:	a0 89       	ldd	r26, Z+16	; 0x10
    242a:	b1 89       	ldd	r27, Z+17	; 0x11
    242c:	08 17       	cp	r16, r24
    242e:	19 07       	cpc	r17, r25
    2430:	2a 07       	cpc	r18, r26
    2432:	3b 07       	cpc	r19, r27
    2434:	00 f5       	brcc	.+64     	; 0x2476 <prvInsertTimerInActiveList+0x7e>
    2436:	bf 01       	movw	r22, r30
    2438:	6e 5f       	subi	r22, 0xFE	; 254
    243a:	7f 4f       	sbci	r23, 0xFF	; 255
    243c:	80 91 86 2c 	lds	r24, 0x2C86	; 0x802c86 <pxOverflowTimerList>
    2440:	90 91 87 2c 	lds	r25, 0x2C87	; 0x802c87 <pxOverflowTimerList+0x1>
    2444:	0e 94 ef 04 	call	0x9de	; 0x9de <vListInsert>
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	18 c0       	rjmp	.+48     	; 0x247c <prvInsertTimerInActiveList+0x84>
    244c:	0c 15       	cp	r16, r12
    244e:	1d 05       	cpc	r17, r13
    2450:	2e 05       	cpc	r18, r14
    2452:	3f 05       	cpc	r19, r15
    2454:	28 f4       	brcc	.+10     	; 0x2460 <prvInsertTimerInActiveList+0x68>
    2456:	4c 15       	cp	r20, r12
    2458:	5d 05       	cpc	r21, r13
    245a:	6e 05       	cpc	r22, r14
    245c:	7f 05       	cpc	r23, r15
    245e:	68 f4       	brcc	.+26     	; 0x247a <prvInsertTimerInActiveList+0x82>
    2460:	bf 01       	movw	r22, r30
    2462:	6e 5f       	subi	r22, 0xFE	; 254
    2464:	7f 4f       	sbci	r23, 0xFF	; 255
    2466:	80 91 88 2c 	lds	r24, 0x2C88	; 0x802c88 <pxCurrentTimerList>
    246a:	90 91 89 2c 	lds	r25, 0x2C89	; 0x802c89 <pxCurrentTimerList+0x1>
    246e:	0e 94 ef 04 	call	0x9de	; 0x9de <vListInsert>
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	03 c0       	rjmp	.+6      	; 0x247c <prvInsertTimerInActiveList+0x84>
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	01 c0       	rjmp	.+2      	; 0x247c <prvInsertTimerInActiveList+0x84>
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	1f 91       	pop	r17
    247e:	0f 91       	pop	r16
    2480:	ff 90       	pop	r15
    2482:	ef 90       	pop	r14
    2484:	df 90       	pop	r13
    2486:	cf 90       	pop	r12
    2488:	08 95       	ret

0000248a <prvCheckForValidListAndQueue>:
    248a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    248e:	ff 93       	push	r31
    2490:	f8 7f       	andi	r31, 0xF8	; 248
    2492:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2496:	80 91 84 2c 	lds	r24, 0x2C84	; 0x802c84 <xTimerQueue>
    249a:	90 91 85 2c 	lds	r25, 0x2C85	; 0x802c85 <xTimerQueue+0x1>
    249e:	89 2b       	or	r24, r25
    24a0:	e9 f4       	brne	.+58     	; 0x24dc <prvCheckForValidListAndQueue+0x52>
    24a2:	85 e9       	ldi	r24, 0x95	; 149
    24a4:	9c e2       	ldi	r25, 0x2C	; 44
    24a6:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialise>
    24aa:	8a e8       	ldi	r24, 0x8A	; 138
    24ac:	9c e2       	ldi	r25, 0x2C	; 44
    24ae:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialise>
    24b2:	85 e9       	ldi	r24, 0x95	; 149
    24b4:	9c e2       	ldi	r25, 0x2C	; 44
    24b6:	80 93 88 2c 	sts	0x2C88, r24	; 0x802c88 <pxCurrentTimerList>
    24ba:	90 93 89 2c 	sts	0x2C89, r25	; 0x802c89 <pxCurrentTimerList+0x1>
    24be:	8a e8       	ldi	r24, 0x8A	; 138
    24c0:	9c e2       	ldi	r25, 0x2C	; 44
    24c2:	80 93 86 2c 	sts	0x2C86, r24	; 0x802c86 <pxOverflowTimerList>
    24c6:	90 93 87 2c 	sts	0x2C87, r25	; 0x802c87 <pxOverflowTimerList+0x1>
    24ca:	40 e0       	ldi	r20, 0x00	; 0
    24cc:	69 e0       	ldi	r22, 0x09	; 9
    24ce:	85 e0       	ldi	r24, 0x05	; 5
    24d0:	0e 94 1c 08 	call	0x1038	; 0x1038 <xQueueGenericCreate>
    24d4:	80 93 84 2c 	sts	0x2C84, r24	; 0x802c84 <xTimerQueue>
    24d8:	90 93 85 2c 	sts	0x2C85, r25	; 0x802c85 <xTimerQueue+0x1>
    24dc:	ff 91       	pop	r31
    24de:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    24e2:	08 95       	ret

000024e4 <xTimerCreateTimerTask>:
    24e4:	ef 92       	push	r14
    24e6:	ff 92       	push	r15
    24e8:	0f 93       	push	r16
    24ea:	0e 94 45 12 	call	0x248a	; 0x248a <prvCheckForValidListAndQueue>
    24ee:	80 91 84 2c 	lds	r24, 0x2C84	; 0x802c84 <xTimerQueue>
    24f2:	90 91 85 2c 	lds	r25, 0x2C85	; 0x802c85 <xTimerQueue+0x1>
    24f6:	89 2b       	or	r24, r25
    24f8:	91 f0       	breq	.+36     	; 0x251e <xTimerCreateTimerTask+0x3a>
    24fa:	0f 2e       	mov	r0, r31
    24fc:	f2 e8       	ldi	r31, 0x82	; 130
    24fe:	ef 2e       	mov	r14, r31
    2500:	fc e2       	ldi	r31, 0x2C	; 44
    2502:	ff 2e       	mov	r15, r31
    2504:	f0 2d       	mov	r31, r0
    2506:	03 e0       	ldi	r16, 0x03	; 3
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	48 ec       	ldi	r20, 0xC8	; 200
    250e:	50 e0       	ldi	r21, 0x00	; 0
    2510:	65 e0       	ldi	r22, 0x05	; 5
    2512:	70 e2       	ldi	r23, 0x20	; 32
    2514:	85 e8       	ldi	r24, 0x85	; 133
    2516:	93 e1       	ldi	r25, 0x13	; 19
    2518:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <xTaskCreate>
    251c:	01 c0       	rjmp	.+2      	; 0x2520 <xTimerCreateTimerTask+0x3c>
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	0f 91       	pop	r16
    2522:	ff 90       	pop	r15
    2524:	ef 90       	pop	r14
    2526:	08 95       	ret

00002528 <xTimerGenericCommand>:
    2528:	8f 92       	push	r8
    252a:	9f 92       	push	r9
    252c:	af 92       	push	r10
    252e:	bf 92       	push	r11
    2530:	cf 92       	push	r12
    2532:	df 92       	push	r13
    2534:	ef 92       	push	r14
    2536:	ff 92       	push	r15
    2538:	0f 93       	push	r16
    253a:	1f 93       	push	r17
    253c:	cf 93       	push	r28
    253e:	df 93       	push	r29
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
    2544:	29 97       	sbiw	r28, 0x09	; 9
    2546:	cd bf       	out	0x3d, r28	; 61
    2548:	de bf       	out	0x3e, r29	; 62
    254a:	e0 91 84 2c 	lds	r30, 0x2C84	; 0x802c84 <xTimerQueue>
    254e:	f0 91 85 2c 	lds	r31, 0x2C85	; 0x802c85 <xTimerQueue+0x1>
    2552:	30 97       	sbiw	r30, 0x00	; 0
    2554:	89 f1       	breq	.+98     	; 0x25b8 <xTimerGenericCommand+0x90>
    2556:	69 83       	std	Y+1, r22	; 0x01
    2558:	2a 83       	std	Y+2, r18	; 0x02
    255a:	3b 83       	std	Y+3, r19	; 0x03
    255c:	4c 83       	std	Y+4, r20	; 0x04
    255e:	5d 83       	std	Y+5, r21	; 0x05
    2560:	8e 83       	std	Y+6, r24	; 0x06
    2562:	9f 83       	std	Y+7, r25	; 0x07
    2564:	66 30       	cpi	r22, 0x06	; 6
    2566:	fc f4       	brge	.+62     	; 0x25a6 <xTimerGenericCommand+0x7e>
    2568:	0e 94 9d 10 	call	0x213a	; 0x213a <xTaskGetSchedulerState>
    256c:	82 30       	cpi	r24, 0x02	; 2
    256e:	69 f4       	brne	.+26     	; 0x258a <xTimerGenericCommand+0x62>
    2570:	00 e0       	ldi	r16, 0x00	; 0
    2572:	a7 01       	movw	r20, r14
    2574:	96 01       	movw	r18, r12
    2576:	be 01       	movw	r22, r28
    2578:	6f 5f       	subi	r22, 0xFF	; 255
    257a:	7f 4f       	sbci	r23, 0xFF	; 255
    257c:	80 91 84 2c 	lds	r24, 0x2C84	; 0x802c84 <xTimerQueue>
    2580:	90 91 85 2c 	lds	r25, 0x2C85	; 0x802c85 <xTimerQueue+0x1>
    2584:	0e 94 4d 08 	call	0x109a	; 0x109a <xQueueGenericSend>
    2588:	18 c0       	rjmp	.+48     	; 0x25ba <xTimerGenericCommand+0x92>
    258a:	00 e0       	ldi	r16, 0x00	; 0
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	a9 01       	movw	r20, r18
    2592:	be 01       	movw	r22, r28
    2594:	6f 5f       	subi	r22, 0xFF	; 255
    2596:	7f 4f       	sbci	r23, 0xFF	; 255
    2598:	80 91 84 2c 	lds	r24, 0x2C84	; 0x802c84 <xTimerQueue>
    259c:	90 91 85 2c 	lds	r25, 0x2C85	; 0x802c85 <xTimerQueue+0x1>
    25a0:	0e 94 4d 08 	call	0x109a	; 0x109a <xQueueGenericSend>
    25a4:	0a c0       	rjmp	.+20     	; 0x25ba <xTimerGenericCommand+0x92>
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	a8 01       	movw	r20, r16
    25aa:	be 01       	movw	r22, r28
    25ac:	6f 5f       	subi	r22, 0xFF	; 255
    25ae:	7f 4f       	sbci	r23, 0xFF	; 255
    25b0:	cf 01       	movw	r24, r30
    25b2:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <xQueueGenericSendFromISR>
    25b6:	01 c0       	rjmp	.+2      	; 0x25ba <xTimerGenericCommand+0x92>
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	29 96       	adiw	r28, 0x09	; 9
    25bc:	cd bf       	out	0x3d, r28	; 61
    25be:	de bf       	out	0x3e, r29	; 62
    25c0:	df 91       	pop	r29
    25c2:	cf 91       	pop	r28
    25c4:	1f 91       	pop	r17
    25c6:	0f 91       	pop	r16
    25c8:	ff 90       	pop	r15
    25ca:	ef 90       	pop	r14
    25cc:	df 90       	pop	r13
    25ce:	cf 90       	pop	r12
    25d0:	bf 90       	pop	r11
    25d2:	af 90       	pop	r10
    25d4:	9f 90       	pop	r9
    25d6:	8f 90       	pop	r8
    25d8:	08 95       	ret

000025da <prvSampleTimeNow>:
    25da:	2f 92       	push	r2
    25dc:	3f 92       	push	r3
    25de:	4f 92       	push	r4
    25e0:	5f 92       	push	r5
    25e2:	6f 92       	push	r6
    25e4:	7f 92       	push	r7
    25e6:	8f 92       	push	r8
    25e8:	9f 92       	push	r9
    25ea:	af 92       	push	r10
    25ec:	bf 92       	push	r11
    25ee:	cf 92       	push	r12
    25f0:	df 92       	push	r13
    25f2:	ef 92       	push	r14
    25f4:	ff 92       	push	r15
    25f6:	0f 93       	push	r16
    25f8:	1f 93       	push	r17
    25fa:	cf 93       	push	r28
    25fc:	df 93       	push	r29
    25fe:	1c 01       	movw	r2, r24
    2600:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <xTaskGetTickCount>
    2604:	2b 01       	movw	r4, r22
    2606:	3c 01       	movw	r6, r24
    2608:	80 91 7e 2c 	lds	r24, 0x2C7E	; 0x802c7e <xLastTime.4745>
    260c:	90 91 7f 2c 	lds	r25, 0x2C7F	; 0x802c7f <xLastTime.4745+0x1>
    2610:	a0 91 80 2c 	lds	r26, 0x2C80	; 0x802c80 <xLastTime.4745+0x2>
    2614:	b0 91 81 2c 	lds	r27, 0x2C81	; 0x802c81 <xLastTime.4745+0x3>
    2618:	48 16       	cp	r4, r24
    261a:	59 06       	cpc	r5, r25
    261c:	6a 06       	cpc	r6, r26
    261e:	7b 06       	cpc	r7, r27
    2620:	08 f0       	brcs	.+2      	; 0x2624 <prvSampleTimeNow+0x4a>
    2622:	54 c0       	rjmp	.+168    	; 0x26cc <prvSampleTimeNow+0xf2>
    2624:	3c c0       	rjmp	.+120    	; 0x269e <prvSampleTimeNow+0xc4>
    2626:	07 80       	ldd	r0, Z+7	; 0x07
    2628:	f0 85       	ldd	r31, Z+8	; 0x08
    262a:	e0 2d       	mov	r30, r0
    262c:	80 80       	ld	r8, Z
    262e:	91 80       	ldd	r9, Z+1	; 0x01
    2630:	a2 80       	ldd	r10, Z+2	; 0x02
    2632:	b3 80       	ldd	r11, Z+3	; 0x03
    2634:	c0 85       	ldd	r28, Z+8	; 0x08
    2636:	d1 85       	ldd	r29, Z+9	; 0x09
    2638:	8e 01       	movw	r16, r28
    263a:	0e 5f       	subi	r16, 0xFE	; 254
    263c:	1f 4f       	sbci	r17, 0xFF	; 255
    263e:	c8 01       	movw	r24, r16
    2640:	0e 94 2c 05 	call	0xa58	; 0xa58 <uxListRemove>
    2644:	ed 89       	ldd	r30, Y+21	; 0x15
    2646:	fe 89       	ldd	r31, Y+22	; 0x16
    2648:	ce 01       	movw	r24, r28
    264a:	19 95       	eicall
    264c:	8a 89       	ldd	r24, Y+18	; 0x12
    264e:	81 30       	cpi	r24, 0x01	; 1
    2650:	31 f5       	brne	.+76     	; 0x269e <prvSampleTimeNow+0xc4>
    2652:	8e 85       	ldd	r24, Y+14	; 0x0e
    2654:	9f 85       	ldd	r25, Y+15	; 0x0f
    2656:	a8 89       	ldd	r26, Y+16	; 0x10
    2658:	b9 89       	ldd	r27, Y+17	; 0x11
    265a:	88 0d       	add	r24, r8
    265c:	99 1d       	adc	r25, r9
    265e:	aa 1d       	adc	r26, r10
    2660:	bb 1d       	adc	r27, r11
    2662:	88 16       	cp	r8, r24
    2664:	99 06       	cpc	r9, r25
    2666:	aa 06       	cpc	r10, r26
    2668:	bb 06       	cpc	r11, r27
    266a:	70 f4       	brcc	.+28     	; 0x2688 <prvSampleTimeNow+0xae>
    266c:	8a 83       	std	Y+2, r24	; 0x02
    266e:	9b 83       	std	Y+3, r25	; 0x03
    2670:	ac 83       	std	Y+4, r26	; 0x04
    2672:	bd 83       	std	Y+5, r27	; 0x05
    2674:	ca 87       	std	Y+10, r28	; 0x0a
    2676:	db 87       	std	Y+11, r29	; 0x0b
    2678:	b8 01       	movw	r22, r16
    267a:	80 91 88 2c 	lds	r24, 0x2C88	; 0x802c88 <pxCurrentTimerList>
    267e:	90 91 89 2c 	lds	r25, 0x2C89	; 0x802c89 <pxCurrentTimerList+0x1>
    2682:	0e 94 ef 04 	call	0x9de	; 0x9de <vListInsert>
    2686:	0b c0       	rjmp	.+22     	; 0x269e <prvSampleTimeNow+0xc4>
    2688:	c1 2c       	mov	r12, r1
    268a:	d1 2c       	mov	r13, r1
    268c:	76 01       	movw	r14, r12
    268e:	00 e0       	ldi	r16, 0x00	; 0
    2690:	10 e0       	ldi	r17, 0x00	; 0
    2692:	a5 01       	movw	r20, r10
    2694:	94 01       	movw	r18, r8
    2696:	60 e0       	ldi	r22, 0x00	; 0
    2698:	ce 01       	movw	r24, r28
    269a:	0e 94 94 12 	call	0x2528	; 0x2528 <xTimerGenericCommand>
    269e:	e0 91 88 2c 	lds	r30, 0x2C88	; 0x802c88 <pxCurrentTimerList>
    26a2:	f0 91 89 2c 	lds	r31, 0x2C89	; 0x802c89 <pxCurrentTimerList+0x1>
    26a6:	80 81       	ld	r24, Z
    26a8:	81 11       	cpse	r24, r1
    26aa:	bd cf       	rjmp	.-134    	; 0x2626 <prvSampleTimeNow+0x4c>
    26ac:	80 91 86 2c 	lds	r24, 0x2C86	; 0x802c86 <pxOverflowTimerList>
    26b0:	90 91 87 2c 	lds	r25, 0x2C87	; 0x802c87 <pxOverflowTimerList+0x1>
    26b4:	80 93 88 2c 	sts	0x2C88, r24	; 0x802c88 <pxCurrentTimerList>
    26b8:	90 93 89 2c 	sts	0x2C89, r25	; 0x802c89 <pxCurrentTimerList+0x1>
    26bc:	e0 93 86 2c 	sts	0x2C86, r30	; 0x802c86 <pxOverflowTimerList>
    26c0:	f0 93 87 2c 	sts	0x2C87, r31	; 0x802c87 <pxOverflowTimerList+0x1>
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	f1 01       	movw	r30, r2
    26c8:	80 83       	st	Z, r24
    26ca:	02 c0       	rjmp	.+4      	; 0x26d0 <prvSampleTimeNow+0xf6>
    26cc:	f1 01       	movw	r30, r2
    26ce:	10 82       	st	Z, r1
    26d0:	40 92 7e 2c 	sts	0x2C7E, r4	; 0x802c7e <xLastTime.4745>
    26d4:	50 92 7f 2c 	sts	0x2C7F, r5	; 0x802c7f <xLastTime.4745+0x1>
    26d8:	60 92 80 2c 	sts	0x2C80, r6	; 0x802c80 <xLastTime.4745+0x2>
    26dc:	70 92 81 2c 	sts	0x2C81, r7	; 0x802c81 <xLastTime.4745+0x3>
    26e0:	c3 01       	movw	r24, r6
    26e2:	b2 01       	movw	r22, r4
    26e4:	df 91       	pop	r29
    26e6:	cf 91       	pop	r28
    26e8:	1f 91       	pop	r17
    26ea:	0f 91       	pop	r16
    26ec:	ff 90       	pop	r15
    26ee:	ef 90       	pop	r14
    26f0:	df 90       	pop	r13
    26f2:	cf 90       	pop	r12
    26f4:	bf 90       	pop	r11
    26f6:	af 90       	pop	r10
    26f8:	9f 90       	pop	r9
    26fa:	8f 90       	pop	r8
    26fc:	7f 90       	pop	r7
    26fe:	6f 90       	pop	r6
    2700:	5f 90       	pop	r5
    2702:	4f 90       	pop	r4
    2704:	3f 90       	pop	r3
    2706:	2f 90       	pop	r2
    2708:	08 95       	ret

0000270a <prvTimerTask>:
    270a:	cf 93       	push	r28
    270c:	df 93       	push	r29
    270e:	cd b7       	in	r28, 0x3d	; 61
    2710:	de b7       	in	r29, 0x3e	; 62
    2712:	2e 97       	sbiw	r28, 0x0e	; 14
    2714:	cd bf       	out	0x3d, r28	; 61
    2716:	de bf       	out	0x3e, r29	; 62
    2718:	ce 01       	movw	r24, r28
    271a:	01 96       	adiw	r24, 0x01	; 1
    271c:	1c 01       	movw	r2, r24
    271e:	a8 2e       	mov	r10, r24
    2720:	b3 2c       	mov	r11, r3
    2722:	e0 91 88 2c 	lds	r30, 0x2C88	; 0x802c88 <pxCurrentTimerList>
    2726:	f0 91 89 2c 	lds	r31, 0x2C89	; 0x802c89 <pxCurrentTimerList+0x1>
    272a:	80 81       	ld	r24, Z
    272c:	88 23       	and	r24, r24
    272e:	09 f4       	brne	.+2      	; 0x2732 <prvTimerTask+0x28>
    2730:	03 c1       	rjmp	.+518    	; 0x2938 <prvTimerTask+0x22e>
    2732:	07 80       	ldd	r0, Z+7	; 0x07
    2734:	f0 85       	ldd	r31, Z+8	; 0x08
    2736:	e0 2d       	mov	r30, r0
    2738:	40 80       	ld	r4, Z
    273a:	51 80       	ldd	r5, Z+1	; 0x01
    273c:	62 80       	ldd	r6, Z+2	; 0x02
    273e:	73 80       	ldd	r7, Z+3	; 0x03
    2740:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <vTaskSuspendAll>
    2744:	c1 01       	movw	r24, r2
    2746:	0e 94 ed 12 	call	0x25da	; 0x25da <prvSampleTimeNow>
    274a:	6b 87       	std	Y+11, r22	; 0x0b
    274c:	7c 87       	std	Y+12, r23	; 0x0c
    274e:	8d 87       	std	Y+13, r24	; 0x0d
    2750:	9e 87       	std	Y+14, r25	; 0x0e
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	81 11       	cpse	r24, r1
    2756:	5e c0       	rjmp	.+188    	; 0x2814 <prvTimerTask+0x10a>
    2758:	8b 85       	ldd	r24, Y+11	; 0x0b
    275a:	9c 85       	ldd	r25, Y+12	; 0x0c
    275c:	ad 85       	ldd	r26, Y+13	; 0x0d
    275e:	be 85       	ldd	r27, Y+14	; 0x0e
    2760:	84 15       	cp	r24, r4
    2762:	95 05       	cpc	r25, r5
    2764:	a6 05       	cpc	r26, r6
    2766:	b7 05       	cpc	r27, r7
    2768:	e8 f1       	brcs	.+122    	; 0x27e4 <prvTimerTask+0xda>
    276a:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <xTaskResumeAll>
    276e:	e0 91 88 2c 	lds	r30, 0x2C88	; 0x802c88 <pxCurrentTimerList>
    2772:	f0 91 89 2c 	lds	r31, 0x2C89	; 0x802c89 <pxCurrentTimerList+0x1>
    2776:	07 80       	ldd	r0, Z+7	; 0x07
    2778:	f0 85       	ldd	r31, Z+8	; 0x08
    277a:	e0 2d       	mov	r30, r0
    277c:	80 84       	ldd	r8, Z+8	; 0x08
    277e:	91 84       	ldd	r9, Z+9	; 0x09
    2780:	c4 01       	movw	r24, r8
    2782:	02 96       	adiw	r24, 0x02	; 2
    2784:	0e 94 2c 05 	call	0xa58	; 0xa58 <uxListRemove>
    2788:	d4 01       	movw	r26, r8
    278a:	52 96       	adiw	r26, 0x12	; 18
    278c:	8c 91       	ld	r24, X
    278e:	52 97       	sbiw	r26, 0x12	; 18
    2790:	81 30       	cpi	r24, 0x01	; 1
    2792:	01 f5       	brne	.+64     	; 0x27d4 <prvTimerTask+0xca>
    2794:	1e 96       	adiw	r26, 0x0e	; 14
    2796:	4d 91       	ld	r20, X+
    2798:	5d 91       	ld	r21, X+
    279a:	6d 91       	ld	r22, X+
    279c:	7c 91       	ld	r23, X
    279e:	51 97       	sbiw	r26, 0x11	; 17
    27a0:	44 0d       	add	r20, r4
    27a2:	55 1d       	adc	r21, r5
    27a4:	66 1d       	adc	r22, r6
    27a6:	77 1d       	adc	r23, r7
    27a8:	73 01       	movw	r14, r6
    27aa:	62 01       	movw	r12, r4
    27ac:	0b 85       	ldd	r16, Y+11	; 0x0b
    27ae:	1c 85       	ldd	r17, Y+12	; 0x0c
    27b0:	2d 85       	ldd	r18, Y+13	; 0x0d
    27b2:	3e 85       	ldd	r19, Y+14	; 0x0e
    27b4:	c4 01       	movw	r24, r8
    27b6:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <prvInsertTimerInActiveList>
    27ba:	88 23       	and	r24, r24
    27bc:	59 f0       	breq	.+22     	; 0x27d4 <prvTimerTask+0xca>
    27be:	c1 2c       	mov	r12, r1
    27c0:	d1 2c       	mov	r13, r1
    27c2:	76 01       	movw	r14, r12
    27c4:	00 e0       	ldi	r16, 0x00	; 0
    27c6:	10 e0       	ldi	r17, 0x00	; 0
    27c8:	a3 01       	movw	r20, r6
    27ca:	92 01       	movw	r18, r4
    27cc:	60 e0       	ldi	r22, 0x00	; 0
    27ce:	c4 01       	movw	r24, r8
    27d0:	0e 94 94 12 	call	0x2528	; 0x2528 <xTimerGenericCommand>
    27d4:	d4 01       	movw	r26, r8
    27d6:	55 96       	adiw	r26, 0x15	; 21
    27d8:	ed 91       	ld	r30, X+
    27da:	fc 91       	ld	r31, X
    27dc:	56 97       	sbiw	r26, 0x16	; 22
    27de:	c4 01       	movw	r24, r8
    27e0:	19 95       	eicall
    27e2:	9c c0       	rjmp	.+312    	; 0x291c <prvTimerTask+0x212>
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	b3 01       	movw	r22, r6
    27e8:	a2 01       	movw	r20, r4
    27ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    27ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    27ee:	ad 85       	ldd	r26, Y+13	; 0x0d
    27f0:	be 85       	ldd	r27, Y+14	; 0x0e
    27f2:	48 1b       	sub	r20, r24
    27f4:	59 0b       	sbc	r21, r25
    27f6:	6a 0b       	sbc	r22, r26
    27f8:	7b 0b       	sbc	r23, r27
    27fa:	80 91 84 2c 	lds	r24, 0x2C84	; 0x802c84 <xTimerQueue>
    27fe:	90 91 85 2c 	lds	r25, 0x2C85	; 0x802c85 <xTimerQueue+0x1>
    2802:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <vQueueWaitForMessageRestricted>
    2806:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <xTaskResumeAll>
    280a:	81 11       	cpse	r24, r1
    280c:	87 c0       	rjmp	.+270    	; 0x291c <prvTimerTask+0x212>
    280e:	0e 94 17 06 	call	0xc2e	; 0xc2e <vPortYield>
    2812:	84 c0       	rjmp	.+264    	; 0x291c <prvTimerTask+0x212>
    2814:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <xTaskResumeAll>
    2818:	81 c0       	rjmp	.+258    	; 0x291c <prvTimerTask+0x212>
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	88 23       	and	r24, r24
    281e:	6c f4       	brge	.+26     	; 0x283a <prvTimerTask+0x130>
    2820:	4e 81       	ldd	r20, Y+6	; 0x06
    2822:	5f 81       	ldd	r21, Y+7	; 0x07
    2824:	68 85       	ldd	r22, Y+8	; 0x08
    2826:	79 85       	ldd	r23, Y+9	; 0x09
    2828:	ea 81       	ldd	r30, Y+2	; 0x02
    282a:	fb 81       	ldd	r31, Y+3	; 0x03
    282c:	8c 81       	ldd	r24, Y+4	; 0x04
    282e:	9d 81       	ldd	r25, Y+5	; 0x05
    2830:	19 95       	eicall
    2832:	89 81       	ldd	r24, Y+1	; 0x01
    2834:	88 23       	and	r24, r24
    2836:	0c f4       	brge	.+2      	; 0x283a <prvTimerTask+0x130>
    2838:	71 c0       	rjmp	.+226    	; 0x291c <prvTimerTask+0x212>
    283a:	8e 80       	ldd	r8, Y+6	; 0x06
    283c:	9f 80       	ldd	r9, Y+7	; 0x07
    283e:	d4 01       	movw	r26, r8
    2840:	1c 96       	adiw	r26, 0x0c	; 12
    2842:	8d 91       	ld	r24, X+
    2844:	9c 91       	ld	r25, X
    2846:	1d 97       	sbiw	r26, 0x0d	; 13
    2848:	89 2b       	or	r24, r25
    284a:	21 f0       	breq	.+8      	; 0x2854 <prvTimerTask+0x14a>
    284c:	c4 01       	movw	r24, r8
    284e:	02 96       	adiw	r24, 0x02	; 2
    2850:	0e 94 2c 05 	call	0xa58	; 0xa58 <uxListRemove>
    2854:	ce 01       	movw	r24, r28
    2856:	0a 96       	adiw	r24, 0x0a	; 10
    2858:	0e 94 ed 12 	call	0x25da	; 0x25da <prvSampleTimeNow>
    285c:	8b 01       	movw	r16, r22
    285e:	9c 01       	movw	r18, r24
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	08 2e       	mov	r0, r24
    2864:	00 0c       	add	r0, r0
    2866:	99 0b       	sbc	r25, r25
    2868:	aa 0b       	sbc	r26, r26
    286a:	bb 0b       	sbc	r27, r27
    286c:	8a 30       	cpi	r24, 0x0A	; 10
    286e:	91 05       	cpc	r25, r1
    2870:	08 f0       	brcs	.+2      	; 0x2874 <prvTimerTask+0x16a>
    2872:	54 c0       	rjmp	.+168    	; 0x291c <prvTimerTask+0x212>
    2874:	fc 01       	movw	r30, r24
    2876:	88 27       	eor	r24, r24
    2878:	e2 50       	subi	r30, 0x02	; 2
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	8f 4f       	sbci	r24, 0xFF	; 255
    287e:	0c 94 ec 22 	jmp	0x45d8	; 0x45d8 <__tablejump2__>
    2882:	ca 80       	ldd	r12, Y+2	; 0x02
    2884:	db 80       	ldd	r13, Y+3	; 0x03
    2886:	ec 80       	ldd	r14, Y+4	; 0x04
    2888:	fd 80       	ldd	r15, Y+5	; 0x05
    288a:	f4 01       	movw	r30, r8
    288c:	46 85       	ldd	r20, Z+14	; 0x0e
    288e:	57 85       	ldd	r21, Z+15	; 0x0f
    2890:	60 89       	ldd	r22, Z+16	; 0x10
    2892:	71 89       	ldd	r23, Z+17	; 0x11
    2894:	4c 0d       	add	r20, r12
    2896:	5d 1d       	adc	r21, r13
    2898:	6e 1d       	adc	r22, r14
    289a:	7f 1d       	adc	r23, r15
    289c:	c4 01       	movw	r24, r8
    289e:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <prvInsertTimerInActiveList>
    28a2:	88 23       	and	r24, r24
    28a4:	d9 f1       	breq	.+118    	; 0x291c <prvTimerTask+0x212>
    28a6:	d4 01       	movw	r26, r8
    28a8:	55 96       	adiw	r26, 0x15	; 21
    28aa:	ed 91       	ld	r30, X+
    28ac:	fc 91       	ld	r31, X
    28ae:	56 97       	sbiw	r26, 0x16	; 22
    28b0:	c4 01       	movw	r24, r8
    28b2:	19 95       	eicall
    28b4:	f4 01       	movw	r30, r8
    28b6:	82 89       	ldd	r24, Z+18	; 0x12
    28b8:	81 30       	cpi	r24, 0x01	; 1
    28ba:	81 f5       	brne	.+96     	; 0x291c <prvTimerTask+0x212>
    28bc:	4a 81       	ldd	r20, Y+2	; 0x02
    28be:	5b 81       	ldd	r21, Y+3	; 0x03
    28c0:	6c 81       	ldd	r22, Y+4	; 0x04
    28c2:	7d 81       	ldd	r23, Y+5	; 0x05
    28c4:	86 85       	ldd	r24, Z+14	; 0x0e
    28c6:	97 85       	ldd	r25, Z+15	; 0x0f
    28c8:	a0 89       	ldd	r26, Z+16	; 0x10
    28ca:	b1 89       	ldd	r27, Z+17	; 0x11
    28cc:	9a 01       	movw	r18, r20
    28ce:	ab 01       	movw	r20, r22
    28d0:	28 0f       	add	r18, r24
    28d2:	39 1f       	adc	r19, r25
    28d4:	4a 1f       	adc	r20, r26
    28d6:	5b 1f       	adc	r21, r27
    28d8:	c1 2c       	mov	r12, r1
    28da:	d1 2c       	mov	r13, r1
    28dc:	76 01       	movw	r14, r12
    28de:	00 e0       	ldi	r16, 0x00	; 0
    28e0:	10 e0       	ldi	r17, 0x00	; 0
    28e2:	60 e0       	ldi	r22, 0x00	; 0
    28e4:	c4 01       	movw	r24, r8
    28e6:	0e 94 94 12 	call	0x2528	; 0x2528 <xTimerGenericCommand>
    28ea:	18 c0       	rjmp	.+48     	; 0x291c <prvTimerTask+0x212>
    28ec:	4a 81       	ldd	r20, Y+2	; 0x02
    28ee:	5b 81       	ldd	r21, Y+3	; 0x03
    28f0:	6c 81       	ldd	r22, Y+4	; 0x04
    28f2:	7d 81       	ldd	r23, Y+5	; 0x05
    28f4:	d4 01       	movw	r26, r8
    28f6:	1e 96       	adiw	r26, 0x0e	; 14
    28f8:	4d 93       	st	X+, r20
    28fa:	5d 93       	st	X+, r21
    28fc:	6d 93       	st	X+, r22
    28fe:	7c 93       	st	X, r23
    2900:	51 97       	sbiw	r26, 0x11	; 17
    2902:	40 0f       	add	r20, r16
    2904:	51 1f       	adc	r21, r17
    2906:	62 1f       	adc	r22, r18
    2908:	73 1f       	adc	r23, r19
    290a:	68 01       	movw	r12, r16
    290c:	79 01       	movw	r14, r18
    290e:	c4 01       	movw	r24, r8
    2910:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <prvInsertTimerInActiveList>
    2914:	03 c0       	rjmp	.+6      	; 0x291c <prvTimerTask+0x212>
    2916:	c4 01       	movw	r24, r8
    2918:	0e 94 b8 04 	call	0x970	; 0x970 <vPortFree>
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	a9 01       	movw	r20, r18
    2922:	6a 2d       	mov	r22, r10
    2924:	7b 2d       	mov	r23, r11
    2926:	80 91 84 2c 	lds	r24, 0x2C84	; 0x802c84 <xTimerQueue>
    292a:	90 91 85 2c 	lds	r25, 0x2C85	; 0x802c85 <xTimerQueue+0x1>
    292e:	0e 94 38 09 	call	0x1270	; 0x1270 <xQueueReceive>
    2932:	81 11       	cpse	r24, r1
    2934:	72 cf       	rjmp	.-284    	; 0x281a <prvTimerTask+0x110>
    2936:	f5 ce       	rjmp	.-534    	; 0x2722 <prvTimerTask+0x18>
    2938:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <vTaskSuspendAll>
    293c:	c1 01       	movw	r24, r2
    293e:	0e 94 ed 12 	call	0x25da	; 0x25da <prvSampleTimeNow>
    2942:	6b 87       	std	Y+11, r22	; 0x0b
    2944:	7c 87       	std	Y+12, r23	; 0x0c
    2946:	8d 87       	std	Y+13, r24	; 0x0d
    2948:	9e 87       	std	Y+14, r25	; 0x0e
    294a:	89 81       	ldd	r24, Y+1	; 0x01
    294c:	81 11       	cpse	r24, r1
    294e:	62 cf       	rjmp	.-316    	; 0x2814 <prvTimerTask+0x10a>
    2950:	e0 91 86 2c 	lds	r30, 0x2C86	; 0x802c86 <pxOverflowTimerList>
    2954:	f0 91 87 2c 	lds	r31, 0x2C87	; 0x802c87 <pxOverflowTimerList+0x1>
    2958:	80 81       	ld	r24, Z
    295a:	21 e0       	ldi	r18, 0x01	; 1
    295c:	81 11       	cpse	r24, r1
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	41 2c       	mov	r4, r1
    2962:	51 2c       	mov	r5, r1
    2964:	32 01       	movw	r6, r4
    2966:	3f cf       	rjmp	.-386    	; 0x27e6 <prvTimerTask+0xdc>

00002968 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    2968:	0f 93       	push	r16
    296a:	1f 93       	push	r17
    296c:	cf 93       	push	r28
    296e:	df 93       	push	r29
    2970:	cd b7       	in	r28, 0x3d	; 61
    2972:	de b7       	in	r29, 0x3e	; 62
    2974:	29 97       	sbiw	r28, 0x09	; 9
    2976:	cd bf       	out	0x3d, r28	; 61
    2978:	de bf       	out	0x3e, r29	; 62
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    297a:	ee ef       	ldi	r30, 0xFE	; 254
    297c:	e9 83       	std	Y+1, r30	; 0x01
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    297e:	8a 83       	std	Y+2, r24	; 0x02
    2980:	9b 83       	std	Y+3, r25	; 0x03
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    2982:	6c 83       	std	Y+4, r22	; 0x04
    2984:	7d 83       	std	Y+5, r23	; 0x05
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    2986:	2e 83       	std	Y+6, r18	; 0x06
    2988:	3f 83       	std	Y+7, r19	; 0x07
    298a:	48 87       	std	Y+8, r20	; 0x08
    298c:	59 87       	std	Y+9, r21	; 0x09

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	a8 01       	movw	r20, r16
    2992:	be 01       	movw	r22, r28
    2994:	6f 5f       	subi	r22, 0xFF	; 255
    2996:	7f 4f       	sbci	r23, 0xFF	; 255
    2998:	80 91 84 2c 	lds	r24, 0x2C84	; 0x802c84 <xTimerQueue>
    299c:	90 91 85 2c 	lds	r25, 0x2C85	; 0x802c85 <xTimerQueue+0x1>
    29a0:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
    29a4:	29 96       	adiw	r28, 0x09	; 9
    29a6:	cd bf       	out	0x3d, r28	; 61
    29a8:	de bf       	out	0x3e, r29	; 62
    29aa:	df 91       	pop	r29
    29ac:	cf 91       	pop	r28
    29ae:	1f 91       	pop	r17
    29b0:	0f 91       	pop	r16
    29b2:	08 95       	ret

000029b4 <vInitClock>:
#include "clksys_driver.h"


void vInitClock(void)
{
	CLKSYS_Enable( OSC_RC2MEN_bm );
    29b4:	e0 e5       	ldi	r30, 0x50	; 80
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	80 81       	ld	r24, Z
    29ba:	81 60       	ori	r24, 0x01	; 1
    29bc:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    29be:	81 81       	ldd	r24, Z+1	; 0x01
    29c0:	80 ff       	sbrs	r24, 0
    29c2:	fd cf       	rjmp	.-6      	; 0x29be <vInitClock+0xa>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	0e 94 c4 02 	call	0x588	; 0x588 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    29ca:	8e e1       	ldi	r24, 0x1E	; 30
    29cc:	0e 94 b4 02 	call	0x568	; 0x568 <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    29d0:	60 e0       	ldi	r22, 0x00	; 0
    29d2:	80 e0       	ldi	r24, 0x00	; 0
    29d4:	0e 94 be 02 	call	0x57c	; 0x57c <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    29d8:	43 e0       	ldi	r20, 0x03	; 3
    29da:	60 e0       	ldi	r22, 0x00	; 0
    29dc:	80 e4       	ldi	r24, 0x40	; 64
    29de:	0e 94 a5 02 	call	0x54a	; 0x54a <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    29e2:	e0 e5       	ldi	r30, 0x50	; 80
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	88 60       	ori	r24, 0x08	; 8
    29ea:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    29ec:	81 81       	ldd	r24, Z+1	; 0x01
    29ee:	83 ff       	sbrs	r24, 3
    29f0:	fd cf       	rjmp	.-6      	; 0x29ec <vInitClock+0x38>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    29f2:	64 e0       	ldi	r22, 0x04	; 4
    29f4:	80 ec       	ldi	r24, 0xC0	; 192
    29f6:	0e 94 af 02 	call	0x55e	; 0x55e <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    29fa:	e0 e5       	ldi	r30, 0x50	; 80
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	80 61       	ori	r24, 0x10	; 16
    2a02:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    2a04:	60 e0       	ldi	r22, 0x00	; 0
    2a06:	80 e0       	ldi	r24, 0x00	; 0
    2a08:	0e 94 be 02 	call	0x57c	; 0x57c <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    2a0c:	e0 e5       	ldi	r30, 0x50	; 80
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	81 81       	ldd	r24, Z+1	; 0x01
    2a12:	84 ff       	sbrs	r24, 4
    2a14:	fd cf       	rjmp	.-6      	; 0x2a10 <vInitClock+0x5c>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    2a16:	84 e0       	ldi	r24, 0x04	; 4
    2a18:	0e 94 c4 02 	call	0x588	; 0x588 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    2a1c:	87 e0       	ldi	r24, 0x07	; 7
    2a1e:	0e 94 b4 02 	call	0x568	; 0x568 <CLKSYS_Disable>
    2a22:	08 95       	ret

00002a24 <vLeibniz>:
void vLeibniz(void *pvParameters) 
{
        (void) pvParameters;
        
        float Pi4 = 1;
        float n = 3;
    2a24:	81 2c       	mov	r8, r1
    2a26:	91 2c       	mov	r9, r1
    2a28:	68 94       	set
    2a2a:	aa 24       	eor	r10, r10
    2a2c:	a6 f8       	bld	r10, 6
    2a2e:	ba 2c       	mov	r11, r10

void vLeibniz(void *pvParameters) 
{
        (void) pvParameters;
        
        float Pi4 = 1;
    2a30:	0f 2e       	mov	r0, r31
    2a32:	c1 2c       	mov	r12, r1
    2a34:	d1 2c       	mov	r13, r1
    2a36:	f0 e8       	ldi	r31, 0x80	; 128
    2a38:	ef 2e       	mov	r14, r31
    2a3a:	ff e3       	ldi	r31, 0x3F	; 63
    2a3c:	ff 2e       	mov	r15, r31
    2a3e:	f0 2d       	mov	r31, r0
        float n = 3;
        
        
        while(1)
    {     
         Pi4-=(1/n);
    2a40:	a5 01       	movw	r20, r10
    2a42:	94 01       	movw	r18, r8
    2a44:	60 e0       	ldi	r22, 0x00	; 0
    2a46:	70 e0       	ldi	r23, 0x00	; 0
    2a48:	80 e8       	ldi	r24, 0x80	; 128
    2a4a:	9f e3       	ldi	r25, 0x3F	; 63
    2a4c:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <__divsf3>
    2a50:	9b 01       	movw	r18, r22
    2a52:	ac 01       	movw	r20, r24
    2a54:	c7 01       	movw	r24, r14
    2a56:	b6 01       	movw	r22, r12
    2a58:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__subsf3>
    2a5c:	6b 01       	movw	r12, r22
    2a5e:	7c 01       	movw	r14, r24
         n+=2;
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	40 e0       	ldi	r20, 0x00	; 0
    2a66:	50 e4       	ldi	r21, 0x40	; 64
    2a68:	c5 01       	movw	r24, r10
    2a6a:	b4 01       	movw	r22, r8
    2a6c:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__addsf3>
    2a70:	4b 01       	movw	r8, r22
    2a72:	5c 01       	movw	r10, r24
         Pi4+=(1/n);
    2a74:	9b 01       	movw	r18, r22
    2a76:	ac 01       	movw	r20, r24
    2a78:	60 e0       	ldi	r22, 0x00	; 0
    2a7a:	70 e0       	ldi	r23, 0x00	; 0
    2a7c:	80 e8       	ldi	r24, 0x80	; 128
    2a7e:	9f e3       	ldi	r25, 0x3F	; 63
    2a80:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <__divsf3>
    2a84:	a7 01       	movw	r20, r14
    2a86:	96 01       	movw	r18, r12
    2a88:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__addsf3>
    2a8c:	6b 01       	movw	r12, r22
    2a8e:	7c 01       	movw	r14, r24
         n+=2;
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	40 e0       	ldi	r20, 0x00	; 0
    2a96:	50 e4       	ldi	r21, 0x40	; 64
    2a98:	c5 01       	movw	r24, r10
    2a9a:	b4 01       	movw	r22, r8
    2a9c:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__addsf3>
    2aa0:	4b 01       	movw	r8, r22
    2aa2:	5c 01       	movw	r10, r24
         Pi=4*Pi4;
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	40 e8       	ldi	r20, 0x80	; 128
    2aaa:	50 e4       	ldi	r21, 0x40	; 64
    2aac:	c7 01       	movw	r24, r14
    2aae:	b6 01       	movw	r22, r12
    2ab0:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <__mulsf3>
    2ab4:	60 93 a0 2c 	sts	0x2CA0, r22	; 0x802ca0 <Pi>
    2ab8:	70 93 a1 2c 	sts	0x2CA1, r23	; 0x802ca1 <Pi+0x1>
    2abc:	80 93 a2 2c 	sts	0x2CA2, r24	; 0x802ca2 <Pi+0x2>
    2ac0:	90 93 a3 2c 	sts	0x2CA3, r25	; 0x802ca3 <Pi+0x3>
         
        vTaskDelay(5/ portTICK_RATE_MS);
    2ac4:	65 e0       	ldi	r22, 0x05	; 5
    2ac6:	70 e0       	ldi	r23, 0x00	; 0
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <vTaskDelay>
    2ad0:	b7 cf       	rjmp	.-146    	; 0x2a40 <vLeibniz+0x1c>

00002ad2 <vSteuerTask>:
	}
}

void vSteuerTask(void *pvParameters)
{
    2ad2:	cf 93       	push	r28
    2ad4:	df 93       	push	r29
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
    2ada:	2e 97       	sbiw	r28, 0x0e	; 14
    2adc:	cd bf       	out	0x3d, r28	; 61
    2ade:	de bf       	out	0x3e, r29	; 62
    
    while(1)
    
    {
        vDisplayClear();
        sprintf(Pi_String, "%f",Pi);
    2ae0:	0f 2e       	mov	r0, r31
    2ae2:	fd e0       	ldi	r31, 0x0D	; 13
    2ae4:	6f 2e       	mov	r6, r31
    2ae6:	f0 e2       	ldi	r31, 0x20	; 32
    2ae8:	7f 2e       	mov	r7, r31
    2aea:	f0 2d       	mov	r31, r0
    2aec:	5e 01       	movw	r10, r28
    2aee:	25 e0       	ldi	r18, 0x05	; 5
    2af0:	a2 0e       	add	r10, r18
    2af2:	b1 1c       	adc	r11, r1
        vDisplayWriteStringAtPos(0,0,"Pi=%s",Pi_String);
    2af4:	0f 2e       	mov	r0, r31
    2af6:	f0 e1       	ldi	r31, 0x10	; 16
    2af8:	8f 2e       	mov	r8, r31
    2afa:	f0 e2       	ldi	r31, 0x20	; 32
    2afc:	9f 2e       	mov	r9, r31
    2afe:	f0 2d       	mov	r31, r0
    char Pi_String[10];
    
    while(1)
    
    {
        vDisplayClear();
    2b00:	0e 94 3a 19 	call	0x3274	; 0x3274 <vDisplayClear>
        sprintf(Pi_String, "%f",Pi);
    2b04:	80 91 a3 2c 	lds	r24, 0x2CA3	; 0x802ca3 <Pi+0x3>
    2b08:	8f 93       	push	r24
    2b0a:	80 91 a2 2c 	lds	r24, 0x2CA2	; 0x802ca2 <Pi+0x2>
    2b0e:	8f 93       	push	r24
    2b10:	80 91 a1 2c 	lds	r24, 0x2CA1	; 0x802ca1 <Pi+0x1>
    2b14:	8f 93       	push	r24
    2b16:	80 91 a0 2c 	lds	r24, 0x2CA0	; 0x802ca0 <Pi>
    2b1a:	8f 93       	push	r24
    2b1c:	7f 92       	push	r7
    2b1e:	6f 92       	push	r6
    2b20:	bf 92       	push	r11
    2b22:	af 92       	push	r10
    2b24:	0e 94 53 24 	call	0x48a6	; 0x48a6 <sprintf>
        vDisplayWriteStringAtPos(0,0,"Pi=%s",Pi_String);
    2b28:	bf 92       	push	r11
    2b2a:	af 92       	push	r10
    2b2c:	9f 92       	push	r9
    2b2e:	8f 92       	push	r8
    2b30:	1f 92       	push	r1
    2b32:	1f 92       	push	r1
    2b34:	1f 92       	push	r1
    2b36:	1f 92       	push	r1
    2b38:	0e 94 45 19 	call	0x328a	; 0x328a <vDisplayWriteStringAtPos>
       
        
        xTaskNotifyWait(0,0xfffffff,&Buttonvalue,0/portTICK_RATE_MS);
    2b3c:	c1 2c       	mov	r12, r1
    2b3e:	d1 2c       	mov	r13, r1
    2b40:	76 01       	movw	r14, r12
    2b42:	8e 01       	movw	r16, r28
    2b44:	0f 5f       	subi	r16, 0xFF	; 255
    2b46:	1f 4f       	sbci	r17, 0xFF	; 255
    2b48:	2f ef       	ldi	r18, 0xFF	; 255
    2b4a:	3f ef       	ldi	r19, 0xFF	; 255
    2b4c:	4f ef       	ldi	r20, 0xFF	; 255
    2b4e:	5f e0       	ldi	r21, 0x0F	; 15
    2b50:	60 e0       	ldi	r22, 0x00	; 0
    2b52:	70 e0       	ldi	r23, 0x00	; 0
    2b54:	cb 01       	movw	r24, r22
    2b56:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <xTaskNotifyWait>
        
        if (Buttonvalue&BUTTON1SHORTPRESSEDMASK)
    2b5a:	89 81       	ldd	r24, Y+1	; 0x01
    2b5c:	cd bf       	out	0x3d, r28	; 61
    2b5e:	de bf       	out	0x3e, r29	; 62
    2b60:	80 ff       	sbrs	r24, 0
    2b62:	1a c0       	rjmp	.+52     	; 0x2b98 <vSteuerTask+0xc6>
        {
            if (xLeibniz==NULL)
    2b64:	80 91 d5 2c 	lds	r24, 0x2CD5	; 0x802cd5 <xLeibniz>
    2b68:	90 91 d6 2c 	lds	r25, 0x2CD6	; 0x802cd6 <xLeibniz+0x1>
    2b6c:	00 97       	sbiw	r24, 0x00	; 0
    2b6e:	91 f4       	brne	.+36     	; 0x2b94 <vSteuerTask+0xc2>
            {
                 xTaskCreate( vLeibniz, (const char *) "Leibniz", configMINIMAL_STACK_SIZE+10, NULL, 1, &xLeibniz);
    2b70:	0f 2e       	mov	r0, r31
    2b72:	f5 ed       	ldi	r31, 0xD5	; 213
    2b74:	ef 2e       	mov	r14, r31
    2b76:	fc e2       	ldi	r31, 0x2C	; 44
    2b78:	ff 2e       	mov	r15, r31
    2b7a:	f0 2d       	mov	r31, r0
    2b7c:	01 e0       	ldi	r16, 0x01	; 1
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	42 ed       	ldi	r20, 0xD2	; 210
    2b84:	50 e0       	ldi	r21, 0x00	; 0
    2b86:	66 e1       	ldi	r22, 0x16	; 22
    2b88:	70 e2       	ldi	r23, 0x20	; 32
    2b8a:	82 e1       	ldi	r24, 0x12	; 18
    2b8c:	95 e1       	ldi	r25, 0x15	; 21
    2b8e:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <xTaskCreate>
    2b92:	02 c0       	rjmp	.+4      	; 0x2b98 <vSteuerTask+0xc6>
            }
            else
            {
                vTaskResume(xLeibniz); 
    2b94:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <vTaskResume>
            }            
            
        }
        
        if(Buttonvalue&BUTTON2SHORTPRESSEDMASK)
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	81 ff       	sbrs	r24, 1
    2b9c:	06 c0       	rjmp	.+12     	; 0x2baa <vSteuerTask+0xd8>
        {
            vTaskSuspend(xLeibniz);
    2b9e:	80 91 d5 2c 	lds	r24, 0x2CD5	; 0x802cd5 <xLeibniz>
    2ba2:	90 91 d6 2c 	lds	r25, 0x2CD6	; 0x802cd6 <xLeibniz+0x1>
    2ba6:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <vTaskSuspend>
        }
        if(Buttonvalue&BUTTON3SHORTPRESSEDMASK)
    2baa:	89 81       	ldd	r24, Y+1	; 0x01
    2bac:	82 ff       	sbrs	r24, 2
    2bae:	0a c0       	rjmp	.+20     	; 0x2bc4 <vSteuerTask+0xf2>
        {
            vTaskDelete(xLeibniz);
    2bb0:	80 91 d5 2c 	lds	r24, 0x2CD5	; 0x802cd5 <xLeibniz>
    2bb4:	90 91 d6 2c 	lds	r25, 0x2CD6	; 0x802cd6 <xLeibniz+0x1>
    2bb8:	0e 94 04 0c 	call	0x1808	; 0x1808 <vTaskDelete>
            xLeibniz=NULL;
    2bbc:	10 92 d5 2c 	sts	0x2CD5, r1	; 0x802cd5 <xLeibniz>
    2bc0:	10 92 d6 2c 	sts	0x2CD6, r1	; 0x802cd6 <xLeibniz+0x1>
        }
        vTaskDelay(500 / portTICK_RATE_MS);
    2bc4:	64 ef       	ldi	r22, 0xF4	; 244
    2bc6:	71 e0       	ldi	r23, 0x01	; 1
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <vTaskDelay>
    }
    2bd0:	97 cf       	rjmp	.-210    	; 0x2b00 <vSteuerTask+0x2e>

00002bd2 <vButtonTask>:
        
    
}

void vButtonTask(void *pvParameters) {
    initButtons();
    2bd2:	0e 94 ca 01 	call	0x394	; 0x394 <initButtons>
    vTaskDelay(3000);
    2bd6:	68 eb       	ldi	r22, 0xB8	; 184
    2bd8:	7b e0       	ldi	r23, 0x0B	; 11
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <vTaskDelay>

    for(;;) {
        updateButtons();
    2be2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <updateButtons>
        
        if(getButtonPress(BUTTON1) == SHORT_PRESSED) {
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    2be8:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <getButtonPress>
    2bec:	81 30       	cpi	r24, 0x01	; 1
    2bee:	69 f4       	brne	.+26     	; 0x2c0a <vButtonTask+0x38>
            
            xTaskNotify(xSteuerTask,BUTTON1SHORTPRESSEDMASK,eSetValueWithOverwrite);
    2bf0:	00 e0       	ldi	r16, 0x00	; 0
    2bf2:	10 e0       	ldi	r17, 0x00	; 0
    2bf4:	23 e0       	ldi	r18, 0x03	; 3
    2bf6:	41 e0       	ldi	r20, 0x01	; 1
    2bf8:	50 e0       	ldi	r21, 0x00	; 0
    2bfa:	60 e0       	ldi	r22, 0x00	; 0
    2bfc:	70 e0       	ldi	r23, 0x00	; 0
    2bfe:	80 91 d1 2c 	lds	r24, 0x2CD1	; 0x802cd1 <xSteuerTask>
    2c02:	90 91 d2 2c 	lds	r25, 0x2CD2	; 0x802cd2 <xSteuerTask+0x1>
    2c06:	0e 94 66 11 	call	0x22cc	; 0x22cc <xTaskGenericNotify>
            
            
        }
        if(getButtonPress(BUTTON2) == SHORT_PRESSED) {
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <getButtonPress>
    2c10:	81 30       	cpi	r24, 0x01	; 1
    2c12:	69 f4       	brne	.+26     	; 0x2c2e <vButtonTask+0x5c>
            
            xTaskNotify(xSteuerTask,BUTTON2SHORTPRESSEDMASK,eSetValueWithOverwrite);
    2c14:	00 e0       	ldi	r16, 0x00	; 0
    2c16:	10 e0       	ldi	r17, 0x00	; 0
    2c18:	23 e0       	ldi	r18, 0x03	; 3
    2c1a:	42 e0       	ldi	r20, 0x02	; 2
    2c1c:	50 e0       	ldi	r21, 0x00	; 0
    2c1e:	60 e0       	ldi	r22, 0x00	; 0
    2c20:	70 e0       	ldi	r23, 0x00	; 0
    2c22:	80 91 d1 2c 	lds	r24, 0x2CD1	; 0x802cd1 <xSteuerTask>
    2c26:	90 91 d2 2c 	lds	r25, 0x2CD2	; 0x802cd2 <xSteuerTask+0x1>
    2c2a:	0e 94 66 11 	call	0x22cc	; 0x22cc <xTaskGenericNotify>
        }
        if(getButtonPress(BUTTON3) == SHORT_PRESSED) {
    2c2e:	82 e0       	ldi	r24, 0x02	; 2
    2c30:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <getButtonPress>
    2c34:	81 30       	cpi	r24, 0x01	; 1
    2c36:	69 f4       	brne	.+26     	; 0x2c52 <vButtonTask+0x80>
            
            xTaskNotify(xSteuerTask,BUTTON3SHORTPRESSEDMASK,eSetValueWithOverwrite);
    2c38:	00 e0       	ldi	r16, 0x00	; 0
    2c3a:	10 e0       	ldi	r17, 0x00	; 0
    2c3c:	23 e0       	ldi	r18, 0x03	; 3
    2c3e:	44 e0       	ldi	r20, 0x04	; 4
    2c40:	50 e0       	ldi	r21, 0x00	; 0
    2c42:	60 e0       	ldi	r22, 0x00	; 0
    2c44:	70 e0       	ldi	r23, 0x00	; 0
    2c46:	80 91 d1 2c 	lds	r24, 0x2CD1	; 0x802cd1 <xSteuerTask>
    2c4a:	90 91 d2 2c 	lds	r25, 0x2CD2	; 0x802cd2 <xSteuerTask+0x1>
    2c4e:	0e 94 66 11 	call	0x22cc	; 0x22cc <xTaskGenericNotify>
            
        }
        if(getButtonPress(BUTTON4) == SHORT_PRESSED) {
    2c52:	83 e0       	ldi	r24, 0x03	; 3
    2c54:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <getButtonPress>
    2c58:	81 30       	cpi	r24, 0x01	; 1
    2c5a:	69 f4       	brne	.+26     	; 0x2c76 <vButtonTask+0xa4>
            
            xTaskNotify(xSteuerTask,BUTTON4SHORTPRESSEDMASK,eSetValueWithOverwrite);
    2c5c:	00 e0       	ldi	r16, 0x00	; 0
    2c5e:	10 e0       	ldi	r17, 0x00	; 0
    2c60:	23 e0       	ldi	r18, 0x03	; 3
    2c62:	48 e0       	ldi	r20, 0x08	; 8
    2c64:	50 e0       	ldi	r21, 0x00	; 0
    2c66:	60 e0       	ldi	r22, 0x00	; 0
    2c68:	70 e0       	ldi	r23, 0x00	; 0
    2c6a:	80 91 d1 2c 	lds	r24, 0x2CD1	; 0x802cd1 <xSteuerTask>
    2c6e:	90 91 d2 2c 	lds	r25, 0x2CD2	; 0x802cd2 <xSteuerTask+0x1>
    2c72:	0e 94 66 11 	call	0x22cc	; 0x22cc <xTaskGenericNotify>
            
        }
        if(getButtonPress(BUTTON1) == LONG_PRESSED) {
    2c76:	80 e0       	ldi	r24, 0x00	; 0
    2c78:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <getButtonPress>
    2c7c:	81 11       	cpse	r24, r1
    2c7e:	0d c0       	rjmp	.+26     	; 0x2c9a <vButtonTask+0xc8>
            
            xTaskNotify(xSteuerTask,BUTTON1LONGPRESSEDMASK,eSetValueWithOverwrite);
    2c80:	00 e0       	ldi	r16, 0x00	; 0
    2c82:	10 e0       	ldi	r17, 0x00	; 0
    2c84:	23 e0       	ldi	r18, 0x03	; 3
    2c86:	40 e1       	ldi	r20, 0x10	; 16
    2c88:	50 e0       	ldi	r21, 0x00	; 0
    2c8a:	60 e0       	ldi	r22, 0x00	; 0
    2c8c:	70 e0       	ldi	r23, 0x00	; 0
    2c8e:	80 91 d1 2c 	lds	r24, 0x2CD1	; 0x802cd1 <xSteuerTask>
    2c92:	90 91 d2 2c 	lds	r25, 0x2CD2	; 0x802cd2 <xSteuerTask+0x1>
    2c96:	0e 94 66 11 	call	0x22cc	; 0x22cc <xTaskGenericNotify>
            
        }
        if(getButtonPress(BUTTON2) == LONG_PRESSED) {
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <getButtonPress>
    2ca0:	81 11       	cpse	r24, r1
    2ca2:	0d c0       	rjmp	.+26     	; 0x2cbe <vButtonTask+0xec>
            
            xTaskNotify(xSteuerTask,BUTTON2LONGPRESSEDMASK,eSetValueWithOverwrite);
    2ca4:	00 e0       	ldi	r16, 0x00	; 0
    2ca6:	10 e0       	ldi	r17, 0x00	; 0
    2ca8:	23 e0       	ldi	r18, 0x03	; 3
    2caa:	40 e2       	ldi	r20, 0x20	; 32
    2cac:	50 e0       	ldi	r21, 0x00	; 0
    2cae:	60 e0       	ldi	r22, 0x00	; 0
    2cb0:	70 e0       	ldi	r23, 0x00	; 0
    2cb2:	80 91 d1 2c 	lds	r24, 0x2CD1	; 0x802cd1 <xSteuerTask>
    2cb6:	90 91 d2 2c 	lds	r25, 0x2CD2	; 0x802cd2 <xSteuerTask+0x1>
    2cba:	0e 94 66 11 	call	0x22cc	; 0x22cc <xTaskGenericNotify>
            
        }
        if(getButtonPress(BUTTON3) == LONG_PRESSED) {
    2cbe:	82 e0       	ldi	r24, 0x02	; 2
    2cc0:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <getButtonPress>
    2cc4:	81 11       	cpse	r24, r1
    2cc6:	0d c0       	rjmp	.+26     	; 0x2ce2 <vButtonTask+0x110>
            
            xTaskNotify(xSteuerTask,BUTTON3LONGPRESSEDMASK,eSetValueWithOverwrite);
    2cc8:	00 e0       	ldi	r16, 0x00	; 0
    2cca:	10 e0       	ldi	r17, 0x00	; 0
    2ccc:	23 e0       	ldi	r18, 0x03	; 3
    2cce:	40 e4       	ldi	r20, 0x40	; 64
    2cd0:	50 e0       	ldi	r21, 0x00	; 0
    2cd2:	60 e0       	ldi	r22, 0x00	; 0
    2cd4:	70 e0       	ldi	r23, 0x00	; 0
    2cd6:	80 91 d1 2c 	lds	r24, 0x2CD1	; 0x802cd1 <xSteuerTask>
    2cda:	90 91 d2 2c 	lds	r25, 0x2CD2	; 0x802cd2 <xSteuerTask+0x1>
    2cde:	0e 94 66 11 	call	0x22cc	; 0x22cc <xTaskGenericNotify>
            
        }
        if(getButtonPress(BUTTON4) == LONG_PRESSED) {
    2ce2:	83 e0       	ldi	r24, 0x03	; 3
    2ce4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <getButtonPress>
    2ce8:	81 11       	cpse	r24, r1
    2cea:	0d c0       	rjmp	.+26     	; 0x2d06 <vButtonTask+0x134>
            
            xTaskNotify(xSteuerTask,BUTTON4LONGPRESSEDMASK,eSetValueWithOverwrite);
    2cec:	00 e0       	ldi	r16, 0x00	; 0
    2cee:	10 e0       	ldi	r17, 0x00	; 0
    2cf0:	23 e0       	ldi	r18, 0x03	; 3
    2cf2:	40 e8       	ldi	r20, 0x80	; 128
    2cf4:	50 e0       	ldi	r21, 0x00	; 0
    2cf6:	60 e0       	ldi	r22, 0x00	; 0
    2cf8:	70 e0       	ldi	r23, 0x00	; 0
    2cfa:	80 91 d1 2c 	lds	r24, 0x2CD1	; 0x802cd1 <xSteuerTask>
    2cfe:	90 91 d2 2c 	lds	r25, 0x2CD2	; 0x802cd2 <xSteuerTask+0x1>
    2d02:	0e 94 66 11 	call	0x22cc	; 0x22cc <xTaskGenericNotify>
            
        }
        vTaskDelay((1000/BUTTON_UPDATE_FREQUENCY_HZ)/portTICK_RATE_MS);
    2d06:	6a e0       	ldi	r22, 0x0A	; 10
    2d08:	70 e0       	ldi	r23, 0x00	; 0
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <vTaskDelay>
    }
    2d12:	67 cf       	rjmp	.-306    	; 0x2be2 <vButtonTask+0x10>

00002d14 <vApplicationIdleHook>:
TaskHandle_t xLeibniz;
TaskHandle_t xSteuerTask;
TaskHandle_t xButtonTaskHandle;

void vApplicationIdleHook( void )
{	
    2d14:	08 95       	ret

00002d16 <main>:
	
}

int main(void)
{
    2d16:	ef 92       	push	r14
    2d18:	ff 92       	push	r15
    2d1a:	0f 93       	push	r16
    resetReason_t reason = getResetReason();
    2d1c:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <getResetReason>

	vInitClock();
    2d20:	0e 94 da 14 	call	0x29b4	; 0x29b4 <vInitClock>
	vInitDisplay();
    2d24:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <vInitDisplay>
	
    xTaskCreate(vButtonTask, (const char *) "ButtonTask", configMINIMAL_STACK_SIZE, NULL, 2, &xButtonTaskHandle);
    2d28:	0f 2e       	mov	r0, r31
    2d2a:	f3 ed       	ldi	r31, 0xD3	; 211
    2d2c:	ef 2e       	mov	r14, r31
    2d2e:	fc e2       	ldi	r31, 0x2C	; 44
    2d30:	ff 2e       	mov	r15, r31
    2d32:	f0 2d       	mov	r31, r0
    2d34:	02 e0       	ldi	r16, 0x02	; 2
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	48 ec       	ldi	r20, 0xC8	; 200
    2d3c:	50 e0       	ldi	r21, 0x00	; 0
    2d3e:	6e e1       	ldi	r22, 0x1E	; 30
    2d40:	70 e2       	ldi	r23, 0x20	; 32
    2d42:	89 ee       	ldi	r24, 0xE9	; 233
    2d44:	95 e1       	ldi	r25, 0x15	; 21
    2d46:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <xTaskCreate>
	//xTaskCreate( vLeibniz, (const char *) "Leibniz", configMINIMAL_STACK_SIZE+10, NULL, 1, &xLeibniz);
    xTaskCreate( vSteuerTask, (const char *) "SteuerTask", configMINIMAL_STACK_SIZE+10, NULL, 2, &xSteuerTask);
    2d4a:	0f 2e       	mov	r0, r31
    2d4c:	f1 ed       	ldi	r31, 0xD1	; 209
    2d4e:	ef 2e       	mov	r14, r31
    2d50:	fc e2       	ldi	r31, 0x2C	; 44
    2d52:	ff 2e       	mov	r15, r31
    2d54:	f0 2d       	mov	r31, r0
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	42 ed       	ldi	r20, 0xD2	; 210
    2d5c:	50 e0       	ldi	r21, 0x00	; 0
    2d5e:	69 e2       	ldi	r22, 0x29	; 41
    2d60:	70 e2       	ldi	r23, 0x20	; 32
    2d62:	89 e6       	ldi	r24, 0x69	; 105
    2d64:	95 e1       	ldi	r25, 0x15	; 21
    2d66:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <xTaskCreate>

	
	vTaskStartScheduler();
    2d6a:	0e 94 aa 0c 	call	0x1954	; 0x1954 <vTaskStartScheduler>
	return 0;
}
    2d6e:	80 e0       	ldi	r24, 0x00	; 0
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	0f 91       	pop	r16
    2d74:	ff 90       	pop	r15
    2d76:	ef 90       	pop	r14
    2d78:	08 95       	ret

00002d7a <__vector_108>:
 void displayHome() {
	 command(0x02);
 }
 void _displayClear() {
	 command(0x01);
	 delayUS(2000);
    2d7a:	1f 92       	push	r1
    2d7c:	0f 92       	push	r0
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	0f 92       	push	r0
    2d82:	11 24       	eor	r1, r1
    2d84:	0b b6       	in	r0, 0x3b	; 59
    2d86:	0f 92       	push	r0
    2d88:	2f 93       	push	r18
    2d8a:	3f 93       	push	r19
    2d8c:	4f 93       	push	r20
    2d8e:	5f 93       	push	r21
    2d90:	6f 93       	push	r22
    2d92:	7f 93       	push	r23
    2d94:	8f 93       	push	r24
    2d96:	9f 93       	push	r25
    2d98:	af 93       	push	r26
    2d9a:	bf 93       	push	r27
    2d9c:	ef 93       	push	r30
    2d9e:	ff 93       	push	r31
    2da0:	cf 93       	push	r28
    2da2:	df 93       	push	r29
    2da4:	1f 92       	push	r1
    2da6:	cd b7       	in	r28, 0x3d	; 61
    2da8:	de b7       	in	r29, 0x3e	; 62
    2daa:	19 82       	std	Y+1, r1	; 0x01
    2dac:	9e 01       	movw	r18, r28
    2dae:	2f 5f       	subi	r18, 0xFF	; 255
    2db0:	3f 4f       	sbci	r19, 0xFF	; 255
    2db2:	41 e0       	ldi	r20, 0x01	; 1
    2db4:	50 e0       	ldi	r21, 0x00	; 0
    2db6:	60 e0       	ldi	r22, 0x00	; 0
    2db8:	70 e0       	ldi	r23, 0x00	; 0
    2dba:	80 91 d9 2c 	lds	r24, 0x2CD9	; 0x802cd9 <egDisplayTiming>
    2dbe:	90 91 da 2c 	lds	r25, 0x2CDA	; 0x802cda <egDisplayTiming+0x1>
    2dc2:	0e 94 85 04 	call	0x90a	; 0x90a <xEventGroupSetBitsFromISR>
    2dc6:	60 e0       	ldi	r22, 0x00	; 0
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	9b e0       	ldi	r25, 0x0B	; 11
    2dcc:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <TC0_ConfigClockSource>
    2dd0:	10 92 06 0b 	sts	0x0B06, r1	; 0x800b06 <__TEXT_REGION_LENGTH__+0x700b06>
    2dd4:	0f 90       	pop	r0
    2dd6:	df 91       	pop	r29
    2dd8:	cf 91       	pop	r28
    2dda:	ff 91       	pop	r31
    2ddc:	ef 91       	pop	r30
    2dde:	bf 91       	pop	r27
    2de0:	af 91       	pop	r26
    2de2:	9f 91       	pop	r25
    2de4:	8f 91       	pop	r24
    2de6:	7f 91       	pop	r23
    2de8:	6f 91       	pop	r22
    2dea:	5f 91       	pop	r21
    2dec:	4f 91       	pop	r20
    2dee:	3f 91       	pop	r19
    2df0:	2f 91       	pop	r18
    2df2:	0f 90       	pop	r0
    2df4:	0b be       	out	0x3b, r0	; 59
    2df6:	0f 90       	pop	r0
    2df8:	0f be       	out	0x3f, r0	; 63
    2dfa:	0f 90       	pop	r0
    2dfc:	1f 90       	pop	r1
    2dfe:	18 95       	reti

00002e00 <delayUS>:
    2e00:	cf 92       	push	r12
    2e02:	df 92       	push	r13
    2e04:	ef 92       	push	r14
    2e06:	ff 92       	push	r15
    2e08:	0f 93       	push	r16
    2e0a:	6b 01       	movw	r12, r22
    2e0c:	7c 01       	movw	r14, r24
    2e0e:	82 e0       	ldi	r24, 0x02	; 2
    2e10:	c8 16       	cp	r12, r24
    2e12:	d1 04       	cpc	r13, r1
    2e14:	e1 04       	cpc	r14, r1
    2e16:	f1 04       	cpc	r15, r1
    2e18:	08 f4       	brcc	.+2      	; 0x2e1c <delayUS+0x1c>
    2e1a:	4e c0       	rjmp	.+156    	; 0x2eb8 <delayUS+0xb8>
    2e1c:	e0 e0       	ldi	r30, 0x00	; 0
    2e1e:	fb e0       	ldi	r31, 0x0B	; 11
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	86 83       	std	Z+6, r24	; 0x06
    2e24:	10 a2       	std	Z+32, r1	; 0x20
    2e26:	11 a2       	std	Z+33, r1	; 0x21
    2e28:	60 e0       	ldi	r22, 0x00	; 0
    2e2a:	80 e0       	ldi	r24, 0x00	; 0
    2e2c:	9b e0       	ldi	r25, 0x0B	; 11
    2e2e:	0e 94 df 02 	call	0x5be	; 0x5be <TC0_ConfigWGM>
    2e32:	8e ef       	ldi	r24, 0xFE	; 254
    2e34:	c8 16       	cp	r12, r24
    2e36:	8f ef       	ldi	r24, 0xFF	; 255
    2e38:	d8 06       	cpc	r13, r24
    2e3a:	e1 04       	cpc	r14, r1
    2e3c:	f1 04       	cpc	r15, r1
    2e3e:	70 f4       	brcc	.+28     	; 0x2e5c <delayUS+0x5c>
    2e40:	f6 94       	lsr	r15
    2e42:	e7 94       	ror	r14
    2e44:	d7 94       	ror	r13
    2e46:	c7 94       	ror	r12
    2e48:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x700b26>
    2e4c:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x700b27>
    2e50:	65 e0       	ldi	r22, 0x05	; 5
    2e52:	80 e0       	ldi	r24, 0x00	; 0
    2e54:	9b e0       	ldi	r25, 0x0B	; 11
    2e56:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <TC0_ConfigClockSource>
    2e5a:	19 c0       	rjmp	.+50     	; 0x2e8e <delayUS+0x8e>
    2e5c:	80 e4       	ldi	r24, 0x40	; 64
    2e5e:	c8 16       	cp	r12, r24
    2e60:	82 e4       	ldi	r24, 0x42	; 66
    2e62:	d8 06       	cpc	r13, r24
    2e64:	8f e0       	ldi	r24, 0x0F	; 15
    2e66:	e8 06       	cpc	r14, r24
    2e68:	f1 04       	cpc	r15, r1
    2e6a:	88 f4       	brcc	.+34     	; 0x2e8e <delayUS+0x8e>
    2e6c:	68 94       	set
    2e6e:	14 f8       	bld	r1, 4
    2e70:	f6 94       	lsr	r15
    2e72:	e7 94       	ror	r14
    2e74:	d7 94       	ror	r13
    2e76:	c7 94       	ror	r12
    2e78:	16 94       	lsr	r1
    2e7a:	d1 f7       	brne	.-12     	; 0x2e70 <delayUS+0x70>
    2e7c:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x700b26>
    2e80:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x700b27>
    2e84:	67 e0       	ldi	r22, 0x07	; 7
    2e86:	80 e0       	ldi	r24, 0x00	; 0
    2e88:	9b e0       	ldi	r25, 0x0B	; 11
    2e8a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <TC0_ConfigClockSource>
    2e8e:	0f 2e       	mov	r0, r31
    2e90:	f4 ef       	ldi	r31, 0xF4	; 244
    2e92:	cf 2e       	mov	r12, r31
    2e94:	dd 24       	eor	r13, r13
    2e96:	d3 94       	inc	r13
    2e98:	e1 2c       	mov	r14, r1
    2e9a:	f1 2c       	mov	r15, r1
    2e9c:	f0 2d       	mov	r31, r0
    2e9e:	00 e0       	ldi	r16, 0x00	; 0
    2ea0:	21 e0       	ldi	r18, 0x01	; 1
    2ea2:	41 e0       	ldi	r20, 0x01	; 1
    2ea4:	50 e0       	ldi	r21, 0x00	; 0
    2ea6:	60 e0       	ldi	r22, 0x00	; 0
    2ea8:	70 e0       	ldi	r23, 0x00	; 0
    2eaa:	80 91 d9 2c 	lds	r24, 0x2CD9	; 0x802cd9 <egDisplayTiming>
    2eae:	90 91 da 2c 	lds	r25, 0x2CDA	; 0x802cda <egDisplayTiming+0x1>
    2eb2:	0e 94 0a 03 	call	0x614	; 0x614 <xEventGroupWaitBits>
    2eb6:	11 c0       	rjmp	.+34     	; 0x2eda <delayUS+0xda>
    2eb8:	e0 e0       	ldi	r30, 0x00	; 0
    2eba:	fb e0       	ldi	r31, 0x0B	; 11
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	86 83       	std	Z+6, r24	; 0x06
    2ec0:	10 a2       	std	Z+32, r1	; 0x20
    2ec2:	11 a2       	std	Z+33, r1	; 0x21
    2ec4:	60 e0       	ldi	r22, 0x00	; 0
    2ec6:	80 e0       	ldi	r24, 0x00	; 0
    2ec8:	9b e0       	ldi	r25, 0x0B	; 11
    2eca:	0e 94 df 02 	call	0x5be	; 0x5be <TC0_ConfigWGM>
    2ece:	c1 2c       	mov	r12, r1
    2ed0:	d1 2c       	mov	r13, r1
    2ed2:	76 01       	movw	r14, r12
    2ed4:	68 94       	set
    2ed6:	c1 f8       	bld	r12, 1
    2ed8:	b3 cf       	rjmp	.-154    	; 0x2e40 <delayUS+0x40>
    2eda:	0f 91       	pop	r16
    2edc:	ff 90       	pop	r15
    2ede:	ef 90       	pop	r14
    2ee0:	df 90       	pop	r13
    2ee2:	cf 90       	pop	r12
    2ee4:	08 95       	ret

00002ee6 <setPort>:
    2ee6:	82 95       	swap	r24
    2ee8:	80 7f       	andi	r24, 0xF0	; 240
    2eea:	e0 e0       	ldi	r30, 0x00	; 0
    2eec:	f6 e0       	ldi	r31, 0x06	; 6
    2eee:	94 81       	ldd	r25, Z+4	; 0x04
    2ef0:	28 2f       	mov	r18, r24
    2ef2:	2f 60       	ori	r18, 0x0F	; 15
    2ef4:	92 23       	and	r25, r18
    2ef6:	94 83       	std	Z+4, r25	; 0x04
    2ef8:	94 81       	ldd	r25, Z+4	; 0x04
    2efa:	89 2b       	or	r24, r25
    2efc:	84 83       	std	Z+4, r24	; 0x04
    2efe:	08 95       	ret

00002f00 <Nybble>:
    2f00:	1f 93       	push	r17
    2f02:	cf 93       	push	r28
    2f04:	df 93       	push	r29
    2f06:	c0 e6       	ldi	r28, 0x60	; 96
    2f08:	d6 e0       	ldi	r29, 0x06	; 6
    2f0a:	14 e0       	ldi	r17, 0x04	; 4
    2f0c:	1d 83       	std	Y+5, r17	; 0x05
    2f0e:	61 e0       	ldi	r22, 0x01	; 1
    2f10:	70 e0       	ldi	r23, 0x00	; 0
    2f12:	80 e0       	ldi	r24, 0x00	; 0
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	0e 94 00 17 	call	0x2e00	; 0x2e00 <delayUS>
    2f1a:	1e 83       	std	Y+6, r17	; 0x06
    2f1c:	df 91       	pop	r29
    2f1e:	cf 91       	pop	r28
    2f20:	1f 91       	pop	r17
    2f22:	08 95       	ret

00002f24 <command>:
    2f24:	cf 93       	push	r28
    2f26:	c8 2f       	mov	r28, r24
    2f28:	82 95       	swap	r24
    2f2a:	8f 70       	andi	r24, 0x0F	; 15
    2f2c:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <setPort>
    2f30:	e0 e6       	ldi	r30, 0x60	; 96
    2f32:	f6 e0       	ldi	r31, 0x06	; 6
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	86 83       	std	Z+6, r24	; 0x06
    2f38:	82 e0       	ldi	r24, 0x02	; 2
    2f3a:	86 83       	std	Z+6, r24	; 0x06
    2f3c:	0e 94 80 17 	call	0x2f00	; 0x2f00 <Nybble>
    2f40:	8c 2f       	mov	r24, r28
    2f42:	8f 70       	andi	r24, 0x0F	; 15
    2f44:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <setPort>
    2f48:	0e 94 80 17 	call	0x2f00	; 0x2f00 <Nybble>
    2f4c:	cf 91       	pop	r28
    2f4e:	08 95       	ret

00002f50 <write>:
    2f50:	cf 93       	push	r28
    2f52:	c8 2f       	mov	r28, r24
    2f54:	82 95       	swap	r24
    2f56:	8f 70       	andi	r24, 0x0F	; 15
    2f58:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <setPort>
    2f5c:	e0 e6       	ldi	r30, 0x60	; 96
    2f5e:	f6 e0       	ldi	r31, 0x06	; 6
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	85 83       	std	Z+5, r24	; 0x05
    2f64:	82 e0       	ldi	r24, 0x02	; 2
    2f66:	86 83       	std	Z+6, r24	; 0x06
    2f68:	0e 94 80 17 	call	0x2f00	; 0x2f00 <Nybble>
    2f6c:	8c 2f       	mov	r24, r28
    2f6e:	8f 70       	andi	r24, 0x0F	; 15
    2f70:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <setPort>
    2f74:	0e 94 80 17 	call	0x2f00	; 0x2f00 <Nybble>
    2f78:	cf 91       	pop	r28
    2f7a:	08 95       	ret

00002f7c <vInitDisplay>:
 }
 
 void vInitDisplay() {
    2f7c:	ef 92       	push	r14
    2f7e:	ff 92       	push	r15
    2f80:	0f 93       	push	r16
	PORTA.DIRSET = PIN4_bm;
    2f82:	e0 e0       	ldi	r30, 0x00	; 0
    2f84:	f6 e0       	ldi	r31, 0x06	; 6
    2f86:	80 e1       	ldi	r24, 0x10	; 16
    2f88:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN5_bm;
    2f8a:	80 e2       	ldi	r24, 0x20	; 32
    2f8c:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN6_bm;
    2f8e:	80 e4       	ldi	r24, 0x40	; 64
    2f90:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN7_bm;
    2f92:	80 e8       	ldi	r24, 0x80	; 128
    2f94:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRSET = PIN0_bm;
    2f96:	a0 e6       	ldi	r26, 0x60	; 96
    2f98:	b6 e0       	ldi	r27, 0x06	; 6
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
    2f9c:	11 96       	adiw	r26, 0x01	; 1
    2f9e:	8c 93       	st	X, r24
    2fa0:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.DIRSET = PIN1_bm;
    2fa2:	82 e0       	ldi	r24, 0x02	; 2
    2fa4:	11 96       	adiw	r26, 0x01	; 1
    2fa6:	8c 93       	st	X, r24
    2fa8:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.DIRSET = PIN2_bm;
    2faa:	84 e0       	ldi	r24, 0x04	; 4
    2fac:	11 96       	adiw	r26, 0x01	; 1
    2fae:	8c 93       	st	X, r24
    2fb0:	11 97       	sbiw	r26, 0x01	; 1
	PORTA.OUT &= 0x0F;
    2fb2:	84 81       	ldd	r24, Z+4	; 0x04
    2fb4:	8f 70       	andi	r24, 0x0F	; 15
    2fb6:	84 83       	std	Z+4, r24	; 0x04
	PORTD.OUT &= 0xF8;
    2fb8:	14 96       	adiw	r26, 0x04	; 4
    2fba:	8c 91       	ld	r24, X
    2fbc:	14 97       	sbiw	r26, 0x04	; 4
    2fbe:	88 7f       	andi	r24, 0xF8	; 248
    2fc0:	14 96       	adiw	r26, 0x04	; 4
    2fc2:	8c 93       	st	X, r24

	if((displayLineQueue = xQueueCreate(DISPLAY_QUEUE_DEPTH, sizeof(displayLine_t))) == NULL)
    2fc4:	40 e0       	ldi	r20, 0x00	; 0
    2fc6:	66 e1       	ldi	r22, 0x16	; 22
    2fc8:	88 e0       	ldi	r24, 0x08	; 8
    2fca:	0e 94 1c 08 	call	0x1038	; 0x1038 <xQueueGenericCreate>
    2fce:	80 93 d7 2c 	sts	0x2CD7, r24	; 0x802cd7 <displayLineQueue>
    2fd2:	90 93 d8 2c 	sts	0x2CD8, r25	; 0x802cd8 <displayLineQueue+0x1>
	{
		//error(ERR_QUEUE_CREATE_HANDLE_NULL);
	}
	
	egDisplayTiming = xEventGroupCreate();
    2fd6:	0e 94 f5 02 	call	0x5ea	; 0x5ea <xEventGroupCreate>
    2fda:	80 93 d9 2c 	sts	0x2CD9, r24	; 0x802cd9 <egDisplayTiming>
    2fde:	90 93 da 2c 	sts	0x2CDA, r25	; 0x802cda <egDisplayTiming+0x1>
	

	xTaskCreate(vDisplayUpdateTask, (const char*) "dispUpdate", configMINIMAL_STACK_SIZE+150, NULL, 1, NULL);	
    2fe2:	e1 2c       	mov	r14, r1
    2fe4:	f1 2c       	mov	r15, r1
    2fe6:	01 e0       	ldi	r16, 0x01	; 1
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	4e e5       	ldi	r20, 0x5E	; 94
    2fee:	51 e0       	ldi	r21, 0x01	; 1
    2ff0:	64 e3       	ldi	r22, 0x34	; 52
    2ff2:	70 e2       	ldi	r23, 0x20	; 32
    2ff4:	8c e5       	ldi	r24, 0x5C	; 92
    2ff6:	98 e1       	ldi	r25, 0x18	; 24
    2ff8:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <xTaskCreate>
 }
    2ffc:	0f 91       	pop	r16
    2ffe:	ff 90       	pop	r15
    3000:	ef 90       	pop	r14
    3002:	08 95       	ret

00003004 <_displaySetPos>:
 
 void _displaySetPos(int line, int pos) {
	 switch(line) {
    3004:	81 30       	cpi	r24, 0x01	; 1
    3006:	91 05       	cpc	r25, r1
    3008:	79 f0       	breq	.+30     	; 0x3028 <_displaySetPos+0x24>
    300a:	1c f4       	brge	.+6      	; 0x3012 <_displaySetPos+0xe>
    300c:	89 2b       	or	r24, r25
    300e:	39 f0       	breq	.+14     	; 0x301e <_displaySetPos+0x1a>
    3010:	19 c0       	rjmp	.+50     	; 0x3044 <_displaySetPos+0x40>
    3012:	82 30       	cpi	r24, 0x02	; 2
    3014:	91 05       	cpc	r25, r1
    3016:	69 f0       	breq	.+26     	; 0x3032 <_displaySetPos+0x2e>
    3018:	03 97       	sbiw	r24, 0x03	; 3
    301a:	81 f0       	breq	.+32     	; 0x303c <_displaySetPos+0x38>
    301c:	13 c0       	rjmp	.+38     	; 0x3044 <_displaySetPos+0x40>
		 case 0:
		 command(0x80 + 0x00 + pos);
    301e:	80 e8       	ldi	r24, 0x80	; 128
    3020:	86 0f       	add	r24, r22
    3022:	0e 94 92 17 	call	0x2f24	; 0x2f24 <command>
		 break;
    3026:	0e c0       	rjmp	.+28     	; 0x3044 <_displaySetPos+0x40>
		 case 1:
		 command(0x80 + 0x40 + pos);
    3028:	80 ec       	ldi	r24, 0xC0	; 192
    302a:	86 0f       	add	r24, r22
    302c:	0e 94 92 17 	call	0x2f24	; 0x2f24 <command>
		 break;
    3030:	09 c0       	rjmp	.+18     	; 0x3044 <_displaySetPos+0x40>
		 case 2:
		 command(0x80 + 0x14 + pos);
    3032:	84 e9       	ldi	r24, 0x94	; 148
    3034:	86 0f       	add	r24, r22
    3036:	0e 94 92 17 	call	0x2f24	; 0x2f24 <command>
		 break;
    303a:	04 c0       	rjmp	.+8      	; 0x3044 <_displaySetPos+0x40>
		 case 3:
		 command(0x80 + 0x54 + pos);
    303c:	84 ed       	ldi	r24, 0xD4	; 212
    303e:	86 0f       	add	r24, r22
    3040:	0e 94 92 17 	call	0x2f24	; 0x2f24 <command>
		 break;
	 }
	 delayUS(39);
    3044:	67 e2       	ldi	r22, 0x27	; 39
    3046:	70 e0       	ldi	r23, 0x00	; 0
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	0e 94 00 17 	call	0x2e00	; 0x2e00 <delayUS>
    3050:	08 95       	ret

00003052 <_displayWriteChar>:
 }

 void _displayWriteChar(char c) {
	 write(c);
    3052:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <write>
	 delayUS(43);
    3056:	6b e2       	ldi	r22, 0x2B	; 43
    3058:	70 e0       	ldi	r23, 0x00	; 0
    305a:	80 e0       	ldi	r24, 0x00	; 0
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	0e 94 00 17 	call	0x2e00	; 0x2e00 <delayUS>
    3062:	08 95       	ret

00003064 <_displayWriteString>:
 }
 
 void _displayWriteString(char* s) {
    3064:	0f 93       	push	r16
    3066:	1f 93       	push	r17
    3068:	cf 93       	push	r28
    306a:	df 93       	push	r29
    306c:	fc 01       	movw	r30, r24
	 for(int i = 0; i < 20; i++) {
		 if(s[i] == '\0') {
    306e:	80 81       	ld	r24, Z
    3070:	81 11       	cpse	r24, r1
    3072:	0a c0       	rjmp	.+20     	; 0x3088 <_displayWriteString+0x24>
    3074:	11 c0       	rjmp	.+34     	; 0x3098 <_displayWriteString+0x34>
    3076:	89 91       	ld	r24, Y+
    3078:	88 23       	and	r24, r24
    307a:	71 f0       	breq	.+28     	; 0x3098 <_displayWriteString+0x34>
			 break;
		 }
		 _displayWriteChar(s[i]);
    307c:	0e 94 29 18 	call	0x3052	; 0x3052 <_displayWriteChar>
	 write(c);
	 delayUS(43);
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
    3080:	0c 17       	cp	r16, r28
    3082:	1d 07       	cpc	r17, r29
    3084:	c1 f7       	brne	.-16     	; 0x3076 <_displayWriteString+0x12>
    3086:	08 c0       	rjmp	.+16     	; 0x3098 <_displayWriteString+0x34>
    3088:	8f 01       	movw	r16, r30
		 if(s[i] == '\0') {
			 break;
		 }
		 _displayWriteChar(s[i]);
    308a:	0e 94 29 18 	call	0x3052	; 0x3052 <_displayWriteChar>
    308e:	e8 01       	movw	r28, r16
    3090:	21 96       	adiw	r28, 0x01	; 1
    3092:	0c 5e       	subi	r16, 0xEC	; 236
    3094:	1f 4f       	sbci	r17, 0xFF	; 255
    3096:	ef cf       	rjmp	.-34     	; 0x3076 <_displayWriteString+0x12>
	 }
 }
    3098:	df 91       	pop	r29
    309a:	cf 91       	pop	r28
    309c:	1f 91       	pop	r17
    309e:	0f 91       	pop	r16
    30a0:	08 95       	ret

000030a2 <_displayWriteStringAtPos>:

 void _displayWriteStringAtPos(int line, int pos, char* s) {
    30a2:	cf 93       	push	r28
    30a4:	df 93       	push	r29
    30a6:	ea 01       	movw	r28, r20
	 _displaySetPos(line, pos);
    30a8:	0e 94 02 18 	call	0x3004	; 0x3004 <_displaySetPos>
	 _displayWriteString(s);
    30ac:	ce 01       	movw	r24, r28
    30ae:	0e 94 32 18 	call	0x3064	; 0x3064 <_displayWriteString>
 }
    30b2:	df 91       	pop	r29
    30b4:	cf 91       	pop	r28
    30b6:	08 95       	ret

000030b8 <vDisplayUpdateTask>:

 void vDisplayUpdateTask(void *pvParameters) {
    30b8:	cf 93       	push	r28
    30ba:	df 93       	push	r29
    30bc:	cd b7       	in	r28, 0x3d	; 61
    30be:	de b7       	in	r29, 0x3e	; 62
    30c0:	c6 56       	subi	r28, 0x66	; 102
    30c2:	d1 09       	sbc	r29, r1
    30c4:	cd bf       	out	0x3d, r28	; 61
    30c6:	de bf       	out	0x3e, r29	; 62
    30c8:	5e 01       	movw	r10, r28
    30ca:	41 e5       	ldi	r20, 0x51	; 81
    30cc:	a4 0e       	add	r10, r20
    30ce:	b1 1c       	adc	r11, r1
    30d0:	fe 01       	movw	r30, r28
    30d2:	31 96       	adiw	r30, 0x01	; 1
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
			displayLines[i][j] = 0x20;
    30d4:	20 e2       	ldi	r18, 0x20	; 32
    30d6:	08 c0       	rjmp	.+16     	; 0x30e8 <vDisplayUpdateTask+0x30>
    30d8:	21 93       	st	Z+, r18
 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
    30da:	e8 17       	cp	r30, r24
    30dc:	f9 07       	cpc	r31, r25
    30de:	e1 f7       	brne	.-8      	; 0x30d8 <vDisplayUpdateTask+0x20>
    30e0:	fc 01       	movw	r30, r24

 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    30e2:	a8 16       	cp	r10, r24
    30e4:	b9 06       	cpc	r11, r25
    30e6:	19 f0       	breq	.+6      	; 0x30ee <vDisplayUpdateTask+0x36>
    30e8:	cf 01       	movw	r24, r30
    30ea:	44 96       	adiw	r24, 0x14	; 20
    30ec:	f5 cf       	rjmp	.-22     	; 0x30d8 <vDisplayUpdateTask+0x20>
			displayLines[i][j] = 0x20;
		}
	 }
	 displayLine_t newLine;

	 delayUS(40000);
    30ee:	60 e4       	ldi	r22, 0x40	; 64
    30f0:	7c e9       	ldi	r23, 0x9C	; 156
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	0e 94 00 17 	call	0x2e00	; 0x2e00 <delayUS>
	 setPort(0x03);
    30fa:	83 e0       	ldi	r24, 0x03	; 3
    30fc:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <setPort>
	 delayUS(5000);
    3100:	68 e8       	ldi	r22, 0x88	; 136
    3102:	73 e1       	ldi	r23, 0x13	; 19
    3104:	80 e0       	ldi	r24, 0x00	; 0
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	0e 94 00 17 	call	0x2e00	; 0x2e00 <delayUS>
	 Nybble();
    310c:	0e 94 80 17 	call	0x2f00	; 0x2f00 <Nybble>
	 delayUS(160);
    3110:	60 ea       	ldi	r22, 0xA0	; 160
    3112:	70 e0       	ldi	r23, 0x00	; 0
    3114:	80 e0       	ldi	r24, 0x00	; 0
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	0e 94 00 17 	call	0x2e00	; 0x2e00 <delayUS>
	 Nybble();
    311c:	0e 94 80 17 	call	0x2f00	; 0x2f00 <Nybble>
	 delayUS(160);
    3120:	60 ea       	ldi	r22, 0xA0	; 160
    3122:	70 e0       	ldi	r23, 0x00	; 0
    3124:	80 e0       	ldi	r24, 0x00	; 0
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	0e 94 00 17 	call	0x2e00	; 0x2e00 <delayUS>
	 Nybble();
    312c:	0e 94 80 17 	call	0x2f00	; 0x2f00 <Nybble>
	 delayUS(160);
    3130:	60 ea       	ldi	r22, 0xA0	; 160
    3132:	70 e0       	ldi	r23, 0x00	; 0
    3134:	80 e0       	ldi	r24, 0x00	; 0
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	0e 94 00 17 	call	0x2e00	; 0x2e00 <delayUS>
	 setPort(0x02);
    313c:	82 e0       	ldi	r24, 0x02	; 2
    313e:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <setPort>
	 Nybble();
    3142:	0e 94 80 17 	call	0x2f00	; 0x2f00 <Nybble>
	 command(0x28);
    3146:	88 e2       	ldi	r24, 0x28	; 40
    3148:	0e 94 92 17 	call	0x2f24	; 0x2f24 <command>
	 command(0x10);
    314c:	80 e1       	ldi	r24, 0x10	; 16
    314e:	0e 94 92 17 	call	0x2f24	; 0x2f24 <command>
	 command(0x0C); //Cursor and Blinking off
    3152:	8c e0       	ldi	r24, 0x0C	; 12
    3154:	0e 94 92 17 	call	0x2f24	; 0x2f24 <command>
	 command(0x06);
    3158:	86 e0       	ldi	r24, 0x06	; 6
    315a:	0e 94 92 17 	call	0x2f24	; 0x2f24 <command>
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
    315e:	10 e2       	ldi	r17, 0x20	; 32
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    3160:	6e 01       	movw	r12, r28
    3162:	51 e5       	ldi	r21, 0x51	; 81
    3164:	c5 0e       	add	r12, r21
    3166:	d1 1c       	adc	r13, r1
    3168:	0f 2e       	mov	r0, r31
    316a:	f4 e1       	ldi	r31, 0x14	; 20
    316c:	4f 2e       	mov	r4, r31
    316e:	f0 2d       	mov	r31, r0
    3170:	0f 2e       	mov	r0, r31
    3172:	f6 e1       	ldi	r31, 0x16	; 22
    3174:	8f 2e       	mov	r8, r31
    3176:	91 2c       	mov	r9, r1
    3178:	f0 2d       	mov	r31, r0
    317a:	5c 2c       	mov	r5, r12
    317c:	0d 2d       	mov	r16, r13
	 command(0x10);
	 command(0x0C); //Cursor and Blinking off
	 command(0x06);
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
    317e:	68 ec       	ldi	r22, 0xC8	; 200
    3180:	70 e0       	ldi	r23, 0x00	; 0
    3182:	80 e0       	ldi	r24, 0x00	; 0
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <vTaskDelay>
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
    318a:	40 e0       	ldi	r20, 0x00	; 0
    318c:	50 e0       	ldi	r21, 0x00	; 0
    318e:	ba 01       	movw	r22, r20
    3190:	80 91 d9 2c 	lds	r24, 0x2CD9	; 0x802cd9 <egDisplayTiming>
    3194:	90 91 da 2c 	lds	r25, 0x2CDA	; 0x802cda <egDisplayTiming+0x1>
    3198:	0e 94 cf 03 	call	0x79e	; 0x79e <xEventGroupClearBits>
    319c:	67 2b       	or	r22, r23
    319e:	68 2b       	or	r22, r24
    31a0:	69 2b       	or	r22, r25
    31a2:	09 f4       	brne	.+2      	; 0x31a6 <vDisplayUpdateTask+0xee>
    31a4:	49 c0       	rjmp	.+146    	; 0x3238 <vDisplayUpdateTask+0x180>
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    31a6:	42 e0       	ldi	r20, 0x02	; 2
    31a8:	50 e0       	ldi	r21, 0x00	; 0
    31aa:	60 e0       	ldi	r22, 0x00	; 0
    31ac:	70 e0       	ldi	r23, 0x00	; 0
    31ae:	80 91 d9 2c 	lds	r24, 0x2CD9	; 0x802cd9 <egDisplayTiming>
    31b2:	90 91 da 2c 	lds	r25, 0x2CDA	; 0x802cda <egDisplayTiming+0x1>
    31b6:	0e 94 cf 03 	call	0x79e	; 0x79e <xEventGroupClearBits>
    31ba:	fe 01       	movw	r30, r28
    31bc:	31 96       	adiw	r30, 0x01	; 1
    31be:	08 c0       	rjmp	.+16     	; 0x31d0 <vDisplayUpdateTask+0x118>
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
    31c0:	11 93       	st	Z+, r17
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
    31c2:	e8 17       	cp	r30, r24
    31c4:	f9 07       	cpc	r31, r25
    31c6:	e1 f7       	brne	.-8      	; 0x31c0 <vDisplayUpdateTask+0x108>
    31c8:	fc 01       	movw	r30, r24
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
    31ca:	8a 15       	cp	r24, r10
    31cc:	9b 05       	cpc	r25, r11
    31ce:	a1 f1       	breq	.+104    	; 0x3238 <vDisplayUpdateTask+0x180>
    31d0:	cf 01       	movw	r24, r30
    31d2:	44 96       	adiw	r24, 0x14	; 20
    31d4:	f5 cf       	rjmp	.-22     	; 0x31c0 <vDisplayUpdateTask+0x108>
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    31d6:	2f ef       	ldi	r18, 0xFF	; 255
    31d8:	3f ef       	ldi	r19, 0xFF	; 255
    31da:	a9 01       	movw	r20, r18
    31dc:	65 2d       	mov	r22, r5
    31de:	70 2f       	mov	r23, r16
    31e0:	80 91 d7 2c 	lds	r24, 0x2CD7	; 0x802cd7 <displayLineQueue>
    31e4:	90 91 d8 2c 	lds	r25, 0x2CD8	; 0x802cd8 <displayLineQueue+0x1>
    31e8:	0e 94 38 09 	call	0x1270	; 0x1270 <xQueueReceive>
    31ec:	88 23       	and	r24, r24
    31ee:	21 f1       	breq	.+72     	; 0x3238 <vDisplayUpdateTask+0x180>
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    31f0:	f6 01       	movw	r30, r12
    31f2:	21 81       	ldd	r18, Z+1	; 0x01
    31f4:	82 2f       	mov	r24, r18
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	44 97       	sbiw	r24, 0x14	; 20
    31fa:	f4 f4       	brge	.+60     	; 0x3238 <vDisplayUpdateTask+0x180>
    31fc:	82 81       	ldd	r24, Z+2	; 0x02
    31fe:	88 23       	and	r24, r24
    3200:	d9 f0       	breq	.+54     	; 0x3238 <vDisplayUpdateTask+0x180>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
    3202:	90 81       	ld	r25, Z
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	d9 01       	movw	r26, r18
    3208:	49 9e       	mul	r4, r25
    320a:	a0 0d       	add	r26, r0
    320c:	b1 1d       	adc	r27, r1
    320e:	11 24       	eor	r1, r1
    3210:	41 e0       	ldi	r20, 0x01	; 1
    3212:	50 e0       	ldi	r21, 0x00	; 0
    3214:	4c 0f       	add	r20, r28
    3216:	5d 1f       	adc	r21, r29
    3218:	a4 0f       	add	r26, r20
    321a:	b5 1f       	adc	r27, r21
    321c:	33 96       	adiw	r30, 0x03	; 3
    321e:	a4 01       	movw	r20, r8
    3220:	42 1b       	sub	r20, r18
    3222:	53 0b       	sbc	r21, r19
    3224:	9a 01       	movw	r18, r20
    3226:	2c 0d       	add	r18, r12
    3228:	3d 1d       	adc	r19, r13
    322a:	8d 93       	st	X+, r24
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    322c:	e2 17       	cp	r30, r18
    322e:	f3 07       	cpc	r31, r19
    3230:	19 f0       	breq	.+6      	; 0x3238 <vDisplayUpdateTask+0x180>
    3232:	81 91       	ld	r24, Z+
    3234:	81 11       	cpse	r24, r1
    3236:	f9 cf       	rjmp	.-14     	; 0x322a <vDisplayUpdateTask+0x172>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    3238:	80 91 d7 2c 	lds	r24, 0x2CD7	; 0x802cd7 <displayLineQueue>
    323c:	90 91 d8 2c 	lds	r25, 0x2CD8	; 0x802cd8 <displayLineQueue+0x1>
    3240:	0e 94 de 09 	call	0x13bc	; 0x13bc <uxQueueMessagesWaiting>
    3244:	81 11       	cpse	r24, r1
    3246:	c7 cf       	rjmp	.-114    	; 0x31d6 <vDisplayUpdateTask+0x11e>
    3248:	ce 01       	movw	r24, r28
    324a:	01 96       	adiw	r24, 0x01	; 1
    324c:	7c 01       	movw	r14, r24
    324e:	61 2c       	mov	r6, r1
    3250:	71 2c       	mov	r7, r1
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
    3252:	a7 01       	movw	r20, r14
    3254:	60 e0       	ldi	r22, 0x00	; 0
    3256:	70 e0       	ldi	r23, 0x00	; 0
    3258:	c3 01       	movw	r24, r6
    325a:	0e 94 51 18 	call	0x30a2	; 0x30a2 <_displayWriteStringAtPos>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    325e:	9f ef       	ldi	r25, 0xFF	; 255
    3260:	69 1a       	sub	r6, r25
    3262:	79 0a       	sbc	r7, r25
    3264:	e4 e1       	ldi	r30, 0x14	; 20
    3266:	ee 0e       	add	r14, r30
    3268:	f1 1c       	adc	r15, r1
    326a:	f4 e0       	ldi	r31, 0x04	; 4
    326c:	6f 16       	cp	r6, r31
    326e:	71 04       	cpc	r7, r1
    3270:	81 f7       	brne	.-32     	; 0x3252 <vDisplayUpdateTask+0x19a>
    3272:	85 cf       	rjmp	.-246    	; 0x317e <vDisplayUpdateTask+0xc6>

00003274 <vDisplayClear>:
	 }
 }
 

void vDisplayClear() {
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    3274:	42 e0       	ldi	r20, 0x02	; 2
    3276:	50 e0       	ldi	r21, 0x00	; 0
    3278:	60 e0       	ldi	r22, 0x00	; 0
    327a:	70 e0       	ldi	r23, 0x00	; 0
    327c:	80 91 d9 2c 	lds	r24, 0x2CD9	; 0x802cd9 <egDisplayTiming>
    3280:	90 91 da 2c 	lds	r25, 0x2CDA	; 0x802cda <egDisplayTiming+0x1>
    3284:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <xEventGroupSetBits>
    3288:	08 95       	ret

0000328a <vDisplayWriteStringAtPos>:
}

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    328a:	2f 92       	push	r2
    328c:	3f 92       	push	r3
    328e:	4f 92       	push	r4
    3290:	5f 92       	push	r5
    3292:	6f 92       	push	r6
    3294:	7f 92       	push	r7
    3296:	8f 92       	push	r8
    3298:	9f 92       	push	r9
    329a:	af 92       	push	r10
    329c:	bf 92       	push	r11
    329e:	cf 92       	push	r12
    32a0:	df 92       	push	r13
    32a2:	ef 92       	push	r14
    32a4:	ff 92       	push	r15
    32a6:	0f 93       	push	r16
    32a8:	1f 93       	push	r17
    32aa:	cf 93       	push	r28
    32ac:	df 93       	push	r29
    32ae:	cd b7       	in	r28, 0x3d	; 61
    32b0:	de b7       	in	r29, 0x3e	; 62
    32b2:	6d 97       	sbiw	r28, 0x1d	; 29
    32b4:	cd bf       	out	0x3d, r28	; 61
    32b6:	de bf       	out	0x3e, r29	; 62
    32b8:	2b a9       	ldd	r18, Y+51	; 0x33
    32ba:	2b 8f       	std	Y+27, r18	; 0x1b
    32bc:	af a9       	ldd	r26, Y+55	; 0x37
    32be:	b8 ad       	ldd	r27, Y+56	; 0x38
	va_list arg;	
	va_start(arg, fmt);
    32c0:	7e 01       	movw	r14, r28
    32c2:	39 e3       	ldi	r19, 0x39	; 57
    32c4:	e3 0e       	add	r14, r19
    32c6:	f1 1c       	adc	r15, r1
    32c8:	2c ec       	ldi	r18, 0xCC	; 204
    32ca:	3c e2       	ldi	r19, 0x2C	; 44
	display_vprintf(line, pos, fmt, arg);
    32cc:	e8 eb       	ldi	r30, 0xB8	; 184
    32ce:	fc e2       	ldi	r31, 0x2C	; 44
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
    32d0:	11 92       	st	Z+, r1
	char ch;
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    32d2:	e2 17       	cp	r30, r18
    32d4:	f3 07       	cpc	r31, r19
    32d6:	e1 f7       	brne	.-8      	; 0x32d0 <vDisplayWriteStringAtPos+0x46>
    32d8:	0f 2e       	mov	r0, r31
    32da:	f4 ea       	ldi	r31, 0xA4	; 164
    32dc:	af 2e       	mov	r10, r31
    32de:	fc e2       	ldi	r31, 0x2C	; 44
    32e0:	bf 2e       	mov	r11, r31
    32e2:	f0 2d       	mov	r31, r0
    32e4:	28 eb       	ldi	r18, 0xB8	; 184
    32e6:	3c e2       	ldi	r19, 0x2C	; 44
    32e8:	f5 01       	movw	r30, r10
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
    32ea:	11 92       	st	Z+, r1
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    32ec:	e2 17       	cp	r30, r18
    32ee:	f3 07       	cpc	r31, r19
    32f0:	e1 f7       	brne	.-8      	; 0x32ea <vDisplayWriteStringAtPos+0x60>
    32f2:	81 2c       	mov	r8, r1
    32f4:	91 2c       	mov	r9, r1
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    32f6:	0f 2e       	mov	r0, r31
    32f8:	f8 eb       	ldi	r31, 0xB8	; 184
    32fa:	cf 2e       	mov	r12, r31
    32fc:	fc e2       	ldi	r31, 0x2C	; 44
    32fe:	df 2e       	mov	r13, r31
    3300:	f0 2d       	mov	r31, r0
    3302:	fc c2       	rjmp	.+1528   	; 0x38fc <vDisplayWriteStringAtPos+0x672>
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
    3304:	85 32       	cpi	r24, 0x25	; 37
    3306:	09 f0       	breq	.+2      	; 0x330a <vDisplayWriteStringAtPos+0x80>
    3308:	e8 c2       	rjmp	.+1488   	; 0x38da <vDisplayWriteStringAtPos+0x650>
			switch (ch = *fmt++) {
    330a:	2d 01       	movw	r4, r26
    330c:	82 e0       	ldi	r24, 0x02	; 2
    330e:	48 0e       	add	r4, r24
    3310:	51 1c       	adc	r5, r1
    3312:	11 96       	adiw	r26, 0x01	; 1
    3314:	8c 91       	ld	r24, X
    3316:	85 36       	cpi	r24, 0x65	; 101
    3318:	09 f4       	brne	.+2      	; 0x331c <vDisplayWriteStringAtPos+0x92>
    331a:	db c1       	rjmp	.+950    	; 0x36d2 <vDisplayWriteStringAtPos+0x448>
    331c:	38 f4       	brcc	.+14     	; 0x332c <vDisplayWriteStringAtPos+0xa2>
    331e:	83 36       	cpi	r24, 0x63	; 99
    3320:	c1 f0       	breq	.+48     	; 0x3352 <vDisplayWriteStringAtPos+0xc8>
    3322:	08 f0       	brcs	.+2      	; 0x3326 <vDisplayWriteStringAtPos+0x9c>
    3324:	48 c0       	rjmp	.+144    	; 0x33b6 <vDisplayWriteStringAtPos+0x12c>
    3326:	85 32       	cpi	r24, 0x25	; 37
    3328:	51 f0       	breq	.+20     	; 0x333e <vDisplayWriteStringAtPos+0xb4>
    332a:	e7 c2       	rjmp	.+1486   	; 0x38fa <vDisplayWriteStringAtPos+0x670>
    332c:	83 37       	cpi	r24, 0x73	; 115
    332e:	f9 f0       	breq	.+62     	; 0x336e <vDisplayWriteStringAtPos+0xe4>
    3330:	88 37       	cpi	r24, 0x78	; 120
    3332:	09 f4       	brne	.+2      	; 0x3336 <vDisplayWriteStringAtPos+0xac>
    3334:	68 c0       	rjmp	.+208    	; 0x3406 <vDisplayWriteStringAtPos+0x17c>
    3336:	86 36       	cpi	r24, 0x66	; 102
    3338:	09 f0       	breq	.+2      	; 0x333c <vDisplayWriteStringAtPos+0xb2>
    333a:	df c2       	rjmp	.+1470   	; 0x38fa <vDisplayWriteStringAtPos+0x670>
    333c:	8c c0       	rjmp	.+280    	; 0x3456 <vDisplayWriteStringAtPos+0x1cc>
				/* %% - print out a single %    */
				case '%':
				str[length] = '%';
    333e:	f4 01       	movw	r30, r8
    3340:	ec 55       	subi	r30, 0x5C	; 92
    3342:	f3 4d       	sbci	r31, 0xD3	; 211
    3344:	95 e2       	ldi	r25, 0x25	; 37
    3346:	90 83       	st	Z, r25
				length++;
    3348:	af ef       	ldi	r26, 0xFF	; 255
    334a:	8a 1a       	sub	r8, r26
    334c:	9a 0a       	sbc	r9, r26
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    334e:	d2 01       	movw	r26, r4
    3350:	d5 c2       	rjmp	.+1450   	; 0x38fc <vDisplayWriteStringAtPos+0x672>
				break;

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
				str[length] = char_temp;
    3352:	f4 01       	movw	r30, r8
    3354:	ec 55       	subi	r30, 0x5C	; 92
    3356:	f3 4d       	sbci	r31, 0xD3	; 211
    3358:	d7 01       	movw	r26, r14
    335a:	8c 91       	ld	r24, X
    335c:	80 83       	st	Z, r24
				length++;
    335e:	bf ef       	ldi	r27, 0xFF	; 255
    3360:	8b 1a       	sub	r8, r27
    3362:	9b 0a       	sbc	r9, r27
				length++;
				break;

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
    3364:	f7 01       	movw	r30, r14
    3366:	32 96       	adiw	r30, 0x02	; 2
    3368:	7f 01       	movw	r14, r30
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    336a:	d2 01       	movw	r26, r4
    336c:	c7 c2       	rjmp	.+1422   	; 0x38fc <vDisplayWriteStringAtPos+0x672>
				length++;
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    336e:	a7 01       	movw	r20, r14
    3370:	4e 5f       	subi	r20, 0xFE	; 254
    3372:	5f 4f       	sbci	r21, 0xFF	; 255
    3374:	d7 01       	movw	r26, r14
    3376:	8d 91       	ld	r24, X+
    3378:	9c 91       	ld	r25, X
    337a:	9c 01       	movw	r18, r24
    337c:	b4 01       	movw	r22, r8
    337e:	f4 01       	movw	r30, r8
    3380:	ec 55       	subi	r30, 0x5C	; 92
    3382:	f3 4d       	sbci	r31, 0xD3	; 211
				for(int i = 0; i < strlen(string_temp);i++) {
    3384:	00 e0       	ldi	r16, 0x00	; 0
    3386:	10 e0       	ldi	r17, 0x00	; 0
    3388:	06 c0       	rjmp	.+12     	; 0x3396 <vDisplayWriteStringAtPos+0x10c>
					str[length+i] = string_temp[i];
    338a:	d9 01       	movw	r26, r18
    338c:	fd 90       	ld	r15, X+
    338e:	9d 01       	movw	r18, r26
    3390:	f1 92       	st	Z+, r15
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
				for(int i = 0; i < strlen(string_temp);i++) {
    3392:	0f 5f       	subi	r16, 0xFF	; 255
    3394:	1f 4f       	sbci	r17, 0xFF	; 255
    3396:	dc 01       	movw	r26, r24
    3398:	0d 90       	ld	r0, X+
    339a:	00 20       	and	r0, r0
    339c:	e9 f7       	brne	.-6      	; 0x3398 <vDisplayWriteStringAtPos+0x10e>
    339e:	11 97       	sbiw	r26, 0x01	; 1
    33a0:	a8 1b       	sub	r26, r24
    33a2:	b9 0b       	sbc	r27, r25
    33a4:	0a 17       	cp	r16, r26
    33a6:	1b 07       	cpc	r17, r27
    33a8:	80 f3       	brcs	.-32     	; 0x338a <vDisplayWriteStringAtPos+0x100>
					str[length+i] = string_temp[i];
				}
				length += strlen(string_temp);
    33aa:	4d 01       	movw	r8, r26
    33ac:	86 0e       	add	r8, r22
    33ae:	97 1e       	adc	r9, r23
				length++;
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    33b0:	7a 01       	movw	r14, r20
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    33b2:	d2 01       	movw	r26, r4
    33b4:	a3 c2       	rjmp	.+1350   	; 0x38fc <vDisplayWriteStringAtPos+0x672>
				length += strlen(string_temp);
				break;

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    33b6:	87 01       	movw	r16, r14
    33b8:	0e 5f       	subi	r16, 0xFE	; 254
    33ba:	1f 4f       	sbci	r17, 0xFF	; 255
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    33bc:	4a e0       	ldi	r20, 0x0A	; 10
    33be:	b6 01       	movw	r22, r12
    33c0:	f7 01       	movw	r30, r14
    33c2:	80 81       	ld	r24, Z
    33c4:	91 81       	ldd	r25, Z+1	; 0x01
    33c6:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <__itoa_ncheck>
    33ca:	94 01       	movw	r18, r8
    33cc:	d4 01       	movw	r26, r8
    33ce:	ac 55       	subi	r26, 0x5C	; 92
    33d0:	b3 4d       	sbci	r27, 0xD3	; 211
    33d2:	48 eb       	ldi	r20, 0xB8	; 184
    33d4:	5c e2       	ldi	r21, 0x2C	; 44
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    33d6:	80 e0       	ldi	r24, 0x00	; 0
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	05 c0       	rjmp	.+10     	; 0x33e6 <vDisplayWriteStringAtPos+0x15c>
					str[length+i] = buffer[i];
    33dc:	fa 01       	movw	r30, r20
    33de:	61 91       	ld	r22, Z+
    33e0:	af 01       	movw	r20, r30
    33e2:	6d 93       	st	X+, r22

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    33e4:	01 96       	adiw	r24, 0x01	; 1
    33e6:	f6 01       	movw	r30, r12
    33e8:	01 90       	ld	r0, Z+
    33ea:	00 20       	and	r0, r0
    33ec:	e9 f7       	brne	.-6      	; 0x33e8 <vDisplayWriteStringAtPos+0x15e>
    33ee:	31 97       	sbiw	r30, 0x01	; 1
    33f0:	e8 5b       	subi	r30, 0xB8	; 184
    33f2:	fc 42       	sbci	r31, 0x2C	; 44
    33f4:	8e 17       	cp	r24, r30
    33f6:	9f 07       	cpc	r25, r31
    33f8:	88 f3       	brcs	.-30     	; 0x33dc <vDisplayWriteStringAtPos+0x152>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    33fa:	4f 01       	movw	r8, r30
    33fc:	82 0e       	add	r8, r18
    33fe:	93 1e       	adc	r9, r19
				length += strlen(string_temp);
				break;

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    3400:	78 01       	movw	r14, r16
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    3402:	d2 01       	movw	r26, r4
    3404:	7b c2       	rjmp	.+1270   	; 0x38fc <vDisplayWriteStringAtPos+0x672>
				length += strlen(buffer);
				break;

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    3406:	87 01       	movw	r16, r14
    3408:	0e 5f       	subi	r16, 0xFE	; 254
    340a:	1f 4f       	sbci	r17, 0xFF	; 255
    340c:	40 e1       	ldi	r20, 0x10	; 16
    340e:	b6 01       	movw	r22, r12
    3410:	d7 01       	movw	r26, r14
    3412:	8d 91       	ld	r24, X+
    3414:	9c 91       	ld	r25, X
    3416:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <__itoa_ncheck>
    341a:	94 01       	movw	r18, r8
    341c:	f4 01       	movw	r30, r8
    341e:	ec 55       	subi	r30, 0x5C	; 92
    3420:	f3 4d       	sbci	r31, 0xD3	; 211
    3422:	48 eb       	ldi	r20, 0xB8	; 184
    3424:	5c e2       	ldi	r21, 0x2C	; 44
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    3426:	80 e0       	ldi	r24, 0x00	; 0
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	05 c0       	rjmp	.+10     	; 0x3436 <vDisplayWriteStringAtPos+0x1ac>
					str[length+i] = buffer[i];
    342c:	da 01       	movw	r26, r20
    342e:	6d 91       	ld	r22, X+
    3430:	ad 01       	movw	r20, r26
    3432:	61 93       	st	Z+, r22

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    3434:	01 96       	adiw	r24, 0x01	; 1
    3436:	d6 01       	movw	r26, r12
    3438:	0d 90       	ld	r0, X+
    343a:	00 20       	and	r0, r0
    343c:	e9 f7       	brne	.-6      	; 0x3438 <vDisplayWriteStringAtPos+0x1ae>
    343e:	11 97       	sbiw	r26, 0x01	; 1
    3440:	a8 5b       	subi	r26, 0xB8	; 184
    3442:	bc 42       	sbci	r27, 0x2C	; 44
    3444:	8a 17       	cp	r24, r26
    3446:	9b 07       	cpc	r25, r27
    3448:	88 f3       	brcs	.-30     	; 0x342c <vDisplayWriteStringAtPos+0x1a2>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    344a:	4d 01       	movw	r8, r26
    344c:	82 0e       	add	r8, r18
    344e:	93 1e       	adc	r9, r19
				length += strlen(buffer);
				break;

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    3450:	78 01       	movw	r14, r16
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    3452:	d2 01       	movw	r26, r4
    3454:	53 c2       	rjmp	.+1190   	; 0x38fc <vDisplayWriteStringAtPos+0x672>
				}
				length += strlen(buffer);
				break;

				case 'f':
				double_temp = va_arg(arg, double);
    3456:	17 01       	movw	r2, r14
    3458:	b4 e0       	ldi	r27, 0x04	; 4
    345a:	2b 0e       	add	r2, r27
    345c:	31 1c       	adc	r3, r1
    345e:	d7 01       	movw	r26, r14
    3460:	8d 91       	ld	r24, X+
    3462:	9d 91       	ld	r25, X+
    3464:	0d 90       	ld	r0, X+
    3466:	bc 91       	ld	r27, X
    3468:	a0 2d       	mov	r26, r0
    346a:	8f 8b       	std	Y+23, r24	; 0x17
    346c:	98 8f       	std	Y+24, r25	; 0x18
    346e:	a9 8f       	std	Y+25, r26	; 0x19
    3470:	ba 8f       	std	Y+26, r27	; 0x1a

    int exponent = 0;
    int places = 0;
    static const int width = 4;

    if (value == 0.0) {
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	a9 01       	movw	r20, r18
    3478:	bc 01       	movw	r22, r24
    347a:	cd 01       	movw	r24, r26
    347c:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <__cmpsf2>
    3480:	81 11       	cpse	r24, r1
    3482:	05 c0       	rjmp	.+10     	; 0x348e <vDisplayWriteStringAtPos+0x204>
        buffer[0] = '0';
    3484:	20 e3       	ldi	r18, 0x30	; 48
    3486:	f6 01       	movw	r30, r12
    3488:	20 83       	st	Z, r18
        buffer[1] = '\0';
    348a:	11 82       	std	Z+1, r1	; 0x01
    348c:	04 c1       	rjmp	.+520    	; 0x3696 <vDisplayWriteStringAtPos+0x40c>
        return;
    }         

    if (value < 0.0) {
    348e:	20 e0       	ldi	r18, 0x00	; 0
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	a9 01       	movw	r20, r18
    3494:	6f 89       	ldd	r22, Y+23	; 0x17
    3496:	78 8d       	ldd	r23, Y+24	; 0x18
    3498:	89 8d       	ldd	r24, Y+25	; 0x19
    349a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    349c:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <__cmpsf2>
    34a0:	88 23       	and	r24, r24
    34a2:	9c f4       	brge	.+38     	; 0x34ca <vDisplayWriteStringAtPos+0x240>
        *buffer++ = '-';
    34a4:	ed e2       	ldi	r30, 0x2D	; 45
    34a6:	d6 01       	movw	r26, r12
    34a8:	ec 93       	st	X, r30
        value = -value;
    34aa:	8f 89       	ldd	r24, Y+23	; 0x17
    34ac:	98 8d       	ldd	r25, Y+24	; 0x18
    34ae:	a9 8d       	ldd	r26, Y+25	; 0x19
    34b0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    34b2:	b0 58       	subi	r27, 0x80	; 128
    34b4:	8f 8b       	std	Y+23, r24	; 0x17
    34b6:	98 8f       	std	Y+24, r25	; 0x18
    34b8:	a9 8f       	std	Y+25, r26	; 0x19
    34ba:	ba 8f       	std	Y+26, r27	; 0x1a
        buffer[1] = '\0';
        return;
    }         

    if (value < 0.0) {
        *buffer++ = '-';
    34bc:	0f 2e       	mov	r0, r31
    34be:	f9 eb       	ldi	r31, 0xB9	; 185
    34c0:	6f 2e       	mov	r6, r31
    34c2:	fc e2       	ldi	r31, 0x2C	; 44
    34c4:	7f 2e       	mov	r7, r31
    34c6:	f0 2d       	mov	r31, r0
    34c8:	01 c0       	rjmp	.+2      	; 0x34cc <vDisplayWriteStringAtPos+0x242>
        buffer[0] = '0';
        buffer[1] = '\0';
        return;
    }         

    if (value < 0.0) {
    34ca:	36 01       	movw	r6, r12

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	40 e8       	ldi	r20, 0x80	; 128
    34d2:	5f e3       	ldi	r21, 0x3F	; 63
    34d4:	6f 89       	ldd	r22, Y+23	; 0x17
    34d6:	78 8d       	ldd	r23, Y+24	; 0x18
    34d8:	89 8d       	ldd	r24, Y+25	; 0x19
    34da:	9a 8d       	ldd	r25, Y+26	; 0x1a
    34dc:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__gesf2>
    34e0:	88 23       	and	r24, r24
    34e2:	0c f4       	brge	.+2      	; 0x34e6 <vDisplayWriteStringAtPos+0x25c>
    34e4:	44 c2       	rjmp	.+1160   	; 0x396e <vDisplayWriteStringAtPos+0x6e4>
    34e6:	00 e0       	ldi	r16, 0x00	; 0
    34e8:	10 e0       	ldi	r17, 0x00	; 0
        value /= 10.0;
    34ea:	20 e0       	ldi	r18, 0x00	; 0
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	40 e2       	ldi	r20, 0x20	; 32
    34f0:	51 e4       	ldi	r21, 0x41	; 65
    34f2:	6f 89       	ldd	r22, Y+23	; 0x17
    34f4:	78 8d       	ldd	r23, Y+24	; 0x18
    34f6:	89 8d       	ldd	r24, Y+25	; 0x19
    34f8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    34fa:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <__divsf3>
    34fe:	6f 8b       	std	Y+23, r22	; 0x17
    3500:	78 8f       	std	Y+24, r23	; 0x18
    3502:	89 8f       	std	Y+25, r24	; 0x19
    3504:	9a 8f       	std	Y+26, r25	; 0x1a
        ++exponent;
    3506:	0f 5f       	subi	r16, 0xFF	; 255
    3508:	1f 4f       	sbci	r17, 0xFF	; 255

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    350a:	20 e0       	ldi	r18, 0x00	; 0
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	40 e8       	ldi	r20, 0x80	; 128
    3510:	5f e3       	ldi	r21, 0x3F	; 63
    3512:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__gesf2>
    3516:	88 23       	and	r24, r24
    3518:	44 f7       	brge	.-48     	; 0x34ea <vDisplayWriteStringAtPos+0x260>
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    351a:	2d ec       	ldi	r18, 0xCD	; 205
    351c:	3c ec       	ldi	r19, 0xCC	; 204
    351e:	4c ec       	ldi	r20, 0xCC	; 204
    3520:	5d e3       	ldi	r21, 0x3D	; 61
    3522:	6f 89       	ldd	r22, Y+23	; 0x17
    3524:	78 8d       	ldd	r23, Y+24	; 0x18
    3526:	89 8d       	ldd	r24, Y+25	; 0x19
    3528:	9a 8d       	ldd	r25, Y+26	; 0x1a
    352a:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <__cmpsf2>
    352e:	88 23       	and	r24, r24
    3530:	1c f0       	brlt	.+6      	; 0x3538 <vDisplayWriteStringAtPos+0x2ae>
    3532:	1a c0       	rjmp	.+52     	; 0x3568 <vDisplayWriteStringAtPos+0x2de>
	
	return length;
}

static int normalize(double *val) {
    int exponent = 0;
    3534:	00 e0       	ldi	r16, 0x00	; 0
    3536:	10 e0       	ldi	r17, 0x00	; 0
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
        value *= 10.0;
    3538:	20 e0       	ldi	r18, 0x00	; 0
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	40 e2       	ldi	r20, 0x20	; 32
    353e:	51 e4       	ldi	r21, 0x41	; 65
    3540:	6f 89       	ldd	r22, Y+23	; 0x17
    3542:	78 8d       	ldd	r23, Y+24	; 0x18
    3544:	89 8d       	ldd	r24, Y+25	; 0x19
    3546:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3548:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <__mulsf3>
    354c:	6f 8b       	std	Y+23, r22	; 0x17
    354e:	78 8f       	std	Y+24, r23	; 0x18
    3550:	89 8f       	std	Y+25, r24	; 0x19
    3552:	9a 8f       	std	Y+26, r25	; 0x1a
        --exponent;
    3554:	01 50       	subi	r16, 0x01	; 1
    3556:	11 09       	sbc	r17, r1
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    3558:	2d ec       	ldi	r18, 0xCD	; 205
    355a:	3c ec       	ldi	r19, 0xCC	; 204
    355c:	4c ec       	ldi	r20, 0xCC	; 204
    355e:	5d e3       	ldi	r21, 0x3D	; 61
    3560:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <__cmpsf2>
    3564:	88 23       	and	r24, r24
    3566:	44 f3       	brlt	.-48     	; 0x3538 <vDisplayWriteStringAtPos+0x2ae>
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    3568:	10 16       	cp	r1, r16
    356a:	11 06       	cpc	r1, r17
    356c:	ac f5       	brge	.+106    	; 0x35d8 <vDisplayWriteStringAtPos+0x34e>
    356e:	73 01       	movw	r14, r6
    3570:	d3 01       	movw	r26, r6
    3572:	a0 0f       	add	r26, r16
    3574:	b1 1f       	adc	r27, r17
    3576:	ac 8f       	std	Y+28, r26	; 0x1c
    3578:	bd 8f       	std	Y+29, r27	; 0x1d
    357a:	3d 01       	movw	r6, r26
    357c:	6f 89       	ldd	r22, Y+23	; 0x17
    357e:	78 8d       	ldd	r23, Y+24	; 0x18
    3580:	89 8d       	ldd	r24, Y+25	; 0x19
    3582:	9a 8d       	ldd	r25, Y+26	; 0x1a
        int digit = value * 10;
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	40 e2       	ldi	r20, 0x20	; 32
    358a:	51 e4       	ldi	r21, 0x41	; 65
    358c:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <__mulsf3>
    3590:	6f 8b       	std	Y+23, r22	; 0x17
    3592:	78 8f       	std	Y+24, r23	; 0x18
    3594:	89 8f       	std	Y+25, r24	; 0x19
    3596:	9a 8f       	std	Y+26, r25	; 0x1a
    3598:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <__fixsfsi>
        *buffer++ = digit + '0';
    359c:	20 e3       	ldi	r18, 0x30	; 48
    359e:	26 0f       	add	r18, r22
    35a0:	f7 01       	movw	r30, r14
    35a2:	21 93       	st	Z+, r18
    35a4:	7f 01       	movw	r14, r30
        value = value * 10 - digit;
    35a6:	07 2e       	mov	r0, r23
    35a8:	00 0c       	add	r0, r0
    35aa:	88 0b       	sbc	r24, r24
    35ac:	99 0b       	sbc	r25, r25
    35ae:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <__floatsisf>
    35b2:	9b 01       	movw	r18, r22
    35b4:	ac 01       	movw	r20, r24
    35b6:	6f 89       	ldd	r22, Y+23	; 0x17
    35b8:	78 8d       	ldd	r23, Y+24	; 0x18
    35ba:	89 8d       	ldd	r24, Y+25	; 0x19
    35bc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    35be:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__subsf3>
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    35c2:	e6 14       	cp	r14, r6
    35c4:	f7 04       	cpc	r15, r7
    35c6:	f1 f6       	brne	.-68     	; 0x3584 <vDisplayWriteStringAtPos+0x2fa>
    35c8:	6f 8b       	std	Y+23, r22	; 0x17
    35ca:	78 8f       	std	Y+24, r23	; 0x18
    35cc:	89 8f       	std	Y+25, r24	; 0x19
    35ce:	9a 8f       	std	Y+26, r25	; 0x1a
        value = value * 10 - digit;
        ++places;
        --exponent;
    }

    if (places == 0)
    35d0:	01 15       	cp	r16, r1
    35d2:	11 05       	cpc	r17, r1
    35d4:	89 f4       	brne	.+34     	; 0x35f8 <vDisplayWriteStringAtPos+0x36e>
    35d6:	db c1       	rjmp	.+950    	; 0x398e <vDisplayWriteStringAtPos+0x704>
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    35d8:	c8 01       	movw	r24, r16
        ++places;
        --exponent;
    }

    if (places == 0)
        *buffer++ = '0';
    35da:	e0 e3       	ldi	r30, 0x30	; 48
    35dc:	d3 01       	movw	r26, r6
    35de:	ec 93       	st	X, r30

    *buffer++ = '.';
    35e0:	73 01       	movw	r14, r6
    35e2:	f2 e0       	ldi	r31, 0x02	; 2
    35e4:	ef 0e       	add	r14, r31
    35e6:	f1 1c       	adc	r15, r1
    35e8:	2e e2       	ldi	r18, 0x2E	; 46
    35ea:	11 96       	adiw	r26, 0x01	; 1
    35ec:	2c 93       	st	X, r18

    while (exponent < 0 && places < width) {
    35ee:	99 23       	and	r25, r25
    35f0:	6c f0       	brlt	.+26     	; 0x360c <vDisplayWriteStringAtPos+0x382>
    35f2:	00 e0       	ldi	r16, 0x00	; 0
    35f4:	10 e0       	ldi	r17, 0x00	; 0
    35f6:	1f c0       	rjmp	.+62     	; 0x3636 <vDisplayWriteStringAtPos+0x3ac>
    }

    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';
    35f8:	ec 8c       	ldd	r14, Y+28	; 0x1c
    35fa:	fd 8c       	ldd	r15, Y+29	; 0x1d
    35fc:	3f ef       	ldi	r19, 0xFF	; 255
    35fe:	e3 1a       	sub	r14, r19
    3600:	f3 0a       	sbc	r15, r19
    3602:	ee e2       	ldi	r30, 0x2E	; 46
    3604:	ac 8d       	ldd	r26, Y+28	; 0x1c
    3606:	bd 8d       	ldd	r27, Y+29	; 0x1d
    3608:	ec 93       	st	X, r30
    360a:	12 c0       	rjmp	.+36     	; 0x3630 <vDisplayWriteStringAtPos+0x3a6>

    while (exponent < 0 && places < width) {
    360c:	00 e0       	ldi	r16, 0x00	; 0
    360e:	10 e0       	ldi	r17, 0x00	; 0
        *buffer++ = '0';
    3610:	ff ef       	ldi	r31, 0xFF	; 255
    3612:	ef 1a       	sub	r14, r31
    3614:	ff 0a       	sbc	r15, r31
    3616:	f7 01       	movw	r30, r14
    3618:	31 97       	sbiw	r30, 0x01	; 1
    361a:	20 e3       	ldi	r18, 0x30	; 48
    361c:	20 83       	st	Z, r18
        --exponent;
    361e:	01 97       	sbiw	r24, 0x01	; 1
        ++places;
    3620:	0f 5f       	subi	r16, 0xFF	; 255
    3622:	1f 4f       	sbci	r17, 0xFF	; 255
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    3624:	99 23       	and	r25, r25
    3626:	24 f4       	brge	.+8      	; 0x3630 <vDisplayWriteStringAtPos+0x3a6>
    3628:	04 30       	cpi	r16, 0x04	; 4
    362a:	11 05       	cpc	r17, r1
    362c:	8c f3       	brlt	.-30     	; 0x3610 <vDisplayWriteStringAtPos+0x386>
    362e:	31 c0       	rjmp	.+98     	; 0x3692 <vDisplayWriteStringAtPos+0x408>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    3630:	04 30       	cpi	r16, 0x04	; 4
    3632:	11 05       	cpc	r17, r1
    3634:	74 f5       	brge	.+92     	; 0x3692 <vDisplayWriteStringAtPos+0x408>
    3636:	37 01       	movw	r6, r14
    3638:	84 e0       	ldi	r24, 0x04	; 4
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	80 1b       	sub	r24, r16
    363e:	91 0b       	sbc	r25, r17
    3640:	e8 0e       	add	r14, r24
    3642:	f9 1e       	adc	r15, r25
    3644:	87 01       	movw	r16, r14
    3646:	6f 89       	ldd	r22, Y+23	; 0x17
    3648:	78 8d       	ldd	r23, Y+24	; 0x18
    364a:	89 8d       	ldd	r24, Y+25	; 0x19
    364c:	9a 8d       	ldd	r25, Y+26	; 0x1a
        int digit = value * 10.0;
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	40 e2       	ldi	r20, 0x20	; 32
    3654:	51 e4       	ldi	r21, 0x41	; 65
    3656:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <__mulsf3>
    365a:	6f 8b       	std	Y+23, r22	; 0x17
    365c:	78 8f       	std	Y+24, r23	; 0x18
    365e:	89 8f       	std	Y+25, r24	; 0x19
    3660:	9a 8f       	std	Y+26, r25	; 0x1a
    3662:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <__fixsfsi>
        *buffer++ = digit + '0';
    3666:	20 e3       	ldi	r18, 0x30	; 48
    3668:	26 0f       	add	r18, r22
    366a:	d3 01       	movw	r26, r6
    366c:	2d 93       	st	X+, r18
    366e:	3d 01       	movw	r6, r26
        value = value * 10.0 - digit;
    3670:	07 2e       	mov	r0, r23
    3672:	00 0c       	add	r0, r0
    3674:	88 0b       	sbc	r24, r24
    3676:	99 0b       	sbc	r25, r25
    3678:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <__floatsisf>
    367c:	9b 01       	movw	r18, r22
    367e:	ac 01       	movw	r20, r24
    3680:	6f 89       	ldd	r22, Y+23	; 0x17
    3682:	78 8d       	ldd	r23, Y+24	; 0x18
    3684:	89 8d       	ldd	r24, Y+25	; 0x19
    3686:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3688:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__subsf3>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    368c:	60 16       	cp	r6, r16
    368e:	71 06       	cpc	r7, r17
    3690:	f1 f6       	brne	.-68     	; 0x364e <vDisplayWriteStringAtPos+0x3c4>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
        ++places;
    }
    *buffer = '\0';
    3692:	f7 01       	movw	r30, r14
    3694:	10 82       	st	Z, r1
    3696:	94 01       	movw	r18, r8
    3698:	f4 01       	movw	r30, r8
    369a:	ec 55       	subi	r30, 0x5C	; 92
    369c:	f3 4d       	sbci	r31, 0xD3	; 211
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    369e:	48 eb       	ldi	r20, 0xB8	; 184
    36a0:	5c e2       	ldi	r21, 0x2C	; 44
    36a2:	80 e0       	ldi	r24, 0x00	; 0
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	05 c0       	rjmp	.+10     	; 0x36b2 <vDisplayWriteStringAtPos+0x428>

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
					str[length+i] = buffer[i];
    36a8:	da 01       	movw	r26, r20
    36aa:	6d 91       	ld	r22, X+
    36ac:	ad 01       	movw	r20, r26
    36ae:	61 93       	st	Z+, r22
				break;

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    36b0:	01 96       	adiw	r24, 0x01	; 1
    36b2:	d6 01       	movw	r26, r12
    36b4:	0d 90       	ld	r0, X+
    36b6:	00 20       	and	r0, r0
    36b8:	e9 f7       	brne	.-6      	; 0x36b4 <vDisplayWriteStringAtPos+0x42a>
    36ba:	11 97       	sbiw	r26, 0x01	; 1
    36bc:	a8 5b       	subi	r26, 0xB8	; 184
    36be:	bc 42       	sbci	r27, 0x2C	; 44
    36c0:	8a 17       	cp	r24, r26
    36c2:	9b 07       	cpc	r25, r27
    36c4:	88 f3       	brcs	.-30     	; 0x36a8 <vDisplayWriteStringAtPos+0x41e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    36c6:	4d 01       	movw	r8, r26
    36c8:	82 0e       	add	r8, r18
    36ca:	93 1e       	adc	r9, r19
				}
				length += strlen(buffer);
				break;

				case 'f':
				double_temp = va_arg(arg, double);
    36cc:	71 01       	movw	r14, r2
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    36ce:	d2 01       	movw	r26, r4
    36d0:	15 c1       	rjmp	.+554    	; 0x38fc <vDisplayWriteStringAtPos+0x672>
				}
				length += strlen(buffer);
				break;

				case 'e':
				double_temp = va_arg(arg, double);
    36d2:	17 01       	movw	r2, r14
    36d4:	b4 e0       	ldi	r27, 0x04	; 4
    36d6:	2b 0e       	add	r2, r27
    36d8:	31 1c       	adc	r3, r1
    36da:	d7 01       	movw	r26, r14
    36dc:	8d 91       	ld	r24, X+
    36de:	9d 91       	ld	r25, X+
    36e0:	0d 90       	ld	r0, X+
    36e2:	bc 91       	ld	r27, X
    36e4:	a0 2d       	mov	r26, r0
    36e6:	8f 8b       	std	Y+23, r24	; 0x17
    36e8:	98 8f       	std	Y+24, r25	; 0x18
    36ea:	a9 8f       	std	Y+25, r26	; 0x19
    36ec:	ba 8f       	std	Y+26, r27	; 0x1a

void ftoa_sci(char *buffer, double value) {
    int exponent = 0;    
    static const int width = 4;

    if (value == 0.0) {
    36ee:	20 e0       	ldi	r18, 0x00	; 0
    36f0:	30 e0       	ldi	r19, 0x00	; 0
    36f2:	a9 01       	movw	r20, r18
    36f4:	bc 01       	movw	r22, r24
    36f6:	cd 01       	movw	r24, r26
    36f8:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <__cmpsf2>
    36fc:	81 11       	cpse	r24, r1
    36fe:	05 c0       	rjmp	.+10     	; 0x370a <vDisplayWriteStringAtPos+0x480>
        buffer[0] = '0';
    3700:	20 e3       	ldi	r18, 0x30	; 48
    3702:	f6 01       	movw	r30, r12
    3704:	20 83       	st	Z, r18
        buffer[1] = '\0';
    3706:	11 82       	std	Z+1, r1	; 0x01
    3708:	ca c0       	rjmp	.+404    	; 0x389e <vDisplayWriteStringAtPos+0x614>
        return;
    }

    if (value < 0.0) {
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	a9 01       	movw	r20, r18
    3710:	6f 89       	ldd	r22, Y+23	; 0x17
    3712:	78 8d       	ldd	r23, Y+24	; 0x18
    3714:	89 8d       	ldd	r24, Y+25	; 0x19
    3716:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3718:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <__cmpsf2>
    371c:	88 23       	and	r24, r24
    371e:	9c f4       	brge	.+38     	; 0x3746 <vDisplayWriteStringAtPos+0x4bc>
        *buffer++ = '-';
    3720:	ed e2       	ldi	r30, 0x2D	; 45
    3722:	d6 01       	movw	r26, r12
    3724:	ec 93       	st	X, r30
        value = -value;
    3726:	8f 89       	ldd	r24, Y+23	; 0x17
    3728:	98 8d       	ldd	r25, Y+24	; 0x18
    372a:	a9 8d       	ldd	r26, Y+25	; 0x19
    372c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    372e:	b0 58       	subi	r27, 0x80	; 128
    3730:	8f 8b       	std	Y+23, r24	; 0x17
    3732:	98 8f       	std	Y+24, r25	; 0x18
    3734:	a9 8f       	std	Y+25, r26	; 0x19
    3736:	ba 8f       	std	Y+26, r27	; 0x1a
        buffer[1] = '\0';
        return;
    }

    if (value < 0.0) {
        *buffer++ = '-';
    3738:	0f 2e       	mov	r0, r31
    373a:	f9 eb       	ldi	r31, 0xB9	; 185
    373c:	6f 2e       	mov	r6, r31
    373e:	fc e2       	ldi	r31, 0x2C	; 44
    3740:	7f 2e       	mov	r7, r31
    3742:	f0 2d       	mov	r31, r0
    3744:	01 c0       	rjmp	.+2      	; 0x3748 <vDisplayWriteStringAtPos+0x4be>
        buffer[0] = '0';
        buffer[1] = '\0';
        return;
    }

    if (value < 0.0) {
    3746:	36 01       	movw	r6, r12

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    3748:	20 e0       	ldi	r18, 0x00	; 0
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	40 e8       	ldi	r20, 0x80	; 128
    374e:	5f e3       	ldi	r21, 0x3F	; 63
    3750:	6f 89       	ldd	r22, Y+23	; 0x17
    3752:	78 8d       	ldd	r23, Y+24	; 0x18
    3754:	89 8d       	ldd	r24, Y+25	; 0x19
    3756:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3758:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__gesf2>
    375c:	88 23       	and	r24, r24
    375e:	dc f0       	brlt	.+54     	; 0x3796 <vDisplayWriteStringAtPos+0x50c>
    3760:	00 e0       	ldi	r16, 0x00	; 0
    3762:	10 e0       	ldi	r17, 0x00	; 0
        value /= 10.0;
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	40 e2       	ldi	r20, 0x20	; 32
    376a:	51 e4       	ldi	r21, 0x41	; 65
    376c:	6f 89       	ldd	r22, Y+23	; 0x17
    376e:	78 8d       	ldd	r23, Y+24	; 0x18
    3770:	89 8d       	ldd	r24, Y+25	; 0x19
    3772:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3774:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <__divsf3>
    3778:	6f 8b       	std	Y+23, r22	; 0x17
    377a:	78 8f       	std	Y+24, r23	; 0x18
    377c:	89 8f       	std	Y+25, r24	; 0x19
    377e:	9a 8f       	std	Y+26, r25	; 0x1a
        ++exponent;
    3780:	0f 5f       	subi	r16, 0xFF	; 255
    3782:	1f 4f       	sbci	r17, 0xFF	; 255

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    3784:	20 e0       	ldi	r18, 0x00	; 0
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	40 e8       	ldi	r20, 0x80	; 128
    378a:	5f e3       	ldi	r21, 0x3F	; 63
    378c:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__gesf2>
    3790:	88 23       	and	r24, r24
    3792:	44 f7       	brge	.-48     	; 0x3764 <vDisplayWriteStringAtPos+0x4da>
    3794:	02 c0       	rjmp	.+4      	; 0x379a <vDisplayWriteStringAtPos+0x510>
	
	return length;
}

static int normalize(double *val) {
    int exponent = 0;
    3796:	00 e0       	ldi	r16, 0x00	; 0
    3798:	10 e0       	ldi	r17, 0x00	; 0
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    379a:	2d ec       	ldi	r18, 0xCD	; 205
    379c:	3c ec       	ldi	r19, 0xCC	; 204
    379e:	4c ec       	ldi	r20, 0xCC	; 204
    37a0:	5d e3       	ldi	r21, 0x3D	; 61
    37a2:	6f 89       	ldd	r22, Y+23	; 0x17
    37a4:	78 8d       	ldd	r23, Y+24	; 0x18
    37a6:	89 8d       	ldd	r24, Y+25	; 0x19
    37a8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    37aa:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <__cmpsf2>
    37ae:	88 23       	and	r24, r24
    37b0:	c4 f4       	brge	.+48     	; 0x37e2 <vDisplayWriteStringAtPos+0x558>
        value *= 10.0;
    37b2:	20 e0       	ldi	r18, 0x00	; 0
    37b4:	30 e0       	ldi	r19, 0x00	; 0
    37b6:	40 e2       	ldi	r20, 0x20	; 32
    37b8:	51 e4       	ldi	r21, 0x41	; 65
    37ba:	6f 89       	ldd	r22, Y+23	; 0x17
    37bc:	78 8d       	ldd	r23, Y+24	; 0x18
    37be:	89 8d       	ldd	r24, Y+25	; 0x19
    37c0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    37c2:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <__mulsf3>
    37c6:	6f 8b       	std	Y+23, r22	; 0x17
    37c8:	78 8f       	std	Y+24, r23	; 0x18
    37ca:	89 8f       	std	Y+25, r24	; 0x19
    37cc:	9a 8f       	std	Y+26, r25	; 0x1a
        --exponent;
    37ce:	01 50       	subi	r16, 0x01	; 1
    37d0:	11 09       	sbc	r17, r1
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    37d2:	2d ec       	ldi	r18, 0xCD	; 205
    37d4:	3c ec       	ldi	r19, 0xCC	; 204
    37d6:	4c ec       	ldi	r20, 0xCC	; 204
    37d8:	5d e3       	ldi	r21, 0x3D	; 61
    37da:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <__cmpsf2>
    37de:	88 23       	and	r24, r24
    37e0:	44 f3       	brlt	.-48     	; 0x37b2 <vDisplayWriteStringAtPos+0x528>
        value = -value;
    }

    exponent = normalize(&value);

    int digit = value * 10.0;
    37e2:	20 e0       	ldi	r18, 0x00	; 0
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	40 e2       	ldi	r20, 0x20	; 32
    37e8:	51 e4       	ldi	r21, 0x41	; 65
    37ea:	6f 89       	ldd	r22, Y+23	; 0x17
    37ec:	78 8d       	ldd	r23, Y+24	; 0x18
    37ee:	89 8d       	ldd	r24, Y+25	; 0x19
    37f0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    37f2:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <__mulsf3>
    37f6:	6f 8b       	std	Y+23, r22	; 0x17
    37f8:	78 8f       	std	Y+24, r23	; 0x18
    37fa:	89 8f       	std	Y+25, r24	; 0x19
    37fc:	9a 8f       	std	Y+26, r25	; 0x1a
    37fe:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <__fixsfsi>
    *buffer++ = digit + '0';
    3802:	20 e3       	ldi	r18, 0x30	; 48
    3804:	26 0f       	add	r18, r22
    3806:	d3 01       	movw	r26, r6
    3808:	2c 93       	st	X, r18
    value = value * 10.0 - digit;
    380a:	07 2e       	mov	r0, r23
    380c:	00 0c       	add	r0, r0
    380e:	88 0b       	sbc	r24, r24
    3810:	99 0b       	sbc	r25, r25
    3812:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <__floatsisf>
    3816:	9b 01       	movw	r18, r22
    3818:	ac 01       	movw	r20, r24
    381a:	6f 89       	ldd	r22, Y+23	; 0x17
    381c:	78 8d       	ldd	r23, Y+24	; 0x18
    381e:	89 8d       	ldd	r24, Y+25	; 0x19
    3820:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3822:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__subsf3>
    --exponent;
    3826:	f8 01       	movw	r30, r16
    3828:	31 97       	sbiw	r30, 0x01	; 1
    382a:	ec 8f       	std	Y+28, r30	; 0x1c
    382c:	fd 8f       	std	Y+29, r31	; 0x1d

    *buffer++ = '.';
    382e:	ee e2       	ldi	r30, 0x2E	; 46
    3830:	d3 01       	movw	r26, r6
    3832:	11 96       	adiw	r26, 0x01	; 1
    3834:	ec 93       	st	X, r30
    3836:	83 01       	movw	r16, r6
    3838:	0e 5f       	subi	r16, 0xFE	; 254
    383a:	1f 4f       	sbci	r17, 0xFF	; 255
    383c:	73 01       	movw	r14, r6
    383e:	f6 e0       	ldi	r31, 0x06	; 6
    3840:	ef 0e       	add	r14, r31
    3842:	f1 1c       	adc	r15, r1

    for (int i = 0; i < width; i++) {
        int digit = value * 10.0;
    3844:	20 e0       	ldi	r18, 0x00	; 0
    3846:	30 e0       	ldi	r19, 0x00	; 0
    3848:	40 e2       	ldi	r20, 0x20	; 32
    384a:	51 e4       	ldi	r21, 0x41	; 65
    384c:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <__mulsf3>
    3850:	6f 8b       	std	Y+23, r22	; 0x17
    3852:	78 8f       	std	Y+24, r23	; 0x18
    3854:	89 8f       	std	Y+25, r24	; 0x19
    3856:	9a 8f       	std	Y+26, r25	; 0x1a
    3858:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <__fixsfsi>
        *buffer++ = digit + '0';
    385c:	20 e3       	ldi	r18, 0x30	; 48
    385e:	26 0f       	add	r18, r22
    3860:	d8 01       	movw	r26, r16
    3862:	2d 93       	st	X+, r18
    3864:	8d 01       	movw	r16, r26
        value = value * 10.0 - digit;
    3866:	07 2e       	mov	r0, r23
    3868:	00 0c       	add	r0, r0
    386a:	88 0b       	sbc	r24, r24
    386c:	99 0b       	sbc	r25, r25
    386e:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <__floatsisf>
    3872:	9b 01       	movw	r18, r22
    3874:	ac 01       	movw	r20, r24
    3876:	6f 89       	ldd	r22, Y+23	; 0x17
    3878:	78 8d       	ldd	r23, Y+24	; 0x18
    387a:	89 8d       	ldd	r24, Y+25	; 0x19
    387c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    387e:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__subsf3>
    value = value * 10.0 - digit;
    --exponent;

    *buffer++ = '.';

    for (int i = 0; i < width; i++) {
    3882:	0e 15       	cp	r16, r14
    3884:	1f 05       	cpc	r17, r15
    3886:	f1 f6       	brne	.-68     	; 0x3844 <vDisplayWriteStringAtPos+0x5ba>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
    }

    *buffer++ = 'e';
    3888:	25 e6       	ldi	r18, 0x65	; 101
    388a:	f3 01       	movw	r30, r6
    388c:	26 83       	std	Z+6, r18	; 0x06
    388e:	b3 01       	movw	r22, r6
    3890:	69 5f       	subi	r22, 0xF9	; 249
    3892:	7f 4f       	sbci	r23, 0xFF	; 255
    3894:	4a e0       	ldi	r20, 0x0A	; 10
    3896:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3898:	9d 8d       	ldd	r25, Y+29	; 0x1d
    389a:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <__itoa_ncheck>
    389e:	94 01       	movw	r18, r8
    38a0:	f4 01       	movw	r30, r8
    38a2:	ec 55       	subi	r30, 0x5C	; 92
    38a4:	f3 4d       	sbci	r31, 0xD3	; 211
	
	return length;
}

static int normalize(double *val) {
    int exponent = 0;
    38a6:	48 eb       	ldi	r20, 0xB8	; 184
    38a8:	5c e2       	ldi	r21, 0x2C	; 44
    38aa:	80 e0       	ldi	r24, 0x00	; 0
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	05 c0       	rjmp	.+10     	; 0x38ba <vDisplayWriteStringAtPos+0x630>

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
					str[length+i] = buffer[i];
    38b0:	da 01       	movw	r26, r20
    38b2:	6d 91       	ld	r22, X+
    38b4:	ad 01       	movw	r20, r26
    38b6:	61 93       	st	Z+, r22
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    38b8:	01 96       	adiw	r24, 0x01	; 1
    38ba:	d6 01       	movw	r26, r12
    38bc:	0d 90       	ld	r0, X+
    38be:	00 20       	and	r0, r0
    38c0:	e9 f7       	brne	.-6      	; 0x38bc <vDisplayWriteStringAtPos+0x632>
    38c2:	11 97       	sbiw	r26, 0x01	; 1
    38c4:	a8 5b       	subi	r26, 0xB8	; 184
    38c6:	bc 42       	sbci	r27, 0x2C	; 44
    38c8:	8a 17       	cp	r24, r26
    38ca:	9b 07       	cpc	r25, r27
    38cc:	88 f3       	brcs	.-30     	; 0x38b0 <vDisplayWriteStringAtPos+0x626>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    38ce:	4d 01       	movw	r8, r26
    38d0:	82 0e       	add	r8, r18
    38d2:	93 1e       	adc	r9, r19
				}
				length += strlen(buffer);
				break;

				case 'e':
				double_temp = va_arg(arg, double);
    38d4:	71 01       	movw	r14, r2
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    38d6:	d2 01       	movw	r26, r4
    38d8:	11 c0       	rjmp	.+34     	; 0x38fc <vDisplayWriteStringAtPos+0x672>
				break;
			}
		}
		else {
			str[length] = ch;
			if(str[length] == '\n') {
    38da:	8a 30       	cpi	r24, 0x0A	; 10
    38dc:	29 f0       	breq	.+10     	; 0x38e8 <vDisplayWriteStringAtPos+0x65e>
				length += strlen(buffer);
				break;
			}
		}
		else {
			str[length] = ch;
    38de:	f4 01       	movw	r30, r8
    38e0:	ec 55       	subi	r30, 0x5C	; 92
    38e2:	f3 4d       	sbci	r31, 0xD3	; 211
    38e4:	80 83       	st	Z, r24
    38e6:	04 c0       	rjmp	.+8      	; 0x38f0 <vDisplayWriteStringAtPos+0x666>
			if(str[length] == '\n') {
				str[length] = '\0';				
    38e8:	f4 01       	movw	r30, r8
    38ea:	ec 55       	subi	r30, 0x5C	; 92
    38ec:	f3 4d       	sbci	r31, 0xD3	; 211
    38ee:	10 82       	st	Z, r1
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    38f0:	11 96       	adiw	r26, 0x01	; 1
		else {
			str[length] = ch;
			if(str[length] == '\n') {
				str[length] = '\0';				
			}
			length++;
    38f2:	ef ef       	ldi	r30, 0xFF	; 255
    38f4:	8e 1a       	sub	r8, r30
    38f6:	9e 0a       	sbc	r9, r30
    38f8:	01 c0       	rjmp	.+2      	; 0x38fc <vDisplayWriteStringAtPos+0x672>
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    38fa:	d2 01       	movw	r26, r4
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    38fc:	8c 91       	ld	r24, X
    38fe:	81 11       	cpse	r24, r1
    3900:	01 cd       	rjmp	.-1534   	; 0x3304 <vDisplayWriteStringAtPos+0x7a>
				str[length] = '\0';				
			}
			length++;
		}
	}
	if(length + pos >= 20) {
    3902:	8d a9       	ldd	r24, Y+53	; 0x35
    3904:	9e a9       	ldd	r25, Y+54	; 0x36
    3906:	88 0d       	add	r24, r8
    3908:	99 1d       	adc	r25, r9
    390a:	44 97       	sbiw	r24, 0x14	; 20
    390c:	3c f0       	brlt	.+14     	; 0x391c <vDisplayWriteStringAtPos+0x692>
		length = 20-pos;
    390e:	84 e1       	ldi	r24, 0x14	; 20
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	4c 01       	movw	r8, r24
    3914:	2d a9       	ldd	r18, Y+53	; 0x35
    3916:	3e a9       	ldd	r19, Y+54	; 0x36
    3918:	82 1a       	sub	r8, r18
    391a:	93 0a       	sbc	r9, r19
    391c:	fe 01       	movw	r30, r28
    391e:	33 96       	adiw	r30, 0x03	; 3
    3920:	ce 01       	movw	r24, r28
    3922:	47 96       	adiw	r24, 0x17	; 23
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    3924:	df 01       	movw	r26, r30
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
    3926:	1d 92       	st	X+, r1
	}
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    3928:	a8 17       	cp	r26, r24
    392a:	b9 07       	cpc	r27, r25
    392c:	e1 f7       	brne	.-8      	; 0x3926 <vDisplayWriteStringAtPos+0x69c>
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
    392e:	3b 8d       	ldd	r19, Y+27	; 0x1b
    3930:	39 83       	std	Y+1, r19	; 0x01
	newLine.displayPos = pos;
    3932:	8d a9       	ldd	r24, Y+53	; 0x35
    3934:	8a 83       	std	Y+2, r24	; 0x02
	for(int i = 0; i < length;i++) {
    3936:	18 14       	cp	r1, r8
    3938:	19 04       	cpc	r1, r9
    393a:	5c f4       	brge	.+22     	; 0x3952 <vDisplayWriteStringAtPos+0x6c8>
    393c:	ce 01       	movw	r24, r28
    393e:	88 0d       	add	r24, r8
    3940:	99 1d       	adc	r25, r9
    3942:	03 96       	adiw	r24, 0x03	; 3
		newLine.displayBuffer[i] = str[i];
    3944:	d5 01       	movw	r26, r10
    3946:	2d 91       	ld	r18, X+
    3948:	5d 01       	movw	r10, r26
    394a:	21 93       	st	Z+, r18
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
	newLine.displayPos = pos;
	for(int i = 0; i < length;i++) {
    394c:	8e 17       	cp	r24, r30
    394e:	9f 07       	cpc	r25, r31
    3950:	c9 f7       	brne	.-14     	; 0x3944 <vDisplayWriteStringAtPos+0x6ba>
		newLine.displayBuffer[i] = str[i];
	}	
	xQueueSend(displayLineQueue, (void *) &newLine, portMAX_DELAY);
    3952:	00 e0       	ldi	r16, 0x00	; 0
    3954:	2f ef       	ldi	r18, 0xFF	; 255
    3956:	3f ef       	ldi	r19, 0xFF	; 255
    3958:	a9 01       	movw	r20, r18
    395a:	be 01       	movw	r22, r28
    395c:	6f 5f       	subi	r22, 0xFF	; 255
    395e:	7f 4f       	sbci	r23, 0xFF	; 255
    3960:	80 91 d7 2c 	lds	r24, 0x2CD7	; 0x802cd7 <displayLineQueue>
    3964:	90 91 d8 2c 	lds	r25, 0x2CD8	; 0x802cd8 <displayLineQueue+0x1>
    3968:	0e 94 4d 08 	call	0x109a	; 0x109a <xQueueGenericSend>
void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
	va_list arg;	
	va_start(arg, fmt);
	display_vprintf(line, pos, fmt, arg);
	va_end(arg);	
}
    396c:	1b c0       	rjmp	.+54     	; 0x39a4 <vDisplayWriteStringAtPos+0x71a>
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    396e:	2d ec       	ldi	r18, 0xCD	; 205
    3970:	3c ec       	ldi	r19, 0xCC	; 204
    3972:	4c ec       	ldi	r20, 0xCC	; 204
    3974:	5d e3       	ldi	r21, 0x3D	; 61
    3976:	6f 89       	ldd	r22, Y+23	; 0x17
    3978:	78 8d       	ldd	r23, Y+24	; 0x18
    397a:	89 8d       	ldd	r24, Y+25	; 0x19
    397c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    397e:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <__cmpsf2>
    3982:	88 23       	and	r24, r24
    3984:	0c f4       	brge	.+2      	; 0x3988 <vDisplayWriteStringAtPos+0x6fe>
    3986:	d6 cd       	rjmp	.-1108   	; 0x3534 <vDisplayWriteStringAtPos+0x2aa>
	
	return length;
}

static int normalize(double *val) {
    int exponent = 0;
    3988:	80 e0       	ldi	r24, 0x00	; 0
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	26 ce       	rjmp	.-948    	; 0x35da <vDisplayWriteStringAtPos+0x350>
        ++places;
        --exponent;
    }

    if (places == 0)
        *buffer++ = '0';
    398e:	20 e3       	ldi	r18, 0x30	; 48
    3990:	ec 8d       	ldd	r30, Y+28	; 0x1c
    3992:	fd 8d       	ldd	r31, Y+29	; 0x1d
    3994:	20 83       	st	Z, r18

    *buffer++ = '.';
    3996:	7f 01       	movw	r14, r30
    3998:	32 e0       	ldi	r19, 0x02	; 2
    399a:	e3 0e       	add	r14, r19
    399c:	f1 1c       	adc	r15, r1
    399e:	8e e2       	ldi	r24, 0x2E	; 46
    39a0:	81 83       	std	Z+1, r24	; 0x01
    39a2:	46 ce       	rjmp	.-884    	; 0x3630 <vDisplayWriteStringAtPos+0x3a6>
void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
	va_list arg;	
	va_start(arg, fmt);
	display_vprintf(line, pos, fmt, arg);
	va_end(arg);	
}
    39a4:	6d 96       	adiw	r28, 0x1d	; 29
    39a6:	cd bf       	out	0x3d, r28	; 61
    39a8:	de bf       	out	0x3e, r29	; 62
    39aa:	df 91       	pop	r29
    39ac:	cf 91       	pop	r28
    39ae:	1f 91       	pop	r17
    39b0:	0f 91       	pop	r16
    39b2:	ff 90       	pop	r15
    39b4:	ef 90       	pop	r14
    39b6:	df 90       	pop	r13
    39b8:	cf 90       	pop	r12
    39ba:	bf 90       	pop	r11
    39bc:	af 90       	pop	r10
    39be:	9f 90       	pop	r9
    39c0:	8f 90       	pop	r8
    39c2:	7f 90       	pop	r7
    39c4:	6f 90       	pop	r6
    39c6:	5f 90       	pop	r5
    39c8:	4f 90       	pop	r4
    39ca:	3f 90       	pop	r3
    39cc:	2f 90       	pop	r2
    39ce:	08 95       	ret

000039d0 <getResetReason>:
 #include "utils.h"

 resetReason_t getResetReason(void) {
	 resetReason_t returnValue = RESETREASON_POWERONRESET;
	 // software reset ?
	 if( RST.STATUS & RST_SRF_bm )
    39d0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    39d4:	85 ff       	sbrs	r24, 5
    39d6:	05 c0       	rjmp	.+10     	; 0x39e2 <getResetReason+0x12>
	 {
		 // reset this bit
		 RST.STATUS = RST_SRF_bm;
    39d8:	80 e2       	ldi	r24, 0x20	; 32
    39da:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
		 returnValue = RESETREASON_SOFTWARERESET;
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	08 95       	ret
	 }
	 // power on reset ?
	 else if( RST.STATUS & RST_PORF_bm)
    39e2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    39e6:	80 ff       	sbrs	r24, 0
    39e8:	05 c0       	rjmp	.+10     	; 0x39f4 <getResetReason+0x24>
	 {
		 // reset this bit
		 RST.STATUS = RST_PORF_bm;
    39ea:	81 e0       	ldi	r24, 0x01	; 1
    39ec:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
		 returnValue = RESETREASON_POWERONRESET;
    39f0:	82 e0       	ldi	r24, 0x02	; 2
    39f2:	08 95       	ret
	 }
	 // debugger reset ?
	 else if( RST.STATUS & RST_PDIRF_bm)
    39f4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    39f8:	84 ff       	sbrs	r24, 4
    39fa:	05 c0       	rjmp	.+10     	; 0x3a06 <getResetReason+0x36>
	 {
		 // reset this bit
		 RST.STATUS = RST_PDIRF_bm;
    39fc:	80 e1       	ldi	r24, 0x10	; 16
    39fe:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
		 returnValue = RESETREASON_DEBUGGERRESET;
    3a02:	83 e0       	ldi	r24, 0x03	; 3
    3a04:	08 95       	ret
	 }
	 // external reset ?
	 else if( RST.STATUS & RST_EXTRF_bm)
    3a06:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    3a0a:	81 ff       	sbrs	r24, 1
    3a0c:	05 c0       	rjmp	.+10     	; 0x3a18 <getResetReason+0x48>
	 {
		 // reset this bit
		 RST.STATUS = RST_EXTRF_bm;
    3a0e:	82 e0       	ldi	r24, 0x02	; 2
    3a10:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
		 returnValue = RESETREASON_EXTERNALRESET;
    3a14:	84 e0       	ldi	r24, 0x04	; 4
    3a16:	08 95       	ret
 */ 
 #include "avr_compiler.h"
 #include "utils.h"

 resetReason_t getResetReason(void) {
	 resetReason_t returnValue = RESETREASON_POWERONRESET;
    3a18:	82 e0       	ldi	r24, 0x02	; 2
		 // reset this bit
		 RST.STATUS = RST_EXTRF_bm;
		 returnValue = RESETREASON_EXTERNALRESET;
	 }
	 return returnValue;
    3a1a:	08 95       	ret

00003a1c <__subsf3>:
    3a1c:	50 58       	subi	r21, 0x80	; 128

00003a1e <__addsf3>:
    3a1e:	bb 27       	eor	r27, r27
    3a20:	aa 27       	eor	r26, r26
    3a22:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <__addsf3x>
    3a26:	0c 94 a0 1e 	jmp	0x3d40	; 0x3d40 <__fp_round>
    3a2a:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <__fp_pscA>
    3a2e:	38 f0       	brcs	.+14     	; 0x3a3e <__addsf3+0x20>
    3a30:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <__fp_pscB>
    3a34:	20 f0       	brcs	.+8      	; 0x3a3e <__addsf3+0x20>
    3a36:	39 f4       	brne	.+14     	; 0x3a46 <__addsf3+0x28>
    3a38:	9f 3f       	cpi	r25, 0xFF	; 255
    3a3a:	19 f4       	brne	.+6      	; 0x3a42 <__addsf3+0x24>
    3a3c:	26 f4       	brtc	.+8      	; 0x3a46 <__addsf3+0x28>
    3a3e:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <__fp_nan>
    3a42:	0e f4       	brtc	.+2      	; 0x3a46 <__addsf3+0x28>
    3a44:	e0 95       	com	r30
    3a46:	e7 fb       	bst	r30, 7
    3a48:	0c 94 89 1e 	jmp	0x3d12	; 0x3d12 <__fp_inf>

00003a4c <__addsf3x>:
    3a4c:	e9 2f       	mov	r30, r25
    3a4e:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <__fp_split3>
    3a52:	58 f3       	brcs	.-42     	; 0x3a2a <__addsf3+0xc>
    3a54:	ba 17       	cp	r27, r26
    3a56:	62 07       	cpc	r22, r18
    3a58:	73 07       	cpc	r23, r19
    3a5a:	84 07       	cpc	r24, r20
    3a5c:	95 07       	cpc	r25, r21
    3a5e:	20 f0       	brcs	.+8      	; 0x3a68 <__addsf3x+0x1c>
    3a60:	79 f4       	brne	.+30     	; 0x3a80 <__addsf3x+0x34>
    3a62:	a6 f5       	brtc	.+104    	; 0x3acc <__addsf3x+0x80>
    3a64:	0c 94 d3 1e 	jmp	0x3da6	; 0x3da6 <__fp_zero>
    3a68:	0e f4       	brtc	.+2      	; 0x3a6c <__addsf3x+0x20>
    3a6a:	e0 95       	com	r30
    3a6c:	0b 2e       	mov	r0, r27
    3a6e:	ba 2f       	mov	r27, r26
    3a70:	a0 2d       	mov	r26, r0
    3a72:	0b 01       	movw	r0, r22
    3a74:	b9 01       	movw	r22, r18
    3a76:	90 01       	movw	r18, r0
    3a78:	0c 01       	movw	r0, r24
    3a7a:	ca 01       	movw	r24, r20
    3a7c:	a0 01       	movw	r20, r0
    3a7e:	11 24       	eor	r1, r1
    3a80:	ff 27       	eor	r31, r31
    3a82:	59 1b       	sub	r21, r25
    3a84:	99 f0       	breq	.+38     	; 0x3aac <__addsf3x+0x60>
    3a86:	59 3f       	cpi	r21, 0xF9	; 249
    3a88:	50 f4       	brcc	.+20     	; 0x3a9e <__addsf3x+0x52>
    3a8a:	50 3e       	cpi	r21, 0xE0	; 224
    3a8c:	68 f1       	brcs	.+90     	; 0x3ae8 <__addsf3x+0x9c>
    3a8e:	1a 16       	cp	r1, r26
    3a90:	f0 40       	sbci	r31, 0x00	; 0
    3a92:	a2 2f       	mov	r26, r18
    3a94:	23 2f       	mov	r18, r19
    3a96:	34 2f       	mov	r19, r20
    3a98:	44 27       	eor	r20, r20
    3a9a:	58 5f       	subi	r21, 0xF8	; 248
    3a9c:	f3 cf       	rjmp	.-26     	; 0x3a84 <__addsf3x+0x38>
    3a9e:	46 95       	lsr	r20
    3aa0:	37 95       	ror	r19
    3aa2:	27 95       	ror	r18
    3aa4:	a7 95       	ror	r26
    3aa6:	f0 40       	sbci	r31, 0x00	; 0
    3aa8:	53 95       	inc	r21
    3aaa:	c9 f7       	brne	.-14     	; 0x3a9e <__addsf3x+0x52>
    3aac:	7e f4       	brtc	.+30     	; 0x3acc <__addsf3x+0x80>
    3aae:	1f 16       	cp	r1, r31
    3ab0:	ba 0b       	sbc	r27, r26
    3ab2:	62 0b       	sbc	r22, r18
    3ab4:	73 0b       	sbc	r23, r19
    3ab6:	84 0b       	sbc	r24, r20
    3ab8:	ba f0       	brmi	.+46     	; 0x3ae8 <__addsf3x+0x9c>
    3aba:	91 50       	subi	r25, 0x01	; 1
    3abc:	a1 f0       	breq	.+40     	; 0x3ae6 <__addsf3x+0x9a>
    3abe:	ff 0f       	add	r31, r31
    3ac0:	bb 1f       	adc	r27, r27
    3ac2:	66 1f       	adc	r22, r22
    3ac4:	77 1f       	adc	r23, r23
    3ac6:	88 1f       	adc	r24, r24
    3ac8:	c2 f7       	brpl	.-16     	; 0x3aba <__addsf3x+0x6e>
    3aca:	0e c0       	rjmp	.+28     	; 0x3ae8 <__addsf3x+0x9c>
    3acc:	ba 0f       	add	r27, r26
    3ace:	62 1f       	adc	r22, r18
    3ad0:	73 1f       	adc	r23, r19
    3ad2:	84 1f       	adc	r24, r20
    3ad4:	48 f4       	brcc	.+18     	; 0x3ae8 <__addsf3x+0x9c>
    3ad6:	87 95       	ror	r24
    3ad8:	77 95       	ror	r23
    3ada:	67 95       	ror	r22
    3adc:	b7 95       	ror	r27
    3ade:	f7 95       	ror	r31
    3ae0:	9e 3f       	cpi	r25, 0xFE	; 254
    3ae2:	08 f0       	brcs	.+2      	; 0x3ae6 <__addsf3x+0x9a>
    3ae4:	b0 cf       	rjmp	.-160    	; 0x3a46 <__addsf3+0x28>
    3ae6:	93 95       	inc	r25
    3ae8:	88 0f       	add	r24, r24
    3aea:	08 f0       	brcs	.+2      	; 0x3aee <__addsf3x+0xa2>
    3aec:	99 27       	eor	r25, r25
    3aee:	ee 0f       	add	r30, r30
    3af0:	97 95       	ror	r25
    3af2:	87 95       	ror	r24
    3af4:	08 95       	ret

00003af6 <__cmpsf2>:
    3af6:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__fp_cmp>
    3afa:	08 f4       	brcc	.+2      	; 0x3afe <__cmpsf2+0x8>
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	08 95       	ret

00003b00 <__divsf3>:
    3b00:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__divsf3x>
    3b04:	0c 94 a0 1e 	jmp	0x3d40	; 0x3d40 <__fp_round>
    3b08:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <__fp_pscB>
    3b0c:	58 f0       	brcs	.+22     	; 0x3b24 <__divsf3+0x24>
    3b0e:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <__fp_pscA>
    3b12:	40 f0       	brcs	.+16     	; 0x3b24 <__divsf3+0x24>
    3b14:	29 f4       	brne	.+10     	; 0x3b20 <__divsf3+0x20>
    3b16:	5f 3f       	cpi	r21, 0xFF	; 255
    3b18:	29 f0       	breq	.+10     	; 0x3b24 <__divsf3+0x24>
    3b1a:	0c 94 89 1e 	jmp	0x3d12	; 0x3d12 <__fp_inf>
    3b1e:	51 11       	cpse	r21, r1
    3b20:	0c 94 d4 1e 	jmp	0x3da8	; 0x3da8 <__fp_szero>
    3b24:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <__fp_nan>

00003b28 <__divsf3x>:
    3b28:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <__fp_split3>
    3b2c:	68 f3       	brcs	.-38     	; 0x3b08 <__divsf3+0x8>

00003b2e <__divsf3_pse>:
    3b2e:	99 23       	and	r25, r25
    3b30:	b1 f3       	breq	.-20     	; 0x3b1e <__divsf3+0x1e>
    3b32:	55 23       	and	r21, r21
    3b34:	91 f3       	breq	.-28     	; 0x3b1a <__divsf3+0x1a>
    3b36:	95 1b       	sub	r25, r21
    3b38:	55 0b       	sbc	r21, r21
    3b3a:	bb 27       	eor	r27, r27
    3b3c:	aa 27       	eor	r26, r26
    3b3e:	62 17       	cp	r22, r18
    3b40:	73 07       	cpc	r23, r19
    3b42:	84 07       	cpc	r24, r20
    3b44:	38 f0       	brcs	.+14     	; 0x3b54 <__divsf3_pse+0x26>
    3b46:	9f 5f       	subi	r25, 0xFF	; 255
    3b48:	5f 4f       	sbci	r21, 0xFF	; 255
    3b4a:	22 0f       	add	r18, r18
    3b4c:	33 1f       	adc	r19, r19
    3b4e:	44 1f       	adc	r20, r20
    3b50:	aa 1f       	adc	r26, r26
    3b52:	a9 f3       	breq	.-22     	; 0x3b3e <__divsf3_pse+0x10>
    3b54:	35 d0       	rcall	.+106    	; 0x3bc0 <__divsf3_pse+0x92>
    3b56:	0e 2e       	mov	r0, r30
    3b58:	3a f0       	brmi	.+14     	; 0x3b68 <__divsf3_pse+0x3a>
    3b5a:	e0 e8       	ldi	r30, 0x80	; 128
    3b5c:	32 d0       	rcall	.+100    	; 0x3bc2 <__divsf3_pse+0x94>
    3b5e:	91 50       	subi	r25, 0x01	; 1
    3b60:	50 40       	sbci	r21, 0x00	; 0
    3b62:	e6 95       	lsr	r30
    3b64:	00 1c       	adc	r0, r0
    3b66:	ca f7       	brpl	.-14     	; 0x3b5a <__divsf3_pse+0x2c>
    3b68:	2b d0       	rcall	.+86     	; 0x3bc0 <__divsf3_pse+0x92>
    3b6a:	fe 2f       	mov	r31, r30
    3b6c:	29 d0       	rcall	.+82     	; 0x3bc0 <__divsf3_pse+0x92>
    3b6e:	66 0f       	add	r22, r22
    3b70:	77 1f       	adc	r23, r23
    3b72:	88 1f       	adc	r24, r24
    3b74:	bb 1f       	adc	r27, r27
    3b76:	26 17       	cp	r18, r22
    3b78:	37 07       	cpc	r19, r23
    3b7a:	48 07       	cpc	r20, r24
    3b7c:	ab 07       	cpc	r26, r27
    3b7e:	b0 e8       	ldi	r27, 0x80	; 128
    3b80:	09 f0       	breq	.+2      	; 0x3b84 <__divsf3_pse+0x56>
    3b82:	bb 0b       	sbc	r27, r27
    3b84:	80 2d       	mov	r24, r0
    3b86:	bf 01       	movw	r22, r30
    3b88:	ff 27       	eor	r31, r31
    3b8a:	93 58       	subi	r25, 0x83	; 131
    3b8c:	5f 4f       	sbci	r21, 0xFF	; 255
    3b8e:	3a f0       	brmi	.+14     	; 0x3b9e <__divsf3_pse+0x70>
    3b90:	9e 3f       	cpi	r25, 0xFE	; 254
    3b92:	51 05       	cpc	r21, r1
    3b94:	78 f0       	brcs	.+30     	; 0x3bb4 <__divsf3_pse+0x86>
    3b96:	0c 94 89 1e 	jmp	0x3d12	; 0x3d12 <__fp_inf>
    3b9a:	0c 94 d4 1e 	jmp	0x3da8	; 0x3da8 <__fp_szero>
    3b9e:	5f 3f       	cpi	r21, 0xFF	; 255
    3ba0:	e4 f3       	brlt	.-8      	; 0x3b9a <__divsf3_pse+0x6c>
    3ba2:	98 3e       	cpi	r25, 0xE8	; 232
    3ba4:	d4 f3       	brlt	.-12     	; 0x3b9a <__divsf3_pse+0x6c>
    3ba6:	86 95       	lsr	r24
    3ba8:	77 95       	ror	r23
    3baa:	67 95       	ror	r22
    3bac:	b7 95       	ror	r27
    3bae:	f7 95       	ror	r31
    3bb0:	9f 5f       	subi	r25, 0xFF	; 255
    3bb2:	c9 f7       	brne	.-14     	; 0x3ba6 <__divsf3_pse+0x78>
    3bb4:	88 0f       	add	r24, r24
    3bb6:	91 1d       	adc	r25, r1
    3bb8:	96 95       	lsr	r25
    3bba:	87 95       	ror	r24
    3bbc:	97 f9       	bld	r25, 7
    3bbe:	08 95       	ret
    3bc0:	e1 e0       	ldi	r30, 0x01	; 1
    3bc2:	66 0f       	add	r22, r22
    3bc4:	77 1f       	adc	r23, r23
    3bc6:	88 1f       	adc	r24, r24
    3bc8:	bb 1f       	adc	r27, r27
    3bca:	62 17       	cp	r22, r18
    3bcc:	73 07       	cpc	r23, r19
    3bce:	84 07       	cpc	r24, r20
    3bd0:	ba 07       	cpc	r27, r26
    3bd2:	20 f0       	brcs	.+8      	; 0x3bdc <__divsf3_pse+0xae>
    3bd4:	62 1b       	sub	r22, r18
    3bd6:	73 0b       	sbc	r23, r19
    3bd8:	84 0b       	sbc	r24, r20
    3bda:	ba 0b       	sbc	r27, r26
    3bdc:	ee 1f       	adc	r30, r30
    3bde:	88 f7       	brcc	.-30     	; 0x3bc2 <__divsf3_pse+0x94>
    3be0:	e0 95       	com	r30
    3be2:	08 95       	ret

00003be4 <__fixsfsi>:
    3be4:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__fixunssfsi>
    3be8:	68 94       	set
    3bea:	b1 11       	cpse	r27, r1
    3bec:	0c 94 d4 1e 	jmp	0x3da8	; 0x3da8 <__fp_szero>
    3bf0:	08 95       	ret

00003bf2 <__fixunssfsi>:
    3bf2:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__fp_splitA>
    3bf6:	88 f0       	brcs	.+34     	; 0x3c1a <__fixunssfsi+0x28>
    3bf8:	9f 57       	subi	r25, 0x7F	; 127
    3bfa:	98 f0       	brcs	.+38     	; 0x3c22 <__fixunssfsi+0x30>
    3bfc:	b9 2f       	mov	r27, r25
    3bfe:	99 27       	eor	r25, r25
    3c00:	b7 51       	subi	r27, 0x17	; 23
    3c02:	b0 f0       	brcs	.+44     	; 0x3c30 <__fixunssfsi+0x3e>
    3c04:	e1 f0       	breq	.+56     	; 0x3c3e <__fixunssfsi+0x4c>
    3c06:	66 0f       	add	r22, r22
    3c08:	77 1f       	adc	r23, r23
    3c0a:	88 1f       	adc	r24, r24
    3c0c:	99 1f       	adc	r25, r25
    3c0e:	1a f0       	brmi	.+6      	; 0x3c16 <__fixunssfsi+0x24>
    3c10:	ba 95       	dec	r27
    3c12:	c9 f7       	brne	.-14     	; 0x3c06 <__fixunssfsi+0x14>
    3c14:	14 c0       	rjmp	.+40     	; 0x3c3e <__fixunssfsi+0x4c>
    3c16:	b1 30       	cpi	r27, 0x01	; 1
    3c18:	91 f0       	breq	.+36     	; 0x3c3e <__fixunssfsi+0x4c>
    3c1a:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fp_zero>
    3c1e:	b1 e0       	ldi	r27, 0x01	; 1
    3c20:	08 95       	ret
    3c22:	0c 94 d3 1e 	jmp	0x3da6	; 0x3da6 <__fp_zero>
    3c26:	67 2f       	mov	r22, r23
    3c28:	78 2f       	mov	r23, r24
    3c2a:	88 27       	eor	r24, r24
    3c2c:	b8 5f       	subi	r27, 0xF8	; 248
    3c2e:	39 f0       	breq	.+14     	; 0x3c3e <__fixunssfsi+0x4c>
    3c30:	b9 3f       	cpi	r27, 0xF9	; 249
    3c32:	cc f3       	brlt	.-14     	; 0x3c26 <__fixunssfsi+0x34>
    3c34:	86 95       	lsr	r24
    3c36:	77 95       	ror	r23
    3c38:	67 95       	ror	r22
    3c3a:	b3 95       	inc	r27
    3c3c:	d9 f7       	brne	.-10     	; 0x3c34 <__fixunssfsi+0x42>
    3c3e:	3e f4       	brtc	.+14     	; 0x3c4e <__fixunssfsi+0x5c>
    3c40:	90 95       	com	r25
    3c42:	80 95       	com	r24
    3c44:	70 95       	com	r23
    3c46:	61 95       	neg	r22
    3c48:	7f 4f       	sbci	r23, 0xFF	; 255
    3c4a:	8f 4f       	sbci	r24, 0xFF	; 255
    3c4c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c4e:	08 95       	ret

00003c50 <__floatunsisf>:
    3c50:	e8 94       	clt
    3c52:	09 c0       	rjmp	.+18     	; 0x3c66 <__floatsisf+0x12>

00003c54 <__floatsisf>:
    3c54:	97 fb       	bst	r25, 7
    3c56:	3e f4       	brtc	.+14     	; 0x3c66 <__floatsisf+0x12>
    3c58:	90 95       	com	r25
    3c5a:	80 95       	com	r24
    3c5c:	70 95       	com	r23
    3c5e:	61 95       	neg	r22
    3c60:	7f 4f       	sbci	r23, 0xFF	; 255
    3c62:	8f 4f       	sbci	r24, 0xFF	; 255
    3c64:	9f 4f       	sbci	r25, 0xFF	; 255
    3c66:	99 23       	and	r25, r25
    3c68:	a9 f0       	breq	.+42     	; 0x3c94 <__floatsisf+0x40>
    3c6a:	f9 2f       	mov	r31, r25
    3c6c:	96 e9       	ldi	r25, 0x96	; 150
    3c6e:	bb 27       	eor	r27, r27
    3c70:	93 95       	inc	r25
    3c72:	f6 95       	lsr	r31
    3c74:	87 95       	ror	r24
    3c76:	77 95       	ror	r23
    3c78:	67 95       	ror	r22
    3c7a:	b7 95       	ror	r27
    3c7c:	f1 11       	cpse	r31, r1
    3c7e:	f8 cf       	rjmp	.-16     	; 0x3c70 <__floatsisf+0x1c>
    3c80:	fa f4       	brpl	.+62     	; 0x3cc0 <__floatsisf+0x6c>
    3c82:	bb 0f       	add	r27, r27
    3c84:	11 f4       	brne	.+4      	; 0x3c8a <__floatsisf+0x36>
    3c86:	60 ff       	sbrs	r22, 0
    3c88:	1b c0       	rjmp	.+54     	; 0x3cc0 <__floatsisf+0x6c>
    3c8a:	6f 5f       	subi	r22, 0xFF	; 255
    3c8c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c8e:	8f 4f       	sbci	r24, 0xFF	; 255
    3c90:	9f 4f       	sbci	r25, 0xFF	; 255
    3c92:	16 c0       	rjmp	.+44     	; 0x3cc0 <__floatsisf+0x6c>
    3c94:	88 23       	and	r24, r24
    3c96:	11 f0       	breq	.+4      	; 0x3c9c <__floatsisf+0x48>
    3c98:	96 e9       	ldi	r25, 0x96	; 150
    3c9a:	11 c0       	rjmp	.+34     	; 0x3cbe <__floatsisf+0x6a>
    3c9c:	77 23       	and	r23, r23
    3c9e:	21 f0       	breq	.+8      	; 0x3ca8 <__floatsisf+0x54>
    3ca0:	9e e8       	ldi	r25, 0x8E	; 142
    3ca2:	87 2f       	mov	r24, r23
    3ca4:	76 2f       	mov	r23, r22
    3ca6:	05 c0       	rjmp	.+10     	; 0x3cb2 <__floatsisf+0x5e>
    3ca8:	66 23       	and	r22, r22
    3caa:	71 f0       	breq	.+28     	; 0x3cc8 <__floatsisf+0x74>
    3cac:	96 e8       	ldi	r25, 0x86	; 134
    3cae:	86 2f       	mov	r24, r22
    3cb0:	70 e0       	ldi	r23, 0x00	; 0
    3cb2:	60 e0       	ldi	r22, 0x00	; 0
    3cb4:	2a f0       	brmi	.+10     	; 0x3cc0 <__floatsisf+0x6c>
    3cb6:	9a 95       	dec	r25
    3cb8:	66 0f       	add	r22, r22
    3cba:	77 1f       	adc	r23, r23
    3cbc:	88 1f       	adc	r24, r24
    3cbe:	da f7       	brpl	.-10     	; 0x3cb6 <__floatsisf+0x62>
    3cc0:	88 0f       	add	r24, r24
    3cc2:	96 95       	lsr	r25
    3cc4:	87 95       	ror	r24
    3cc6:	97 f9       	bld	r25, 7
    3cc8:	08 95       	ret

00003cca <__fp_cmp>:
    3cca:	99 0f       	add	r25, r25
    3ccc:	00 08       	sbc	r0, r0
    3cce:	55 0f       	add	r21, r21
    3cd0:	aa 0b       	sbc	r26, r26
    3cd2:	e0 e8       	ldi	r30, 0x80	; 128
    3cd4:	fe ef       	ldi	r31, 0xFE	; 254
    3cd6:	16 16       	cp	r1, r22
    3cd8:	17 06       	cpc	r1, r23
    3cda:	e8 07       	cpc	r30, r24
    3cdc:	f9 07       	cpc	r31, r25
    3cde:	c0 f0       	brcs	.+48     	; 0x3d10 <__fp_cmp+0x46>
    3ce0:	12 16       	cp	r1, r18
    3ce2:	13 06       	cpc	r1, r19
    3ce4:	e4 07       	cpc	r30, r20
    3ce6:	f5 07       	cpc	r31, r21
    3ce8:	98 f0       	brcs	.+38     	; 0x3d10 <__fp_cmp+0x46>
    3cea:	62 1b       	sub	r22, r18
    3cec:	73 0b       	sbc	r23, r19
    3cee:	84 0b       	sbc	r24, r20
    3cf0:	95 0b       	sbc	r25, r21
    3cf2:	39 f4       	brne	.+14     	; 0x3d02 <__fp_cmp+0x38>
    3cf4:	0a 26       	eor	r0, r26
    3cf6:	61 f0       	breq	.+24     	; 0x3d10 <__fp_cmp+0x46>
    3cf8:	23 2b       	or	r18, r19
    3cfa:	24 2b       	or	r18, r20
    3cfc:	25 2b       	or	r18, r21
    3cfe:	21 f4       	brne	.+8      	; 0x3d08 <__fp_cmp+0x3e>
    3d00:	08 95       	ret
    3d02:	0a 26       	eor	r0, r26
    3d04:	09 f4       	brne	.+2      	; 0x3d08 <__fp_cmp+0x3e>
    3d06:	a1 40       	sbci	r26, 0x01	; 1
    3d08:	a6 95       	lsr	r26
    3d0a:	8f ef       	ldi	r24, 0xFF	; 255
    3d0c:	81 1d       	adc	r24, r1
    3d0e:	81 1d       	adc	r24, r1
    3d10:	08 95       	ret

00003d12 <__fp_inf>:
    3d12:	97 f9       	bld	r25, 7
    3d14:	9f 67       	ori	r25, 0x7F	; 127
    3d16:	80 e8       	ldi	r24, 0x80	; 128
    3d18:	70 e0       	ldi	r23, 0x00	; 0
    3d1a:	60 e0       	ldi	r22, 0x00	; 0
    3d1c:	08 95       	ret

00003d1e <__fp_nan>:
    3d1e:	9f ef       	ldi	r25, 0xFF	; 255
    3d20:	80 ec       	ldi	r24, 0xC0	; 192
    3d22:	08 95       	ret

00003d24 <__fp_pscA>:
    3d24:	00 24       	eor	r0, r0
    3d26:	0a 94       	dec	r0
    3d28:	16 16       	cp	r1, r22
    3d2a:	17 06       	cpc	r1, r23
    3d2c:	18 06       	cpc	r1, r24
    3d2e:	09 06       	cpc	r0, r25
    3d30:	08 95       	ret

00003d32 <__fp_pscB>:
    3d32:	00 24       	eor	r0, r0
    3d34:	0a 94       	dec	r0
    3d36:	12 16       	cp	r1, r18
    3d38:	13 06       	cpc	r1, r19
    3d3a:	14 06       	cpc	r1, r20
    3d3c:	05 06       	cpc	r0, r21
    3d3e:	08 95       	ret

00003d40 <__fp_round>:
    3d40:	09 2e       	mov	r0, r25
    3d42:	03 94       	inc	r0
    3d44:	00 0c       	add	r0, r0
    3d46:	11 f4       	brne	.+4      	; 0x3d4c <__fp_round+0xc>
    3d48:	88 23       	and	r24, r24
    3d4a:	52 f0       	brmi	.+20     	; 0x3d60 <__fp_round+0x20>
    3d4c:	bb 0f       	add	r27, r27
    3d4e:	40 f4       	brcc	.+16     	; 0x3d60 <__fp_round+0x20>
    3d50:	bf 2b       	or	r27, r31
    3d52:	11 f4       	brne	.+4      	; 0x3d58 <__fp_round+0x18>
    3d54:	60 ff       	sbrs	r22, 0
    3d56:	04 c0       	rjmp	.+8      	; 0x3d60 <__fp_round+0x20>
    3d58:	6f 5f       	subi	r22, 0xFF	; 255
    3d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d5c:	8f 4f       	sbci	r24, 0xFF	; 255
    3d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d60:	08 95       	ret

00003d62 <__fp_split3>:
    3d62:	57 fd       	sbrc	r21, 7
    3d64:	90 58       	subi	r25, 0x80	; 128
    3d66:	44 0f       	add	r20, r20
    3d68:	55 1f       	adc	r21, r21
    3d6a:	59 f0       	breq	.+22     	; 0x3d82 <__fp_splitA+0x10>
    3d6c:	5f 3f       	cpi	r21, 0xFF	; 255
    3d6e:	71 f0       	breq	.+28     	; 0x3d8c <__fp_splitA+0x1a>
    3d70:	47 95       	ror	r20

00003d72 <__fp_splitA>:
    3d72:	88 0f       	add	r24, r24
    3d74:	97 fb       	bst	r25, 7
    3d76:	99 1f       	adc	r25, r25
    3d78:	61 f0       	breq	.+24     	; 0x3d92 <__fp_splitA+0x20>
    3d7a:	9f 3f       	cpi	r25, 0xFF	; 255
    3d7c:	79 f0       	breq	.+30     	; 0x3d9c <__fp_splitA+0x2a>
    3d7e:	87 95       	ror	r24
    3d80:	08 95       	ret
    3d82:	12 16       	cp	r1, r18
    3d84:	13 06       	cpc	r1, r19
    3d86:	14 06       	cpc	r1, r20
    3d88:	55 1f       	adc	r21, r21
    3d8a:	f2 cf       	rjmp	.-28     	; 0x3d70 <__fp_split3+0xe>
    3d8c:	46 95       	lsr	r20
    3d8e:	f1 df       	rcall	.-30     	; 0x3d72 <__fp_splitA>
    3d90:	08 c0       	rjmp	.+16     	; 0x3da2 <__fp_splitA+0x30>
    3d92:	16 16       	cp	r1, r22
    3d94:	17 06       	cpc	r1, r23
    3d96:	18 06       	cpc	r1, r24
    3d98:	99 1f       	adc	r25, r25
    3d9a:	f1 cf       	rjmp	.-30     	; 0x3d7e <__fp_splitA+0xc>
    3d9c:	86 95       	lsr	r24
    3d9e:	71 05       	cpc	r23, r1
    3da0:	61 05       	cpc	r22, r1
    3da2:	08 94       	sec
    3da4:	08 95       	ret

00003da6 <__fp_zero>:
    3da6:	e8 94       	clt

00003da8 <__fp_szero>:
    3da8:	bb 27       	eor	r27, r27
    3daa:	66 27       	eor	r22, r22
    3dac:	77 27       	eor	r23, r23
    3dae:	cb 01       	movw	r24, r22
    3db0:	97 f9       	bld	r25, 7
    3db2:	08 95       	ret

00003db4 <__gesf2>:
    3db4:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__fp_cmp>
    3db8:	08 f4       	brcc	.+2      	; 0x3dbc <__gesf2+0x8>
    3dba:	8f ef       	ldi	r24, 0xFF	; 255
    3dbc:	08 95       	ret

00003dbe <__mulsf3>:
    3dbe:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <__mulsf3x>
    3dc2:	0c 94 a0 1e 	jmp	0x3d40	; 0x3d40 <__fp_round>
    3dc6:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <__fp_pscA>
    3dca:	38 f0       	brcs	.+14     	; 0x3dda <__mulsf3+0x1c>
    3dcc:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <__fp_pscB>
    3dd0:	20 f0       	brcs	.+8      	; 0x3dda <__mulsf3+0x1c>
    3dd2:	95 23       	and	r25, r21
    3dd4:	11 f0       	breq	.+4      	; 0x3dda <__mulsf3+0x1c>
    3dd6:	0c 94 89 1e 	jmp	0x3d12	; 0x3d12 <__fp_inf>
    3dda:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <__fp_nan>
    3dde:	11 24       	eor	r1, r1
    3de0:	0c 94 d4 1e 	jmp	0x3da8	; 0x3da8 <__fp_szero>

00003de4 <__mulsf3x>:
    3de4:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <__fp_split3>
    3de8:	70 f3       	brcs	.-36     	; 0x3dc6 <__mulsf3+0x8>

00003dea <__mulsf3_pse>:
    3dea:	95 9f       	mul	r25, r21
    3dec:	c1 f3       	breq	.-16     	; 0x3dde <__mulsf3+0x20>
    3dee:	95 0f       	add	r25, r21
    3df0:	50 e0       	ldi	r21, 0x00	; 0
    3df2:	55 1f       	adc	r21, r21
    3df4:	62 9f       	mul	r22, r18
    3df6:	f0 01       	movw	r30, r0
    3df8:	72 9f       	mul	r23, r18
    3dfa:	bb 27       	eor	r27, r27
    3dfc:	f0 0d       	add	r31, r0
    3dfe:	b1 1d       	adc	r27, r1
    3e00:	63 9f       	mul	r22, r19
    3e02:	aa 27       	eor	r26, r26
    3e04:	f0 0d       	add	r31, r0
    3e06:	b1 1d       	adc	r27, r1
    3e08:	aa 1f       	adc	r26, r26
    3e0a:	64 9f       	mul	r22, r20
    3e0c:	66 27       	eor	r22, r22
    3e0e:	b0 0d       	add	r27, r0
    3e10:	a1 1d       	adc	r26, r1
    3e12:	66 1f       	adc	r22, r22
    3e14:	82 9f       	mul	r24, r18
    3e16:	22 27       	eor	r18, r18
    3e18:	b0 0d       	add	r27, r0
    3e1a:	a1 1d       	adc	r26, r1
    3e1c:	62 1f       	adc	r22, r18
    3e1e:	73 9f       	mul	r23, r19
    3e20:	b0 0d       	add	r27, r0
    3e22:	a1 1d       	adc	r26, r1
    3e24:	62 1f       	adc	r22, r18
    3e26:	83 9f       	mul	r24, r19
    3e28:	a0 0d       	add	r26, r0
    3e2a:	61 1d       	adc	r22, r1
    3e2c:	22 1f       	adc	r18, r18
    3e2e:	74 9f       	mul	r23, r20
    3e30:	33 27       	eor	r19, r19
    3e32:	a0 0d       	add	r26, r0
    3e34:	61 1d       	adc	r22, r1
    3e36:	23 1f       	adc	r18, r19
    3e38:	84 9f       	mul	r24, r20
    3e3a:	60 0d       	add	r22, r0
    3e3c:	21 1d       	adc	r18, r1
    3e3e:	82 2f       	mov	r24, r18
    3e40:	76 2f       	mov	r23, r22
    3e42:	6a 2f       	mov	r22, r26
    3e44:	11 24       	eor	r1, r1
    3e46:	9f 57       	subi	r25, 0x7F	; 127
    3e48:	50 40       	sbci	r21, 0x00	; 0
    3e4a:	9a f0       	brmi	.+38     	; 0x3e72 <__mulsf3_pse+0x88>
    3e4c:	f1 f0       	breq	.+60     	; 0x3e8a <__mulsf3_pse+0xa0>
    3e4e:	88 23       	and	r24, r24
    3e50:	4a f0       	brmi	.+18     	; 0x3e64 <__mulsf3_pse+0x7a>
    3e52:	ee 0f       	add	r30, r30
    3e54:	ff 1f       	adc	r31, r31
    3e56:	bb 1f       	adc	r27, r27
    3e58:	66 1f       	adc	r22, r22
    3e5a:	77 1f       	adc	r23, r23
    3e5c:	88 1f       	adc	r24, r24
    3e5e:	91 50       	subi	r25, 0x01	; 1
    3e60:	50 40       	sbci	r21, 0x00	; 0
    3e62:	a9 f7       	brne	.-22     	; 0x3e4e <__mulsf3_pse+0x64>
    3e64:	9e 3f       	cpi	r25, 0xFE	; 254
    3e66:	51 05       	cpc	r21, r1
    3e68:	80 f0       	brcs	.+32     	; 0x3e8a <__mulsf3_pse+0xa0>
    3e6a:	0c 94 89 1e 	jmp	0x3d12	; 0x3d12 <__fp_inf>
    3e6e:	0c 94 d4 1e 	jmp	0x3da8	; 0x3da8 <__fp_szero>
    3e72:	5f 3f       	cpi	r21, 0xFF	; 255
    3e74:	e4 f3       	brlt	.-8      	; 0x3e6e <__mulsf3_pse+0x84>
    3e76:	98 3e       	cpi	r25, 0xE8	; 232
    3e78:	d4 f3       	brlt	.-12     	; 0x3e6e <__mulsf3_pse+0x84>
    3e7a:	86 95       	lsr	r24
    3e7c:	77 95       	ror	r23
    3e7e:	67 95       	ror	r22
    3e80:	b7 95       	ror	r27
    3e82:	f7 95       	ror	r31
    3e84:	e7 95       	ror	r30
    3e86:	9f 5f       	subi	r25, 0xFF	; 255
    3e88:	c1 f7       	brne	.-16     	; 0x3e7a <__mulsf3_pse+0x90>
    3e8a:	fe 2b       	or	r31, r30
    3e8c:	88 0f       	add	r24, r24
    3e8e:	91 1d       	adc	r25, r1
    3e90:	96 95       	lsr	r25
    3e92:	87 95       	ror	r24
    3e94:	97 f9       	bld	r25, 7
    3e96:	08 95       	ret

00003e98 <vfprintf>:
    3e98:	2f 92       	push	r2
    3e9a:	3f 92       	push	r3
    3e9c:	4f 92       	push	r4
    3e9e:	5f 92       	push	r5
    3ea0:	6f 92       	push	r6
    3ea2:	7f 92       	push	r7
    3ea4:	8f 92       	push	r8
    3ea6:	9f 92       	push	r9
    3ea8:	af 92       	push	r10
    3eaa:	bf 92       	push	r11
    3eac:	cf 92       	push	r12
    3eae:	df 92       	push	r13
    3eb0:	ef 92       	push	r14
    3eb2:	ff 92       	push	r15
    3eb4:	0f 93       	push	r16
    3eb6:	1f 93       	push	r17
    3eb8:	cf 93       	push	r28
    3eba:	df 93       	push	r29
    3ebc:	cd b7       	in	r28, 0x3d	; 61
    3ebe:	de b7       	in	r29, 0x3e	; 62
    3ec0:	60 97       	sbiw	r28, 0x10	; 16
    3ec2:	cd bf       	out	0x3d, r28	; 61
    3ec4:	de bf       	out	0x3e, r29	; 62
    3ec6:	7c 01       	movw	r14, r24
    3ec8:	1b 01       	movw	r2, r22
    3eca:	6a 01       	movw	r12, r20
    3ecc:	fc 01       	movw	r30, r24
    3ece:	16 82       	std	Z+6, r1	; 0x06
    3ed0:	17 82       	std	Z+7, r1	; 0x07
    3ed2:	83 81       	ldd	r24, Z+3	; 0x03
    3ed4:	81 ff       	sbrs	r24, 1
    3ed6:	44 c3       	rjmp	.+1672   	; 0x4560 <__stack+0x561>
    3ed8:	9e 01       	movw	r18, r28
    3eda:	2f 5f       	subi	r18, 0xFF	; 255
    3edc:	3f 4f       	sbci	r19, 0xFF	; 255
    3ede:	39 01       	movw	r6, r18
    3ee0:	f7 01       	movw	r30, r14
    3ee2:	93 81       	ldd	r25, Z+3	; 0x03
    3ee4:	f1 01       	movw	r30, r2
    3ee6:	93 fd       	sbrc	r25, 3
    3ee8:	85 91       	lpm	r24, Z+
    3eea:	93 ff       	sbrs	r25, 3
    3eec:	81 91       	ld	r24, Z+
    3eee:	1f 01       	movw	r2, r30
    3ef0:	88 23       	and	r24, r24
    3ef2:	09 f4       	brne	.+2      	; 0x3ef6 <vfprintf+0x5e>
    3ef4:	31 c3       	rjmp	.+1634   	; 0x4558 <__stack+0x559>
    3ef6:	85 32       	cpi	r24, 0x25	; 37
    3ef8:	39 f4       	brne	.+14     	; 0x3f08 <vfprintf+0x70>
    3efa:	93 fd       	sbrc	r25, 3
    3efc:	85 91       	lpm	r24, Z+
    3efe:	93 ff       	sbrs	r25, 3
    3f00:	81 91       	ld	r24, Z+
    3f02:	1f 01       	movw	r2, r30
    3f04:	85 32       	cpi	r24, 0x25	; 37
    3f06:	39 f4       	brne	.+14     	; 0x3f16 <vfprintf+0x7e>
    3f08:	b7 01       	movw	r22, r14
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    3f10:	56 01       	movw	r10, r12
    3f12:	65 01       	movw	r12, r10
    3f14:	e5 cf       	rjmp	.-54     	; 0x3ee0 <vfprintf+0x48>
    3f16:	10 e0       	ldi	r17, 0x00	; 0
    3f18:	51 2c       	mov	r5, r1
    3f1a:	91 2c       	mov	r9, r1
    3f1c:	ff e1       	ldi	r31, 0x1F	; 31
    3f1e:	f9 15       	cp	r31, r9
    3f20:	d8 f0       	brcs	.+54     	; 0x3f58 <vfprintf+0xc0>
    3f22:	8b 32       	cpi	r24, 0x2B	; 43
    3f24:	79 f0       	breq	.+30     	; 0x3f44 <vfprintf+0xac>
    3f26:	38 f4       	brcc	.+14     	; 0x3f36 <vfprintf+0x9e>
    3f28:	80 32       	cpi	r24, 0x20	; 32
    3f2a:	79 f0       	breq	.+30     	; 0x3f4a <vfprintf+0xb2>
    3f2c:	83 32       	cpi	r24, 0x23	; 35
    3f2e:	a1 f4       	brne	.+40     	; 0x3f58 <vfprintf+0xc0>
    3f30:	f9 2d       	mov	r31, r9
    3f32:	f0 61       	ori	r31, 0x10	; 16
    3f34:	2e c0       	rjmp	.+92     	; 0x3f92 <vfprintf+0xfa>
    3f36:	8d 32       	cpi	r24, 0x2D	; 45
    3f38:	61 f0       	breq	.+24     	; 0x3f52 <vfprintf+0xba>
    3f3a:	80 33       	cpi	r24, 0x30	; 48
    3f3c:	69 f4       	brne	.+26     	; 0x3f58 <vfprintf+0xc0>
    3f3e:	29 2d       	mov	r18, r9
    3f40:	21 60       	ori	r18, 0x01	; 1
    3f42:	2d c0       	rjmp	.+90     	; 0x3f9e <vfprintf+0x106>
    3f44:	39 2d       	mov	r19, r9
    3f46:	32 60       	ori	r19, 0x02	; 2
    3f48:	93 2e       	mov	r9, r19
    3f4a:	89 2d       	mov	r24, r9
    3f4c:	84 60       	ori	r24, 0x04	; 4
    3f4e:	98 2e       	mov	r9, r24
    3f50:	2a c0       	rjmp	.+84     	; 0x3fa6 <vfprintf+0x10e>
    3f52:	e9 2d       	mov	r30, r9
    3f54:	e8 60       	ori	r30, 0x08	; 8
    3f56:	15 c0       	rjmp	.+42     	; 0x3f82 <vfprintf+0xea>
    3f58:	97 fc       	sbrc	r9, 7
    3f5a:	2d c0       	rjmp	.+90     	; 0x3fb6 <vfprintf+0x11e>
    3f5c:	20 ed       	ldi	r18, 0xD0	; 208
    3f5e:	28 0f       	add	r18, r24
    3f60:	2a 30       	cpi	r18, 0x0A	; 10
    3f62:	88 f4       	brcc	.+34     	; 0x3f86 <vfprintf+0xee>
    3f64:	96 fe       	sbrs	r9, 6
    3f66:	06 c0       	rjmp	.+12     	; 0x3f74 <vfprintf+0xdc>
    3f68:	3a e0       	ldi	r19, 0x0A	; 10
    3f6a:	13 9f       	mul	r17, r19
    3f6c:	20 0d       	add	r18, r0
    3f6e:	11 24       	eor	r1, r1
    3f70:	12 2f       	mov	r17, r18
    3f72:	19 c0       	rjmp	.+50     	; 0x3fa6 <vfprintf+0x10e>
    3f74:	8a e0       	ldi	r24, 0x0A	; 10
    3f76:	58 9e       	mul	r5, r24
    3f78:	20 0d       	add	r18, r0
    3f7a:	11 24       	eor	r1, r1
    3f7c:	52 2e       	mov	r5, r18
    3f7e:	e9 2d       	mov	r30, r9
    3f80:	e0 62       	ori	r30, 0x20	; 32
    3f82:	9e 2e       	mov	r9, r30
    3f84:	10 c0       	rjmp	.+32     	; 0x3fa6 <vfprintf+0x10e>
    3f86:	8e 32       	cpi	r24, 0x2E	; 46
    3f88:	31 f4       	brne	.+12     	; 0x3f96 <vfprintf+0xfe>
    3f8a:	96 fc       	sbrc	r9, 6
    3f8c:	e5 c2       	rjmp	.+1482   	; 0x4558 <__stack+0x559>
    3f8e:	f9 2d       	mov	r31, r9
    3f90:	f0 64       	ori	r31, 0x40	; 64
    3f92:	9f 2e       	mov	r9, r31
    3f94:	08 c0       	rjmp	.+16     	; 0x3fa6 <vfprintf+0x10e>
    3f96:	8c 36       	cpi	r24, 0x6C	; 108
    3f98:	21 f4       	brne	.+8      	; 0x3fa2 <vfprintf+0x10a>
    3f9a:	29 2d       	mov	r18, r9
    3f9c:	20 68       	ori	r18, 0x80	; 128
    3f9e:	92 2e       	mov	r9, r18
    3fa0:	02 c0       	rjmp	.+4      	; 0x3fa6 <vfprintf+0x10e>
    3fa2:	88 36       	cpi	r24, 0x68	; 104
    3fa4:	41 f4       	brne	.+16     	; 0x3fb6 <vfprintf+0x11e>
    3fa6:	f1 01       	movw	r30, r2
    3fa8:	93 fd       	sbrc	r25, 3
    3faa:	85 91       	lpm	r24, Z+
    3fac:	93 ff       	sbrs	r25, 3
    3fae:	81 91       	ld	r24, Z+
    3fb0:	1f 01       	movw	r2, r30
    3fb2:	81 11       	cpse	r24, r1
    3fb4:	b3 cf       	rjmp	.-154    	; 0x3f1c <vfprintf+0x84>
    3fb6:	9b eb       	ldi	r25, 0xBB	; 187
    3fb8:	98 0f       	add	r25, r24
    3fba:	93 30       	cpi	r25, 0x03	; 3
    3fbc:	20 f4       	brcc	.+8      	; 0x3fc6 <vfprintf+0x12e>
    3fbe:	99 2d       	mov	r25, r9
    3fc0:	90 61       	ori	r25, 0x10	; 16
    3fc2:	80 5e       	subi	r24, 0xE0	; 224
    3fc4:	07 c0       	rjmp	.+14     	; 0x3fd4 <vfprintf+0x13c>
    3fc6:	9b e9       	ldi	r25, 0x9B	; 155
    3fc8:	98 0f       	add	r25, r24
    3fca:	93 30       	cpi	r25, 0x03	; 3
    3fcc:	08 f0       	brcs	.+2      	; 0x3fd0 <vfprintf+0x138>
    3fce:	66 c1       	rjmp	.+716    	; 0x429c <__stack+0x29d>
    3fd0:	99 2d       	mov	r25, r9
    3fd2:	9f 7e       	andi	r25, 0xEF	; 239
    3fd4:	96 ff       	sbrs	r25, 6
    3fd6:	16 e0       	ldi	r17, 0x06	; 6
    3fd8:	9f 73       	andi	r25, 0x3F	; 63
    3fda:	99 2e       	mov	r9, r25
    3fdc:	85 36       	cpi	r24, 0x65	; 101
    3fde:	19 f4       	brne	.+6      	; 0x3fe6 <vfprintf+0x14e>
    3fe0:	90 64       	ori	r25, 0x40	; 64
    3fe2:	99 2e       	mov	r9, r25
    3fe4:	08 c0       	rjmp	.+16     	; 0x3ff6 <vfprintf+0x15e>
    3fe6:	86 36       	cpi	r24, 0x66	; 102
    3fe8:	21 f4       	brne	.+8      	; 0x3ff2 <vfprintf+0x15a>
    3fea:	39 2f       	mov	r19, r25
    3fec:	30 68       	ori	r19, 0x80	; 128
    3fee:	93 2e       	mov	r9, r19
    3ff0:	02 c0       	rjmp	.+4      	; 0x3ff6 <vfprintf+0x15e>
    3ff2:	11 11       	cpse	r17, r1
    3ff4:	11 50       	subi	r17, 0x01	; 1
    3ff6:	97 fe       	sbrs	r9, 7
    3ff8:	07 c0       	rjmp	.+14     	; 0x4008 <__stack+0x9>
    3ffa:	1c 33       	cpi	r17, 0x3C	; 60
    3ffc:	50 f4       	brcc	.+20     	; 0x4012 <__stack+0x13>
    3ffe:	44 24       	eor	r4, r4
    4000:	43 94       	inc	r4
    4002:	41 0e       	add	r4, r17
    4004:	27 e0       	ldi	r18, 0x07	; 7
    4006:	0b c0       	rjmp	.+22     	; 0x401e <__stack+0x1f>
    4008:	18 30       	cpi	r17, 0x08	; 8
    400a:	38 f0       	brcs	.+14     	; 0x401a <__stack+0x1b>
    400c:	27 e0       	ldi	r18, 0x07	; 7
    400e:	17 e0       	ldi	r17, 0x07	; 7
    4010:	05 c0       	rjmp	.+10     	; 0x401c <__stack+0x1d>
    4012:	27 e0       	ldi	r18, 0x07	; 7
    4014:	9c e3       	ldi	r25, 0x3C	; 60
    4016:	49 2e       	mov	r4, r25
    4018:	02 c0       	rjmp	.+4      	; 0x401e <__stack+0x1f>
    401a:	21 2f       	mov	r18, r17
    401c:	41 2c       	mov	r4, r1
    401e:	56 01       	movw	r10, r12
    4020:	84 e0       	ldi	r24, 0x04	; 4
    4022:	a8 0e       	add	r10, r24
    4024:	b1 1c       	adc	r11, r1
    4026:	f6 01       	movw	r30, r12
    4028:	60 81       	ld	r22, Z
    402a:	71 81       	ldd	r23, Z+1	; 0x01
    402c:	82 81       	ldd	r24, Z+2	; 0x02
    402e:	93 81       	ldd	r25, Z+3	; 0x03
    4030:	04 2d       	mov	r16, r4
    4032:	a3 01       	movw	r20, r6
    4034:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <__ftoa_engine>
    4038:	6c 01       	movw	r12, r24
    403a:	f9 81       	ldd	r31, Y+1	; 0x01
    403c:	fc 87       	std	Y+12, r31	; 0x0c
    403e:	f0 ff       	sbrs	r31, 0
    4040:	02 c0       	rjmp	.+4      	; 0x4046 <__stack+0x47>
    4042:	f3 ff       	sbrs	r31, 3
    4044:	06 c0       	rjmp	.+12     	; 0x4052 <__stack+0x53>
    4046:	91 fc       	sbrc	r9, 1
    4048:	06 c0       	rjmp	.+12     	; 0x4056 <__stack+0x57>
    404a:	92 fe       	sbrs	r9, 2
    404c:	06 c0       	rjmp	.+12     	; 0x405a <__stack+0x5b>
    404e:	00 e2       	ldi	r16, 0x20	; 32
    4050:	05 c0       	rjmp	.+10     	; 0x405c <__stack+0x5d>
    4052:	0d e2       	ldi	r16, 0x2D	; 45
    4054:	03 c0       	rjmp	.+6      	; 0x405c <__stack+0x5d>
    4056:	0b e2       	ldi	r16, 0x2B	; 43
    4058:	01 c0       	rjmp	.+2      	; 0x405c <__stack+0x5d>
    405a:	00 e0       	ldi	r16, 0x00	; 0
    405c:	8c 85       	ldd	r24, Y+12	; 0x0c
    405e:	8c 70       	andi	r24, 0x0C	; 12
    4060:	19 f0       	breq	.+6      	; 0x4068 <__stack+0x69>
    4062:	01 11       	cpse	r16, r1
    4064:	5a c2       	rjmp	.+1204   	; 0x451a <__stack+0x51b>
    4066:	9b c2       	rjmp	.+1334   	; 0x459e <__stack+0x59f>
    4068:	97 fe       	sbrs	r9, 7
    406a:	10 c0       	rjmp	.+32     	; 0x408c <__stack+0x8d>
    406c:	4c 0c       	add	r4, r12
    406e:	fc 85       	ldd	r31, Y+12	; 0x0c
    4070:	f4 ff       	sbrs	r31, 4
    4072:	04 c0       	rjmp	.+8      	; 0x407c <__stack+0x7d>
    4074:	8a 81       	ldd	r24, Y+2	; 0x02
    4076:	81 33       	cpi	r24, 0x31	; 49
    4078:	09 f4       	brne	.+2      	; 0x407c <__stack+0x7d>
    407a:	4a 94       	dec	r4
    407c:	14 14       	cp	r1, r4
    407e:	74 f5       	brge	.+92     	; 0x40dc <__stack+0xdd>
    4080:	28 e0       	ldi	r18, 0x08	; 8
    4082:	24 15       	cp	r18, r4
    4084:	78 f5       	brcc	.+94     	; 0x40e4 <__stack+0xe5>
    4086:	88 e0       	ldi	r24, 0x08	; 8
    4088:	48 2e       	mov	r4, r24
    408a:	2c c0       	rjmp	.+88     	; 0x40e4 <__stack+0xe5>
    408c:	96 fc       	sbrc	r9, 6
    408e:	2a c0       	rjmp	.+84     	; 0x40e4 <__stack+0xe5>
    4090:	81 2f       	mov	r24, r17
    4092:	90 e0       	ldi	r25, 0x00	; 0
    4094:	8c 15       	cp	r24, r12
    4096:	9d 05       	cpc	r25, r13
    4098:	9c f0       	brlt	.+38     	; 0x40c0 <__stack+0xc1>
    409a:	3c ef       	ldi	r19, 0xFC	; 252
    409c:	c3 16       	cp	r12, r19
    409e:	3f ef       	ldi	r19, 0xFF	; 255
    40a0:	d3 06       	cpc	r13, r19
    40a2:	74 f0       	brlt	.+28     	; 0x40c0 <__stack+0xc1>
    40a4:	89 2d       	mov	r24, r9
    40a6:	80 68       	ori	r24, 0x80	; 128
    40a8:	98 2e       	mov	r9, r24
    40aa:	0a c0       	rjmp	.+20     	; 0x40c0 <__stack+0xc1>
    40ac:	e2 e0       	ldi	r30, 0x02	; 2
    40ae:	f0 e0       	ldi	r31, 0x00	; 0
    40b0:	ec 0f       	add	r30, r28
    40b2:	fd 1f       	adc	r31, r29
    40b4:	e1 0f       	add	r30, r17
    40b6:	f1 1d       	adc	r31, r1
    40b8:	80 81       	ld	r24, Z
    40ba:	80 33       	cpi	r24, 0x30	; 48
    40bc:	19 f4       	brne	.+6      	; 0x40c4 <__stack+0xc5>
    40be:	11 50       	subi	r17, 0x01	; 1
    40c0:	11 11       	cpse	r17, r1
    40c2:	f4 cf       	rjmp	.-24     	; 0x40ac <__stack+0xad>
    40c4:	97 fe       	sbrs	r9, 7
    40c6:	0e c0       	rjmp	.+28     	; 0x40e4 <__stack+0xe5>
    40c8:	44 24       	eor	r4, r4
    40ca:	43 94       	inc	r4
    40cc:	41 0e       	add	r4, r17
    40ce:	81 2f       	mov	r24, r17
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	c8 16       	cp	r12, r24
    40d4:	d9 06       	cpc	r13, r25
    40d6:	2c f4       	brge	.+10     	; 0x40e2 <__stack+0xe3>
    40d8:	1c 19       	sub	r17, r12
    40da:	04 c0       	rjmp	.+8      	; 0x40e4 <__stack+0xe5>
    40dc:	44 24       	eor	r4, r4
    40de:	43 94       	inc	r4
    40e0:	01 c0       	rjmp	.+2      	; 0x40e4 <__stack+0xe5>
    40e2:	10 e0       	ldi	r17, 0x00	; 0
    40e4:	97 fe       	sbrs	r9, 7
    40e6:	06 c0       	rjmp	.+12     	; 0x40f4 <__stack+0xf5>
    40e8:	1c 14       	cp	r1, r12
    40ea:	1d 04       	cpc	r1, r13
    40ec:	34 f4       	brge	.+12     	; 0x40fa <__stack+0xfb>
    40ee:	c6 01       	movw	r24, r12
    40f0:	01 96       	adiw	r24, 0x01	; 1
    40f2:	05 c0       	rjmp	.+10     	; 0x40fe <__stack+0xff>
    40f4:	85 e0       	ldi	r24, 0x05	; 5
    40f6:	90 e0       	ldi	r25, 0x00	; 0
    40f8:	02 c0       	rjmp	.+4      	; 0x40fe <__stack+0xff>
    40fa:	81 e0       	ldi	r24, 0x01	; 1
    40fc:	90 e0       	ldi	r25, 0x00	; 0
    40fe:	01 11       	cpse	r16, r1
    4100:	01 96       	adiw	r24, 0x01	; 1
    4102:	11 23       	and	r17, r17
    4104:	31 f0       	breq	.+12     	; 0x4112 <__stack+0x113>
    4106:	21 2f       	mov	r18, r17
    4108:	30 e0       	ldi	r19, 0x00	; 0
    410a:	2f 5f       	subi	r18, 0xFF	; 255
    410c:	3f 4f       	sbci	r19, 0xFF	; 255
    410e:	82 0f       	add	r24, r18
    4110:	93 1f       	adc	r25, r19
    4112:	25 2d       	mov	r18, r5
    4114:	30 e0       	ldi	r19, 0x00	; 0
    4116:	82 17       	cp	r24, r18
    4118:	93 07       	cpc	r25, r19
    411a:	14 f4       	brge	.+4      	; 0x4120 <__stack+0x121>
    411c:	58 1a       	sub	r5, r24
    411e:	01 c0       	rjmp	.+2      	; 0x4122 <__stack+0x123>
    4120:	51 2c       	mov	r5, r1
    4122:	89 2d       	mov	r24, r9
    4124:	89 70       	andi	r24, 0x09	; 9
    4126:	49 f4       	brne	.+18     	; 0x413a <__stack+0x13b>
    4128:	55 20       	and	r5, r5
    412a:	39 f0       	breq	.+14     	; 0x413a <__stack+0x13b>
    412c:	b7 01       	movw	r22, r14
    412e:	80 e2       	ldi	r24, 0x20	; 32
    4130:	90 e0       	ldi	r25, 0x00	; 0
    4132:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    4136:	5a 94       	dec	r5
    4138:	f7 cf       	rjmp	.-18     	; 0x4128 <__stack+0x129>
    413a:	00 23       	and	r16, r16
    413c:	29 f0       	breq	.+10     	; 0x4148 <__stack+0x149>
    413e:	b7 01       	movw	r22, r14
    4140:	80 2f       	mov	r24, r16
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    4148:	93 fc       	sbrc	r9, 3
    414a:	09 c0       	rjmp	.+18     	; 0x415e <__stack+0x15f>
    414c:	55 20       	and	r5, r5
    414e:	39 f0       	breq	.+14     	; 0x415e <__stack+0x15f>
    4150:	b7 01       	movw	r22, r14
    4152:	80 e3       	ldi	r24, 0x30	; 48
    4154:	90 e0       	ldi	r25, 0x00	; 0
    4156:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    415a:	5a 94       	dec	r5
    415c:	f7 cf       	rjmp	.-18     	; 0x414c <__stack+0x14d>
    415e:	97 fe       	sbrs	r9, 7
    4160:	4c c0       	rjmp	.+152    	; 0x41fa <__stack+0x1fb>
    4162:	46 01       	movw	r8, r12
    4164:	d7 fe       	sbrs	r13, 7
    4166:	02 c0       	rjmp	.+4      	; 0x416c <__stack+0x16d>
    4168:	81 2c       	mov	r8, r1
    416a:	91 2c       	mov	r9, r1
    416c:	c6 01       	movw	r24, r12
    416e:	88 19       	sub	r24, r8
    4170:	99 09       	sbc	r25, r9
    4172:	f3 01       	movw	r30, r6
    4174:	e8 0f       	add	r30, r24
    4176:	f9 1f       	adc	r31, r25
    4178:	ed 87       	std	Y+13, r30	; 0x0d
    417a:	fe 87       	std	Y+14, r31	; 0x0e
    417c:	96 01       	movw	r18, r12
    417e:	24 19       	sub	r18, r4
    4180:	31 09       	sbc	r19, r1
    4182:	2f 87       	std	Y+15, r18	; 0x0f
    4184:	38 8b       	std	Y+16, r19	; 0x10
    4186:	01 2f       	mov	r16, r17
    4188:	10 e0       	ldi	r17, 0x00	; 0
    418a:	11 95       	neg	r17
    418c:	01 95       	neg	r16
    418e:	11 09       	sbc	r17, r1
    4190:	3f ef       	ldi	r19, 0xFF	; 255
    4192:	83 16       	cp	r8, r19
    4194:	93 06       	cpc	r9, r19
    4196:	29 f4       	brne	.+10     	; 0x41a2 <__stack+0x1a3>
    4198:	b7 01       	movw	r22, r14
    419a:	8e e2       	ldi	r24, 0x2E	; 46
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    41a2:	c8 14       	cp	r12, r8
    41a4:	d9 04       	cpc	r13, r9
    41a6:	4c f0       	brlt	.+18     	; 0x41ba <__stack+0x1bb>
    41a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    41aa:	98 89       	ldd	r25, Y+16	; 0x10
    41ac:	88 15       	cp	r24, r8
    41ae:	99 05       	cpc	r25, r9
    41b0:	24 f4       	brge	.+8      	; 0x41ba <__stack+0x1bb>
    41b2:	ed 85       	ldd	r30, Y+13	; 0x0d
    41b4:	fe 85       	ldd	r31, Y+14	; 0x0e
    41b6:	81 81       	ldd	r24, Z+1	; 0x01
    41b8:	01 c0       	rjmp	.+2      	; 0x41bc <__stack+0x1bd>
    41ba:	80 e3       	ldi	r24, 0x30	; 48
    41bc:	f1 e0       	ldi	r31, 0x01	; 1
    41be:	8f 1a       	sub	r8, r31
    41c0:	91 08       	sbc	r9, r1
    41c2:	2d 85       	ldd	r18, Y+13	; 0x0d
    41c4:	3e 85       	ldd	r19, Y+14	; 0x0e
    41c6:	2f 5f       	subi	r18, 0xFF	; 255
    41c8:	3f 4f       	sbci	r19, 0xFF	; 255
    41ca:	2d 87       	std	Y+13, r18	; 0x0d
    41cc:	3e 87       	std	Y+14, r19	; 0x0e
    41ce:	80 16       	cp	r8, r16
    41d0:	91 06       	cpc	r9, r17
    41d2:	2c f0       	brlt	.+10     	; 0x41de <__stack+0x1df>
    41d4:	b7 01       	movw	r22, r14
    41d6:	90 e0       	ldi	r25, 0x00	; 0
    41d8:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    41dc:	d9 cf       	rjmp	.-78     	; 0x4190 <__stack+0x191>
    41de:	c8 14       	cp	r12, r8
    41e0:	d9 04       	cpc	r13, r9
    41e2:	41 f4       	brne	.+16     	; 0x41f4 <__stack+0x1f5>
    41e4:	9a 81       	ldd	r25, Y+2	; 0x02
    41e6:	96 33       	cpi	r25, 0x36	; 54
    41e8:	20 f4       	brcc	.+8      	; 0x41f2 <__stack+0x1f3>
    41ea:	95 33       	cpi	r25, 0x35	; 53
    41ec:	19 f4       	brne	.+6      	; 0x41f4 <__stack+0x1f5>
    41ee:	3c 85       	ldd	r19, Y+12	; 0x0c
    41f0:	34 ff       	sbrs	r19, 4
    41f2:	81 e3       	ldi	r24, 0x31	; 49
    41f4:	b7 01       	movw	r22, r14
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	4e c0       	rjmp	.+156    	; 0x4296 <__stack+0x297>
    41fa:	8a 81       	ldd	r24, Y+2	; 0x02
    41fc:	81 33       	cpi	r24, 0x31	; 49
    41fe:	19 f0       	breq	.+6      	; 0x4206 <__stack+0x207>
    4200:	9c 85       	ldd	r25, Y+12	; 0x0c
    4202:	9f 7e       	andi	r25, 0xEF	; 239
    4204:	9c 87       	std	Y+12, r25	; 0x0c
    4206:	b7 01       	movw	r22, r14
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    420e:	11 11       	cpse	r17, r1
    4210:	05 c0       	rjmp	.+10     	; 0x421c <__stack+0x21d>
    4212:	94 fc       	sbrc	r9, 4
    4214:	18 c0       	rjmp	.+48     	; 0x4246 <__stack+0x247>
    4216:	85 e6       	ldi	r24, 0x65	; 101
    4218:	90 e0       	ldi	r25, 0x00	; 0
    421a:	17 c0       	rjmp	.+46     	; 0x424a <__stack+0x24b>
    421c:	b7 01       	movw	r22, r14
    421e:	8e e2       	ldi	r24, 0x2E	; 46
    4220:	90 e0       	ldi	r25, 0x00	; 0
    4222:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    4226:	1e 5f       	subi	r17, 0xFE	; 254
    4228:	82 e0       	ldi	r24, 0x02	; 2
    422a:	01 e0       	ldi	r16, 0x01	; 1
    422c:	08 0f       	add	r16, r24
    422e:	f3 01       	movw	r30, r6
    4230:	e8 0f       	add	r30, r24
    4232:	f1 1d       	adc	r31, r1
    4234:	80 81       	ld	r24, Z
    4236:	b7 01       	movw	r22, r14
    4238:	90 e0       	ldi	r25, 0x00	; 0
    423a:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    423e:	80 2f       	mov	r24, r16
    4240:	01 13       	cpse	r16, r17
    4242:	f3 cf       	rjmp	.-26     	; 0x422a <__stack+0x22b>
    4244:	e6 cf       	rjmp	.-52     	; 0x4212 <__stack+0x213>
    4246:	85 e4       	ldi	r24, 0x45	; 69
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	b7 01       	movw	r22, r14
    424c:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    4250:	d7 fc       	sbrc	r13, 7
    4252:	06 c0       	rjmp	.+12     	; 0x4260 <__stack+0x261>
    4254:	c1 14       	cp	r12, r1
    4256:	d1 04       	cpc	r13, r1
    4258:	41 f4       	brne	.+16     	; 0x426a <__stack+0x26b>
    425a:	ec 85       	ldd	r30, Y+12	; 0x0c
    425c:	e4 ff       	sbrs	r30, 4
    425e:	05 c0       	rjmp	.+10     	; 0x426a <__stack+0x26b>
    4260:	d1 94       	neg	r13
    4262:	c1 94       	neg	r12
    4264:	d1 08       	sbc	r13, r1
    4266:	8d e2       	ldi	r24, 0x2D	; 45
    4268:	01 c0       	rjmp	.+2      	; 0x426c <__stack+0x26d>
    426a:	8b e2       	ldi	r24, 0x2B	; 43
    426c:	b7 01       	movw	r22, r14
    426e:	90 e0       	ldi	r25, 0x00	; 0
    4270:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    4274:	80 e3       	ldi	r24, 0x30	; 48
    4276:	2a e0       	ldi	r18, 0x0A	; 10
    4278:	c2 16       	cp	r12, r18
    427a:	d1 04       	cpc	r13, r1
    427c:	2c f0       	brlt	.+10     	; 0x4288 <__stack+0x289>
    427e:	8f 5f       	subi	r24, 0xFF	; 255
    4280:	fa e0       	ldi	r31, 0x0A	; 10
    4282:	cf 1a       	sub	r12, r31
    4284:	d1 08       	sbc	r13, r1
    4286:	f7 cf       	rjmp	.-18     	; 0x4276 <__stack+0x277>
    4288:	b7 01       	movw	r22, r14
    428a:	90 e0       	ldi	r25, 0x00	; 0
    428c:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    4290:	b7 01       	movw	r22, r14
    4292:	c6 01       	movw	r24, r12
    4294:	c0 96       	adiw	r24, 0x30	; 48
    4296:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    429a:	54 c1       	rjmp	.+680    	; 0x4544 <__stack+0x545>
    429c:	83 36       	cpi	r24, 0x63	; 99
    429e:	31 f0       	breq	.+12     	; 0x42ac <__stack+0x2ad>
    42a0:	83 37       	cpi	r24, 0x73	; 115
    42a2:	79 f0       	breq	.+30     	; 0x42c2 <__stack+0x2c3>
    42a4:	83 35       	cpi	r24, 0x53	; 83
    42a6:	09 f0       	breq	.+2      	; 0x42aa <__stack+0x2ab>
    42a8:	56 c0       	rjmp	.+172    	; 0x4356 <__stack+0x357>
    42aa:	20 c0       	rjmp	.+64     	; 0x42ec <__stack+0x2ed>
    42ac:	56 01       	movw	r10, r12
    42ae:	32 e0       	ldi	r19, 0x02	; 2
    42b0:	a3 0e       	add	r10, r19
    42b2:	b1 1c       	adc	r11, r1
    42b4:	f6 01       	movw	r30, r12
    42b6:	80 81       	ld	r24, Z
    42b8:	89 83       	std	Y+1, r24	; 0x01
    42ba:	01 e0       	ldi	r16, 0x01	; 1
    42bc:	10 e0       	ldi	r17, 0x00	; 0
    42be:	63 01       	movw	r12, r6
    42c0:	12 c0       	rjmp	.+36     	; 0x42e6 <__stack+0x2e7>
    42c2:	56 01       	movw	r10, r12
    42c4:	f2 e0       	ldi	r31, 0x02	; 2
    42c6:	af 0e       	add	r10, r31
    42c8:	b1 1c       	adc	r11, r1
    42ca:	f6 01       	movw	r30, r12
    42cc:	c0 80       	ld	r12, Z
    42ce:	d1 80       	ldd	r13, Z+1	; 0x01
    42d0:	96 fe       	sbrs	r9, 6
    42d2:	03 c0       	rjmp	.+6      	; 0x42da <__stack+0x2db>
    42d4:	61 2f       	mov	r22, r17
    42d6:	70 e0       	ldi	r23, 0x00	; 0
    42d8:	02 c0       	rjmp	.+4      	; 0x42de <__stack+0x2df>
    42da:	6f ef       	ldi	r22, 0xFF	; 255
    42dc:	7f ef       	ldi	r23, 0xFF	; 255
    42de:	c6 01       	movw	r24, r12
    42e0:	0e 94 e7 23 	call	0x47ce	; 0x47ce <strnlen>
    42e4:	8c 01       	movw	r16, r24
    42e6:	f9 2d       	mov	r31, r9
    42e8:	ff 77       	andi	r31, 0x7F	; 127
    42ea:	14 c0       	rjmp	.+40     	; 0x4314 <__stack+0x315>
    42ec:	56 01       	movw	r10, r12
    42ee:	22 e0       	ldi	r18, 0x02	; 2
    42f0:	a2 0e       	add	r10, r18
    42f2:	b1 1c       	adc	r11, r1
    42f4:	f6 01       	movw	r30, r12
    42f6:	c0 80       	ld	r12, Z
    42f8:	d1 80       	ldd	r13, Z+1	; 0x01
    42fa:	96 fe       	sbrs	r9, 6
    42fc:	03 c0       	rjmp	.+6      	; 0x4304 <__stack+0x305>
    42fe:	61 2f       	mov	r22, r17
    4300:	70 e0       	ldi	r23, 0x00	; 0
    4302:	02 c0       	rjmp	.+4      	; 0x4308 <__stack+0x309>
    4304:	6f ef       	ldi	r22, 0xFF	; 255
    4306:	7f ef       	ldi	r23, 0xFF	; 255
    4308:	c6 01       	movw	r24, r12
    430a:	0e 94 cc 23 	call	0x4798	; 0x4798 <strnlen_P>
    430e:	8c 01       	movw	r16, r24
    4310:	f9 2d       	mov	r31, r9
    4312:	f0 68       	ori	r31, 0x80	; 128
    4314:	9f 2e       	mov	r9, r31
    4316:	f3 fd       	sbrc	r31, 3
    4318:	1a c0       	rjmp	.+52     	; 0x434e <__stack+0x34f>
    431a:	85 2d       	mov	r24, r5
    431c:	90 e0       	ldi	r25, 0x00	; 0
    431e:	08 17       	cp	r16, r24
    4320:	19 07       	cpc	r17, r25
    4322:	a8 f4       	brcc	.+42     	; 0x434e <__stack+0x34f>
    4324:	b7 01       	movw	r22, r14
    4326:	80 e2       	ldi	r24, 0x20	; 32
    4328:	90 e0       	ldi	r25, 0x00	; 0
    432a:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    432e:	5a 94       	dec	r5
    4330:	f4 cf       	rjmp	.-24     	; 0x431a <__stack+0x31b>
    4332:	f6 01       	movw	r30, r12
    4334:	97 fc       	sbrc	r9, 7
    4336:	85 91       	lpm	r24, Z+
    4338:	97 fe       	sbrs	r9, 7
    433a:	81 91       	ld	r24, Z+
    433c:	6f 01       	movw	r12, r30
    433e:	b7 01       	movw	r22, r14
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    4346:	51 10       	cpse	r5, r1
    4348:	5a 94       	dec	r5
    434a:	01 50       	subi	r16, 0x01	; 1
    434c:	11 09       	sbc	r17, r1
    434e:	01 15       	cp	r16, r1
    4350:	11 05       	cpc	r17, r1
    4352:	79 f7       	brne	.-34     	; 0x4332 <__stack+0x333>
    4354:	f7 c0       	rjmp	.+494    	; 0x4544 <__stack+0x545>
    4356:	84 36       	cpi	r24, 0x64	; 100
    4358:	11 f0       	breq	.+4      	; 0x435e <__stack+0x35f>
    435a:	89 36       	cpi	r24, 0x69	; 105
    435c:	61 f5       	brne	.+88     	; 0x43b6 <__stack+0x3b7>
    435e:	56 01       	movw	r10, r12
    4360:	97 fe       	sbrs	r9, 7
    4362:	09 c0       	rjmp	.+18     	; 0x4376 <__stack+0x377>
    4364:	24 e0       	ldi	r18, 0x04	; 4
    4366:	a2 0e       	add	r10, r18
    4368:	b1 1c       	adc	r11, r1
    436a:	f6 01       	movw	r30, r12
    436c:	60 81       	ld	r22, Z
    436e:	71 81       	ldd	r23, Z+1	; 0x01
    4370:	82 81       	ldd	r24, Z+2	; 0x02
    4372:	93 81       	ldd	r25, Z+3	; 0x03
    4374:	0a c0       	rjmp	.+20     	; 0x438a <__stack+0x38b>
    4376:	f2 e0       	ldi	r31, 0x02	; 2
    4378:	af 0e       	add	r10, r31
    437a:	b1 1c       	adc	r11, r1
    437c:	f6 01       	movw	r30, r12
    437e:	60 81       	ld	r22, Z
    4380:	71 81       	ldd	r23, Z+1	; 0x01
    4382:	07 2e       	mov	r0, r23
    4384:	00 0c       	add	r0, r0
    4386:	88 0b       	sbc	r24, r24
    4388:	99 0b       	sbc	r25, r25
    438a:	f9 2d       	mov	r31, r9
    438c:	ff 76       	andi	r31, 0x6F	; 111
    438e:	9f 2e       	mov	r9, r31
    4390:	97 ff       	sbrs	r25, 7
    4392:	09 c0       	rjmp	.+18     	; 0x43a6 <__stack+0x3a7>
    4394:	90 95       	com	r25
    4396:	80 95       	com	r24
    4398:	70 95       	com	r23
    439a:	61 95       	neg	r22
    439c:	7f 4f       	sbci	r23, 0xFF	; 255
    439e:	8f 4f       	sbci	r24, 0xFF	; 255
    43a0:	9f 4f       	sbci	r25, 0xFF	; 255
    43a2:	f0 68       	ori	r31, 0x80	; 128
    43a4:	9f 2e       	mov	r9, r31
    43a6:	2a e0       	ldi	r18, 0x0A	; 10
    43a8:	30 e0       	ldi	r19, 0x00	; 0
    43aa:	a3 01       	movw	r20, r6
    43ac:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <__ultoa_invert>
    43b0:	c8 2e       	mov	r12, r24
    43b2:	c6 18       	sub	r12, r6
    43b4:	3f c0       	rjmp	.+126    	; 0x4434 <__stack+0x435>
    43b6:	09 2d       	mov	r16, r9
    43b8:	85 37       	cpi	r24, 0x75	; 117
    43ba:	21 f4       	brne	.+8      	; 0x43c4 <__stack+0x3c5>
    43bc:	0f 7e       	andi	r16, 0xEF	; 239
    43be:	2a e0       	ldi	r18, 0x0A	; 10
    43c0:	30 e0       	ldi	r19, 0x00	; 0
    43c2:	1d c0       	rjmp	.+58     	; 0x43fe <__stack+0x3ff>
    43c4:	09 7f       	andi	r16, 0xF9	; 249
    43c6:	8f 36       	cpi	r24, 0x6F	; 111
    43c8:	91 f0       	breq	.+36     	; 0x43ee <__stack+0x3ef>
    43ca:	18 f4       	brcc	.+6      	; 0x43d2 <__stack+0x3d3>
    43cc:	88 35       	cpi	r24, 0x58	; 88
    43ce:	59 f0       	breq	.+22     	; 0x43e6 <__stack+0x3e7>
    43d0:	c3 c0       	rjmp	.+390    	; 0x4558 <__stack+0x559>
    43d2:	80 37       	cpi	r24, 0x70	; 112
    43d4:	19 f0       	breq	.+6      	; 0x43dc <__stack+0x3dd>
    43d6:	88 37       	cpi	r24, 0x78	; 120
    43d8:	11 f0       	breq	.+4      	; 0x43de <__stack+0x3df>
    43da:	be c0       	rjmp	.+380    	; 0x4558 <__stack+0x559>
    43dc:	00 61       	ori	r16, 0x10	; 16
    43de:	04 ff       	sbrs	r16, 4
    43e0:	09 c0       	rjmp	.+18     	; 0x43f4 <__stack+0x3f5>
    43e2:	04 60       	ori	r16, 0x04	; 4
    43e4:	07 c0       	rjmp	.+14     	; 0x43f4 <__stack+0x3f5>
    43e6:	94 fe       	sbrs	r9, 4
    43e8:	08 c0       	rjmp	.+16     	; 0x43fa <__stack+0x3fb>
    43ea:	06 60       	ori	r16, 0x06	; 6
    43ec:	06 c0       	rjmp	.+12     	; 0x43fa <__stack+0x3fb>
    43ee:	28 e0       	ldi	r18, 0x08	; 8
    43f0:	30 e0       	ldi	r19, 0x00	; 0
    43f2:	05 c0       	rjmp	.+10     	; 0x43fe <__stack+0x3ff>
    43f4:	20 e1       	ldi	r18, 0x10	; 16
    43f6:	30 e0       	ldi	r19, 0x00	; 0
    43f8:	02 c0       	rjmp	.+4      	; 0x43fe <__stack+0x3ff>
    43fa:	20 e1       	ldi	r18, 0x10	; 16
    43fc:	32 e0       	ldi	r19, 0x02	; 2
    43fe:	56 01       	movw	r10, r12
    4400:	07 ff       	sbrs	r16, 7
    4402:	09 c0       	rjmp	.+18     	; 0x4416 <__stack+0x417>
    4404:	84 e0       	ldi	r24, 0x04	; 4
    4406:	a8 0e       	add	r10, r24
    4408:	b1 1c       	adc	r11, r1
    440a:	f6 01       	movw	r30, r12
    440c:	60 81       	ld	r22, Z
    440e:	71 81       	ldd	r23, Z+1	; 0x01
    4410:	82 81       	ldd	r24, Z+2	; 0x02
    4412:	93 81       	ldd	r25, Z+3	; 0x03
    4414:	08 c0       	rjmp	.+16     	; 0x4426 <__stack+0x427>
    4416:	f2 e0       	ldi	r31, 0x02	; 2
    4418:	af 0e       	add	r10, r31
    441a:	b1 1c       	adc	r11, r1
    441c:	f6 01       	movw	r30, r12
    441e:	60 81       	ld	r22, Z
    4420:	71 81       	ldd	r23, Z+1	; 0x01
    4422:	80 e0       	ldi	r24, 0x00	; 0
    4424:	90 e0       	ldi	r25, 0x00	; 0
    4426:	a3 01       	movw	r20, r6
    4428:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <__ultoa_invert>
    442c:	c8 2e       	mov	r12, r24
    442e:	c6 18       	sub	r12, r6
    4430:	0f 77       	andi	r16, 0x7F	; 127
    4432:	90 2e       	mov	r9, r16
    4434:	96 fe       	sbrs	r9, 6
    4436:	0b c0       	rjmp	.+22     	; 0x444e <__stack+0x44f>
    4438:	09 2d       	mov	r16, r9
    443a:	0e 7f       	andi	r16, 0xFE	; 254
    443c:	c1 16       	cp	r12, r17
    443e:	50 f4       	brcc	.+20     	; 0x4454 <__stack+0x455>
    4440:	94 fe       	sbrs	r9, 4
    4442:	0a c0       	rjmp	.+20     	; 0x4458 <__stack+0x459>
    4444:	92 fc       	sbrc	r9, 2
    4446:	08 c0       	rjmp	.+16     	; 0x4458 <__stack+0x459>
    4448:	09 2d       	mov	r16, r9
    444a:	0e 7e       	andi	r16, 0xEE	; 238
    444c:	05 c0       	rjmp	.+10     	; 0x4458 <__stack+0x459>
    444e:	dc 2c       	mov	r13, r12
    4450:	09 2d       	mov	r16, r9
    4452:	03 c0       	rjmp	.+6      	; 0x445a <__stack+0x45b>
    4454:	dc 2c       	mov	r13, r12
    4456:	01 c0       	rjmp	.+2      	; 0x445a <__stack+0x45b>
    4458:	d1 2e       	mov	r13, r17
    445a:	04 ff       	sbrs	r16, 4
    445c:	0d c0       	rjmp	.+26     	; 0x4478 <__stack+0x479>
    445e:	fe 01       	movw	r30, r28
    4460:	ec 0d       	add	r30, r12
    4462:	f1 1d       	adc	r31, r1
    4464:	80 81       	ld	r24, Z
    4466:	80 33       	cpi	r24, 0x30	; 48
    4468:	11 f4       	brne	.+4      	; 0x446e <__stack+0x46f>
    446a:	09 7e       	andi	r16, 0xE9	; 233
    446c:	09 c0       	rjmp	.+18     	; 0x4480 <__stack+0x481>
    446e:	02 ff       	sbrs	r16, 2
    4470:	06 c0       	rjmp	.+12     	; 0x447e <__stack+0x47f>
    4472:	d3 94       	inc	r13
    4474:	d3 94       	inc	r13
    4476:	04 c0       	rjmp	.+8      	; 0x4480 <__stack+0x481>
    4478:	80 2f       	mov	r24, r16
    447a:	86 78       	andi	r24, 0x86	; 134
    447c:	09 f0       	breq	.+2      	; 0x4480 <__stack+0x481>
    447e:	d3 94       	inc	r13
    4480:	03 fd       	sbrc	r16, 3
    4482:	11 c0       	rjmp	.+34     	; 0x44a6 <__stack+0x4a7>
    4484:	00 ff       	sbrs	r16, 0
    4486:	06 c0       	rjmp	.+12     	; 0x4494 <__stack+0x495>
    4488:	1c 2d       	mov	r17, r12
    448a:	d5 14       	cp	r13, r5
    448c:	80 f4       	brcc	.+32     	; 0x44ae <__stack+0x4af>
    448e:	15 0d       	add	r17, r5
    4490:	1d 19       	sub	r17, r13
    4492:	0d c0       	rjmp	.+26     	; 0x44ae <__stack+0x4af>
    4494:	d5 14       	cp	r13, r5
    4496:	58 f4       	brcc	.+22     	; 0x44ae <__stack+0x4af>
    4498:	b7 01       	movw	r22, r14
    449a:	80 e2       	ldi	r24, 0x20	; 32
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    44a2:	d3 94       	inc	r13
    44a4:	f7 cf       	rjmp	.-18     	; 0x4494 <__stack+0x495>
    44a6:	d5 14       	cp	r13, r5
    44a8:	10 f4       	brcc	.+4      	; 0x44ae <__stack+0x4af>
    44aa:	5d 18       	sub	r5, r13
    44ac:	01 c0       	rjmp	.+2      	; 0x44b0 <__stack+0x4b1>
    44ae:	51 2c       	mov	r5, r1
    44b0:	04 ff       	sbrs	r16, 4
    44b2:	10 c0       	rjmp	.+32     	; 0x44d4 <__stack+0x4d5>
    44b4:	b7 01       	movw	r22, r14
    44b6:	80 e3       	ldi	r24, 0x30	; 48
    44b8:	90 e0       	ldi	r25, 0x00	; 0
    44ba:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    44be:	02 ff       	sbrs	r16, 2
    44c0:	17 c0       	rjmp	.+46     	; 0x44f0 <__stack+0x4f1>
    44c2:	01 fd       	sbrc	r16, 1
    44c4:	03 c0       	rjmp	.+6      	; 0x44cc <__stack+0x4cd>
    44c6:	88 e7       	ldi	r24, 0x78	; 120
    44c8:	90 e0       	ldi	r25, 0x00	; 0
    44ca:	02 c0       	rjmp	.+4      	; 0x44d0 <__stack+0x4d1>
    44cc:	88 e5       	ldi	r24, 0x58	; 88
    44ce:	90 e0       	ldi	r25, 0x00	; 0
    44d0:	b7 01       	movw	r22, r14
    44d2:	0c c0       	rjmp	.+24     	; 0x44ec <__stack+0x4ed>
    44d4:	80 2f       	mov	r24, r16
    44d6:	86 78       	andi	r24, 0x86	; 134
    44d8:	59 f0       	breq	.+22     	; 0x44f0 <__stack+0x4f1>
    44da:	01 ff       	sbrs	r16, 1
    44dc:	02 c0       	rjmp	.+4      	; 0x44e2 <__stack+0x4e3>
    44de:	8b e2       	ldi	r24, 0x2B	; 43
    44e0:	01 c0       	rjmp	.+2      	; 0x44e4 <__stack+0x4e5>
    44e2:	80 e2       	ldi	r24, 0x20	; 32
    44e4:	07 fd       	sbrc	r16, 7
    44e6:	8d e2       	ldi	r24, 0x2D	; 45
    44e8:	b7 01       	movw	r22, r14
    44ea:	90 e0       	ldi	r25, 0x00	; 0
    44ec:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    44f0:	c1 16       	cp	r12, r17
    44f2:	38 f4       	brcc	.+14     	; 0x4502 <__stack+0x503>
    44f4:	b7 01       	movw	r22, r14
    44f6:	80 e3       	ldi	r24, 0x30	; 48
    44f8:	90 e0       	ldi	r25, 0x00	; 0
    44fa:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    44fe:	11 50       	subi	r17, 0x01	; 1
    4500:	f7 cf       	rjmp	.-18     	; 0x44f0 <__stack+0x4f1>
    4502:	ca 94       	dec	r12
    4504:	f3 01       	movw	r30, r6
    4506:	ec 0d       	add	r30, r12
    4508:	f1 1d       	adc	r31, r1
    450a:	80 81       	ld	r24, Z
    450c:	b7 01       	movw	r22, r14
    450e:	90 e0       	ldi	r25, 0x00	; 0
    4510:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    4514:	c1 10       	cpse	r12, r1
    4516:	f5 cf       	rjmp	.-22     	; 0x4502 <__stack+0x503>
    4518:	15 c0       	rjmp	.+42     	; 0x4544 <__stack+0x545>
    451a:	f4 e0       	ldi	r31, 0x04	; 4
    451c:	f5 15       	cp	r31, r5
    451e:	60 f5       	brcc	.+88     	; 0x4578 <__stack+0x579>
    4520:	84 e0       	ldi	r24, 0x04	; 4
    4522:	58 1a       	sub	r5, r24
    4524:	93 fe       	sbrs	r9, 3
    4526:	1f c0       	rjmp	.+62     	; 0x4566 <__stack+0x567>
    4528:	01 11       	cpse	r16, r1
    452a:	27 c0       	rjmp	.+78     	; 0x457a <__stack+0x57b>
    452c:	2c 85       	ldd	r18, Y+12	; 0x0c
    452e:	23 ff       	sbrs	r18, 3
    4530:	2a c0       	rjmp	.+84     	; 0x4586 <__stack+0x587>
    4532:	0c e3       	ldi	r16, 0x3C	; 60
    4534:	12 e0       	ldi	r17, 0x02	; 2
    4536:	39 2d       	mov	r19, r9
    4538:	30 71       	andi	r19, 0x10	; 16
    453a:	93 2e       	mov	r9, r19
    453c:	f8 01       	movw	r30, r16
    453e:	84 91       	lpm	r24, Z
    4540:	81 11       	cpse	r24, r1
    4542:	24 c0       	rjmp	.+72     	; 0x458c <__stack+0x58d>
    4544:	55 20       	and	r5, r5
    4546:	09 f4       	brne	.+2      	; 0x454a <__stack+0x54b>
    4548:	e4 cc       	rjmp	.-1592   	; 0x3f12 <vfprintf+0x7a>
    454a:	b7 01       	movw	r22, r14
    454c:	80 e2       	ldi	r24, 0x20	; 32
    454e:	90 e0       	ldi	r25, 0x00	; 0
    4550:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    4554:	5a 94       	dec	r5
    4556:	f6 cf       	rjmp	.-20     	; 0x4544 <__stack+0x545>
    4558:	f7 01       	movw	r30, r14
    455a:	86 81       	ldd	r24, Z+6	; 0x06
    455c:	97 81       	ldd	r25, Z+7	; 0x07
    455e:	26 c0       	rjmp	.+76     	; 0x45ac <__stack+0x5ad>
    4560:	8f ef       	ldi	r24, 0xFF	; 255
    4562:	9f ef       	ldi	r25, 0xFF	; 255
    4564:	23 c0       	rjmp	.+70     	; 0x45ac <__stack+0x5ad>
    4566:	b7 01       	movw	r22, r14
    4568:	80 e2       	ldi	r24, 0x20	; 32
    456a:	90 e0       	ldi	r25, 0x00	; 0
    456c:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    4570:	5a 94       	dec	r5
    4572:	51 10       	cpse	r5, r1
    4574:	f8 cf       	rjmp	.-16     	; 0x4566 <__stack+0x567>
    4576:	d8 cf       	rjmp	.-80     	; 0x4528 <__stack+0x529>
    4578:	51 2c       	mov	r5, r1
    457a:	b7 01       	movw	r22, r14
    457c:	80 2f       	mov	r24, r16
    457e:	90 e0       	ldi	r25, 0x00	; 0
    4580:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    4584:	d3 cf       	rjmp	.-90     	; 0x452c <__stack+0x52d>
    4586:	00 e4       	ldi	r16, 0x40	; 64
    4588:	12 e0       	ldi	r17, 0x02	; 2
    458a:	d5 cf       	rjmp	.-86     	; 0x4536 <__stack+0x537>
    458c:	91 10       	cpse	r9, r1
    458e:	80 52       	subi	r24, 0x20	; 32
    4590:	b7 01       	movw	r22, r14
    4592:	90 e0       	ldi	r25, 0x00	; 0
    4594:	0e 94 17 24 	call	0x482e	; 0x482e <fputc>
    4598:	0f 5f       	subi	r16, 0xFF	; 255
    459a:	1f 4f       	sbci	r17, 0xFF	; 255
    459c:	cf cf       	rjmp	.-98     	; 0x453c <__stack+0x53d>
    459e:	23 e0       	ldi	r18, 0x03	; 3
    45a0:	25 15       	cp	r18, r5
    45a2:	10 f4       	brcc	.+4      	; 0x45a8 <__stack+0x5a9>
    45a4:	83 e0       	ldi	r24, 0x03	; 3
    45a6:	bd cf       	rjmp	.-134    	; 0x4522 <__stack+0x523>
    45a8:	51 2c       	mov	r5, r1
    45aa:	c0 cf       	rjmp	.-128    	; 0x452c <__stack+0x52d>
    45ac:	60 96       	adiw	r28, 0x10	; 16
    45ae:	cd bf       	out	0x3d, r28	; 61
    45b0:	de bf       	out	0x3e, r29	; 62
    45b2:	df 91       	pop	r29
    45b4:	cf 91       	pop	r28
    45b6:	1f 91       	pop	r17
    45b8:	0f 91       	pop	r16
    45ba:	ff 90       	pop	r15
    45bc:	ef 90       	pop	r14
    45be:	df 90       	pop	r13
    45c0:	cf 90       	pop	r12
    45c2:	bf 90       	pop	r11
    45c4:	af 90       	pop	r10
    45c6:	9f 90       	pop	r9
    45c8:	8f 90       	pop	r8
    45ca:	7f 90       	pop	r7
    45cc:	6f 90       	pop	r6
    45ce:	5f 90       	pop	r5
    45d0:	4f 90       	pop	r4
    45d2:	3f 90       	pop	r3
    45d4:	2f 90       	pop	r2
    45d6:	08 95       	ret

000045d8 <__tablejump2__>:
    45d8:	ee 0f       	add	r30, r30
    45da:	ff 1f       	adc	r31, r31
    45dc:	88 1f       	adc	r24, r24
    45de:	8b bf       	out	0x3b, r24	; 59
    45e0:	07 90       	elpm	r0, Z+
    45e2:	f6 91       	elpm	r31, Z
    45e4:	e0 2d       	mov	r30, r0
    45e6:	19 94       	eijmp

000045e8 <__ftoa_engine>:
    45e8:	28 30       	cpi	r18, 0x08	; 8
    45ea:	08 f0       	brcs	.+2      	; 0x45ee <__ftoa_engine+0x6>
    45ec:	27 e0       	ldi	r18, 0x07	; 7
    45ee:	33 27       	eor	r19, r19
    45f0:	da 01       	movw	r26, r20
    45f2:	99 0f       	add	r25, r25
    45f4:	31 1d       	adc	r19, r1
    45f6:	87 fd       	sbrc	r24, 7
    45f8:	91 60       	ori	r25, 0x01	; 1
    45fa:	00 96       	adiw	r24, 0x00	; 0
    45fc:	61 05       	cpc	r22, r1
    45fe:	71 05       	cpc	r23, r1
    4600:	39 f4       	brne	.+14     	; 0x4610 <__ftoa_engine+0x28>
    4602:	32 60       	ori	r19, 0x02	; 2
    4604:	2e 5f       	subi	r18, 0xFE	; 254
    4606:	3d 93       	st	X+, r19
    4608:	30 e3       	ldi	r19, 0x30	; 48
    460a:	2a 95       	dec	r18
    460c:	e1 f7       	brne	.-8      	; 0x4606 <__ftoa_engine+0x1e>
    460e:	08 95       	ret
    4610:	9f 3f       	cpi	r25, 0xFF	; 255
    4612:	30 f0       	brcs	.+12     	; 0x4620 <__ftoa_engine+0x38>
    4614:	80 38       	cpi	r24, 0x80	; 128
    4616:	71 05       	cpc	r23, r1
    4618:	61 05       	cpc	r22, r1
    461a:	09 f0       	breq	.+2      	; 0x461e <__ftoa_engine+0x36>
    461c:	3c 5f       	subi	r19, 0xFC	; 252
    461e:	3c 5f       	subi	r19, 0xFC	; 252
    4620:	3d 93       	st	X+, r19
    4622:	91 30       	cpi	r25, 0x01	; 1
    4624:	08 f0       	brcs	.+2      	; 0x4628 <__ftoa_engine+0x40>
    4626:	80 68       	ori	r24, 0x80	; 128
    4628:	91 1d       	adc	r25, r1
    462a:	df 93       	push	r29
    462c:	cf 93       	push	r28
    462e:	1f 93       	push	r17
    4630:	0f 93       	push	r16
    4632:	ff 92       	push	r15
    4634:	ef 92       	push	r14
    4636:	19 2f       	mov	r17, r25
    4638:	98 7f       	andi	r25, 0xF8	; 248
    463a:	96 95       	lsr	r25
    463c:	e9 2f       	mov	r30, r25
    463e:	96 95       	lsr	r25
    4640:	96 95       	lsr	r25
    4642:	e9 0f       	add	r30, r25
    4644:	ff 27       	eor	r31, r31
    4646:	e2 56       	subi	r30, 0x62	; 98
    4648:	fd 4f       	sbci	r31, 0xFD	; 253
    464a:	99 27       	eor	r25, r25
    464c:	33 27       	eor	r19, r19
    464e:	ee 24       	eor	r14, r14
    4650:	ff 24       	eor	r15, r15
    4652:	a7 01       	movw	r20, r14
    4654:	e7 01       	movw	r28, r14
    4656:	05 90       	lpm	r0, Z+
    4658:	08 94       	sec
    465a:	07 94       	ror	r0
    465c:	28 f4       	brcc	.+10     	; 0x4668 <__ftoa_engine+0x80>
    465e:	36 0f       	add	r19, r22
    4660:	e7 1e       	adc	r14, r23
    4662:	f8 1e       	adc	r15, r24
    4664:	49 1f       	adc	r20, r25
    4666:	51 1d       	adc	r21, r1
    4668:	66 0f       	add	r22, r22
    466a:	77 1f       	adc	r23, r23
    466c:	88 1f       	adc	r24, r24
    466e:	99 1f       	adc	r25, r25
    4670:	06 94       	lsr	r0
    4672:	a1 f7       	brne	.-24     	; 0x465c <__ftoa_engine+0x74>
    4674:	05 90       	lpm	r0, Z+
    4676:	07 94       	ror	r0
    4678:	28 f4       	brcc	.+10     	; 0x4684 <__ftoa_engine+0x9c>
    467a:	e7 0e       	add	r14, r23
    467c:	f8 1e       	adc	r15, r24
    467e:	49 1f       	adc	r20, r25
    4680:	56 1f       	adc	r21, r22
    4682:	c1 1d       	adc	r28, r1
    4684:	77 0f       	add	r23, r23
    4686:	88 1f       	adc	r24, r24
    4688:	99 1f       	adc	r25, r25
    468a:	66 1f       	adc	r22, r22
    468c:	06 94       	lsr	r0
    468e:	a1 f7       	brne	.-24     	; 0x4678 <__ftoa_engine+0x90>
    4690:	05 90       	lpm	r0, Z+
    4692:	07 94       	ror	r0
    4694:	28 f4       	brcc	.+10     	; 0x46a0 <__ftoa_engine+0xb8>
    4696:	f8 0e       	add	r15, r24
    4698:	49 1f       	adc	r20, r25
    469a:	56 1f       	adc	r21, r22
    469c:	c7 1f       	adc	r28, r23
    469e:	d1 1d       	adc	r29, r1
    46a0:	88 0f       	add	r24, r24
    46a2:	99 1f       	adc	r25, r25
    46a4:	66 1f       	adc	r22, r22
    46a6:	77 1f       	adc	r23, r23
    46a8:	06 94       	lsr	r0
    46aa:	a1 f7       	brne	.-24     	; 0x4694 <__ftoa_engine+0xac>
    46ac:	05 90       	lpm	r0, Z+
    46ae:	07 94       	ror	r0
    46b0:	20 f4       	brcc	.+8      	; 0x46ba <__ftoa_engine+0xd2>
    46b2:	49 0f       	add	r20, r25
    46b4:	56 1f       	adc	r21, r22
    46b6:	c7 1f       	adc	r28, r23
    46b8:	d8 1f       	adc	r29, r24
    46ba:	99 0f       	add	r25, r25
    46bc:	66 1f       	adc	r22, r22
    46be:	77 1f       	adc	r23, r23
    46c0:	88 1f       	adc	r24, r24
    46c2:	06 94       	lsr	r0
    46c4:	a9 f7       	brne	.-22     	; 0x46b0 <__ftoa_engine+0xc8>
    46c6:	84 91       	lpm	r24, Z
    46c8:	10 95       	com	r17
    46ca:	17 70       	andi	r17, 0x07	; 7
    46cc:	41 f0       	breq	.+16     	; 0x46de <__ftoa_engine+0xf6>
    46ce:	d6 95       	lsr	r29
    46d0:	c7 95       	ror	r28
    46d2:	57 95       	ror	r21
    46d4:	47 95       	ror	r20
    46d6:	f7 94       	ror	r15
    46d8:	e7 94       	ror	r14
    46da:	1a 95       	dec	r17
    46dc:	c1 f7       	brne	.-16     	; 0x46ce <__ftoa_engine+0xe6>
    46de:	e4 e4       	ldi	r30, 0x44	; 68
    46e0:	f2 e0       	ldi	r31, 0x02	; 2
    46e2:	68 94       	set
    46e4:	15 90       	lpm	r1, Z+
    46e6:	15 91       	lpm	r17, Z+
    46e8:	35 91       	lpm	r19, Z+
    46ea:	65 91       	lpm	r22, Z+
    46ec:	95 91       	lpm	r25, Z+
    46ee:	05 90       	lpm	r0, Z+
    46f0:	7f e2       	ldi	r23, 0x2F	; 47
    46f2:	73 95       	inc	r23
    46f4:	e1 18       	sub	r14, r1
    46f6:	f1 0a       	sbc	r15, r17
    46f8:	43 0b       	sbc	r20, r19
    46fa:	56 0b       	sbc	r21, r22
    46fc:	c9 0b       	sbc	r28, r25
    46fe:	d0 09       	sbc	r29, r0
    4700:	c0 f7       	brcc	.-16     	; 0x46f2 <__ftoa_engine+0x10a>
    4702:	e1 0c       	add	r14, r1
    4704:	f1 1e       	adc	r15, r17
    4706:	43 1f       	adc	r20, r19
    4708:	56 1f       	adc	r21, r22
    470a:	c9 1f       	adc	r28, r25
    470c:	d0 1d       	adc	r29, r0
    470e:	7e f4       	brtc	.+30     	; 0x472e <__ftoa_engine+0x146>
    4710:	70 33       	cpi	r23, 0x30	; 48
    4712:	11 f4       	brne	.+4      	; 0x4718 <__ftoa_engine+0x130>
    4714:	8a 95       	dec	r24
    4716:	e6 cf       	rjmp	.-52     	; 0x46e4 <__ftoa_engine+0xfc>
    4718:	e8 94       	clt
    471a:	01 50       	subi	r16, 0x01	; 1
    471c:	30 f0       	brcs	.+12     	; 0x472a <__ftoa_engine+0x142>
    471e:	08 0f       	add	r16, r24
    4720:	0a f4       	brpl	.+2      	; 0x4724 <__ftoa_engine+0x13c>
    4722:	00 27       	eor	r16, r16
    4724:	02 17       	cp	r16, r18
    4726:	08 f4       	brcc	.+2      	; 0x472a <__ftoa_engine+0x142>
    4728:	20 2f       	mov	r18, r16
    472a:	23 95       	inc	r18
    472c:	02 2f       	mov	r16, r18
    472e:	7a 33       	cpi	r23, 0x3A	; 58
    4730:	28 f0       	brcs	.+10     	; 0x473c <__ftoa_engine+0x154>
    4732:	79 e3       	ldi	r23, 0x39	; 57
    4734:	7d 93       	st	X+, r23
    4736:	2a 95       	dec	r18
    4738:	e9 f7       	brne	.-6      	; 0x4734 <__ftoa_engine+0x14c>
    473a:	10 c0       	rjmp	.+32     	; 0x475c <__ftoa_engine+0x174>
    473c:	7d 93       	st	X+, r23
    473e:	2a 95       	dec	r18
    4740:	89 f6       	brne	.-94     	; 0x46e4 <__ftoa_engine+0xfc>
    4742:	06 94       	lsr	r0
    4744:	97 95       	ror	r25
    4746:	67 95       	ror	r22
    4748:	37 95       	ror	r19
    474a:	17 95       	ror	r17
    474c:	17 94       	ror	r1
    474e:	e1 18       	sub	r14, r1
    4750:	f1 0a       	sbc	r15, r17
    4752:	43 0b       	sbc	r20, r19
    4754:	56 0b       	sbc	r21, r22
    4756:	c9 0b       	sbc	r28, r25
    4758:	d0 09       	sbc	r29, r0
    475a:	98 f0       	brcs	.+38     	; 0x4782 <__ftoa_engine+0x19a>
    475c:	23 95       	inc	r18
    475e:	7e 91       	ld	r23, -X
    4760:	73 95       	inc	r23
    4762:	7a 33       	cpi	r23, 0x3A	; 58
    4764:	08 f0       	brcs	.+2      	; 0x4768 <__ftoa_engine+0x180>
    4766:	70 e3       	ldi	r23, 0x30	; 48
    4768:	7c 93       	st	X, r23
    476a:	20 13       	cpse	r18, r16
    476c:	b8 f7       	brcc	.-18     	; 0x475c <__ftoa_engine+0x174>
    476e:	7e 91       	ld	r23, -X
    4770:	70 61       	ori	r23, 0x10	; 16
    4772:	7d 93       	st	X+, r23
    4774:	30 f0       	brcs	.+12     	; 0x4782 <__ftoa_engine+0x19a>
    4776:	83 95       	inc	r24
    4778:	71 e3       	ldi	r23, 0x31	; 49
    477a:	7d 93       	st	X+, r23
    477c:	70 e3       	ldi	r23, 0x30	; 48
    477e:	2a 95       	dec	r18
    4780:	e1 f7       	brne	.-8      	; 0x477a <__ftoa_engine+0x192>
    4782:	11 24       	eor	r1, r1
    4784:	ef 90       	pop	r14
    4786:	ff 90       	pop	r15
    4788:	0f 91       	pop	r16
    478a:	1f 91       	pop	r17
    478c:	cf 91       	pop	r28
    478e:	df 91       	pop	r29
    4790:	99 27       	eor	r25, r25
    4792:	87 fd       	sbrc	r24, 7
    4794:	90 95       	com	r25
    4796:	08 95       	ret

00004798 <strnlen_P>:
    4798:	fc 01       	movw	r30, r24
    479a:	05 90       	lpm	r0, Z+
    479c:	61 50       	subi	r22, 0x01	; 1
    479e:	70 40       	sbci	r23, 0x00	; 0
    47a0:	01 10       	cpse	r0, r1
    47a2:	d8 f7       	brcc	.-10     	; 0x479a <strnlen_P+0x2>
    47a4:	80 95       	com	r24
    47a6:	90 95       	com	r25
    47a8:	8e 0f       	add	r24, r30
    47aa:	9f 1f       	adc	r25, r31
    47ac:	08 95       	ret

000047ae <memcpy>:
    47ae:	fb 01       	movw	r30, r22
    47b0:	dc 01       	movw	r26, r24
    47b2:	02 c0       	rjmp	.+4      	; 0x47b8 <memcpy+0xa>
    47b4:	01 90       	ld	r0, Z+
    47b6:	0d 92       	st	X+, r0
    47b8:	41 50       	subi	r20, 0x01	; 1
    47ba:	50 40       	sbci	r21, 0x00	; 0
    47bc:	d8 f7       	brcc	.-10     	; 0x47b4 <memcpy+0x6>
    47be:	08 95       	ret

000047c0 <memset>:
    47c0:	dc 01       	movw	r26, r24
    47c2:	01 c0       	rjmp	.+2      	; 0x47c6 <memset+0x6>
    47c4:	6d 93       	st	X+, r22
    47c6:	41 50       	subi	r20, 0x01	; 1
    47c8:	50 40       	sbci	r21, 0x00	; 0
    47ca:	e0 f7       	brcc	.-8      	; 0x47c4 <memset+0x4>
    47cc:	08 95       	ret

000047ce <strnlen>:
    47ce:	fc 01       	movw	r30, r24
    47d0:	61 50       	subi	r22, 0x01	; 1
    47d2:	70 40       	sbci	r23, 0x00	; 0
    47d4:	01 90       	ld	r0, Z+
    47d6:	01 10       	cpse	r0, r1
    47d8:	d8 f7       	brcc	.-10     	; 0x47d0 <strnlen+0x2>
    47da:	80 95       	com	r24
    47dc:	90 95       	com	r25
    47de:	8e 0f       	add	r24, r30
    47e0:	9f 1f       	adc	r25, r31
    47e2:	08 95       	ret

000047e4 <__itoa_ncheck>:
    47e4:	bb 27       	eor	r27, r27
    47e6:	4a 30       	cpi	r20, 0x0A	; 10
    47e8:	31 f4       	brne	.+12     	; 0x47f6 <__itoa_ncheck+0x12>
    47ea:	99 23       	and	r25, r25
    47ec:	22 f4       	brpl	.+8      	; 0x47f6 <__itoa_ncheck+0x12>
    47ee:	bd e2       	ldi	r27, 0x2D	; 45
    47f0:	90 95       	com	r25
    47f2:	81 95       	neg	r24
    47f4:	9f 4f       	sbci	r25, 0xFF	; 255
    47f6:	0c 94 fe 23 	jmp	0x47fc	; 0x47fc <__utoa_common>

000047fa <__utoa_ncheck>:
    47fa:	bb 27       	eor	r27, r27

000047fc <__utoa_common>:
    47fc:	fb 01       	movw	r30, r22
    47fe:	55 27       	eor	r21, r21
    4800:	aa 27       	eor	r26, r26
    4802:	88 0f       	add	r24, r24
    4804:	99 1f       	adc	r25, r25
    4806:	aa 1f       	adc	r26, r26
    4808:	a4 17       	cp	r26, r20
    480a:	10 f0       	brcs	.+4      	; 0x4810 <__utoa_common+0x14>
    480c:	a4 1b       	sub	r26, r20
    480e:	83 95       	inc	r24
    4810:	50 51       	subi	r21, 0x10	; 16
    4812:	b9 f7       	brne	.-18     	; 0x4802 <__utoa_common+0x6>
    4814:	a0 5d       	subi	r26, 0xD0	; 208
    4816:	aa 33       	cpi	r26, 0x3A	; 58
    4818:	08 f0       	brcs	.+2      	; 0x481c <__utoa_common+0x20>
    481a:	a9 5d       	subi	r26, 0xD9	; 217
    481c:	a1 93       	st	Z+, r26
    481e:	00 97       	sbiw	r24, 0x00	; 0
    4820:	79 f7       	brne	.-34     	; 0x4800 <__utoa_common+0x4>
    4822:	b1 11       	cpse	r27, r1
    4824:	b1 93       	st	Z+, r27
    4826:	11 92       	st	Z+, r1
    4828:	cb 01       	movw	r24, r22
    482a:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <strrev>

0000482e <fputc>:
    482e:	0f 93       	push	r16
    4830:	1f 93       	push	r17
    4832:	cf 93       	push	r28
    4834:	df 93       	push	r29
    4836:	fb 01       	movw	r30, r22
    4838:	23 81       	ldd	r18, Z+3	; 0x03
    483a:	21 fd       	sbrc	r18, 1
    483c:	03 c0       	rjmp	.+6      	; 0x4844 <fputc+0x16>
    483e:	8f ef       	ldi	r24, 0xFF	; 255
    4840:	9f ef       	ldi	r25, 0xFF	; 255
    4842:	2c c0       	rjmp	.+88     	; 0x489c <fputc+0x6e>
    4844:	22 ff       	sbrs	r18, 2
    4846:	16 c0       	rjmp	.+44     	; 0x4874 <fputc+0x46>
    4848:	46 81       	ldd	r20, Z+6	; 0x06
    484a:	57 81       	ldd	r21, Z+7	; 0x07
    484c:	24 81       	ldd	r18, Z+4	; 0x04
    484e:	35 81       	ldd	r19, Z+5	; 0x05
    4850:	42 17       	cp	r20, r18
    4852:	53 07       	cpc	r21, r19
    4854:	44 f4       	brge	.+16     	; 0x4866 <fputc+0x38>
    4856:	a0 81       	ld	r26, Z
    4858:	b1 81       	ldd	r27, Z+1	; 0x01
    485a:	9d 01       	movw	r18, r26
    485c:	2f 5f       	subi	r18, 0xFF	; 255
    485e:	3f 4f       	sbci	r19, 0xFF	; 255
    4860:	20 83       	st	Z, r18
    4862:	31 83       	std	Z+1, r19	; 0x01
    4864:	8c 93       	st	X, r24
    4866:	26 81       	ldd	r18, Z+6	; 0x06
    4868:	37 81       	ldd	r19, Z+7	; 0x07
    486a:	2f 5f       	subi	r18, 0xFF	; 255
    486c:	3f 4f       	sbci	r19, 0xFF	; 255
    486e:	26 83       	std	Z+6, r18	; 0x06
    4870:	37 83       	std	Z+7, r19	; 0x07
    4872:	14 c0       	rjmp	.+40     	; 0x489c <fputc+0x6e>
    4874:	8b 01       	movw	r16, r22
    4876:	ec 01       	movw	r28, r24
    4878:	fb 01       	movw	r30, r22
    487a:	00 84       	ldd	r0, Z+8	; 0x08
    487c:	f1 85       	ldd	r31, Z+9	; 0x09
    487e:	e0 2d       	mov	r30, r0
    4880:	19 95       	eicall
    4882:	89 2b       	or	r24, r25
    4884:	e1 f6       	brne	.-72     	; 0x483e <fputc+0x10>
    4886:	d8 01       	movw	r26, r16
    4888:	16 96       	adiw	r26, 0x06	; 6
    488a:	8d 91       	ld	r24, X+
    488c:	9c 91       	ld	r25, X
    488e:	17 97       	sbiw	r26, 0x07	; 7
    4890:	01 96       	adiw	r24, 0x01	; 1
    4892:	16 96       	adiw	r26, 0x06	; 6
    4894:	8d 93       	st	X+, r24
    4896:	9c 93       	st	X, r25
    4898:	17 97       	sbiw	r26, 0x07	; 7
    489a:	ce 01       	movw	r24, r28
    489c:	df 91       	pop	r29
    489e:	cf 91       	pop	r28
    48a0:	1f 91       	pop	r17
    48a2:	0f 91       	pop	r16
    48a4:	08 95       	ret

000048a6 <sprintf>:
    48a6:	0f 93       	push	r16
    48a8:	1f 93       	push	r17
    48aa:	cf 93       	push	r28
    48ac:	df 93       	push	r29
    48ae:	cd b7       	in	r28, 0x3d	; 61
    48b0:	de b7       	in	r29, 0x3e	; 62
    48b2:	2e 97       	sbiw	r28, 0x0e	; 14
    48b4:	cd bf       	out	0x3d, r28	; 61
    48b6:	de bf       	out	0x3e, r29	; 62
    48b8:	0e 89       	ldd	r16, Y+22	; 0x16
    48ba:	1f 89       	ldd	r17, Y+23	; 0x17
    48bc:	86 e0       	ldi	r24, 0x06	; 6
    48be:	8c 83       	std	Y+4, r24	; 0x04
    48c0:	09 83       	std	Y+1, r16	; 0x01
    48c2:	1a 83       	std	Y+2, r17	; 0x02
    48c4:	8f ef       	ldi	r24, 0xFF	; 255
    48c6:	9f e7       	ldi	r25, 0x7F	; 127
    48c8:	8d 83       	std	Y+5, r24	; 0x05
    48ca:	9e 83       	std	Y+6, r25	; 0x06
    48cc:	ae 01       	movw	r20, r28
    48ce:	46 5e       	subi	r20, 0xE6	; 230
    48d0:	5f 4f       	sbci	r21, 0xFF	; 255
    48d2:	68 8d       	ldd	r22, Y+24	; 0x18
    48d4:	79 8d       	ldd	r23, Y+25	; 0x19
    48d6:	ce 01       	movw	r24, r28
    48d8:	01 96       	adiw	r24, 0x01	; 1
    48da:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <vfprintf>
    48de:	ef 81       	ldd	r30, Y+7	; 0x07
    48e0:	f8 85       	ldd	r31, Y+8	; 0x08
    48e2:	e0 0f       	add	r30, r16
    48e4:	f1 1f       	adc	r31, r17
    48e6:	10 82       	st	Z, r1
    48e8:	2e 96       	adiw	r28, 0x0e	; 14
    48ea:	cd bf       	out	0x3d, r28	; 61
    48ec:	de bf       	out	0x3e, r29	; 62
    48ee:	df 91       	pop	r29
    48f0:	cf 91       	pop	r28
    48f2:	1f 91       	pop	r17
    48f4:	0f 91       	pop	r16
    48f6:	08 95       	ret

000048f8 <__ultoa_invert>:
    48f8:	fa 01       	movw	r30, r20
    48fa:	aa 27       	eor	r26, r26
    48fc:	28 30       	cpi	r18, 0x08	; 8
    48fe:	51 f1       	breq	.+84     	; 0x4954 <__ultoa_invert+0x5c>
    4900:	20 31       	cpi	r18, 0x10	; 16
    4902:	81 f1       	breq	.+96     	; 0x4964 <__ultoa_invert+0x6c>
    4904:	e8 94       	clt
    4906:	6f 93       	push	r22
    4908:	6e 7f       	andi	r22, 0xFE	; 254
    490a:	6e 5f       	subi	r22, 0xFE	; 254
    490c:	7f 4f       	sbci	r23, 0xFF	; 255
    490e:	8f 4f       	sbci	r24, 0xFF	; 255
    4910:	9f 4f       	sbci	r25, 0xFF	; 255
    4912:	af 4f       	sbci	r26, 0xFF	; 255
    4914:	b1 e0       	ldi	r27, 0x01	; 1
    4916:	3e d0       	rcall	.+124    	; 0x4994 <__ultoa_invert+0x9c>
    4918:	b4 e0       	ldi	r27, 0x04	; 4
    491a:	3c d0       	rcall	.+120    	; 0x4994 <__ultoa_invert+0x9c>
    491c:	67 0f       	add	r22, r23
    491e:	78 1f       	adc	r23, r24
    4920:	89 1f       	adc	r24, r25
    4922:	9a 1f       	adc	r25, r26
    4924:	a1 1d       	adc	r26, r1
    4926:	68 0f       	add	r22, r24
    4928:	79 1f       	adc	r23, r25
    492a:	8a 1f       	adc	r24, r26
    492c:	91 1d       	adc	r25, r1
    492e:	a1 1d       	adc	r26, r1
    4930:	6a 0f       	add	r22, r26
    4932:	71 1d       	adc	r23, r1
    4934:	81 1d       	adc	r24, r1
    4936:	91 1d       	adc	r25, r1
    4938:	a1 1d       	adc	r26, r1
    493a:	20 d0       	rcall	.+64     	; 0x497c <__ultoa_invert+0x84>
    493c:	09 f4       	brne	.+2      	; 0x4940 <__ultoa_invert+0x48>
    493e:	68 94       	set
    4940:	3f 91       	pop	r19
    4942:	2a e0       	ldi	r18, 0x0A	; 10
    4944:	26 9f       	mul	r18, r22
    4946:	11 24       	eor	r1, r1
    4948:	30 19       	sub	r19, r0
    494a:	30 5d       	subi	r19, 0xD0	; 208
    494c:	31 93       	st	Z+, r19
    494e:	de f6       	brtc	.-74     	; 0x4906 <__ultoa_invert+0xe>
    4950:	cf 01       	movw	r24, r30
    4952:	08 95       	ret
    4954:	46 2f       	mov	r20, r22
    4956:	47 70       	andi	r20, 0x07	; 7
    4958:	40 5d       	subi	r20, 0xD0	; 208
    495a:	41 93       	st	Z+, r20
    495c:	b3 e0       	ldi	r27, 0x03	; 3
    495e:	0f d0       	rcall	.+30     	; 0x497e <__ultoa_invert+0x86>
    4960:	c9 f7       	brne	.-14     	; 0x4954 <__ultoa_invert+0x5c>
    4962:	f6 cf       	rjmp	.-20     	; 0x4950 <__ultoa_invert+0x58>
    4964:	46 2f       	mov	r20, r22
    4966:	4f 70       	andi	r20, 0x0F	; 15
    4968:	40 5d       	subi	r20, 0xD0	; 208
    496a:	4a 33       	cpi	r20, 0x3A	; 58
    496c:	18 f0       	brcs	.+6      	; 0x4974 <__ultoa_invert+0x7c>
    496e:	49 5d       	subi	r20, 0xD9	; 217
    4970:	31 fd       	sbrc	r19, 1
    4972:	40 52       	subi	r20, 0x20	; 32
    4974:	41 93       	st	Z+, r20
    4976:	02 d0       	rcall	.+4      	; 0x497c <__ultoa_invert+0x84>
    4978:	a9 f7       	brne	.-22     	; 0x4964 <__ultoa_invert+0x6c>
    497a:	ea cf       	rjmp	.-44     	; 0x4950 <__ultoa_invert+0x58>
    497c:	b4 e0       	ldi	r27, 0x04	; 4
    497e:	a6 95       	lsr	r26
    4980:	97 95       	ror	r25
    4982:	87 95       	ror	r24
    4984:	77 95       	ror	r23
    4986:	67 95       	ror	r22
    4988:	ba 95       	dec	r27
    498a:	c9 f7       	brne	.-14     	; 0x497e <__ultoa_invert+0x86>
    498c:	00 97       	sbiw	r24, 0x00	; 0
    498e:	61 05       	cpc	r22, r1
    4990:	71 05       	cpc	r23, r1
    4992:	08 95       	ret
    4994:	9b 01       	movw	r18, r22
    4996:	ac 01       	movw	r20, r24
    4998:	0a 2e       	mov	r0, r26
    499a:	06 94       	lsr	r0
    499c:	57 95       	ror	r21
    499e:	47 95       	ror	r20
    49a0:	37 95       	ror	r19
    49a2:	27 95       	ror	r18
    49a4:	ba 95       	dec	r27
    49a6:	c9 f7       	brne	.-14     	; 0x499a <__ultoa_invert+0xa2>
    49a8:	62 0f       	add	r22, r18
    49aa:	73 1f       	adc	r23, r19
    49ac:	84 1f       	adc	r24, r20
    49ae:	95 1f       	adc	r25, r21
    49b0:	a0 1d       	adc	r26, r0
    49b2:	08 95       	ret

000049b4 <strrev>:
    49b4:	dc 01       	movw	r26, r24
    49b6:	fc 01       	movw	r30, r24
    49b8:	67 2f       	mov	r22, r23
    49ba:	71 91       	ld	r23, Z+
    49bc:	77 23       	and	r23, r23
    49be:	e1 f7       	brne	.-8      	; 0x49b8 <strrev+0x4>
    49c0:	32 97       	sbiw	r30, 0x02	; 2
    49c2:	04 c0       	rjmp	.+8      	; 0x49cc <strrev+0x18>
    49c4:	7c 91       	ld	r23, X
    49c6:	6d 93       	st	X+, r22
    49c8:	70 83       	st	Z, r23
    49ca:	62 91       	ld	r22, -Z
    49cc:	ae 17       	cp	r26, r30
    49ce:	bf 07       	cpc	r27, r31
    49d0:	c8 f3       	brcs	.-14     	; 0x49c4 <strrev+0x10>
    49d2:	08 95       	ret

000049d4 <_exit>:
    49d4:	f8 94       	cli

000049d6 <__stop_program>:
    49d6:	ff cf       	rjmp	.-2      	; 0x49d6 <__stop_program>
