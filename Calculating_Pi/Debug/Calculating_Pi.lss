
Calculating_Pi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000078b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00802000  000078b8  0000794c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000cab  00802058  00802058  000079a4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000079a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007a00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000810  00000000  00000000  00007a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ba03  00000000  00000000  00008250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000046fd  00000000  00000000  00013c53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005a64  00000000  00000000  00018350  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ff8  00000000  00000000  0001ddb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000569c  00000000  00000000  0001fdac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000441b  00000000  00000000  00025448  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000738  00000000  00000000  00029863  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__ctors_end>
       4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
       8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
       c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      10:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      14:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      18:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      1c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      20:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      24:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      28:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      2c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      30:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      34:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      38:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__vector_14>
      3c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      40:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      44:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      48:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      4c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      50:	0c 94 a1 28 	jmp	0x5142	; 0x5142 <__vector_20>
      54:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      58:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      5c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      60:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      64:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      68:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      6c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      70:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      74:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      78:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      7c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      80:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      84:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      88:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      8c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      90:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      94:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      98:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      9c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      a0:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      a4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      a8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      ac:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      b0:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      b4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      b8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      bc:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      c0:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      c4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      c8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      cc:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      d0:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      d4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      d8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      dc:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      e0:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      e4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      e8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      ec:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      f0:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      f4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      f8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      fc:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     100:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     104:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     108:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     10c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     110:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     114:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     118:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     11c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     120:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     124:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     128:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     12c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     130:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     134:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     138:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     13c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     140:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     144:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     148:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     14c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     150:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     154:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     158:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     15c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     160:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     164:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     168:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     16c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     170:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     174:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     178:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     17c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     180:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     184:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     188:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     18c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     190:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     194:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     198:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     19c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1a0:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1a4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1a8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1ac:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1b0:	0c 94 9a 29 	jmp	0x5334	; 0x5334 <__vector_108>
     1b4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1b8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1bc:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1c0:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1c4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1c8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1cc:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1d0:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1d4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1d8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1dc:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1e0:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1e4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1e8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1ec:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1f0:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1f4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1f8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1fc:	fa 20       	and	r15, r10
     1fe:	fa 20       	and	r15, r10
     200:	fa 20       	and	r15, r10
     202:	81 21       	and	r24, r1
     204:	4d 21       	and	r20, r13
     206:	7b 21       	and	r23, r11
     208:	fa 20       	and	r15, r10
     20a:	fa 20       	and	r15, r10
     20c:	81 21       	and	r24, r1
     20e:	4d 21       	and	r20, r13
     210:	07 63       	ori	r16, 0x37	; 55
     212:	42 36       	cpi	r20, 0x62	; 98
     214:	b7 9b       	sbis	0x16, 7	; 22
     216:	d8 a7       	std	Y+40, r29	; 0x28
     218:	1a 39       	cpi	r17, 0x9A	; 154
     21a:	68 56       	subi	r22, 0x68	; 104
     21c:	18 ae       	std	Y+56, r1	; 0x38
     21e:	ba ab       	std	Y+50, r27	; 0x32
     220:	55 8c       	ldd	r5, Z+29	; 0x1d
     222:	1d 3c       	cpi	r17, 0xCD	; 205
     224:	b7 cc       	rjmp	.-1682   	; 0xfffffb94 <__eeprom_end+0xff7efb94>
     226:	57 63       	ori	r21, 0x37	; 55
     228:	bd 6d       	ori	r27, 0xDD	; 221
     22a:	ed fd       	.word	0xfded	; ????
     22c:	75 3e       	cpi	r23, 0xE5	; 229
     22e:	f6 17       	cp	r31, r22
     230:	72 31       	cpi	r23, 0x12	; 18
     232:	bf 00       	.word	0x00bf	; ????
     234:	00 00       	nop
     236:	80 3f       	cpi	r24, 0xF0	; 240
     238:	08 00       	.word	0x0008	; ????
     23a:	00 00       	nop
     23c:	be 92       	st	-X, r11
     23e:	24 49       	sbci	r18, 0x94	; 148
     240:	12 3e       	cpi	r17, 0xE2	; 226
     242:	ab aa       	std	Y+51, r10	; 0x33
     244:	aa 2a       	or	r10, r26
     246:	be cd       	rjmp	.-1156   	; 0xfffffdc4 <__eeprom_end+0xff7efdc4>
     248:	cc cc       	rjmp	.-1640   	; 0xfffffbe2 <__eeprom_end+0xff7efbe2>
     24a:	4c 3e       	cpi	r20, 0xEC	; 236
     24c:	00 00       	nop
     24e:	00 80       	ld	r0, Z
     250:	be ab       	std	Y+54, r27	; 0x36
     252:	aa aa       	std	Y+50, r10	; 0x32
     254:	aa 3e       	cpi	r26, 0xEA	; 234
     256:	00 00       	nop
     258:	00 00       	nop
     25a:	bf 00       	.word	0x00bf	; ????
     25c:	00 00       	nop
     25e:	80 3f       	cpi	r24, 0xF0	; 240
     260:	00 00       	nop
     262:	00 00       	nop
     264:	00 08       	sbc	r0, r0
     266:	41 78       	andi	r20, 0x81	; 129
     268:	d3 bb       	out	0x13, r29	; 19
     26a:	43 87       	std	Z+11, r20	; 0x0b
     26c:	d1 13       	cpse	r29, r17
     26e:	3d 19       	sub	r19, r13
     270:	0e 3c       	cpi	r16, 0xCE	; 206
     272:	c3 bd       	out	0x23, r28	; 35
     274:	42 82       	std	Z+2, r4	; 0x02
     276:	ad 2b       	or	r26, r29
     278:	3e 68       	ori	r19, 0x8E	; 142
     27a:	ec 82       	std	Y+4, r14	; 0x04
     27c:	76 be       	out	0x36, r7	; 54
     27e:	d9 8f       	std	Y+25, r29	; 0x19
     280:	e1 a9       	ldd	r30, Z+49	; 0x31
     282:	3e 4c       	sbci	r19, 0xCE	; 206
     284:	80 ef       	ldi	r24, 0xF0	; 240
     286:	ff be       	out	0x3f, r15	; 63
     288:	01 c4       	rjmp	.+2050   	; 0xa8c <xEventGroupWaitBits+0x10c>
     28a:	ff 7f       	andi	r31, 0xFF	; 255
     28c:	3f 00       	.word	0x003f	; ????
     28e:	00 00       	nop
	...

00000292 <__trampolines_start>:
     292:	0c 94 2d 2c 	jmp	0x585a	; 0x585a <vDisplayUpdateTask>
     296:	0c 94 39 26 	jmp	0x4c72	; 0x4c72 <vSteuerTask>
     29a:	0c 94 81 21 	jmp	0x4302	; 0x4302 <prvProcessReceivedCommands+0x1dc>
     29e:	0c 94 dc 1e 	jmp	0x3db8	; 0x3db8 <prvTimerTask>
     2a2:	0c 94 a5 23 	jmp	0x474a	; 0x474a <vLeibniz>
     2a6:	0c 94 fa 20 	jmp	0x41f4	; 0x41f4 <prvProcessReceivedCommands+0xce>
     2aa:	0c 94 dd 24 	jmp	0x49ba	; 0x49ba <vKellalur>
     2ae:	0c 94 5e 19 	jmp	0x32bc	; 0x32bc <prvIdleTask>
     2b2:	0c 94 f5 28 	jmp	0x51ea	; 0x51ea <vButtonTask>
     2b6:	0c 94 7b 21 	jmp	0x42f6	; 0x42f6 <prvProcessReceivedCommands+0x1d0>
     2ba:	0c 94 4d 21 	jmp	0x429a	; 0x429a <prvProcessReceivedCommands+0x174>
     2be:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <vEventGroupSetBitsCallback>

000002c2 <__trampolines_end>:
     2c2:	6e 61       	ori	r22, 0x1E	; 30
     2c4:	6e 00       	.word	0x006e	; ????

000002c6 <__c.2332>:
     2c6:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     2d6:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2e6:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     2f6:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     306:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     316:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     326:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     336:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     346:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     356:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     366:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     376:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     386:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     396:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     3a6:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     3b6:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003c4 <__ctors_end>:
     3c4:	11 24       	eor	r1, r1
     3c6:	1f be       	out	0x3f, r1	; 63
     3c8:	cf ef       	ldi	r28, 0xFF	; 255
     3ca:	cd bf       	out	0x3d, r28	; 61
     3cc:	df e3       	ldi	r29, 0x3F	; 63
     3ce:	de bf       	out	0x3e, r29	; 62
     3d0:	00 e0       	ldi	r16, 0x00	; 0
     3d2:	0c bf       	out	0x3c, r16	; 60

000003d4 <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     3d4:	e3 e0       	ldi	r30, 0x03	; 3
     3d6:	fd e2       	ldi	r31, 0x2D	; 45
     3d8:	8a ea       	ldi	r24, 0xAA	; 170
     3da:	90 e4       	ldi	r25, 0x40	; 64
     3dc:	81 93       	st	Z+, r24
     3de:	e0 30       	cpi	r30, 0x00	; 0
     3e0:	f9 07       	cpc	r31, r25
     3e2:	e0 f3       	brcs	.-8      	; 0x3dc <init_mem+0x8>
	...

000003e6 <__do_copy_data>:
     3e6:	10 e2       	ldi	r17, 0x20	; 32
     3e8:	a0 e0       	ldi	r26, 0x00	; 0
     3ea:	b0 e2       	ldi	r27, 0x20	; 32
     3ec:	e8 eb       	ldi	r30, 0xB8	; 184
     3ee:	f8 e7       	ldi	r31, 0x78	; 120
     3f0:	00 e0       	ldi	r16, 0x00	; 0
     3f2:	0b bf       	out	0x3b, r16	; 59
     3f4:	02 c0       	rjmp	.+4      	; 0x3fa <__do_copy_data+0x14>
     3f6:	07 90       	elpm	r0, Z+
     3f8:	0d 92       	st	X+, r0
     3fa:	a8 35       	cpi	r26, 0x58	; 88
     3fc:	b1 07       	cpc	r27, r17
     3fe:	d9 f7       	brne	.-10     	; 0x3f6 <__do_copy_data+0x10>

00000400 <__do_clear_bss>:
     400:	2d e2       	ldi	r18, 0x2D	; 45
     402:	a8 e5       	ldi	r26, 0x58	; 88
     404:	b0 e2       	ldi	r27, 0x20	; 32
     406:	01 c0       	rjmp	.+2      	; 0x40a <.do_clear_bss_start>

00000408 <.do_clear_bss_loop>:
     408:	1d 92       	st	X+, r1

0000040a <.do_clear_bss_start>:
     40a:	a3 30       	cpi	r26, 0x03	; 3
     40c:	b2 07       	cpc	r27, r18
     40e:	e1 f7       	brne	.-8      	; 0x408 <.do_clear_bss_loop>
     410:	0e 94 2c 23 	call	0x4658	; 0x4658 <main>
     414:	0c 94 5a 3c 	jmp	0x78b4	; 0x78b4 <_exit>

00000418 <__bad_interrupt>:
     418:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000041c <initButtons>:
 #define BUTTON_PRESS_SHORT			100
 #define BUTTON_PRESS_LONG			500

 

 void initButtons(void) {
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
	PORTF.DIRCLR = PIN4_bm; //SW1
     424:	80 ea       	ldi	r24, 0xA0	; 160
     426:	96 e0       	ldi	r25, 0x06	; 6
     428:	20 e1       	ldi	r18, 0x10	; 16
     42a:	fc 01       	movw	r30, r24
     42c:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN5_bm; //SW2
     42e:	80 ea       	ldi	r24, 0xA0	; 160
     430:	96 e0       	ldi	r25, 0x06	; 6
     432:	20 e2       	ldi	r18, 0x20	; 32
     434:	fc 01       	movw	r30, r24
     436:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN6_bm; //SW3
     438:	80 ea       	ldi	r24, 0xA0	; 160
     43a:	96 e0       	ldi	r25, 0x06	; 6
     43c:	20 e4       	ldi	r18, 0x40	; 64
     43e:	fc 01       	movw	r30, r24
     440:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN7_bm; //SW4
     442:	80 ea       	ldi	r24, 0xA0	; 160
     444:	96 e0       	ldi	r25, 0x06	; 6
     446:	20 e8       	ldi	r18, 0x80	; 128
     448:	fc 01       	movw	r30, r24
     44a:	22 83       	std	Z+2, r18	; 0x02
 }
     44c:	00 00       	nop
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	08 95       	ret

00000454 <updateButtons>:
 button_press_t b1Status;
 button_press_t b2Status;
 button_press_t b3Status;
 button_press_t b4Status;

 void updateButtons(void) {
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
	static uint16_t b1Count = 0;
	static uint16_t b2Count = 0;
	static uint16_t b3Count = 0;
	static uint16_t b4Count = 0;
	if(Button1_Value == 0) {
     45c:	80 ea       	ldi	r24, 0xA0	; 160
     45e:	96 e0       	ldi	r25, 0x06	; 6
     460:	fc 01       	movw	r30, r24
     462:	80 85       	ldd	r24, Z+8	; 0x08
     464:	88 2f       	mov	r24, r24
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	80 71       	andi	r24, 0x10	; 16
     46a:	99 27       	eor	r25, r25
     46c:	95 95       	asr	r25
     46e:	87 95       	ror	r24
     470:	95 95       	asr	r25
     472:	87 95       	ror	r24
     474:	95 95       	asr	r25
     476:	87 95       	ror	r24
     478:	95 95       	asr	r25
     47a:	87 95       	ror	r24
     47c:	89 2b       	or	r24, r25
     47e:	89 f4       	brne	.+34     	; 0x4a2 <updateButtons+0x4e>
		if(b1Count < 60000) {
     480:	80 91 58 20 	lds	r24, 0x2058	; 0x802058 <__data_end>
     484:	90 91 59 20 	lds	r25, 0x2059	; 0x802059 <__data_end+0x1>
     488:	80 36       	cpi	r24, 0x60	; 96
     48a:	9a 4e       	sbci	r25, 0xEA	; 234
     48c:	20 f5       	brcc	.+72     	; 0x4d6 <updateButtons+0x82>
			b1Count++;
     48e:	80 91 58 20 	lds	r24, 0x2058	; 0x802058 <__data_end>
     492:	90 91 59 20 	lds	r25, 0x2059	; 0x802059 <__data_end+0x1>
     496:	01 96       	adiw	r24, 0x01	; 1
     498:	80 93 58 20 	sts	0x2058, r24	; 0x802058 <__data_end>
     49c:	90 93 59 20 	sts	0x2059, r25	; 0x802059 <__data_end+0x1>
     4a0:	1a c0       	rjmp	.+52     	; 0x4d6 <updateButtons+0x82>
		}
	} else {
		if(b1Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     4a2:	80 91 58 20 	lds	r24, 0x2058	; 0x802058 <__data_end>
     4a6:	90 91 59 20 	lds	r25, 0x2059	; 0x802059 <__data_end+0x1>
     4aa:	0b 97       	sbiw	r24, 0x0b	; 11
     4ac:	68 f0       	brcs	.+26     	; 0x4c8 <updateButtons+0x74>
			if(b1Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     4ae:	80 91 58 20 	lds	r24, 0x2058	; 0x802058 <__data_end>
     4b2:	90 91 59 20 	lds	r25, 0x2059	; 0x802059 <__data_end+0x1>
     4b6:	c3 97       	sbiw	r24, 0x33	; 51
     4b8:	18 f0       	brcs	.+6      	; 0x4c0 <updateButtons+0x6c>
				//Button was pressed Long
				b1Status = LONG_PRESSED;
     4ba:	10 92 ec 2c 	sts	0x2CEC, r1	; 0x802cec <b1Status>
     4be:	07 c0       	rjmp	.+14     	; 0x4ce <updateButtons+0x7a>
			} else {
				//Button was pressed Short	
				b1Status = SHORT_PRESSED;
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	80 93 ec 2c 	sts	0x2CEC, r24	; 0x802cec <b1Status>
     4c6:	03 c0       	rjmp	.+6      	; 0x4ce <updateButtons+0x7a>
			}
		} else {
			b1Status = NOT_PRESSED;
     4c8:	82 e0       	ldi	r24, 0x02	; 2
     4ca:	80 93 ec 2c 	sts	0x2CEC, r24	; 0x802cec <b1Status>
		}
		b1Count = 0;
     4ce:	10 92 58 20 	sts	0x2058, r1	; 0x802058 <__data_end>
     4d2:	10 92 59 20 	sts	0x2059, r1	; 0x802059 <__data_end+0x1>
	}
	if(Button2_Value == 0) {
     4d6:	80 ea       	ldi	r24, 0xA0	; 160
     4d8:	96 e0       	ldi	r25, 0x06	; 6
     4da:	fc 01       	movw	r30, r24
     4dc:	80 85       	ldd	r24, Z+8	; 0x08
     4de:	88 2f       	mov	r24, r24
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	80 72       	andi	r24, 0x20	; 32
     4e4:	99 27       	eor	r25, r25
     4e6:	95 95       	asr	r25
     4e8:	87 95       	ror	r24
     4ea:	95 95       	asr	r25
     4ec:	87 95       	ror	r24
     4ee:	95 95       	asr	r25
     4f0:	87 95       	ror	r24
     4f2:	95 95       	asr	r25
     4f4:	87 95       	ror	r24
     4f6:	95 95       	asr	r25
     4f8:	87 95       	ror	r24
     4fa:	89 2b       	or	r24, r25
     4fc:	89 f4       	brne	.+34     	; 0x520 <updateButtons+0xcc>
		if(b2Count < 60000) {
     4fe:	80 91 5a 20 	lds	r24, 0x205A	; 0x80205a <b2Count.3830>
     502:	90 91 5b 20 	lds	r25, 0x205B	; 0x80205b <b2Count.3830+0x1>
     506:	80 36       	cpi	r24, 0x60	; 96
     508:	9a 4e       	sbci	r25, 0xEA	; 234
     50a:	20 f5       	brcc	.+72     	; 0x554 <updateButtons+0x100>
			b2Count++;
     50c:	80 91 5a 20 	lds	r24, 0x205A	; 0x80205a <b2Count.3830>
     510:	90 91 5b 20 	lds	r25, 0x205B	; 0x80205b <b2Count.3830+0x1>
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	80 93 5a 20 	sts	0x205A, r24	; 0x80205a <b2Count.3830>
     51a:	90 93 5b 20 	sts	0x205B, r25	; 0x80205b <b2Count.3830+0x1>
     51e:	1a c0       	rjmp	.+52     	; 0x554 <updateButtons+0x100>
		}
	} else {
		if(b2Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     520:	80 91 5a 20 	lds	r24, 0x205A	; 0x80205a <b2Count.3830>
     524:	90 91 5b 20 	lds	r25, 0x205B	; 0x80205b <b2Count.3830+0x1>
     528:	0b 97       	sbiw	r24, 0x0b	; 11
     52a:	68 f0       	brcs	.+26     	; 0x546 <updateButtons+0xf2>
			if(b2Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     52c:	80 91 5a 20 	lds	r24, 0x205A	; 0x80205a <b2Count.3830>
     530:	90 91 5b 20 	lds	r25, 0x205B	; 0x80205b <b2Count.3830+0x1>
     534:	c3 97       	sbiw	r24, 0x33	; 51
     536:	18 f0       	brcs	.+6      	; 0x53e <updateButtons+0xea>
				//Button was pressed Long
				b2Status = LONG_PRESSED;
     538:	10 92 ed 2c 	sts	0x2CED, r1	; 0x802ced <b2Status>
     53c:	07 c0       	rjmp	.+14     	; 0x54c <updateButtons+0xf8>
				} else {
				//Button was pressed Short
				b2Status = SHORT_PRESSED;
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	80 93 ed 2c 	sts	0x2CED, r24	; 0x802ced <b2Status>
     544:	03 c0       	rjmp	.+6      	; 0x54c <updateButtons+0xf8>
			}
		} else {
			b2Status = NOT_PRESSED;			
     546:	82 e0       	ldi	r24, 0x02	; 2
     548:	80 93 ed 2c 	sts	0x2CED, r24	; 0x802ced <b2Status>
		}
		b2Count = 0;
     54c:	10 92 5a 20 	sts	0x205A, r1	; 0x80205a <b2Count.3830>
     550:	10 92 5b 20 	sts	0x205B, r1	; 0x80205b <b2Count.3830+0x1>
	}
	if(Button3_Value == 0) {
     554:	80 ea       	ldi	r24, 0xA0	; 160
     556:	96 e0       	ldi	r25, 0x06	; 6
     558:	fc 01       	movw	r30, r24
     55a:	80 85       	ldd	r24, Z+8	; 0x08
     55c:	88 2f       	mov	r24, r24
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	80 74       	andi	r24, 0x40	; 64
     562:	99 27       	eor	r25, r25
     564:	08 2e       	mov	r0, r24
     566:	89 2f       	mov	r24, r25
     568:	00 0c       	add	r0, r0
     56a:	88 1f       	adc	r24, r24
     56c:	99 0b       	sbc	r25, r25
     56e:	00 0c       	add	r0, r0
     570:	88 1f       	adc	r24, r24
     572:	99 1f       	adc	r25, r25
     574:	89 2b       	or	r24, r25
     576:	89 f4       	brne	.+34     	; 0x59a <updateButtons+0x146>
		if(b3Count < 60000) {
     578:	80 91 5c 20 	lds	r24, 0x205C	; 0x80205c <b3Count.3831>
     57c:	90 91 5d 20 	lds	r25, 0x205D	; 0x80205d <b3Count.3831+0x1>
     580:	80 36       	cpi	r24, 0x60	; 96
     582:	9a 4e       	sbci	r25, 0xEA	; 234
     584:	20 f5       	brcc	.+72     	; 0x5ce <updateButtons+0x17a>
			b3Count++;
     586:	80 91 5c 20 	lds	r24, 0x205C	; 0x80205c <b3Count.3831>
     58a:	90 91 5d 20 	lds	r25, 0x205D	; 0x80205d <b3Count.3831+0x1>
     58e:	01 96       	adiw	r24, 0x01	; 1
     590:	80 93 5c 20 	sts	0x205C, r24	; 0x80205c <b3Count.3831>
     594:	90 93 5d 20 	sts	0x205D, r25	; 0x80205d <b3Count.3831+0x1>
     598:	1a c0       	rjmp	.+52     	; 0x5ce <updateButtons+0x17a>
		}
	} else {
		if(b3Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     59a:	80 91 5c 20 	lds	r24, 0x205C	; 0x80205c <b3Count.3831>
     59e:	90 91 5d 20 	lds	r25, 0x205D	; 0x80205d <b3Count.3831+0x1>
     5a2:	0b 97       	sbiw	r24, 0x0b	; 11
     5a4:	68 f0       	brcs	.+26     	; 0x5c0 <updateButtons+0x16c>
			if(b3Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     5a6:	80 91 5c 20 	lds	r24, 0x205C	; 0x80205c <b3Count.3831>
     5aa:	90 91 5d 20 	lds	r25, 0x205D	; 0x80205d <b3Count.3831+0x1>
     5ae:	c3 97       	sbiw	r24, 0x33	; 51
     5b0:	18 f0       	brcs	.+6      	; 0x5b8 <updateButtons+0x164>
				//Button was pressed Long
				b3Status = LONG_PRESSED;
     5b2:	10 92 ee 2c 	sts	0x2CEE, r1	; 0x802cee <b3Status>
     5b6:	07 c0       	rjmp	.+14     	; 0x5c6 <updateButtons+0x172>
				} else {
				//Button was pressed Short
				b3Status = SHORT_PRESSED;
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	80 93 ee 2c 	sts	0x2CEE, r24	; 0x802cee <b3Status>
     5be:	03 c0       	rjmp	.+6      	; 0x5c6 <updateButtons+0x172>
			}
		} else {
			b3Status = NOT_PRESSED;
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	80 93 ee 2c 	sts	0x2CEE, r24	; 0x802cee <b3Status>
		}
		b3Count = 0;
     5c6:	10 92 5c 20 	sts	0x205C, r1	; 0x80205c <b3Count.3831>
     5ca:	10 92 5d 20 	sts	0x205D, r1	; 0x80205d <b3Count.3831+0x1>
	}
	if(Button4_Value == 0) {
     5ce:	80 ea       	ldi	r24, 0xA0	; 160
     5d0:	96 e0       	ldi	r25, 0x06	; 6
     5d2:	fc 01       	movw	r30, r24
     5d4:	80 85       	ldd	r24, Z+8	; 0x08
     5d6:	88 23       	and	r24, r24
     5d8:	8c f0       	brlt	.+34     	; 0x5fc <updateButtons+0x1a8>
		if(b4Count < 60000) {
     5da:	80 91 5e 20 	lds	r24, 0x205E	; 0x80205e <b4Count.3832>
     5de:	90 91 5f 20 	lds	r25, 0x205F	; 0x80205f <b4Count.3832+0x1>
     5e2:	80 36       	cpi	r24, 0x60	; 96
     5e4:	9a 4e       	sbci	r25, 0xEA	; 234
     5e6:	20 f5       	brcc	.+72     	; 0x630 <updateButtons+0x1dc>
			b4Count++;
     5e8:	80 91 5e 20 	lds	r24, 0x205E	; 0x80205e <b4Count.3832>
     5ec:	90 91 5f 20 	lds	r25, 0x205F	; 0x80205f <b4Count.3832+0x1>
     5f0:	01 96       	adiw	r24, 0x01	; 1
     5f2:	80 93 5e 20 	sts	0x205E, r24	; 0x80205e <b4Count.3832>
     5f6:	90 93 5f 20 	sts	0x205F, r25	; 0x80205f <b4Count.3832+0x1>
		} else {
			b4Status = NOT_PRESSED;
		}
		b4Count = 0;
	}
 }
     5fa:	1a c0       	rjmp	.+52     	; 0x630 <updateButtons+0x1dc>
	if(Button4_Value == 0) {
		if(b4Count < 60000) {
			b4Count++;
		}
	} else {
		if(b4Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     5fc:	80 91 5e 20 	lds	r24, 0x205E	; 0x80205e <b4Count.3832>
     600:	90 91 5f 20 	lds	r25, 0x205F	; 0x80205f <b4Count.3832+0x1>
     604:	0b 97       	sbiw	r24, 0x0b	; 11
     606:	68 f0       	brcs	.+26     	; 0x622 <updateButtons+0x1ce>
			if(b4Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     608:	80 91 5e 20 	lds	r24, 0x205E	; 0x80205e <b4Count.3832>
     60c:	90 91 5f 20 	lds	r25, 0x205F	; 0x80205f <b4Count.3832+0x1>
     610:	c3 97       	sbiw	r24, 0x33	; 51
     612:	18 f0       	brcs	.+6      	; 0x61a <updateButtons+0x1c6>
				//Button was pressed Long
				b4Status = LONG_PRESSED;
     614:	10 92 ef 2c 	sts	0x2CEF, r1	; 0x802cef <b4Status>
     618:	07 c0       	rjmp	.+14     	; 0x628 <updateButtons+0x1d4>
				} else {
				//Button was pressed Short
				b4Status = SHORT_PRESSED;
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	80 93 ef 2c 	sts	0x2CEF, r24	; 0x802cef <b4Status>
     620:	03 c0       	rjmp	.+6      	; 0x628 <updateButtons+0x1d4>
			}
		} else {
			b4Status = NOT_PRESSED;
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	80 93 ef 2c 	sts	0x2CEF, r24	; 0x802cef <b4Status>
		}
		b4Count = 0;
     628:	10 92 5e 20 	sts	0x205E, r1	; 0x80205e <b4Count.3832>
     62c:	10 92 5f 20 	sts	0x205F, r1	; 0x80205f <b4Count.3832+0x1>
	}
 }
     630:	00 00       	nop
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	08 95       	ret

00000638 <getButtonPress>:

 button_press_t getButtonPress(button_t button) {
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	1f 92       	push	r1
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
     642:	89 83       	std	Y+1, r24	; 0x01
	switch(button) {
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	88 2f       	mov	r24, r24
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	81 30       	cpi	r24, 0x01	; 1
     64c:	91 05       	cpc	r25, r1
     64e:	79 f0       	breq	.+30     	; 0x66e <getButtonPress+0x36>
     650:	82 30       	cpi	r24, 0x02	; 2
     652:	91 05       	cpc	r25, r1
     654:	1c f4       	brge	.+6      	; 0x65c <getButtonPress+0x24>
     656:	89 2b       	or	r24, r25
     658:	39 f0       	breq	.+14     	; 0x668 <getButtonPress+0x30>
     65a:	12 c0       	rjmp	.+36     	; 0x680 <getButtonPress+0x48>
     65c:	82 30       	cpi	r24, 0x02	; 2
     65e:	91 05       	cpc	r25, r1
     660:	49 f0       	breq	.+18     	; 0x674 <getButtonPress+0x3c>
     662:	03 97       	sbiw	r24, 0x03	; 3
     664:	51 f0       	breq	.+20     	; 0x67a <getButtonPress+0x42>
     666:	0c c0       	rjmp	.+24     	; 0x680 <getButtonPress+0x48>
		case BUTTON1:
			return b1Status;
     668:	80 91 ec 2c 	lds	r24, 0x2CEC	; 0x802cec <b1Status>
     66c:	0a c0       	rjmp	.+20     	; 0x682 <getButtonPress+0x4a>
		break;
		case BUTTON2:
			return b2Status;
     66e:	80 91 ed 2c 	lds	r24, 0x2CED	; 0x802ced <b2Status>
     672:	07 c0       	rjmp	.+14     	; 0x682 <getButtonPress+0x4a>
		break;
		case BUTTON3:
			return b3Status;
     674:	80 91 ee 2c 	lds	r24, 0x2CEE	; 0x802cee <b3Status>
     678:	04 c0       	rjmp	.+8      	; 0x682 <getButtonPress+0x4a>
		break;
		case BUTTON4:
			return b4Status;
     67a:	80 91 ef 2c 	lds	r24, 0x2CEF	; 0x802cef <b4Status>
     67e:	01 c0       	rjmp	.+2      	; 0x682 <getButtonPress+0x4a>
		break;
	}
	return NOT_PRESSED;
     680:	82 e0       	ldi	r24, 0x02	; 2
     682:	0f 90       	pop	r0
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	08 95       	ret

0000068a <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     68a:	0f 93       	push	r16
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	00 d0       	rcall	.+0      	; 0x692 <CCPWrite+0x8>
     692:	00 d0       	rcall	.+0      	; 0x694 <CCPWrite+0xa>
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	8c 83       	std	Y+4, r24	; 0x04
     69a:	9d 83       	std	Y+5, r25	; 0x05
     69c:	6e 83       	std	Y+6, r22	; 0x06

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     69e:	8f e3       	ldi	r24, 0x3F	; 63
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	fc 01       	movw	r30, r24
     6a4:	80 81       	ld	r24, Z
     6a6:	8b 83       	std	Y+3, r24	; 0x03
     6a8:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
     6aa:	8c 81       	ldd	r24, Y+4	; 0x04
     6ac:	9d 81       	ldd	r25, Y+5	; 0x05
     6ae:	89 83       	std	Y+1, r24	; 0x01
     6b0:	9a 83       	std	Y+2, r25	; 0x02
#ifdef RAMPZ
	RAMPZ = 0;
     6b2:	8b e3       	ldi	r24, 0x3B	; 59
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	fc 01       	movw	r30, r24
     6b8:	10 82       	st	Z, r1
#endif
	asm volatile(
     6ba:	89 81       	ldd	r24, Y+1	; 0x01
     6bc:	9a 81       	ldd	r25, Y+2	; 0x02
     6be:	2e 81       	ldd	r18, Y+6	; 0x06
     6c0:	fc 01       	movw	r30, r24
     6c2:	08 ed       	ldi	r16, 0xD8	; 216
     6c4:	04 bf       	out	0x34, r16	; 52
     6c6:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     6c8:	8f e3       	ldi	r24, 0x3F	; 63
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	2b 81       	ldd	r18, Y+3	; 0x03
     6ce:	fc 01       	movw	r30, r24
     6d0:	20 83       	st	Z, r18
#endif
}
     6d2:	00 00       	nop
     6d4:	26 96       	adiw	r28, 0x06	; 6
     6d6:	cd bf       	out	0x3d, r28	; 61
     6d8:	de bf       	out	0x3e, r29	; 62
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	0f 91       	pop	r16
     6e0:	08 95       	ret

000006e2 <CLKSYS_XOSC_Config>:
 *                             external clock) and startup times.
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	00 d0       	rcall	.+0      	; 0x6e8 <CLKSYS_XOSC_Config+0x6>
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	89 83       	std	Y+1, r24	; 0x01
     6ee:	6a 83       	std	Y+2, r22	; 0x02
     6f0:	4b 83       	std	Y+3, r20	; 0x03
	OSC.XOSCCTRL = (uint8_t) freqRange |
     6f2:	80 e5       	ldi	r24, 0x50	; 80
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	2a 81       	ldd	r18, Y+2	; 0x02
     6f8:	22 23       	and	r18, r18
     6fa:	11 f0       	breq	.+4      	; 0x700 <CLKSYS_XOSC_Config+0x1e>
     6fc:	20 e2       	ldi	r18, 0x20	; 32
     6fe:	01 c0       	rjmp	.+2      	; 0x702 <CLKSYS_XOSC_Config+0x20>
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	39 81       	ldd	r19, Y+1	; 0x01
     704:	32 2b       	or	r19, r18
     706:	2b 81       	ldd	r18, Y+3	; 0x03
     708:	23 2b       	or	r18, r19
     70a:	fc 01       	movw	r30, r24
     70c:	22 83       	std	Z+2, r18	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
     70e:	00 00       	nop
     710:	23 96       	adiw	r28, 0x03	; 3
     712:	cd bf       	out	0x3d, r28	; 61
     714:	de bf       	out	0x3e, r29	; 62
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	08 95       	ret

0000071c <CLKSYS_PLL_Config>:
 *                      must be above 0.4MHz.
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	1f 92       	push	r1
     722:	1f 92       	push	r1
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	89 83       	std	Y+1, r24	; 0x01
     72a:	6a 83       	std	Y+2, r22	; 0x02
	factor &= OSC_PLLFAC_gm;
     72c:	8a 81       	ldd	r24, Y+2	; 0x02
     72e:	8f 71       	andi	r24, 0x1F	; 31
     730:	8a 83       	std	Y+2, r24	; 0x02
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     732:	80 e5       	ldi	r24, 0x50	; 80
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	39 81       	ldd	r19, Y+1	; 0x01
     738:	2a 81       	ldd	r18, Y+2	; 0x02
     73a:	23 2b       	or	r18, r19
     73c:	fc 01       	movw	r30, r24
     73e:	25 83       	std	Z+5, r18	; 0x05
}
     740:	00 00       	nop
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	08 95       	ret

0000074c <CLKSYS_Disable>:
 *                 OSC_XOSCEN_bm, OSC_PLLEN_bm.
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	1f 92       	push	r1
     752:	1f 92       	push	r1
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
     758:	8a 83       	std	Y+2, r24	; 0x02
	OSC.CTRL &= ~oscSel;
     75a:	80 e5       	ldi	r24, 0x50	; 80
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	20 e5       	ldi	r18, 0x50	; 80
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	f9 01       	movw	r30, r18
     764:	20 81       	ld	r18, Z
     766:	32 2f       	mov	r19, r18
     768:	2a 81       	ldd	r18, Y+2	; 0x02
     76a:	20 95       	com	r18
     76c:	23 23       	and	r18, r19
     76e:	fc 01       	movw	r30, r24
     770:	20 83       	st	Z, r18
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     772:	80 e5       	ldi	r24, 0x50	; 80
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	fc 01       	movw	r30, r24
     778:	90 81       	ld	r25, Z
     77a:	8a 81       	ldd	r24, Y+2	; 0x02
     77c:	89 23       	and	r24, r25
     77e:	89 83       	std	Y+1, r24	; 0x01
	return clkEnabled;
     780:	89 81       	ldd	r24, Y+1	; 0x01
}
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	08 95       	ret

0000078c <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	00 d0       	rcall	.+0      	; 0x792 <CLKSYS_Prescalers_Config+0x6>
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	8a 83       	std	Y+2, r24	; 0x02
     798:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     79a:	9a 81       	ldd	r25, Y+2	; 0x02
     79c:	8b 81       	ldd	r24, Y+3	; 0x03
     79e:	89 2b       	or	r24, r25
     7a0:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.PSCTRL, PSconfig );
     7a2:	69 81       	ldd	r22, Y+1	; 0x01
     7a4:	81 e4       	ldi	r24, 0x41	; 65
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	0e 94 45 03 	call	0x68a	; 0x68a <CCPWrite>
}
     7ac:	00 00       	nop
     7ae:	23 96       	adiw	r28, 0x03	; 3
     7b0:	cd bf       	out	0x3d, r28	; 61
     7b2:	de bf       	out	0x3e, r29	; 62
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	08 95       	ret

000007ba <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	1f 92       	push	r1
     7c0:	1f 92       	push	r1
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
     7c6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     7c8:	80 e4       	ldi	r24, 0x40	; 64
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	fc 01       	movw	r30, r24
     7ce:	80 81       	ld	r24, Z
     7d0:	98 2f       	mov	r25, r24
     7d2:	98 7f       	andi	r25, 0xF8	; 248
     7d4:	8a 81       	ldd	r24, Y+2	; 0x02
     7d6:	89 2b       	or	r24, r25
     7d8:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.CTRL, clkCtrl );
     7da:	69 81       	ldd	r22, Y+1	; 0x01
     7dc:	80 e4       	ldi	r24, 0x40	; 64
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 45 03 	call	0x68a	; 0x68a <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     7e4:	80 e4       	ldi	r24, 0x40	; 64
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	fc 01       	movw	r30, r24
     7ea:	90 81       	ld	r25, Z
     7ec:	8a 81       	ldd	r24, Y+2	; 0x02
     7ee:	89 23       	and	r24, r25
     7f0:	89 83       	std	Y+1, r24	; 0x01
	return clkCtrl;
     7f2:	89 81       	ldd	r24, Y+1	; 0x01
}
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	08 95       	ret

000007fe <TC0_ConfigClockSource>:
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
}
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	00 d0       	rcall	.+0      	; 0x804 <TC0_ConfigClockSource+0x6>
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
     808:	89 83       	std	Y+1, r24	; 0x01
     80a:	9a 83       	std	Y+2, r25	; 0x02
     80c:	6b 83       	std	Y+3, r22	; 0x03
     80e:	89 81       	ldd	r24, Y+1	; 0x01
     810:	9a 81       	ldd	r25, Y+2	; 0x02
     812:	fc 01       	movw	r30, r24
     814:	80 81       	ld	r24, Z
     816:	98 2f       	mov	r25, r24
     818:	90 7f       	andi	r25, 0xF0	; 240
     81a:	8b 81       	ldd	r24, Y+3	; 0x03
     81c:	89 2b       	or	r24, r25
     81e:	28 2f       	mov	r18, r24
     820:	89 81       	ldd	r24, Y+1	; 0x01
     822:	9a 81       	ldd	r25, Y+2	; 0x02
     824:	fc 01       	movw	r30, r24
     826:	20 83       	st	Z, r18
     828:	00 00       	nop
     82a:	23 96       	adiw	r28, 0x03	; 3
     82c:	cd bf       	out	0x3d, r28	; 61
     82e:	de bf       	out	0x3e, r29	; 62
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	08 95       	ret

00000836 <TC0_ConfigWGM>:
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	00 d0       	rcall	.+0      	; 0x83c <TC0_ConfigWGM+0x6>
     83c:	cd b7       	in	r28, 0x3d	; 61
     83e:	de b7       	in	r29, 0x3e	; 62
     840:	89 83       	std	Y+1, r24	; 0x01
     842:	9a 83       	std	Y+2, r25	; 0x02
     844:	6b 83       	std	Y+3, r22	; 0x03
     846:	89 81       	ldd	r24, Y+1	; 0x01
     848:	9a 81       	ldd	r25, Y+2	; 0x02
     84a:	fc 01       	movw	r30, r24
     84c:	81 81       	ldd	r24, Z+1	; 0x01
     84e:	98 2f       	mov	r25, r24
     850:	98 7f       	andi	r25, 0xF8	; 248
     852:	8b 81       	ldd	r24, Y+3	; 0x03
     854:	89 2b       	or	r24, r25
     856:	28 2f       	mov	r18, r24
     858:	89 81       	ldd	r24, Y+1	; 0x01
     85a:	9a 81       	ldd	r25, Y+2	; 0x02
     85c:	fc 01       	movw	r30, r24
     85e:	21 83       	std	Z+1, r18	; 0x01
     860:	00 00       	nop
     862:	23 96       	adiw	r28, 0x03	; 3
     864:	cd bf       	out	0x3d, r28	; 61
     866:	de bf       	out	0x3e, r29	; 62
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	08 95       	ret

0000086e <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	00 d0       	rcall	.+0      	; 0x874 <TC0_SetOverflowIntLevel+0x6>
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62
     878:	89 83       	std	Y+1, r24	; 0x01
     87a:	9a 83       	std	Y+2, r25	; 0x02
     87c:	6b 83       	std	Y+3, r22	; 0x03
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     87e:	89 81       	ldd	r24, Y+1	; 0x01
     880:	9a 81       	ldd	r25, Y+2	; 0x02
     882:	fc 01       	movw	r30, r24
     884:	86 81       	ldd	r24, Z+6	; 0x06
     886:	98 2f       	mov	r25, r24
     888:	9c 7f       	andi	r25, 0xFC	; 252
     88a:	8b 81       	ldd	r24, Y+3	; 0x03
     88c:	89 2b       	or	r24, r25
     88e:	28 2f       	mov	r18, r24
     890:	89 81       	ldd	r24, Y+1	; 0x01
     892:	9a 81       	ldd	r25, Y+2	; 0x02
     894:	fc 01       	movw	r30, r24
     896:	26 83       	std	Z+6, r18	; 0x06
}
     898:	00 00       	nop
     89a:	23 96       	adiw	r28, 0x03	; 3
     89c:	cd bf       	out	0x3d, r28	; 61
     89e:	de bf       	out	0x3e, r29	; 62
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	08 95       	ret

000008a6 <vApplicationStackOverflowHook>:
 {
	 (void)errCode;

	 uint8_t a=42; (void)a;

 }
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	00 d0       	rcall	.+0      	; 0x8ac <vApplicationStackOverflowHook+0x6>
     8ac:	1f 92       	push	r1
     8ae:	cd b7       	in	r28, 0x3d	; 61
     8b0:	de b7       	in	r29, 0x3e	; 62
     8b2:	89 83       	std	Y+1, r24	; 0x01
     8b4:	9a 83       	std	Y+2, r25	; 0x02
     8b6:	6b 83       	std	Y+3, r22	; 0x03
     8b8:	7c 83       	std	Y+4, r23	; 0x04
     8ba:	8b e2       	ldi	r24, 0x2B	; 43
     8bc:	0e 94 67 04 	call	0x8ce	; 0x8ce <error>
     8c0:	00 00       	nop
     8c2:	24 96       	adiw	r28, 0x04	; 4
     8c4:	cd bf       	out	0x3d, r28	; 61
     8c6:	de bf       	out	0x3e, r29	; 62
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	08 95       	ret

000008ce <error>:

 //----------------------------------------------
 //
 void error(uint8_t errCode)
 {
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	1f 92       	push	r1
     8d4:	1f 92       	push	r1
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
     8da:	8a 83       	std	Y+2, r24	; 0x02
	 uint8_t a;

	 if(errCode==ERR_STACK_OVERFLOW)
     8dc:	8a 81       	ldd	r24, Y+2	; 0x02
     8de:	8b 32       	cpi	r24, 0x2B	; 43
     8e0:	19 f4       	brne	.+6      	; 0x8e8 <error+0x1a>
	 a = 1;
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	89 83       	std	Y+1, r24	; 0x01
     8e6:	0e c0       	rjmp	.+28     	; 0x904 <error+0x36>
	 else if(errCode==ERR_QUEUE_SEND_FAILED)
     8e8:	8a 81       	ldd	r24, Y+2	; 0x02
     8ea:	8c 32       	cpi	r24, 0x2C	; 44
     8ec:	19 f4       	brne	.+6      	; 0x8f4 <error+0x26>
	 a = 2;
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	89 83       	std	Y+1, r24	; 0x01
     8f2:	08 c0       	rjmp	.+16     	; 0x904 <error+0x36>
	 else if(errCode==ERR_BYTES_SHOULD_BE_AVAILABLE)
     8f4:	8a 81       	ldd	r24, Y+2	; 0x02
     8f6:	8f 32       	cpi	r24, 0x2F	; 47
     8f8:	19 f4       	brne	.+6      	; 0x900 <error+0x32>
	 a = 3;
     8fa:	83 e0       	ldi	r24, 0x03	; 3
     8fc:	89 83       	std	Y+1, r24	; 0x01
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <error+0x36>
	 else
	 a = 4;
     900:	84 e0       	ldi	r24, 0x04	; 4
     902:	89 83       	std	Y+1, r24	; 0x01
	 // TODO from here:
	 //
	 // - log the occurance of any error in flash mem (inc counter)
	 // - print a message

	 software_reset();
     904:	0e 94 8a 04 	call	0x914	; 0x914 <software_reset>
 }
     908:	00 00       	nop
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	08 95       	ret

00000914 <software_reset>:

 //----------------------------------------------
 //
 void software_reset(void)
 {	 
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
	 asm("nop");
     91c:	00 00       	nop
	 CPU_CCP  = CCP_IOREG_gc;
     91e:	84 e3       	ldi	r24, 0x34	; 52
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	28 ed       	ldi	r18, 0xD8	; 216
     924:	fc 01       	movw	r30, r24
     926:	20 83       	st	Z, r18
	 RST.CTRL = RST_SWRST_bm ;	 
     928:	88 e7       	ldi	r24, 0x78	; 120
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	21 e0       	ldi	r18, 0x01	; 1
     92e:	fc 01       	movw	r30, r24
     930:	21 83       	std	Z+1, r18	; 0x01
     932:	00 00       	nop
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	08 95       	ret

0000093a <xEventGroupCreate>:
/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	1f 92       	push	r1
     940:	1f 92       	push	r1
     942:	cd b7       	in	r28, 0x3d	; 61
     944:	de b7       	in	r29, 0x3e	; 62
     946:	80 e1       	ldi	r24, 0x10	; 16
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <pvPortMalloc>
     94e:	89 83       	std	Y+1, r24	; 0x01
     950:	9a 83       	std	Y+2, r25	; 0x02
     952:	89 81       	ldd	r24, Y+1	; 0x01
     954:	9a 81       	ldd	r25, Y+2	; 0x02
     956:	89 2b       	or	r24, r25
     958:	61 f0       	breq	.+24     	; 0x972 <xEventGroupCreate+0x38>
     95a:	89 81       	ldd	r24, Y+1	; 0x01
     95c:	9a 81       	ldd	r25, Y+2	; 0x02
     95e:	fc 01       	movw	r30, r24
     960:	10 82       	st	Z, r1
     962:	11 82       	std	Z+1, r1	; 0x01
     964:	12 82       	std	Z+2, r1	; 0x02
     966:	13 82       	std	Z+3, r1	; 0x03
     968:	89 81       	ldd	r24, Y+1	; 0x01
     96a:	9a 81       	ldd	r25, Y+2	; 0x02
     96c:	04 96       	adiw	r24, 0x04	; 4
     96e:	0e 94 2c 08 	call	0x1058	; 0x1058 <vListInitialise>
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	9a 81       	ldd	r25, Y+2	; 0x02
     976:	0f 90       	pop	r0
     978:	0f 90       	pop	r0
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	08 95       	ret

00000980 <xEventGroupWaitBits>:
     980:	cf 92       	push	r12
     982:	df 92       	push	r13
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	cd b7       	in	r28, 0x3d	; 61
     992:	de b7       	in	r29, 0x3e	; 62
     994:	6d 97       	sbiw	r28, 0x1d	; 29
     996:	cd bf       	out	0x3d, r28	; 61
     998:	de bf       	out	0x3e, r29	; 62
     99a:	8a 8b       	std	Y+18, r24	; 0x12
     99c:	9b 8b       	std	Y+19, r25	; 0x13
     99e:	4c 8b       	std	Y+20, r20	; 0x14
     9a0:	5d 8b       	std	Y+21, r21	; 0x15
     9a2:	6e 8b       	std	Y+22, r22	; 0x16
     9a4:	7f 8b       	std	Y+23, r23	; 0x17
     9a6:	28 8f       	std	Y+24, r18	; 0x18
     9a8:	09 8f       	std	Y+25, r16	; 0x19
     9aa:	ca 8e       	std	Y+26, r12	; 0x1a
     9ac:	db 8e       	std	Y+27, r13	; 0x1b
     9ae:	ec 8e       	std	Y+28, r14	; 0x1c
     9b0:	fd 8e       	std	Y+29, r15	; 0x1d
     9b2:	8a 89       	ldd	r24, Y+18	; 0x12
     9b4:	9b 89       	ldd	r25, Y+19	; 0x13
     9b6:	89 87       	std	Y+9, r24	; 0x09
     9b8:	9a 87       	std	Y+10, r25	; 0x0a
     9ba:	1d 82       	std	Y+5, r1	; 0x05
     9bc:	1e 82       	std	Y+6, r1	; 0x06
     9be:	1f 82       	std	Y+7, r1	; 0x07
     9c0:	18 86       	std	Y+8, r1	; 0x08
     9c2:	1b 86       	std	Y+11, r1	; 0x0b
     9c4:	0e 94 77 14 	call	0x28ee	; 0x28ee <vTaskSuspendAll>
     9c8:	89 85       	ldd	r24, Y+9	; 0x09
     9ca:	9a 85       	ldd	r25, Y+10	; 0x0a
     9cc:	fc 01       	movw	r30, r24
     9ce:	80 81       	ld	r24, Z
     9d0:	91 81       	ldd	r25, Z+1	; 0x01
     9d2:	a2 81       	ldd	r26, Z+2	; 0x02
     9d4:	b3 81       	ldd	r27, Z+3	; 0x03
     9d6:	8c 87       	std	Y+12, r24	; 0x0c
     9d8:	9d 87       	std	Y+13, r25	; 0x0d
     9da:	ae 87       	std	Y+14, r26	; 0x0e
     9dc:	bf 87       	std	Y+15, r27	; 0x0f
     9de:	2c 89       	ldd	r18, Y+20	; 0x14
     9e0:	3d 89       	ldd	r19, Y+21	; 0x15
     9e2:	4e 89       	ldd	r20, Y+22	; 0x16
     9e4:	5f 89       	ldd	r21, Y+23	; 0x17
     9e6:	8c 85       	ldd	r24, Y+12	; 0x0c
     9e8:	9d 85       	ldd	r25, Y+13	; 0x0d
     9ea:	ae 85       	ldd	r26, Y+14	; 0x0e
     9ec:	bf 85       	ldd	r27, Y+15	; 0x0f
     9ee:	09 8d       	ldd	r16, Y+25	; 0x19
     9f0:	bc 01       	movw	r22, r24
     9f2:	cd 01       	movw	r24, r26
     9f4:	0e 94 69 07 	call	0xed2	; 0xed2 <prvTestWaitCondition>
     9f8:	88 8b       	std	Y+16, r24	; 0x10
     9fa:	88 89       	ldd	r24, Y+16	; 0x10
     9fc:	88 23       	and	r24, r24
     9fe:	59 f1       	breq	.+86     	; 0xa56 <xEventGroupWaitBits+0xd6>
     a00:	8c 85       	ldd	r24, Y+12	; 0x0c
     a02:	9d 85       	ldd	r25, Y+13	; 0x0d
     a04:	ae 85       	ldd	r26, Y+14	; 0x0e
     a06:	bf 85       	ldd	r27, Y+15	; 0x0f
     a08:	89 83       	std	Y+1, r24	; 0x01
     a0a:	9a 83       	std	Y+2, r25	; 0x02
     a0c:	ab 83       	std	Y+3, r26	; 0x03
     a0e:	bc 83       	std	Y+4, r27	; 0x04
     a10:	1a 8e       	std	Y+26, r1	; 0x1a
     a12:	1b 8e       	std	Y+27, r1	; 0x1b
     a14:	1c 8e       	std	Y+28, r1	; 0x1c
     a16:	1d 8e       	std	Y+29, r1	; 0x1d
     a18:	88 8d       	ldd	r24, Y+24	; 0x18
     a1a:	88 23       	and	r24, r24
     a1c:	09 f4       	brne	.+2      	; 0xa20 <xEventGroupWaitBits+0xa0>
     a1e:	65 c0       	rjmp	.+202    	; 0xaea <xEventGroupWaitBits+0x16a>
     a20:	89 85       	ldd	r24, Y+9	; 0x09
     a22:	9a 85       	ldd	r25, Y+10	; 0x0a
     a24:	fc 01       	movw	r30, r24
     a26:	20 81       	ld	r18, Z
     a28:	31 81       	ldd	r19, Z+1	; 0x01
     a2a:	42 81       	ldd	r20, Z+2	; 0x02
     a2c:	53 81       	ldd	r21, Z+3	; 0x03
     a2e:	8c 89       	ldd	r24, Y+20	; 0x14
     a30:	9d 89       	ldd	r25, Y+21	; 0x15
     a32:	ae 89       	ldd	r26, Y+22	; 0x16
     a34:	bf 89       	ldd	r27, Y+23	; 0x17
     a36:	80 95       	com	r24
     a38:	90 95       	com	r25
     a3a:	a0 95       	com	r26
     a3c:	b0 95       	com	r27
     a3e:	82 23       	and	r24, r18
     a40:	93 23       	and	r25, r19
     a42:	a4 23       	and	r26, r20
     a44:	b5 23       	and	r27, r21
     a46:	29 85       	ldd	r18, Y+9	; 0x09
     a48:	3a 85       	ldd	r19, Y+10	; 0x0a
     a4a:	f9 01       	movw	r30, r18
     a4c:	80 83       	st	Z, r24
     a4e:	91 83       	std	Z+1, r25	; 0x01
     a50:	a2 83       	std	Z+2, r26	; 0x02
     a52:	b3 83       	std	Z+3, r27	; 0x03
     a54:	4a c0       	rjmp	.+148    	; 0xaea <xEventGroupWaitBits+0x16a>
     a56:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a58:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a5a:	ac 8d       	ldd	r26, Y+28	; 0x1c
     a5c:	bd 8d       	ldd	r27, Y+29	; 0x1d
     a5e:	89 2b       	or	r24, r25
     a60:	8a 2b       	or	r24, r26
     a62:	8b 2b       	or	r24, r27
     a64:	59 f4       	brne	.+22     	; 0xa7c <xEventGroupWaitBits+0xfc>
     a66:	8c 85       	ldd	r24, Y+12	; 0x0c
     a68:	9d 85       	ldd	r25, Y+13	; 0x0d
     a6a:	ae 85       	ldd	r26, Y+14	; 0x0e
     a6c:	bf 85       	ldd	r27, Y+15	; 0x0f
     a6e:	89 83       	std	Y+1, r24	; 0x01
     a70:	9a 83       	std	Y+2, r25	; 0x02
     a72:	ab 83       	std	Y+3, r26	; 0x03
     a74:	bc 83       	std	Y+4, r27	; 0x04
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	8b 87       	std	Y+11, r24	; 0x0b
     a7a:	37 c0       	rjmp	.+110    	; 0xaea <xEventGroupWaitBits+0x16a>
     a7c:	88 8d       	ldd	r24, Y+24	; 0x18
     a7e:	88 23       	and	r24, r24
     a80:	49 f0       	breq	.+18     	; 0xa94 <xEventGroupWaitBits+0x114>
     a82:	8d 81       	ldd	r24, Y+5	; 0x05
     a84:	9e 81       	ldd	r25, Y+6	; 0x06
     a86:	af 81       	ldd	r26, Y+7	; 0x07
     a88:	b8 85       	ldd	r27, Y+8	; 0x08
     a8a:	b1 60       	ori	r27, 0x01	; 1
     a8c:	8d 83       	std	Y+5, r24	; 0x05
     a8e:	9e 83       	std	Y+6, r25	; 0x06
     a90:	af 83       	std	Y+7, r26	; 0x07
     a92:	b8 87       	std	Y+8, r27	; 0x08
     a94:	89 8d       	ldd	r24, Y+25	; 0x19
     a96:	88 23       	and	r24, r24
     a98:	49 f0       	breq	.+18     	; 0xaac <xEventGroupWaitBits+0x12c>
     a9a:	8d 81       	ldd	r24, Y+5	; 0x05
     a9c:	9e 81       	ldd	r25, Y+6	; 0x06
     a9e:	af 81       	ldd	r26, Y+7	; 0x07
     aa0:	b8 85       	ldd	r27, Y+8	; 0x08
     aa2:	b4 60       	ori	r27, 0x04	; 4
     aa4:	8d 83       	std	Y+5, r24	; 0x05
     aa6:	9e 83       	std	Y+6, r25	; 0x06
     aa8:	af 83       	std	Y+7, r26	; 0x07
     aaa:	b8 87       	std	Y+8, r27	; 0x08
     aac:	2c 89       	ldd	r18, Y+20	; 0x14
     aae:	3d 89       	ldd	r19, Y+21	; 0x15
     ab0:	4e 89       	ldd	r20, Y+22	; 0x16
     ab2:	5f 89       	ldd	r21, Y+23	; 0x17
     ab4:	8d 81       	ldd	r24, Y+5	; 0x05
     ab6:	9e 81       	ldd	r25, Y+6	; 0x06
     ab8:	af 81       	ldd	r26, Y+7	; 0x07
     aba:	b8 85       	ldd	r27, Y+8	; 0x08
     abc:	82 2b       	or	r24, r18
     abe:	93 2b       	or	r25, r19
     ac0:	a4 2b       	or	r26, r20
     ac2:	b5 2b       	or	r27, r21
     ac4:	29 85       	ldd	r18, Y+9	; 0x09
     ac6:	3a 85       	ldd	r19, Y+10	; 0x0a
     ac8:	f9 01       	movw	r30, r18
     aca:	34 96       	adiw	r30, 0x04	; 4
     acc:	2a 8d       	ldd	r18, Y+26	; 0x1a
     ace:	3b 8d       	ldd	r19, Y+27	; 0x1b
     ad0:	4c 8d       	ldd	r20, Y+28	; 0x1c
     ad2:	5d 8d       	ldd	r21, Y+29	; 0x1d
     ad4:	89 01       	movw	r16, r18
     ad6:	9a 01       	movw	r18, r20
     ad8:	ac 01       	movw	r20, r24
     ada:	bd 01       	movw	r22, r26
     adc:	cf 01       	movw	r24, r30
     ade:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <vTaskPlaceOnUnorderedEventList>
     ae2:	19 82       	std	Y+1, r1	; 0x01
     ae4:	1a 82       	std	Y+2, r1	; 0x02
     ae6:	1b 82       	std	Y+3, r1	; 0x03
     ae8:	1c 82       	std	Y+4, r1	; 0x04
     aea:	0e 94 84 14 	call	0x2908	; 0x2908 <xTaskResumeAll>
     aee:	89 8b       	std	Y+17, r24	; 0x11
     af0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     af2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     af4:	ac 8d       	ldd	r26, Y+28	; 0x1c
     af6:	bd 8d       	ldd	r27, Y+29	; 0x1d
     af8:	89 2b       	or	r24, r25
     afa:	8a 2b       	or	r24, r26
     afc:	8b 2b       	or	r24, r27
     afe:	09 f4       	brne	.+2      	; 0xb02 <xEventGroupWaitBits+0x182>
     b00:	65 c0       	rjmp	.+202    	; 0xbcc <xEventGroupWaitBits+0x24c>
     b02:	89 89       	ldd	r24, Y+17	; 0x11
     b04:	88 23       	and	r24, r24
     b06:	11 f4       	brne	.+4      	; 0xb0c <xEventGroupWaitBits+0x18c>
     b08:	0e 94 c3 0b 	call	0x1786	; 0x1786 <vPortYield>
     b0c:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <uxTaskResetEventItemValue>
     b10:	dc 01       	movw	r26, r24
     b12:	cb 01       	movw	r24, r22
     b14:	89 83       	std	Y+1, r24	; 0x01
     b16:	9a 83       	std	Y+2, r25	; 0x02
     b18:	ab 83       	std	Y+3, r26	; 0x03
     b1a:	bc 83       	std	Y+4, r27	; 0x04
     b1c:	89 81       	ldd	r24, Y+1	; 0x01
     b1e:	9a 81       	ldd	r25, Y+2	; 0x02
     b20:	ab 81       	ldd	r26, Y+3	; 0x03
     b22:	bc 81       	ldd	r27, Y+4	; 0x04
     b24:	88 27       	eor	r24, r24
     b26:	99 27       	eor	r25, r25
     b28:	aa 27       	eor	r26, r26
     b2a:	b2 70       	andi	r27, 0x02	; 2
     b2c:	89 2b       	or	r24, r25
     b2e:	8a 2b       	or	r24, r26
     b30:	8b 2b       	or	r24, r27
     b32:	09 f0       	breq	.+2      	; 0xb36 <xEventGroupWaitBits+0x1b6>
     b34:	42 c0       	rjmp	.+132    	; 0xbba <xEventGroupWaitBits+0x23a>
     b36:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     b3a:	ff 93       	push	r31
     b3c:	f8 7f       	andi	r31, 0xF8	; 248
     b3e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     b42:	89 85       	ldd	r24, Y+9	; 0x09
     b44:	9a 85       	ldd	r25, Y+10	; 0x0a
     b46:	fc 01       	movw	r30, r24
     b48:	80 81       	ld	r24, Z
     b4a:	91 81       	ldd	r25, Z+1	; 0x01
     b4c:	a2 81       	ldd	r26, Z+2	; 0x02
     b4e:	b3 81       	ldd	r27, Z+3	; 0x03
     b50:	89 83       	std	Y+1, r24	; 0x01
     b52:	9a 83       	std	Y+2, r25	; 0x02
     b54:	ab 83       	std	Y+3, r26	; 0x03
     b56:	bc 83       	std	Y+4, r27	; 0x04
     b58:	2c 89       	ldd	r18, Y+20	; 0x14
     b5a:	3d 89       	ldd	r19, Y+21	; 0x15
     b5c:	4e 89       	ldd	r20, Y+22	; 0x16
     b5e:	5f 89       	ldd	r21, Y+23	; 0x17
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	9a 81       	ldd	r25, Y+2	; 0x02
     b64:	ab 81       	ldd	r26, Y+3	; 0x03
     b66:	bc 81       	ldd	r27, Y+4	; 0x04
     b68:	09 8d       	ldd	r16, Y+25	; 0x19
     b6a:	bc 01       	movw	r22, r24
     b6c:	cd 01       	movw	r24, r26
     b6e:	0e 94 69 07 	call	0xed2	; 0xed2 <prvTestWaitCondition>
     b72:	88 23       	and	r24, r24
     b74:	e9 f0       	breq	.+58     	; 0xbb0 <xEventGroupWaitBits+0x230>
     b76:	88 8d       	ldd	r24, Y+24	; 0x18
     b78:	88 23       	and	r24, r24
     b7a:	d1 f0       	breq	.+52     	; 0xbb0 <xEventGroupWaitBits+0x230>
     b7c:	89 85       	ldd	r24, Y+9	; 0x09
     b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b80:	fc 01       	movw	r30, r24
     b82:	20 81       	ld	r18, Z
     b84:	31 81       	ldd	r19, Z+1	; 0x01
     b86:	42 81       	ldd	r20, Z+2	; 0x02
     b88:	53 81       	ldd	r21, Z+3	; 0x03
     b8a:	8c 89       	ldd	r24, Y+20	; 0x14
     b8c:	9d 89       	ldd	r25, Y+21	; 0x15
     b8e:	ae 89       	ldd	r26, Y+22	; 0x16
     b90:	bf 89       	ldd	r27, Y+23	; 0x17
     b92:	80 95       	com	r24
     b94:	90 95       	com	r25
     b96:	a0 95       	com	r26
     b98:	b0 95       	com	r27
     b9a:	82 23       	and	r24, r18
     b9c:	93 23       	and	r25, r19
     b9e:	a4 23       	and	r26, r20
     ba0:	b5 23       	and	r27, r21
     ba2:	29 85       	ldd	r18, Y+9	; 0x09
     ba4:	3a 85       	ldd	r19, Y+10	; 0x0a
     ba6:	f9 01       	movw	r30, r18
     ba8:	80 83       	st	Z, r24
     baa:	91 83       	std	Z+1, r25	; 0x01
     bac:	a2 83       	std	Z+2, r26	; 0x02
     bae:	b3 83       	std	Z+3, r27	; 0x03
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	8b 87       	std	Y+11, r24	; 0x0b
     bb4:	ff 91       	pop	r31
     bb6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	9a 81       	ldd	r25, Y+2	; 0x02
     bbe:	ab 81       	ldd	r26, Y+3	; 0x03
     bc0:	bc 81       	ldd	r27, Y+4	; 0x04
     bc2:	bb 27       	eor	r27, r27
     bc4:	89 83       	std	Y+1, r24	; 0x01
     bc6:	9a 83       	std	Y+2, r25	; 0x02
     bc8:	ab 83       	std	Y+3, r26	; 0x03
     bca:	bc 83       	std	Y+4, r27	; 0x04
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	9a 81       	ldd	r25, Y+2	; 0x02
     bd0:	ab 81       	ldd	r26, Y+3	; 0x03
     bd2:	bc 81       	ldd	r27, Y+4	; 0x04
     bd4:	bc 01       	movw	r22, r24
     bd6:	cd 01       	movw	r24, r26
     bd8:	6d 96       	adiw	r28, 0x1d	; 29
     bda:	cd bf       	out	0x3d, r28	; 61
     bdc:	de bf       	out	0x3e, r29	; 62
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	1f 91       	pop	r17
     be4:	0f 91       	pop	r16
     be6:	ff 90       	pop	r15
     be8:	ef 90       	pop	r14
     bea:	df 90       	pop	r13
     bec:	cf 90       	pop	r12
     bee:	08 95       	ret

00000bf0 <xEventGroupClearBits>:
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	2c 97       	sbiw	r28, 0x0c	; 12
     bfa:	cd bf       	out	0x3d, r28	; 61
     bfc:	de bf       	out	0x3e, r29	; 62
     bfe:	8f 83       	std	Y+7, r24	; 0x07
     c00:	98 87       	std	Y+8, r25	; 0x08
     c02:	49 87       	std	Y+9, r20	; 0x09
     c04:	5a 87       	std	Y+10, r21	; 0x0a
     c06:	6b 87       	std	Y+11, r22	; 0x0b
     c08:	7c 87       	std	Y+12, r23	; 0x0c
     c0a:	8f 81       	ldd	r24, Y+7	; 0x07
     c0c:	98 85       	ldd	r25, Y+8	; 0x08
     c0e:	89 83       	std	Y+1, r24	; 0x01
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     c16:	ff 93       	push	r31
     c18:	f8 7f       	andi	r31, 0xF8	; 248
     c1a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	9a 81       	ldd	r25, Y+2	; 0x02
     c22:	fc 01       	movw	r30, r24
     c24:	80 81       	ld	r24, Z
     c26:	91 81       	ldd	r25, Z+1	; 0x01
     c28:	a2 81       	ldd	r26, Z+2	; 0x02
     c2a:	b3 81       	ldd	r27, Z+3	; 0x03
     c2c:	8b 83       	std	Y+3, r24	; 0x03
     c2e:	9c 83       	std	Y+4, r25	; 0x04
     c30:	ad 83       	std	Y+5, r26	; 0x05
     c32:	be 83       	std	Y+6, r27	; 0x06
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	9a 81       	ldd	r25, Y+2	; 0x02
     c38:	fc 01       	movw	r30, r24
     c3a:	20 81       	ld	r18, Z
     c3c:	31 81       	ldd	r19, Z+1	; 0x01
     c3e:	42 81       	ldd	r20, Z+2	; 0x02
     c40:	53 81       	ldd	r21, Z+3	; 0x03
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	ab 85       	ldd	r26, Y+11	; 0x0b
     c48:	bc 85       	ldd	r27, Y+12	; 0x0c
     c4a:	80 95       	com	r24
     c4c:	90 95       	com	r25
     c4e:	a0 95       	com	r26
     c50:	b0 95       	com	r27
     c52:	82 23       	and	r24, r18
     c54:	93 23       	and	r25, r19
     c56:	a4 23       	and	r26, r20
     c58:	b5 23       	and	r27, r21
     c5a:	29 81       	ldd	r18, Y+1	; 0x01
     c5c:	3a 81       	ldd	r19, Y+2	; 0x02
     c5e:	f9 01       	movw	r30, r18
     c60:	80 83       	st	Z, r24
     c62:	91 83       	std	Z+1, r25	; 0x01
     c64:	a2 83       	std	Z+2, r26	; 0x02
     c66:	b3 83       	std	Z+3, r27	; 0x03
     c68:	ff 91       	pop	r31
     c6a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	9c 81       	ldd	r25, Y+4	; 0x04
     c72:	ad 81       	ldd	r26, Y+5	; 0x05
     c74:	be 81       	ldd	r27, Y+6	; 0x06
     c76:	bc 01       	movw	r22, r24
     c78:	cd 01       	movw	r24, r26
     c7a:	2c 96       	adiw	r28, 0x0c	; 12
     c7c:	cd bf       	out	0x3d, r28	; 61
     c7e:	de bf       	out	0x3e, r29	; 62
     c80:	df 91       	pop	r29
     c82:	cf 91       	pop	r28
     c84:	08 95       	ret

00000c86 <xEventGroupSetBits>:
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	6d 97       	sbiw	r28, 0x1d	; 29
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	de bf       	out	0x3e, r29	; 62
     c94:	88 8f       	std	Y+24, r24	; 0x18
     c96:	99 8f       	std	Y+25, r25	; 0x19
     c98:	4a 8f       	std	Y+26, r20	; 0x1a
     c9a:	5b 8f       	std	Y+27, r21	; 0x1b
     c9c:	6c 8f       	std	Y+28, r22	; 0x1c
     c9e:	7d 8f       	std	Y+29, r23	; 0x1d
     ca0:	1b 82       	std	Y+3, r1	; 0x03
     ca2:	1c 82       	std	Y+4, r1	; 0x04
     ca4:	1d 82       	std	Y+5, r1	; 0x05
     ca6:	1e 82       	std	Y+6, r1	; 0x06
     ca8:	88 8d       	ldd	r24, Y+24	; 0x18
     caa:	99 8d       	ldd	r25, Y+25	; 0x19
     cac:	88 87       	std	Y+8, r24	; 0x08
     cae:	99 87       	std	Y+9, r25	; 0x09
     cb0:	1f 82       	std	Y+7, r1	; 0x07
     cb2:	88 85       	ldd	r24, Y+8	; 0x08
     cb4:	99 85       	ldd	r25, Y+9	; 0x09
     cb6:	04 96       	adiw	r24, 0x04	; 4
     cb8:	8a 87       	std	Y+10, r24	; 0x0a
     cba:	9b 87       	std	Y+11, r25	; 0x0b
     cbc:	8a 85       	ldd	r24, Y+10	; 0x0a
     cbe:	9b 85       	ldd	r25, Y+11	; 0x0b
     cc0:	03 96       	adiw	r24, 0x03	; 3
     cc2:	8c 87       	std	Y+12, r24	; 0x0c
     cc4:	9d 87       	std	Y+13, r25	; 0x0d
     cc6:	0e 94 77 14 	call	0x28ee	; 0x28ee <vTaskSuspendAll>
     cca:	8a 85       	ldd	r24, Y+10	; 0x0a
     ccc:	9b 85       	ldd	r25, Y+11	; 0x0b
     cce:	fc 01       	movw	r30, r24
     cd0:	87 81       	ldd	r24, Z+7	; 0x07
     cd2:	90 85       	ldd	r25, Z+8	; 0x08
     cd4:	89 83       	std	Y+1, r24	; 0x01
     cd6:	9a 83       	std	Y+2, r25	; 0x02
     cd8:	88 85       	ldd	r24, Y+8	; 0x08
     cda:	99 85       	ldd	r25, Y+9	; 0x09
     cdc:	fc 01       	movw	r30, r24
     cde:	20 81       	ld	r18, Z
     ce0:	31 81       	ldd	r19, Z+1	; 0x01
     ce2:	42 81       	ldd	r20, Z+2	; 0x02
     ce4:	53 81       	ldd	r21, Z+3	; 0x03
     ce6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ce8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     cea:	ac 8d       	ldd	r26, Y+28	; 0x1c
     cec:	bd 8d       	ldd	r27, Y+29	; 0x1d
     cee:	82 2b       	or	r24, r18
     cf0:	93 2b       	or	r25, r19
     cf2:	a4 2b       	or	r26, r20
     cf4:	b5 2b       	or	r27, r21
     cf6:	28 85       	ldd	r18, Y+8	; 0x08
     cf8:	39 85       	ldd	r19, Y+9	; 0x09
     cfa:	f9 01       	movw	r30, r18
     cfc:	80 83       	st	Z, r24
     cfe:	91 83       	std	Z+1, r25	; 0x01
     d00:	a2 83       	std	Z+2, r26	; 0x02
     d02:	b3 83       	std	Z+3, r27	; 0x03
     d04:	95 c0       	rjmp	.+298    	; 0xe30 <xEventGroupSetBits+0x1aa>
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	9a 81       	ldd	r25, Y+2	; 0x02
     d0a:	fc 01       	movw	r30, r24
     d0c:	84 81       	ldd	r24, Z+4	; 0x04
     d0e:	95 81       	ldd	r25, Z+5	; 0x05
     d10:	8e 87       	std	Y+14, r24	; 0x0e
     d12:	9f 87       	std	Y+15, r25	; 0x0f
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	9a 81       	ldd	r25, Y+2	; 0x02
     d18:	fc 01       	movw	r30, r24
     d1a:	80 81       	ld	r24, Z
     d1c:	91 81       	ldd	r25, Z+1	; 0x01
     d1e:	a2 81       	ldd	r26, Z+2	; 0x02
     d20:	b3 81       	ldd	r27, Z+3	; 0x03
     d22:	88 8b       	std	Y+16, r24	; 0x10
     d24:	99 8b       	std	Y+17, r25	; 0x11
     d26:	aa 8b       	std	Y+18, r26	; 0x12
     d28:	bb 8b       	std	Y+19, r27	; 0x13
     d2a:	1f 82       	std	Y+7, r1	; 0x07
     d2c:	88 89       	ldd	r24, Y+16	; 0x10
     d2e:	99 89       	ldd	r25, Y+17	; 0x11
     d30:	aa 89       	ldd	r26, Y+18	; 0x12
     d32:	bb 89       	ldd	r27, Y+19	; 0x13
     d34:	88 27       	eor	r24, r24
     d36:	99 27       	eor	r25, r25
     d38:	aa 27       	eor	r26, r26
     d3a:	8c 8b       	std	Y+20, r24	; 0x14
     d3c:	9d 8b       	std	Y+21, r25	; 0x15
     d3e:	ae 8b       	std	Y+22, r26	; 0x16
     d40:	bf 8b       	std	Y+23, r27	; 0x17
     d42:	88 89       	ldd	r24, Y+16	; 0x10
     d44:	99 89       	ldd	r25, Y+17	; 0x11
     d46:	aa 89       	ldd	r26, Y+18	; 0x12
     d48:	bb 89       	ldd	r27, Y+19	; 0x13
     d4a:	bb 27       	eor	r27, r27
     d4c:	88 8b       	std	Y+16, r24	; 0x10
     d4e:	99 8b       	std	Y+17, r25	; 0x11
     d50:	aa 8b       	std	Y+18, r26	; 0x12
     d52:	bb 8b       	std	Y+19, r27	; 0x13
     d54:	8c 89       	ldd	r24, Y+20	; 0x14
     d56:	9d 89       	ldd	r25, Y+21	; 0x15
     d58:	ae 89       	ldd	r26, Y+22	; 0x16
     d5a:	bf 89       	ldd	r27, Y+23	; 0x17
     d5c:	88 27       	eor	r24, r24
     d5e:	99 27       	eor	r25, r25
     d60:	aa 27       	eor	r26, r26
     d62:	b4 70       	andi	r27, 0x04	; 4
     d64:	89 2b       	or	r24, r25
     d66:	8a 2b       	or	r24, r26
     d68:	8b 2b       	or	r24, r27
     d6a:	b1 f4       	brne	.+44     	; 0xd98 <xEventGroupSetBits+0x112>
     d6c:	88 85       	ldd	r24, Y+8	; 0x08
     d6e:	99 85       	ldd	r25, Y+9	; 0x09
     d70:	fc 01       	movw	r30, r24
     d72:	20 81       	ld	r18, Z
     d74:	31 81       	ldd	r19, Z+1	; 0x01
     d76:	42 81       	ldd	r20, Z+2	; 0x02
     d78:	53 81       	ldd	r21, Z+3	; 0x03
     d7a:	88 89       	ldd	r24, Y+16	; 0x10
     d7c:	99 89       	ldd	r25, Y+17	; 0x11
     d7e:	aa 89       	ldd	r26, Y+18	; 0x12
     d80:	bb 89       	ldd	r27, Y+19	; 0x13
     d82:	82 23       	and	r24, r18
     d84:	93 23       	and	r25, r19
     d86:	a4 23       	and	r26, r20
     d88:	b5 23       	and	r27, r21
     d8a:	89 2b       	or	r24, r25
     d8c:	8a 2b       	or	r24, r26
     d8e:	8b 2b       	or	r24, r27
     d90:	e9 f0       	breq	.+58     	; 0xdcc <xEventGroupSetBits+0x146>
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	8f 83       	std	Y+7, r24	; 0x07
     d96:	1a c0       	rjmp	.+52     	; 0xdcc <xEventGroupSetBits+0x146>
     d98:	88 85       	ldd	r24, Y+8	; 0x08
     d9a:	99 85       	ldd	r25, Y+9	; 0x09
     d9c:	fc 01       	movw	r30, r24
     d9e:	20 81       	ld	r18, Z
     da0:	31 81       	ldd	r19, Z+1	; 0x01
     da2:	42 81       	ldd	r20, Z+2	; 0x02
     da4:	53 81       	ldd	r21, Z+3	; 0x03
     da6:	88 89       	ldd	r24, Y+16	; 0x10
     da8:	99 89       	ldd	r25, Y+17	; 0x11
     daa:	aa 89       	ldd	r26, Y+18	; 0x12
     dac:	bb 89       	ldd	r27, Y+19	; 0x13
     dae:	28 23       	and	r18, r24
     db0:	39 23       	and	r19, r25
     db2:	4a 23       	and	r20, r26
     db4:	5b 23       	and	r21, r27
     db6:	88 89       	ldd	r24, Y+16	; 0x10
     db8:	99 89       	ldd	r25, Y+17	; 0x11
     dba:	aa 89       	ldd	r26, Y+18	; 0x12
     dbc:	bb 89       	ldd	r27, Y+19	; 0x13
     dbe:	28 17       	cp	r18, r24
     dc0:	39 07       	cpc	r19, r25
     dc2:	4a 07       	cpc	r20, r26
     dc4:	5b 07       	cpc	r21, r27
     dc6:	11 f4       	brne	.+4      	; 0xdcc <xEventGroupSetBits+0x146>
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	8f 83       	std	Y+7, r24	; 0x07
     dcc:	8f 81       	ldd	r24, Y+7	; 0x07
     dce:	88 23       	and	r24, r24
     dd0:	59 f1       	breq	.+86     	; 0xe28 <xEventGroupSetBits+0x1a2>
     dd2:	8c 89       	ldd	r24, Y+20	; 0x14
     dd4:	9d 89       	ldd	r25, Y+21	; 0x15
     dd6:	ae 89       	ldd	r26, Y+22	; 0x16
     dd8:	bf 89       	ldd	r27, Y+23	; 0x17
     dda:	88 27       	eor	r24, r24
     ddc:	99 27       	eor	r25, r25
     dde:	aa 27       	eor	r26, r26
     de0:	b1 70       	andi	r27, 0x01	; 1
     de2:	89 2b       	or	r24, r25
     de4:	8a 2b       	or	r24, r26
     de6:	8b 2b       	or	r24, r27
     de8:	81 f0       	breq	.+32     	; 0xe0a <xEventGroupSetBits+0x184>
     dea:	2b 81       	ldd	r18, Y+3	; 0x03
     dec:	3c 81       	ldd	r19, Y+4	; 0x04
     dee:	4d 81       	ldd	r20, Y+5	; 0x05
     df0:	5e 81       	ldd	r21, Y+6	; 0x06
     df2:	88 89       	ldd	r24, Y+16	; 0x10
     df4:	99 89       	ldd	r25, Y+17	; 0x11
     df6:	aa 89       	ldd	r26, Y+18	; 0x12
     df8:	bb 89       	ldd	r27, Y+19	; 0x13
     dfa:	82 2b       	or	r24, r18
     dfc:	93 2b       	or	r25, r19
     dfe:	a4 2b       	or	r26, r20
     e00:	b5 2b       	or	r27, r21
     e02:	8b 83       	std	Y+3, r24	; 0x03
     e04:	9c 83       	std	Y+4, r25	; 0x04
     e06:	ad 83       	std	Y+5, r26	; 0x05
     e08:	be 83       	std	Y+6, r27	; 0x06
     e0a:	88 85       	ldd	r24, Y+8	; 0x08
     e0c:	99 85       	ldd	r25, Y+9	; 0x09
     e0e:	fc 01       	movw	r30, r24
     e10:	80 81       	ld	r24, Z
     e12:	91 81       	ldd	r25, Z+1	; 0x01
     e14:	a2 81       	ldd	r26, Z+2	; 0x02
     e16:	b3 81       	ldd	r27, Z+3	; 0x03
     e18:	b2 60       	ori	r27, 0x02	; 2
     e1a:	29 81       	ldd	r18, Y+1	; 0x01
     e1c:	3a 81       	ldd	r19, Y+2	; 0x02
     e1e:	ac 01       	movw	r20, r24
     e20:	bd 01       	movw	r22, r26
     e22:	c9 01       	movw	r24, r18
     e24:	0e 94 25 18 	call	0x304a	; 0x304a <vTaskRemoveFromUnorderedEventList>
     e28:	8e 85       	ldd	r24, Y+14	; 0x0e
     e2a:	9f 85       	ldd	r25, Y+15	; 0x0f
     e2c:	89 83       	std	Y+1, r24	; 0x01
     e2e:	9a 83       	std	Y+2, r25	; 0x02
     e30:	29 81       	ldd	r18, Y+1	; 0x01
     e32:	3a 81       	ldd	r19, Y+2	; 0x02
     e34:	8c 85       	ldd	r24, Y+12	; 0x0c
     e36:	9d 85       	ldd	r25, Y+13	; 0x0d
     e38:	28 17       	cp	r18, r24
     e3a:	39 07       	cpc	r19, r25
     e3c:	09 f0       	breq	.+2      	; 0xe40 <xEventGroupSetBits+0x1ba>
     e3e:	63 cf       	rjmp	.-314    	; 0xd06 <xEventGroupSetBits+0x80>
     e40:	88 85       	ldd	r24, Y+8	; 0x08
     e42:	99 85       	ldd	r25, Y+9	; 0x09
     e44:	fc 01       	movw	r30, r24
     e46:	20 81       	ld	r18, Z
     e48:	31 81       	ldd	r19, Z+1	; 0x01
     e4a:	42 81       	ldd	r20, Z+2	; 0x02
     e4c:	53 81       	ldd	r21, Z+3	; 0x03
     e4e:	8b 81       	ldd	r24, Y+3	; 0x03
     e50:	9c 81       	ldd	r25, Y+4	; 0x04
     e52:	ad 81       	ldd	r26, Y+5	; 0x05
     e54:	be 81       	ldd	r27, Y+6	; 0x06
     e56:	80 95       	com	r24
     e58:	90 95       	com	r25
     e5a:	a0 95       	com	r26
     e5c:	b0 95       	com	r27
     e5e:	82 23       	and	r24, r18
     e60:	93 23       	and	r25, r19
     e62:	a4 23       	and	r26, r20
     e64:	b5 23       	and	r27, r21
     e66:	28 85       	ldd	r18, Y+8	; 0x08
     e68:	39 85       	ldd	r19, Y+9	; 0x09
     e6a:	f9 01       	movw	r30, r18
     e6c:	80 83       	st	Z, r24
     e6e:	91 83       	std	Z+1, r25	; 0x01
     e70:	a2 83       	std	Z+2, r26	; 0x02
     e72:	b3 83       	std	Z+3, r27	; 0x03
     e74:	0e 94 84 14 	call	0x2908	; 0x2908 <xTaskResumeAll>
     e78:	88 85       	ldd	r24, Y+8	; 0x08
     e7a:	99 85       	ldd	r25, Y+9	; 0x09
     e7c:	fc 01       	movw	r30, r24
     e7e:	80 81       	ld	r24, Z
     e80:	91 81       	ldd	r25, Z+1	; 0x01
     e82:	a2 81       	ldd	r26, Z+2	; 0x02
     e84:	b3 81       	ldd	r27, Z+3	; 0x03
     e86:	bc 01       	movw	r22, r24
     e88:	cd 01       	movw	r24, r26
     e8a:	6d 96       	adiw	r28, 0x1d	; 29
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	de bf       	out	0x3e, r29	; 62
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	08 95       	ret

00000e96 <vEventGroupSetBitsCallback>:
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <vEventGroupSetBitsCallback+0x6>
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <vEventGroupSetBitsCallback+0x8>
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	9a 83       	std	Y+2, r25	; 0x02
     ea6:	4b 83       	std	Y+3, r20	; 0x03
     ea8:	5c 83       	std	Y+4, r21	; 0x04
     eaa:	6d 83       	std	Y+5, r22	; 0x05
     eac:	7e 83       	std	Y+6, r23	; 0x06
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	9c 81       	ldd	r25, Y+4	; 0x04
     eb2:	ad 81       	ldd	r26, Y+5	; 0x05
     eb4:	be 81       	ldd	r27, Y+6	; 0x06
     eb6:	29 81       	ldd	r18, Y+1	; 0x01
     eb8:	3a 81       	ldd	r19, Y+2	; 0x02
     eba:	ac 01       	movw	r20, r24
     ebc:	bd 01       	movw	r22, r26
     ebe:	c9 01       	movw	r24, r18
     ec0:	0e 94 43 06 	call	0xc86	; 0xc86 <xEventGroupSetBits>
     ec4:	00 00       	nop
     ec6:	26 96       	adiw	r28, 0x06	; 6
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	08 95       	ret

00000ed2 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
     ed2:	0f 93       	push	r16
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	2a 97       	sbiw	r28, 0x0a	; 10
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	6a 83       	std	Y+2, r22	; 0x02
     ee4:	7b 83       	std	Y+3, r23	; 0x03
     ee6:	8c 83       	std	Y+4, r24	; 0x04
     ee8:	9d 83       	std	Y+5, r25	; 0x05
     eea:	2e 83       	std	Y+6, r18	; 0x06
     eec:	3f 83       	std	Y+7, r19	; 0x07
     eee:	48 87       	std	Y+8, r20	; 0x08
     ef0:	59 87       	std	Y+9, r21	; 0x09
     ef2:	0a 87       	std	Y+10, r16	; 0x0a
BaseType_t xWaitConditionMet = pdFALSE;
     ef4:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
     ef6:	8a 85       	ldd	r24, Y+10	; 0x0a
     ef8:	88 23       	and	r24, r24
     efa:	99 f4       	brne	.+38     	; 0xf22 <prvTestWaitCondition+0x50>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     efc:	2a 81       	ldd	r18, Y+2	; 0x02
     efe:	3b 81       	ldd	r19, Y+3	; 0x03
     f00:	4c 81       	ldd	r20, Y+4	; 0x04
     f02:	5d 81       	ldd	r21, Y+5	; 0x05
     f04:	8e 81       	ldd	r24, Y+6	; 0x06
     f06:	9f 81       	ldd	r25, Y+7	; 0x07
     f08:	a8 85       	ldd	r26, Y+8	; 0x08
     f0a:	b9 85       	ldd	r27, Y+9	; 0x09
     f0c:	82 23       	and	r24, r18
     f0e:	93 23       	and	r25, r19
     f10:	a4 23       	and	r26, r20
     f12:	b5 23       	and	r27, r21
     f14:	89 2b       	or	r24, r25
     f16:	8a 2b       	or	r24, r26
     f18:	8b 2b       	or	r24, r27
     f1a:	d1 f0       	breq	.+52     	; 0xf50 <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	89 83       	std	Y+1, r24	; 0x01
     f20:	17 c0       	rjmp	.+46     	; 0xf50 <prvTestWaitCondition+0x7e>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     f22:	2a 81       	ldd	r18, Y+2	; 0x02
     f24:	3b 81       	ldd	r19, Y+3	; 0x03
     f26:	4c 81       	ldd	r20, Y+4	; 0x04
     f28:	5d 81       	ldd	r21, Y+5	; 0x05
     f2a:	8e 81       	ldd	r24, Y+6	; 0x06
     f2c:	9f 81       	ldd	r25, Y+7	; 0x07
     f2e:	a8 85       	ldd	r26, Y+8	; 0x08
     f30:	b9 85       	ldd	r27, Y+9	; 0x09
     f32:	28 23       	and	r18, r24
     f34:	39 23       	and	r19, r25
     f36:	4a 23       	and	r20, r26
     f38:	5b 23       	and	r21, r27
     f3a:	8e 81       	ldd	r24, Y+6	; 0x06
     f3c:	9f 81       	ldd	r25, Y+7	; 0x07
     f3e:	a8 85       	ldd	r26, Y+8	; 0x08
     f40:	b9 85       	ldd	r27, Y+9	; 0x09
     f42:	28 17       	cp	r18, r24
     f44:	39 07       	cpc	r19, r25
     f46:	4a 07       	cpc	r20, r26
     f48:	5b 07       	cpc	r21, r27
     f4a:	11 f4       	brne	.+4      	; 0xf50 <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
     f50:	89 81       	ldd	r24, Y+1	; 0x01
}
     f52:	2a 96       	adiw	r28, 0x0a	; 10
     f54:	cd bf       	out	0x3d, r28	; 61
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	0f 91       	pop	r16
     f5e:	08 95       	ret

00000f60 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	29 97       	sbiw	r28, 0x09	; 9
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	8a 83       	std	Y+2, r24	; 0x02
     f74:	9b 83       	std	Y+3, r25	; 0x03
     f76:	4c 83       	std	Y+4, r20	; 0x04
     f78:	5d 83       	std	Y+5, r21	; 0x05
     f7a:	6e 83       	std	Y+6, r22	; 0x06
     f7c:	7f 83       	std	Y+7, r23	; 0x07
     f7e:	28 87       	std	Y+8, r18	; 0x08
     f80:	39 87       	std	Y+9, r19	; 0x09
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     f82:	28 85       	ldd	r18, Y+8	; 0x08
     f84:	39 85       	ldd	r19, Y+9	; 0x09
     f86:	8c 81       	ldd	r24, Y+4	; 0x04
     f88:	9d 81       	ldd	r25, Y+5	; 0x05
     f8a:	ae 81       	ldd	r26, Y+6	; 0x06
     f8c:	bf 81       	ldd	r27, Y+7	; 0x07
     f8e:	6a 81       	ldd	r22, Y+2	; 0x02
     f90:	7b 81       	ldd	r23, Y+3	; 0x03
     f92:	89 01       	movw	r16, r18
     f94:	9c 01       	movw	r18, r24
     f96:	ad 01       	movw	r20, r26
     f98:	8b e4       	ldi	r24, 0x4B	; 75
     f9a:	97 e0       	ldi	r25, 0x07	; 7
     f9c:	0e 94 8b 22 	call	0x4516	; 0x4516 <xTimerPendFunctionCallFromISR>
     fa0:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
	}
     fa4:	29 96       	adiw	r28, 0x09	; 9
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	1f 91       	pop	r17
     fb0:	0f 91       	pop	r16
     fb2:	08 95       	ret

00000fb4 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	00 d0       	rcall	.+0      	; 0xfba <pvPortMalloc+0x6>
     fba:	1f 92       	push	r1
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	8b 83       	std	Y+3, r24	; 0x03
     fc2:	9c 83       	std	Y+4, r25	; 0x04
void *pvReturn = NULL; 
     fc4:	19 82       	std	Y+1, r1	; 0x01
     fc6:	1a 82       	std	Y+2, r1	; 0x02
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     fc8:	0e 94 77 14 	call	0x28ee	; 0x28ee <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     fcc:	20 91 18 2c 	lds	r18, 0x2C18	; 0x802c18 <xNextFreeByte>
     fd0:	30 91 19 2c 	lds	r19, 0x2C19	; 0x802c19 <xNextFreeByte+0x1>
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	9c 81       	ldd	r25, Y+4	; 0x04
     fd8:	82 0f       	add	r24, r18
     fda:	93 1f       	adc	r25, r19
     fdc:	88 3b       	cpi	r24, 0xB8	; 184
     fde:	9b 40       	sbci	r25, 0x0B	; 11
     fe0:	18 f5       	brcc	.+70     	; 0x1028 <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     fe2:	20 91 18 2c 	lds	r18, 0x2C18	; 0x802c18 <xNextFreeByte>
     fe6:	30 91 19 2c 	lds	r19, 0x2C19	; 0x802c19 <xNextFreeByte+0x1>
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	9c 81       	ldd	r25, Y+4	; 0x04
     fee:	28 0f       	add	r18, r24
     ff0:	39 1f       	adc	r19, r25
     ff2:	80 91 18 2c 	lds	r24, 0x2C18	; 0x802c18 <xNextFreeByte>
     ff6:	90 91 19 2c 	lds	r25, 0x2C19	; 0x802c19 <xNextFreeByte+0x1>
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     ffa:	82 17       	cp	r24, r18
     ffc:	93 07       	cpc	r25, r19
     ffe:	a0 f4       	brcc	.+40     	; 0x1028 <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    1000:	80 91 18 2c 	lds	r24, 0x2C18	; 0x802c18 <xNextFreeByte>
    1004:	90 91 19 2c 	lds	r25, 0x2C19	; 0x802c19 <xNextFreeByte+0x1>
    1008:	80 5a       	subi	r24, 0xA0	; 160
    100a:	9f 4d       	sbci	r25, 0xDF	; 223
    100c:	89 83       	std	Y+1, r24	; 0x01
    100e:	9a 83       	std	Y+2, r25	; 0x02
			xNextFreeByte += xWantedSize;			
    1010:	20 91 18 2c 	lds	r18, 0x2C18	; 0x802c18 <xNextFreeByte>
    1014:	30 91 19 2c 	lds	r19, 0x2C19	; 0x802c19 <xNextFreeByte+0x1>
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	9c 81       	ldd	r25, Y+4	; 0x04
    101c:	82 0f       	add	r24, r18
    101e:	93 1f       	adc	r25, r19
    1020:	80 93 18 2c 	sts	0x2C18, r24	; 0x802c18 <xNextFreeByte>
    1024:	90 93 19 2c 	sts	0x2C19, r25	; 0x802c19 <xNextFreeByte+0x1>
		}	
	}
	xTaskResumeAll();
    1028:	0e 94 84 14 	call	0x2908	; 0x2908 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1030:	24 96       	adiw	r28, 0x04	; 4
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	08 95       	ret

0000103c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	1f 92       	push	r1
    1042:	1f 92       	push	r1
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	9a 83       	std	Y+2, r25	; 0x02
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
	
	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    104c:	00 00       	nop
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	08 95       	ret

00001058 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	1f 92       	push	r1
    105e:	1f 92       	push	r1
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	9a 83       	std	Y+2, r25	; 0x02
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	9a 81       	ldd	r25, Y+2	; 0x02
    106c:	9c 01       	movw	r18, r24
    106e:	2d 5f       	subi	r18, 0xFD	; 253
    1070:	3f 4f       	sbci	r19, 0xFF	; 255
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	9a 81       	ldd	r25, Y+2	; 0x02
    1076:	fc 01       	movw	r30, r24
    1078:	21 83       	std	Z+1, r18	; 0x01
    107a:	32 83       	std	Z+2, r19	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    107c:	29 81       	ldd	r18, Y+1	; 0x01
    107e:	3a 81       	ldd	r19, Y+2	; 0x02
    1080:	8f ef       	ldi	r24, 0xFF	; 255
    1082:	9f ef       	ldi	r25, 0xFF	; 255
    1084:	dc 01       	movw	r26, r24
    1086:	f9 01       	movw	r30, r18
    1088:	83 83       	std	Z+3, r24	; 0x03
    108a:	94 83       	std	Z+4, r25	; 0x04
    108c:	a5 83       	std	Z+5, r26	; 0x05
    108e:	b6 83       	std	Z+6, r27	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	9a 81       	ldd	r25, Y+2	; 0x02
    1094:	9c 01       	movw	r18, r24
    1096:	2d 5f       	subi	r18, 0xFD	; 253
    1098:	3f 4f       	sbci	r19, 0xFF	; 255
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	9a 81       	ldd	r25, Y+2	; 0x02
    109e:	fc 01       	movw	r30, r24
    10a0:	27 83       	std	Z+7, r18	; 0x07
    10a2:	30 87       	std	Z+8, r19	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	9a 81       	ldd	r25, Y+2	; 0x02
    10a8:	9c 01       	movw	r18, r24
    10aa:	2d 5f       	subi	r18, 0xFD	; 253
    10ac:	3f 4f       	sbci	r19, 0xFF	; 255
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	9a 81       	ldd	r25, Y+2	; 0x02
    10b2:	fc 01       	movw	r30, r24
    10b4:	21 87       	std	Z+9, r18	; 0x09
    10b6:	32 87       	std	Z+10, r19	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	9a 81       	ldd	r25, Y+2	; 0x02
    10bc:	fc 01       	movw	r30, r24
    10be:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    10c0:	00 00       	nop
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	08 95       	ret

000010cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	1f 92       	push	r1
    10d2:	1f 92       	push	r1
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	9a 83       	std	Y+2, r25	; 0x02
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	9a 81       	ldd	r25, Y+2	; 0x02
    10e0:	fc 01       	movw	r30, r24
    10e2:	12 86       	std	Z+10, r1	; 0x0a
    10e4:	13 86       	std	Z+11, r1	; 0x0b

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    10e6:	00 00       	nop
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	08 95       	ret

000010f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <vListInsertEnd+0x6>
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <vListInsertEnd+0x8>
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	8b 83       	std	Y+3, r24	; 0x03
    1100:	9c 83       	std	Y+4, r25	; 0x04
    1102:	6d 83       	std	Y+5, r22	; 0x05
    1104:	7e 83       	std	Y+6, r23	; 0x06
ListItem_t * const pxIndex = pxList->pxIndex;
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	fc 01       	movw	r30, r24
    110c:	81 81       	ldd	r24, Z+1	; 0x01
    110e:	92 81       	ldd	r25, Z+2	; 0x02
    1110:	89 83       	std	Y+1, r24	; 0x01
    1112:	9a 83       	std	Y+2, r25	; 0x02
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1114:	8d 81       	ldd	r24, Y+5	; 0x05
    1116:	9e 81       	ldd	r25, Y+6	; 0x06
    1118:	29 81       	ldd	r18, Y+1	; 0x01
    111a:	3a 81       	ldd	r19, Y+2	; 0x02
    111c:	fc 01       	movw	r30, r24
    111e:	24 83       	std	Z+4, r18	; 0x04
    1120:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	9a 81       	ldd	r25, Y+2	; 0x02
    1126:	fc 01       	movw	r30, r24
    1128:	26 81       	ldd	r18, Z+6	; 0x06
    112a:	37 81       	ldd	r19, Z+7	; 0x07
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	fc 01       	movw	r30, r24
    1132:	26 83       	std	Z+6, r18	; 0x06
    1134:	37 83       	std	Z+7, r19	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	9a 81       	ldd	r25, Y+2	; 0x02
    113a:	fc 01       	movw	r30, r24
    113c:	86 81       	ldd	r24, Z+6	; 0x06
    113e:	97 81       	ldd	r25, Z+7	; 0x07
    1140:	2d 81       	ldd	r18, Y+5	; 0x05
    1142:	3e 81       	ldd	r19, Y+6	; 0x06
    1144:	fc 01       	movw	r30, r24
    1146:	24 83       	std	Z+4, r18	; 0x04
    1148:	35 83       	std	Z+5, r19	; 0x05
	pxIndex->pxPrevious = pxNewListItem;
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	9a 81       	ldd	r25, Y+2	; 0x02
    114e:	2d 81       	ldd	r18, Y+5	; 0x05
    1150:	3e 81       	ldd	r19, Y+6	; 0x06
    1152:	fc 01       	movw	r30, r24
    1154:	26 83       	std	Z+6, r18	; 0x06
    1156:	37 83       	std	Z+7, r19	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1158:	8d 81       	ldd	r24, Y+5	; 0x05
    115a:	9e 81       	ldd	r25, Y+6	; 0x06
    115c:	2b 81       	ldd	r18, Y+3	; 0x03
    115e:	3c 81       	ldd	r19, Y+4	; 0x04
    1160:	fc 01       	movw	r30, r24
    1162:	22 87       	std	Z+10, r18	; 0x0a
    1164:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	9c 81       	ldd	r25, Y+4	; 0x04
    116a:	fc 01       	movw	r30, r24
    116c:	80 81       	ld	r24, Z
    116e:	21 e0       	ldi	r18, 0x01	; 1
    1170:	28 0f       	add	r18, r24
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	9c 81       	ldd	r25, Y+4	; 0x04
    1176:	fc 01       	movw	r30, r24
    1178:	20 83       	st	Z, r18
}
    117a:	00 00       	nop
    117c:	26 96       	adiw	r28, 0x06	; 6
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	08 95       	ret

00001188 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	2a 97       	sbiw	r28, 0x0a	; 10
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	8f 83       	std	Y+7, r24	; 0x07
    1198:	98 87       	std	Y+8, r25	; 0x08
    119a:	69 87       	std	Y+9, r22	; 0x09
    119c:	7a 87       	std	Y+10, r23	; 0x0a
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    119e:	89 85       	ldd	r24, Y+9	; 0x09
    11a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a2:	fc 01       	movw	r30, r24
    11a4:	80 81       	ld	r24, Z
    11a6:	91 81       	ldd	r25, Z+1	; 0x01
    11a8:	a2 81       	ldd	r26, Z+2	; 0x02
    11aa:	b3 81       	ldd	r27, Z+3	; 0x03
    11ac:	8b 83       	std	Y+3, r24	; 0x03
    11ae:	9c 83       	std	Y+4, r25	; 0x04
    11b0:	ad 83       	std	Y+5, r26	; 0x05
    11b2:	be 83       	std	Y+6, r27	; 0x06
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	ad 81       	ldd	r26, Y+5	; 0x05
    11ba:	be 81       	ldd	r27, Y+6	; 0x06
    11bc:	8f 3f       	cpi	r24, 0xFF	; 255
    11be:	9f 4f       	sbci	r25, 0xFF	; 255
    11c0:	af 4f       	sbci	r26, 0xFF	; 255
    11c2:	bf 4f       	sbci	r27, 0xFF	; 255
    11c4:	41 f4       	brne	.+16     	; 0x11d6 <vListInsert+0x4e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    11c6:	8f 81       	ldd	r24, Y+7	; 0x07
    11c8:	98 85       	ldd	r25, Y+8	; 0x08
    11ca:	fc 01       	movw	r30, r24
    11cc:	81 85       	ldd	r24, Z+9	; 0x09
    11ce:	92 85       	ldd	r25, Z+10	; 0x0a
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	9a 83       	std	Y+2, r25	; 0x02
    11d4:	20 c0       	rjmp	.+64     	; 0x1216 <vListInsert+0x8e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    11d6:	8f 81       	ldd	r24, Y+7	; 0x07
    11d8:	98 85       	ldd	r25, Y+8	; 0x08
    11da:	03 96       	adiw	r24, 0x03	; 3
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	9a 83       	std	Y+2, r25	; 0x02
    11e0:	07 c0       	rjmp	.+14     	; 0x11f0 <vListInsert+0x68>
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	9a 81       	ldd	r25, Y+2	; 0x02
    11e6:	fc 01       	movw	r30, r24
    11e8:	84 81       	ldd	r24, Z+4	; 0x04
    11ea:	95 81       	ldd	r25, Z+5	; 0x05
    11ec:	89 83       	std	Y+1, r24	; 0x01
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	9a 81       	ldd	r25, Y+2	; 0x02
    11f4:	fc 01       	movw	r30, r24
    11f6:	84 81       	ldd	r24, Z+4	; 0x04
    11f8:	95 81       	ldd	r25, Z+5	; 0x05
    11fa:	fc 01       	movw	r30, r24
    11fc:	20 81       	ld	r18, Z
    11fe:	31 81       	ldd	r19, Z+1	; 0x01
    1200:	42 81       	ldd	r20, Z+2	; 0x02
    1202:	53 81       	ldd	r21, Z+3	; 0x03
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	ad 81       	ldd	r26, Y+5	; 0x05
    120a:	be 81       	ldd	r27, Y+6	; 0x06
    120c:	82 17       	cp	r24, r18
    120e:	93 07       	cpc	r25, r19
    1210:	a4 07       	cpc	r26, r20
    1212:	b5 07       	cpc	r27, r21
    1214:	30 f7       	brcc	.-52     	; 0x11e2 <vListInsert+0x5a>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	9a 81       	ldd	r25, Y+2	; 0x02
    121a:	fc 01       	movw	r30, r24
    121c:	24 81       	ldd	r18, Z+4	; 0x04
    121e:	35 81       	ldd	r19, Z+5	; 0x05
    1220:	89 85       	ldd	r24, Y+9	; 0x09
    1222:	9a 85       	ldd	r25, Y+10	; 0x0a
    1224:	fc 01       	movw	r30, r24
    1226:	24 83       	std	Z+4, r18	; 0x04
    1228:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    122a:	89 85       	ldd	r24, Y+9	; 0x09
    122c:	9a 85       	ldd	r25, Y+10	; 0x0a
    122e:	fc 01       	movw	r30, r24
    1230:	84 81       	ldd	r24, Z+4	; 0x04
    1232:	95 81       	ldd	r25, Z+5	; 0x05
    1234:	29 85       	ldd	r18, Y+9	; 0x09
    1236:	3a 85       	ldd	r19, Y+10	; 0x0a
    1238:	fc 01       	movw	r30, r24
    123a:	26 83       	std	Z+6, r18	; 0x06
    123c:	37 83       	std	Z+7, r19	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
    123e:	89 85       	ldd	r24, Y+9	; 0x09
    1240:	9a 85       	ldd	r25, Y+10	; 0x0a
    1242:	29 81       	ldd	r18, Y+1	; 0x01
    1244:	3a 81       	ldd	r19, Y+2	; 0x02
    1246:	fc 01       	movw	r30, r24
    1248:	26 83       	std	Z+6, r18	; 0x06
    124a:	37 83       	std	Z+7, r19	; 0x07
	pxIterator->pxNext = pxNewListItem;
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	9a 81       	ldd	r25, Y+2	; 0x02
    1250:	29 85       	ldd	r18, Y+9	; 0x09
    1252:	3a 85       	ldd	r19, Y+10	; 0x0a
    1254:	fc 01       	movw	r30, r24
    1256:	24 83       	std	Z+4, r18	; 0x04
    1258:	35 83       	std	Z+5, r19	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    125a:	89 85       	ldd	r24, Y+9	; 0x09
    125c:	9a 85       	ldd	r25, Y+10	; 0x0a
    125e:	2f 81       	ldd	r18, Y+7	; 0x07
    1260:	38 85       	ldd	r19, Y+8	; 0x08
    1262:	fc 01       	movw	r30, r24
    1264:	22 87       	std	Z+10, r18	; 0x0a
    1266:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
    1268:	8f 81       	ldd	r24, Y+7	; 0x07
    126a:	98 85       	ldd	r25, Y+8	; 0x08
    126c:	fc 01       	movw	r30, r24
    126e:	80 81       	ld	r24, Z
    1270:	21 e0       	ldi	r18, 0x01	; 1
    1272:	28 0f       	add	r18, r24
    1274:	8f 81       	ldd	r24, Y+7	; 0x07
    1276:	98 85       	ldd	r25, Y+8	; 0x08
    1278:	fc 01       	movw	r30, r24
    127a:	20 83       	st	Z, r18
}
    127c:	00 00       	nop
    127e:	2a 96       	adiw	r28, 0x0a	; 10
    1280:	cd bf       	out	0x3d, r28	; 61
    1282:	de bf       	out	0x3e, r29	; 62
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	08 95       	ret

0000128a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	00 d0       	rcall	.+0      	; 0x1290 <uxListRemove+0x6>
    1290:	1f 92       	push	r1
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
    1296:	8b 83       	std	Y+3, r24	; 0x03
    1298:	9c 83       	std	Y+4, r25	; 0x04
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	fc 01       	movw	r30, r24
    12a0:	82 85       	ldd	r24, Z+10	; 0x0a
    12a2:	93 85       	ldd	r25, Z+11	; 0x0b
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	9a 83       	std	Y+2, r25	; 0x02

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	9c 81       	ldd	r25, Y+4	; 0x04
    12ac:	fc 01       	movw	r30, r24
    12ae:	84 81       	ldd	r24, Z+4	; 0x04
    12b0:	95 81       	ldd	r25, Z+5	; 0x05
    12b2:	2b 81       	ldd	r18, Y+3	; 0x03
    12b4:	3c 81       	ldd	r19, Y+4	; 0x04
    12b6:	f9 01       	movw	r30, r18
    12b8:	26 81       	ldd	r18, Z+6	; 0x06
    12ba:	37 81       	ldd	r19, Z+7	; 0x07
    12bc:	fc 01       	movw	r30, r24
    12be:	26 83       	std	Z+6, r18	; 0x06
    12c0:	37 83       	std	Z+7, r19	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	fc 01       	movw	r30, r24
    12c8:	86 81       	ldd	r24, Z+6	; 0x06
    12ca:	97 81       	ldd	r25, Z+7	; 0x07
    12cc:	2b 81       	ldd	r18, Y+3	; 0x03
    12ce:	3c 81       	ldd	r19, Y+4	; 0x04
    12d0:	f9 01       	movw	r30, r18
    12d2:	24 81       	ldd	r18, Z+4	; 0x04
    12d4:	35 81       	ldd	r19, Z+5	; 0x05
    12d6:	fc 01       	movw	r30, r24
    12d8:	24 83       	std	Z+4, r18	; 0x04
    12da:	35 83       	std	Z+5, r19	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	9a 81       	ldd	r25, Y+2	; 0x02
    12e0:	fc 01       	movw	r30, r24
    12e2:	21 81       	ldd	r18, Z+1	; 0x01
    12e4:	32 81       	ldd	r19, Z+2	; 0x02
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	28 17       	cp	r18, r24
    12ec:	39 07       	cpc	r19, r25
    12ee:	51 f4       	brne	.+20     	; 0x1304 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	fc 01       	movw	r30, r24
    12f6:	26 81       	ldd	r18, Z+6	; 0x06
    12f8:	37 81       	ldd	r19, Z+7	; 0x07
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	9a 81       	ldd	r25, Y+2	; 0x02
    12fe:	fc 01       	movw	r30, r24
    1300:	21 83       	std	Z+1, r18	; 0x01
    1302:	32 83       	std	Z+2, r19	; 0x02
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	9c 81       	ldd	r25, Y+4	; 0x04
    1308:	fc 01       	movw	r30, r24
    130a:	12 86       	std	Z+10, r1	; 0x0a
    130c:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	9a 81       	ldd	r25, Y+2	; 0x02
    1312:	fc 01       	movw	r30, r24
    1314:	80 81       	ld	r24, Z
    1316:	2f ef       	ldi	r18, 0xFF	; 255
    1318:	28 0f       	add	r18, r24
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	9a 81       	ldd	r25, Y+2	; 0x02
    131e:	fc 01       	movw	r30, r24
    1320:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	9a 81       	ldd	r25, Y+2	; 0x02
    1326:	fc 01       	movw	r30, r24
    1328:	80 81       	ld	r24, Z
}
    132a:	24 96       	adiw	r28, 0x04	; 4
    132c:	cd bf       	out	0x3d, r28	; 61
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	08 95       	ret

00001336 <_portSetInterruptMaskFromIsr>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    1336:	1f 93       	push	r17
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	80 ea       	ldi	r24, 0xA0	; 160
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	fc 01       	movw	r30, r24
    1346:	12 81       	ldd	r17, Z+2	; 0x02
    1348:	80 ea       	ldi	r24, 0xA0	; 160
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	20 ea       	ldi	r18, 0xA0	; 160
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	f9 01       	movw	r30, r18
    1352:	22 81       	ldd	r18, Z+2	; 0x02
    1354:	28 7f       	andi	r18, 0xF8	; 248
    1356:	fc 01       	movw	r30, r24
    1358:	22 83       	std	Z+2, r18	; 0x02
    135a:	81 2f       	mov	r24, r17
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	1f 91       	pop	r17
    1362:	08 95       	ret

00001364 <pxPortInitialiseStack>:
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	2a 97       	sbiw	r28, 0x0a	; 10
    136e:	cd bf       	out	0x3d, r28	; 61
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	8d 83       	std	Y+5, r24	; 0x05
    1374:	9e 83       	std	Y+6, r25	; 0x06
    1376:	6f 83       	std	Y+7, r22	; 0x07
    1378:	78 87       	std	Y+8, r23	; 0x08
    137a:	49 87       	std	Y+9, r20	; 0x09
    137c:	5a 87       	std	Y+10, r21	; 0x0a
    137e:	8d 81       	ldd	r24, Y+5	; 0x05
    1380:	9e 81       	ldd	r25, Y+6	; 0x06
    1382:	21 e1       	ldi	r18, 0x11	; 17
    1384:	fc 01       	movw	r30, r24
    1386:	20 83       	st	Z, r18
    1388:	8d 81       	ldd	r24, Y+5	; 0x05
    138a:	9e 81       	ldd	r25, Y+6	; 0x06
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	8d 83       	std	Y+5, r24	; 0x05
    1390:	9e 83       	std	Y+6, r25	; 0x06
    1392:	8d 81       	ldd	r24, Y+5	; 0x05
    1394:	9e 81       	ldd	r25, Y+6	; 0x06
    1396:	22 e2       	ldi	r18, 0x22	; 34
    1398:	fc 01       	movw	r30, r24
    139a:	20 83       	st	Z, r18
    139c:	8d 81       	ldd	r24, Y+5	; 0x05
    139e:	9e 81       	ldd	r25, Y+6	; 0x06
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	8d 83       	std	Y+5, r24	; 0x05
    13a4:	9e 83       	std	Y+6, r25	; 0x06
    13a6:	8d 81       	ldd	r24, Y+5	; 0x05
    13a8:	9e 81       	ldd	r25, Y+6	; 0x06
    13aa:	23 e3       	ldi	r18, 0x33	; 51
    13ac:	fc 01       	movw	r30, r24
    13ae:	20 83       	st	Z, r18
    13b0:	8d 81       	ldd	r24, Y+5	; 0x05
    13b2:	9e 81       	ldd	r25, Y+6	; 0x06
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	8d 83       	std	Y+5, r24	; 0x05
    13b8:	9e 83       	std	Y+6, r25	; 0x06
    13ba:	8f 81       	ldd	r24, Y+7	; 0x07
    13bc:	98 85       	ldd	r25, Y+8	; 0x08
    13be:	cc 01       	movw	r24, r24
    13c0:	a0 e0       	ldi	r26, 0x00	; 0
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	89 83       	std	Y+1, r24	; 0x01
    13c6:	9a 83       	std	Y+2, r25	; 0x02
    13c8:	ab 83       	std	Y+3, r26	; 0x03
    13ca:	bc 83       	std	Y+4, r27	; 0x04
    13cc:	29 81       	ldd	r18, Y+1	; 0x01
    13ce:	8d 81       	ldd	r24, Y+5	; 0x05
    13d0:	9e 81       	ldd	r25, Y+6	; 0x06
    13d2:	fc 01       	movw	r30, r24
    13d4:	20 83       	st	Z, r18
    13d6:	8d 81       	ldd	r24, Y+5	; 0x05
    13d8:	9e 81       	ldd	r25, Y+6	; 0x06
    13da:	01 97       	sbiw	r24, 0x01	; 1
    13dc:	8d 83       	std	Y+5, r24	; 0x05
    13de:	9e 83       	std	Y+6, r25	; 0x06
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	9a 81       	ldd	r25, Y+2	; 0x02
    13e4:	ab 81       	ldd	r26, Y+3	; 0x03
    13e6:	bc 81       	ldd	r27, Y+4	; 0x04
    13e8:	89 2f       	mov	r24, r25
    13ea:	9a 2f       	mov	r25, r26
    13ec:	ab 2f       	mov	r26, r27
    13ee:	bb 27       	eor	r27, r27
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	9a 83       	std	Y+2, r25	; 0x02
    13f4:	ab 83       	std	Y+3, r26	; 0x03
    13f6:	bc 83       	std	Y+4, r27	; 0x04
    13f8:	29 81       	ldd	r18, Y+1	; 0x01
    13fa:	8d 81       	ldd	r24, Y+5	; 0x05
    13fc:	9e 81       	ldd	r25, Y+6	; 0x06
    13fe:	fc 01       	movw	r30, r24
    1400:	20 83       	st	Z, r18
    1402:	8d 81       	ldd	r24, Y+5	; 0x05
    1404:	9e 81       	ldd	r25, Y+6	; 0x06
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	8d 83       	std	Y+5, r24	; 0x05
    140a:	9e 83       	std	Y+6, r25	; 0x06
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	9a 81       	ldd	r25, Y+2	; 0x02
    1410:	ab 81       	ldd	r26, Y+3	; 0x03
    1412:	bc 81       	ldd	r27, Y+4	; 0x04
    1414:	89 2f       	mov	r24, r25
    1416:	9a 2f       	mov	r25, r26
    1418:	ab 2f       	mov	r26, r27
    141a:	bb 27       	eor	r27, r27
    141c:	89 83       	std	Y+1, r24	; 0x01
    141e:	9a 83       	std	Y+2, r25	; 0x02
    1420:	ab 83       	std	Y+3, r26	; 0x03
    1422:	bc 83       	std	Y+4, r27	; 0x04
    1424:	29 81       	ldd	r18, Y+1	; 0x01
    1426:	8d 81       	ldd	r24, Y+5	; 0x05
    1428:	9e 81       	ldd	r25, Y+6	; 0x06
    142a:	fc 01       	movw	r30, r24
    142c:	20 83       	st	Z, r18
    142e:	8d 81       	ldd	r24, Y+5	; 0x05
    1430:	9e 81       	ldd	r25, Y+6	; 0x06
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	8d 83       	std	Y+5, r24	; 0x05
    1436:	9e 83       	std	Y+6, r25	; 0x06
    1438:	8d 81       	ldd	r24, Y+5	; 0x05
    143a:	9e 81       	ldd	r25, Y+6	; 0x06
    143c:	21 e3       	ldi	r18, 0x31	; 49
    143e:	fc 01       	movw	r30, r24
    1440:	20 83       	st	Z, r18
    1442:	8d 81       	ldd	r24, Y+5	; 0x05
    1444:	9e 81       	ldd	r25, Y+6	; 0x06
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	8d 83       	std	Y+5, r24	; 0x05
    144a:	9e 83       	std	Y+6, r25	; 0x06
    144c:	8d 81       	ldd	r24, Y+5	; 0x05
    144e:	9e 81       	ldd	r25, Y+6	; 0x06
    1450:	20 e8       	ldi	r18, 0x80	; 128
    1452:	fc 01       	movw	r30, r24
    1454:	20 83       	st	Z, r18
    1456:	8d 81       	ldd	r24, Y+5	; 0x05
    1458:	9e 81       	ldd	r25, Y+6	; 0x06
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	8d 83       	std	Y+5, r24	; 0x05
    145e:	9e 83       	std	Y+6, r25	; 0x06
    1460:	8d 81       	ldd	r24, Y+5	; 0x05
    1462:	9e 81       	ldd	r25, Y+6	; 0x06
    1464:	27 e8       	ldi	r18, 0x87	; 135
    1466:	fc 01       	movw	r30, r24
    1468:	20 83       	st	Z, r18
    146a:	8d 81       	ldd	r24, Y+5	; 0x05
    146c:	9e 81       	ldd	r25, Y+6	; 0x06
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	8d 83       	std	Y+5, r24	; 0x05
    1472:	9e 83       	std	Y+6, r25	; 0x06
    1474:	8d 81       	ldd	r24, Y+5	; 0x05
    1476:	9e 81       	ldd	r25, Y+6	; 0x06
    1478:	fc 01       	movw	r30, r24
    147a:	10 82       	st	Z, r1
    147c:	8d 81       	ldd	r24, Y+5	; 0x05
    147e:	9e 81       	ldd	r25, Y+6	; 0x06
    1480:	01 97       	sbiw	r24, 0x01	; 1
    1482:	8d 83       	std	Y+5, r24	; 0x05
    1484:	9e 83       	std	Y+6, r25	; 0x06
    1486:	8d 81       	ldd	r24, Y+5	; 0x05
    1488:	9e 81       	ldd	r25, Y+6	; 0x06
    148a:	fc 01       	movw	r30, r24
    148c:	10 82       	st	Z, r1
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	8d 83       	std	Y+5, r24	; 0x05
    1496:	9e 83       	std	Y+6, r25	; 0x06
    1498:	8d 81       	ldd	r24, Y+5	; 0x05
    149a:	9e 81       	ldd	r25, Y+6	; 0x06
    149c:	22 e0       	ldi	r18, 0x02	; 2
    149e:	fc 01       	movw	r30, r24
    14a0:	20 83       	st	Z, r18
    14a2:	8d 81       	ldd	r24, Y+5	; 0x05
    14a4:	9e 81       	ldd	r25, Y+6	; 0x06
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	8d 83       	std	Y+5, r24	; 0x05
    14aa:	9e 83       	std	Y+6, r25	; 0x06
    14ac:	8d 81       	ldd	r24, Y+5	; 0x05
    14ae:	9e 81       	ldd	r25, Y+6	; 0x06
    14b0:	23 e0       	ldi	r18, 0x03	; 3
    14b2:	fc 01       	movw	r30, r24
    14b4:	20 83       	st	Z, r18
    14b6:	8d 81       	ldd	r24, Y+5	; 0x05
    14b8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	8d 83       	std	Y+5, r24	; 0x05
    14be:	9e 83       	std	Y+6, r25	; 0x06
    14c0:	8d 81       	ldd	r24, Y+5	; 0x05
    14c2:	9e 81       	ldd	r25, Y+6	; 0x06
    14c4:	24 e0       	ldi	r18, 0x04	; 4
    14c6:	fc 01       	movw	r30, r24
    14c8:	20 83       	st	Z, r18
    14ca:	8d 81       	ldd	r24, Y+5	; 0x05
    14cc:	9e 81       	ldd	r25, Y+6	; 0x06
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	8d 83       	std	Y+5, r24	; 0x05
    14d2:	9e 83       	std	Y+6, r25	; 0x06
    14d4:	8d 81       	ldd	r24, Y+5	; 0x05
    14d6:	9e 81       	ldd	r25, Y+6	; 0x06
    14d8:	25 e0       	ldi	r18, 0x05	; 5
    14da:	fc 01       	movw	r30, r24
    14dc:	20 83       	st	Z, r18
    14de:	8d 81       	ldd	r24, Y+5	; 0x05
    14e0:	9e 81       	ldd	r25, Y+6	; 0x06
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	8d 83       	std	Y+5, r24	; 0x05
    14e6:	9e 83       	std	Y+6, r25	; 0x06
    14e8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ea:	9e 81       	ldd	r25, Y+6	; 0x06
    14ec:	26 e0       	ldi	r18, 0x06	; 6
    14ee:	fc 01       	movw	r30, r24
    14f0:	20 83       	st	Z, r18
    14f2:	8d 81       	ldd	r24, Y+5	; 0x05
    14f4:	9e 81       	ldd	r25, Y+6	; 0x06
    14f6:	01 97       	sbiw	r24, 0x01	; 1
    14f8:	8d 83       	std	Y+5, r24	; 0x05
    14fa:	9e 83       	std	Y+6, r25	; 0x06
    14fc:	8d 81       	ldd	r24, Y+5	; 0x05
    14fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1500:	27 e0       	ldi	r18, 0x07	; 7
    1502:	fc 01       	movw	r30, r24
    1504:	20 83       	st	Z, r18
    1506:	8d 81       	ldd	r24, Y+5	; 0x05
    1508:	9e 81       	ldd	r25, Y+6	; 0x06
    150a:	01 97       	sbiw	r24, 0x01	; 1
    150c:	8d 83       	std	Y+5, r24	; 0x05
    150e:	9e 83       	std	Y+6, r25	; 0x06
    1510:	8d 81       	ldd	r24, Y+5	; 0x05
    1512:	9e 81       	ldd	r25, Y+6	; 0x06
    1514:	28 e0       	ldi	r18, 0x08	; 8
    1516:	fc 01       	movw	r30, r24
    1518:	20 83       	st	Z, r18
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	9e 81       	ldd	r25, Y+6	; 0x06
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	8d 83       	std	Y+5, r24	; 0x05
    1522:	9e 83       	std	Y+6, r25	; 0x06
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	29 e0       	ldi	r18, 0x09	; 9
    152a:	fc 01       	movw	r30, r24
    152c:	20 83       	st	Z, r18
    152e:	8d 81       	ldd	r24, Y+5	; 0x05
    1530:	9e 81       	ldd	r25, Y+6	; 0x06
    1532:	01 97       	sbiw	r24, 0x01	; 1
    1534:	8d 83       	std	Y+5, r24	; 0x05
    1536:	9e 83       	std	Y+6, r25	; 0x06
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
    153a:	9e 81       	ldd	r25, Y+6	; 0x06
    153c:	20 e1       	ldi	r18, 0x10	; 16
    153e:	fc 01       	movw	r30, r24
    1540:	20 83       	st	Z, r18
    1542:	8d 81       	ldd	r24, Y+5	; 0x05
    1544:	9e 81       	ldd	r25, Y+6	; 0x06
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	8d 83       	std	Y+5, r24	; 0x05
    154a:	9e 83       	std	Y+6, r25	; 0x06
    154c:	8d 81       	ldd	r24, Y+5	; 0x05
    154e:	9e 81       	ldd	r25, Y+6	; 0x06
    1550:	21 e1       	ldi	r18, 0x11	; 17
    1552:	fc 01       	movw	r30, r24
    1554:	20 83       	st	Z, r18
    1556:	8d 81       	ldd	r24, Y+5	; 0x05
    1558:	9e 81       	ldd	r25, Y+6	; 0x06
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	8d 83       	std	Y+5, r24	; 0x05
    155e:	9e 83       	std	Y+6, r25	; 0x06
    1560:	8d 81       	ldd	r24, Y+5	; 0x05
    1562:	9e 81       	ldd	r25, Y+6	; 0x06
    1564:	22 e1       	ldi	r18, 0x12	; 18
    1566:	fc 01       	movw	r30, r24
    1568:	20 83       	st	Z, r18
    156a:	8d 81       	ldd	r24, Y+5	; 0x05
    156c:	9e 81       	ldd	r25, Y+6	; 0x06
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	8d 83       	std	Y+5, r24	; 0x05
    1572:	9e 83       	std	Y+6, r25	; 0x06
    1574:	8d 81       	ldd	r24, Y+5	; 0x05
    1576:	9e 81       	ldd	r25, Y+6	; 0x06
    1578:	23 e1       	ldi	r18, 0x13	; 19
    157a:	fc 01       	movw	r30, r24
    157c:	20 83       	st	Z, r18
    157e:	8d 81       	ldd	r24, Y+5	; 0x05
    1580:	9e 81       	ldd	r25, Y+6	; 0x06
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	8d 83       	std	Y+5, r24	; 0x05
    1586:	9e 83       	std	Y+6, r25	; 0x06
    1588:	8d 81       	ldd	r24, Y+5	; 0x05
    158a:	9e 81       	ldd	r25, Y+6	; 0x06
    158c:	24 e1       	ldi	r18, 0x14	; 20
    158e:	fc 01       	movw	r30, r24
    1590:	20 83       	st	Z, r18
    1592:	8d 81       	ldd	r24, Y+5	; 0x05
    1594:	9e 81       	ldd	r25, Y+6	; 0x06
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	8d 83       	std	Y+5, r24	; 0x05
    159a:	9e 83       	std	Y+6, r25	; 0x06
    159c:	8d 81       	ldd	r24, Y+5	; 0x05
    159e:	9e 81       	ldd	r25, Y+6	; 0x06
    15a0:	25 e1       	ldi	r18, 0x15	; 21
    15a2:	fc 01       	movw	r30, r24
    15a4:	20 83       	st	Z, r18
    15a6:	8d 81       	ldd	r24, Y+5	; 0x05
    15a8:	9e 81       	ldd	r25, Y+6	; 0x06
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	8d 83       	std	Y+5, r24	; 0x05
    15ae:	9e 83       	std	Y+6, r25	; 0x06
    15b0:	8d 81       	ldd	r24, Y+5	; 0x05
    15b2:	9e 81       	ldd	r25, Y+6	; 0x06
    15b4:	26 e1       	ldi	r18, 0x16	; 22
    15b6:	fc 01       	movw	r30, r24
    15b8:	20 83       	st	Z, r18
    15ba:	8d 81       	ldd	r24, Y+5	; 0x05
    15bc:	9e 81       	ldd	r25, Y+6	; 0x06
    15be:	01 97       	sbiw	r24, 0x01	; 1
    15c0:	8d 83       	std	Y+5, r24	; 0x05
    15c2:	9e 83       	std	Y+6, r25	; 0x06
    15c4:	8d 81       	ldd	r24, Y+5	; 0x05
    15c6:	9e 81       	ldd	r25, Y+6	; 0x06
    15c8:	27 e1       	ldi	r18, 0x17	; 23
    15ca:	fc 01       	movw	r30, r24
    15cc:	20 83       	st	Z, r18
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	8d 83       	std	Y+5, r24	; 0x05
    15d6:	9e 83       	std	Y+6, r25	; 0x06
    15d8:	8d 81       	ldd	r24, Y+5	; 0x05
    15da:	9e 81       	ldd	r25, Y+6	; 0x06
    15dc:	28 e1       	ldi	r18, 0x18	; 24
    15de:	fc 01       	movw	r30, r24
    15e0:	20 83       	st	Z, r18
    15e2:	8d 81       	ldd	r24, Y+5	; 0x05
    15e4:	9e 81       	ldd	r25, Y+6	; 0x06
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	8d 83       	std	Y+5, r24	; 0x05
    15ea:	9e 83       	std	Y+6, r25	; 0x06
    15ec:	8d 81       	ldd	r24, Y+5	; 0x05
    15ee:	9e 81       	ldd	r25, Y+6	; 0x06
    15f0:	29 e1       	ldi	r18, 0x19	; 25
    15f2:	fc 01       	movw	r30, r24
    15f4:	20 83       	st	Z, r18
    15f6:	8d 81       	ldd	r24, Y+5	; 0x05
    15f8:	9e 81       	ldd	r25, Y+6	; 0x06
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	8d 83       	std	Y+5, r24	; 0x05
    15fe:	9e 83       	std	Y+6, r25	; 0x06
    1600:	8d 81       	ldd	r24, Y+5	; 0x05
    1602:	9e 81       	ldd	r25, Y+6	; 0x06
    1604:	20 e2       	ldi	r18, 0x20	; 32
    1606:	fc 01       	movw	r30, r24
    1608:	20 83       	st	Z, r18
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	9e 81       	ldd	r25, Y+6	; 0x06
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	8d 83       	std	Y+5, r24	; 0x05
    1612:	9e 83       	std	Y+6, r25	; 0x06
    1614:	8d 81       	ldd	r24, Y+5	; 0x05
    1616:	9e 81       	ldd	r25, Y+6	; 0x06
    1618:	21 e2       	ldi	r18, 0x21	; 33
    161a:	fc 01       	movw	r30, r24
    161c:	20 83       	st	Z, r18
    161e:	8d 81       	ldd	r24, Y+5	; 0x05
    1620:	9e 81       	ldd	r25, Y+6	; 0x06
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	8d 83       	std	Y+5, r24	; 0x05
    1626:	9e 83       	std	Y+6, r25	; 0x06
    1628:	8d 81       	ldd	r24, Y+5	; 0x05
    162a:	9e 81       	ldd	r25, Y+6	; 0x06
    162c:	22 e2       	ldi	r18, 0x22	; 34
    162e:	fc 01       	movw	r30, r24
    1630:	20 83       	st	Z, r18
    1632:	8d 81       	ldd	r24, Y+5	; 0x05
    1634:	9e 81       	ldd	r25, Y+6	; 0x06
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	8d 83       	std	Y+5, r24	; 0x05
    163a:	9e 83       	std	Y+6, r25	; 0x06
    163c:	8d 81       	ldd	r24, Y+5	; 0x05
    163e:	9e 81       	ldd	r25, Y+6	; 0x06
    1640:	23 e2       	ldi	r18, 0x23	; 35
    1642:	fc 01       	movw	r30, r24
    1644:	20 83       	st	Z, r18
    1646:	8d 81       	ldd	r24, Y+5	; 0x05
    1648:	9e 81       	ldd	r25, Y+6	; 0x06
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	8d 83       	std	Y+5, r24	; 0x05
    164e:	9e 83       	std	Y+6, r25	; 0x06
    1650:	89 85       	ldd	r24, Y+9	; 0x09
    1652:	9a 85       	ldd	r25, Y+10	; 0x0a
    1654:	cc 01       	movw	r24, r24
    1656:	a0 e0       	ldi	r26, 0x00	; 0
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	89 83       	std	Y+1, r24	; 0x01
    165c:	9a 83       	std	Y+2, r25	; 0x02
    165e:	ab 83       	std	Y+3, r26	; 0x03
    1660:	bc 83       	std	Y+4, r27	; 0x04
    1662:	29 81       	ldd	r18, Y+1	; 0x01
    1664:	8d 81       	ldd	r24, Y+5	; 0x05
    1666:	9e 81       	ldd	r25, Y+6	; 0x06
    1668:	fc 01       	movw	r30, r24
    166a:	20 83       	st	Z, r18
    166c:	8d 81       	ldd	r24, Y+5	; 0x05
    166e:	9e 81       	ldd	r25, Y+6	; 0x06
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	8d 83       	std	Y+5, r24	; 0x05
    1674:	9e 83       	std	Y+6, r25	; 0x06
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	9a 81       	ldd	r25, Y+2	; 0x02
    167a:	ab 81       	ldd	r26, Y+3	; 0x03
    167c:	bc 81       	ldd	r27, Y+4	; 0x04
    167e:	89 2f       	mov	r24, r25
    1680:	9a 2f       	mov	r25, r26
    1682:	ab 2f       	mov	r26, r27
    1684:	bb 27       	eor	r27, r27
    1686:	89 83       	std	Y+1, r24	; 0x01
    1688:	9a 83       	std	Y+2, r25	; 0x02
    168a:	ab 83       	std	Y+3, r26	; 0x03
    168c:	bc 83       	std	Y+4, r27	; 0x04
    168e:	29 81       	ldd	r18, Y+1	; 0x01
    1690:	8d 81       	ldd	r24, Y+5	; 0x05
    1692:	9e 81       	ldd	r25, Y+6	; 0x06
    1694:	fc 01       	movw	r30, r24
    1696:	20 83       	st	Z, r18
    1698:	8d 81       	ldd	r24, Y+5	; 0x05
    169a:	9e 81       	ldd	r25, Y+6	; 0x06
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	8d 83       	std	Y+5, r24	; 0x05
    16a0:	9e 83       	std	Y+6, r25	; 0x06
    16a2:	8d 81       	ldd	r24, Y+5	; 0x05
    16a4:	9e 81       	ldd	r25, Y+6	; 0x06
    16a6:	26 e2       	ldi	r18, 0x26	; 38
    16a8:	fc 01       	movw	r30, r24
    16aa:	20 83       	st	Z, r18
    16ac:	8d 81       	ldd	r24, Y+5	; 0x05
    16ae:	9e 81       	ldd	r25, Y+6	; 0x06
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	8d 83       	std	Y+5, r24	; 0x05
    16b4:	9e 83       	std	Y+6, r25	; 0x06
    16b6:	8d 81       	ldd	r24, Y+5	; 0x05
    16b8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ba:	27 e2       	ldi	r18, 0x27	; 39
    16bc:	fc 01       	movw	r30, r24
    16be:	20 83       	st	Z, r18
    16c0:	8d 81       	ldd	r24, Y+5	; 0x05
    16c2:	9e 81       	ldd	r25, Y+6	; 0x06
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	8d 83       	std	Y+5, r24	; 0x05
    16c8:	9e 83       	std	Y+6, r25	; 0x06
    16ca:	8d 81       	ldd	r24, Y+5	; 0x05
    16cc:	9e 81       	ldd	r25, Y+6	; 0x06
    16ce:	28 e2       	ldi	r18, 0x28	; 40
    16d0:	fc 01       	movw	r30, r24
    16d2:	20 83       	st	Z, r18
    16d4:	8d 81       	ldd	r24, Y+5	; 0x05
    16d6:	9e 81       	ldd	r25, Y+6	; 0x06
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	8d 83       	std	Y+5, r24	; 0x05
    16dc:	9e 83       	std	Y+6, r25	; 0x06
    16de:	8d 81       	ldd	r24, Y+5	; 0x05
    16e0:	9e 81       	ldd	r25, Y+6	; 0x06
    16e2:	29 e2       	ldi	r18, 0x29	; 41
    16e4:	fc 01       	movw	r30, r24
    16e6:	20 83       	st	Z, r18
    16e8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ea:	9e 81       	ldd	r25, Y+6	; 0x06
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	8d 83       	std	Y+5, r24	; 0x05
    16f0:	9e 83       	std	Y+6, r25	; 0x06
    16f2:	8d 81       	ldd	r24, Y+5	; 0x05
    16f4:	9e 81       	ldd	r25, Y+6	; 0x06
    16f6:	20 e3       	ldi	r18, 0x30	; 48
    16f8:	fc 01       	movw	r30, r24
    16fa:	20 83       	st	Z, r18
    16fc:	8d 81       	ldd	r24, Y+5	; 0x05
    16fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1700:	01 97       	sbiw	r24, 0x01	; 1
    1702:	8d 83       	std	Y+5, r24	; 0x05
    1704:	9e 83       	std	Y+6, r25	; 0x06
    1706:	8d 81       	ldd	r24, Y+5	; 0x05
    1708:	9e 81       	ldd	r25, Y+6	; 0x06
    170a:	2a 96       	adiw	r28, 0x0a	; 10
    170c:	cd bf       	out	0x3d, r28	; 61
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	08 95       	ret

00001716 <xPortStartScheduler>:
    1716:	cf 93       	push	r28
    1718:	df 93       	push	r29
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
    171e:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <prvSetupTimerInterrupt>
    1722:	a0 91 1a 2c 	lds	r26, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    1726:	b0 91 1b 2c 	lds	r27, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    172a:	0d 90       	ld	r0, X+
    172c:	0d be       	out	0x3d, r0	; 61
    172e:	0d 90       	ld	r0, X+
    1730:	0e be       	out	0x3e, r0	; 62
    1732:	ef 91       	pop	r30
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	bf 91       	pop	r27
    173a:	af 91       	pop	r26
    173c:	9f 91       	pop	r25
    173e:	8f 91       	pop	r24
    1740:	7f 91       	pop	r23
    1742:	6f 91       	pop	r22
    1744:	5f 91       	pop	r21
    1746:	4f 91       	pop	r20
    1748:	3f 91       	pop	r19
    174a:	2f 91       	pop	r18
    174c:	1f 91       	pop	r17
    174e:	0f 91       	pop	r16
    1750:	ff 90       	pop	r15
    1752:	ef 90       	pop	r14
    1754:	df 90       	pop	r13
    1756:	cf 90       	pop	r12
    1758:	bf 90       	pop	r11
    175a:	af 90       	pop	r10
    175c:	9f 90       	pop	r9
    175e:	8f 90       	pop	r8
    1760:	7f 90       	pop	r7
    1762:	6f 90       	pop	r6
    1764:	5f 90       	pop	r5
    1766:	4f 90       	pop	r4
    1768:	3f 90       	pop	r3
    176a:	2f 90       	pop	r2
    176c:	1f 90       	pop	r1
    176e:	0f 90       	pop	r0
    1770:	ff 91       	pop	r31
    1772:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1776:	ff 91       	pop	r31
    1778:	ff bf       	out	0x3f, r31	; 63
    177a:	ff 91       	pop	r31
    177c:	08 95       	ret
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	df 91       	pop	r29
    1782:	cf 91       	pop	r28
    1784:	08 95       	ret

00001786 <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1786:	ff 93       	push	r31
    1788:	ff b7       	in	r31, 0x3f	; 63
    178a:	ff 93       	push	r31
    178c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1790:	ff 93       	push	r31
    1792:	f8 7f       	andi	r31, 0xF8	; 248
    1794:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1798:	0f 92       	push	r0
    179a:	1f 92       	push	r1
    179c:	11 24       	eor	r1, r1
    179e:	2f 92       	push	r2
    17a0:	3f 92       	push	r3
    17a2:	4f 92       	push	r4
    17a4:	5f 92       	push	r5
    17a6:	6f 92       	push	r6
    17a8:	7f 92       	push	r7
    17aa:	8f 92       	push	r8
    17ac:	9f 92       	push	r9
    17ae:	af 92       	push	r10
    17b0:	bf 92       	push	r11
    17b2:	cf 92       	push	r12
    17b4:	df 92       	push	r13
    17b6:	ef 92       	push	r14
    17b8:	ff 92       	push	r15
    17ba:	0f 93       	push	r16
    17bc:	1f 93       	push	r17
    17be:	2f 93       	push	r18
    17c0:	3f 93       	push	r19
    17c2:	4f 93       	push	r20
    17c4:	5f 93       	push	r21
    17c6:	6f 93       	push	r22
    17c8:	7f 93       	push	r23
    17ca:	8f 93       	push	r24
    17cc:	9f 93       	push	r25
    17ce:	af 93       	push	r26
    17d0:	bf 93       	push	r27
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	ef 93       	push	r30
    17d8:	a0 91 1a 2c 	lds	r26, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    17dc:	b0 91 1b 2c 	lds	r27, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    17e0:	0d b6       	in	r0, 0x3d	; 61
    17e2:	0d 92       	st	X+, r0
    17e4:	0e b6       	in	r0, 0x3e	; 62
    17e6:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    17e8:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    17ec:	a0 91 1a 2c 	lds	r26, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    17f0:	b0 91 1b 2c 	lds	r27, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    17f4:	0d 90       	ld	r0, X+
    17f6:	0d be       	out	0x3d, r0	; 61
    17f8:	0d 90       	ld	r0, X+
    17fa:	0e be       	out	0x3e, r0	; 62
    17fc:	ef 91       	pop	r30
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	bf 91       	pop	r27
    1804:	af 91       	pop	r26
    1806:	9f 91       	pop	r25
    1808:	8f 91       	pop	r24
    180a:	7f 91       	pop	r23
    180c:	6f 91       	pop	r22
    180e:	5f 91       	pop	r21
    1810:	4f 91       	pop	r20
    1812:	3f 91       	pop	r19
    1814:	2f 91       	pop	r18
    1816:	1f 91       	pop	r17
    1818:	0f 91       	pop	r16
    181a:	ff 90       	pop	r15
    181c:	ef 90       	pop	r14
    181e:	df 90       	pop	r13
    1820:	cf 90       	pop	r12
    1822:	bf 90       	pop	r11
    1824:	af 90       	pop	r10
    1826:	9f 90       	pop	r9
    1828:	8f 90       	pop	r8
    182a:	7f 90       	pop	r7
    182c:	6f 90       	pop	r6
    182e:	5f 90       	pop	r5
    1830:	4f 90       	pop	r4
    1832:	3f 90       	pop	r3
    1834:	2f 90       	pop	r2
    1836:	1f 90       	pop	r1
    1838:	0f 90       	pop	r0
    183a:	ff 91       	pop	r31
    183c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1840:	ff 91       	pop	r31
    1842:	ff bf       	out	0x3f, r31	; 63
    1844:	ff 91       	pop	r31
	asm volatile ( "ret" );
    1846:	08 95       	ret
	...

0000184a <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
    184a:	1f 93       	push	r17
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	1f 92       	push	r1
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	89 83       	std	Y+1, r24	; 0x01
		intTaskSwitchPending |= xSwitchRequired;					
    1858:	80 91 f0 2c 	lds	r24, 0x2CF0	; 0x802cf0 <intTaskSwitchPending>
    185c:	98 2f       	mov	r25, r24
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	89 2b       	or	r24, r25
    1862:	80 93 f0 2c 	sts	0x2CF0, r24	; 0x802cf0 <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
    1866:	80 ea       	ldi	r24, 0xA0	; 160
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	fc 01       	movw	r30, r24
    186c:	80 81       	ld	r24, Z
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	61 f0       	breq	.+24     	; 0x188a <portTaskSwitchContext+0x40>
    1872:	80 ea       	ldi	r24, 0xA0	; 160
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	fc 01       	movw	r30, r24
    1878:	80 81       	ld	r24, Z
    187a:	82 30       	cpi	r24, 0x02	; 2
    187c:	31 f0       	breq	.+12     	; 0x188a <portTaskSwitchContext+0x40>
    187e:	80 ea       	ldi	r24, 0xA0	; 160
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	fc 01       	movw	r30, r24
    1884:	80 81       	ld	r24, Z
    1886:	84 30       	cpi	r24, 0x04	; 4
    1888:	79 f4       	brne	.+30     	; 0x18a8 <portTaskSwitchContext+0x5e>
    188a:	80 91 f0 2c 	lds	r24, 0x2CF0	; 0x802cf0 <intTaskSwitchPending>
    188e:	88 23       	and	r24, r24
    1890:	59 f0       	breq	.+22     	; 0x18a8 <portTaskSwitchContext+0x5e>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
    1892:	0e 94 9b 09 	call	0x1336	; 0x1336 <_portSetInterruptMaskFromIsr>
    1896:	18 2f       	mov	r17, r24
			intTaskSwitchPending = 0;								
    1898:	10 92 f0 2c 	sts	0x2CF0, r1	; 0x802cf0 <intTaskSwitchPending>
			vTaskSwitchContext();                   				
    189c:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
    18a0:	80 ea       	ldi	r24, 0xA0	; 160
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	fc 01       	movw	r30, r24
    18a6:	12 83       	std	Z+2, r17	; 0x02
		}                                          					
	}
    18a8:	00 00       	nop
    18aa:	0f 90       	pop	r0
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	1f 91       	pop	r17
    18b2:	08 95       	ret

000018b4 <portTaskIncrementTick>:
	// This routine is only an indirect call to vTaskIncrementTick because
	// a local variable is necessary. Local variables cannot be used directly
	// in a naked isr because of the lack of the frame pointer.
	//
	static void portTaskIncrementTick( void )
	{
    18b4:	1f 93       	push	r17
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
		register unsigned portBASE_TYPE uxSavedPmicCtrlReg;

 		uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR();
    18be:	0e 94 9b 09 	call	0x1336	; 0x1336 <_portSetInterruptMaskFromIsr>
    18c2:	18 2f       	mov	r17, r24
		xTaskIncrementTick();
    18c4:	0e 94 42 15 	call	0x2a84	; 0x2a84 <xTaskIncrementTick>
 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedPmicCtrlReg );
    18c8:	80 ea       	ldi	r24, 0xA0	; 160
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	fc 01       	movw	r30, r24
    18ce:	12 83       	std	Z+2, r17	; 0x02
	}
    18d0:	00 00       	nop
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	1f 91       	pop	r17
    18d8:	08 95       	ret

000018da <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
    18da:	ff 93       	push	r31
    18dc:	ff b7       	in	r31, 0x3f	; 63
    18de:	ff 93       	push	r31
    18e0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    18e4:	ff 93       	push	r31
    18e6:	f8 7f       	andi	r31, 0xF8	; 248
    18e8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    18ec:	0f 92       	push	r0
    18ee:	1f 92       	push	r1
    18f0:	11 24       	eor	r1, r1
    18f2:	2f 92       	push	r2
    18f4:	3f 92       	push	r3
    18f6:	4f 92       	push	r4
    18f8:	5f 92       	push	r5
    18fa:	6f 92       	push	r6
    18fc:	7f 92       	push	r7
    18fe:	8f 92       	push	r8
    1900:	9f 92       	push	r9
    1902:	af 92       	push	r10
    1904:	bf 92       	push	r11
    1906:	cf 92       	push	r12
    1908:	df 92       	push	r13
    190a:	ef 92       	push	r14
    190c:	ff 92       	push	r15
    190e:	0f 93       	push	r16
    1910:	1f 93       	push	r17
    1912:	2f 93       	push	r18
    1914:	3f 93       	push	r19
    1916:	4f 93       	push	r20
    1918:	5f 93       	push	r21
    191a:	6f 93       	push	r22
    191c:	7f 93       	push	r23
    191e:	8f 93       	push	r24
    1920:	9f 93       	push	r25
    1922:	af 93       	push	r26
    1924:	bf 93       	push	r27
    1926:	cf 93       	push	r28
    1928:	df 93       	push	r29
    192a:	ef 93       	push	r30
    192c:	a0 91 1a 2c 	lds	r26, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    1930:	b0 91 1b 2c 	lds	r27, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    1934:	0d b6       	in	r0, 0x3d	; 61
    1936:	0d 92       	st	X+, r0
    1938:	0e b6       	in	r0, 0x3e	; 62
    193a:	0d 92       	st	X+, r0
		portTaskIncrementTick();
    193c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <portTaskIncrementTick>
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	0e 94 25 0c 	call	0x184a	; 0x184a <portTaskSwitchContext>
    1946:	a0 91 1a 2c 	lds	r26, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    194a:	b0 91 1b 2c 	lds	r27, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    194e:	0d 90       	ld	r0, X+
    1950:	0d be       	out	0x3d, r0	; 61
    1952:	0d 90       	ld	r0, X+
    1954:	0e be       	out	0x3e, r0	; 62
    1956:	ef 91       	pop	r30
    1958:	df 91       	pop	r29
    195a:	cf 91       	pop	r28
    195c:	bf 91       	pop	r27
    195e:	af 91       	pop	r26
    1960:	9f 91       	pop	r25
    1962:	8f 91       	pop	r24
    1964:	7f 91       	pop	r23
    1966:	6f 91       	pop	r22
    1968:	5f 91       	pop	r21
    196a:	4f 91       	pop	r20
    196c:	3f 91       	pop	r19
    196e:	2f 91       	pop	r18
    1970:	1f 91       	pop	r17
    1972:	0f 91       	pop	r16
    1974:	ff 90       	pop	r15
    1976:	ef 90       	pop	r14
    1978:	df 90       	pop	r13
    197a:	cf 90       	pop	r12
    197c:	bf 90       	pop	r11
    197e:	af 90       	pop	r10
    1980:	9f 90       	pop	r9
    1982:	8f 90       	pop	r8
    1984:	7f 90       	pop	r7
    1986:	6f 90       	pop	r6
    1988:	5f 90       	pop	r5
    198a:	4f 90       	pop	r4
    198c:	3f 90       	pop	r3
    198e:	2f 90       	pop	r2
    1990:	1f 90       	pop	r1
    1992:	0f 90       	pop	r0
    1994:	ff 91       	pop	r31
    1996:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    199a:	ff 91       	pop	r31
    199c:	ff bf       	out	0x3f, r31	; 63
    199e:	ff 91       	pop	r31
    19a0:	18 95       	reti
	...

000019a4 <prvSetupTimerInterrupt>:
//-----------------------------------------------------------
//
// Setup of 16bit timer C0 to generate a tick interrupt in case of overflow.
//
static void prvSetupTimerInterrupt( void )
{
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <prvSetupTimerInterrupt+0x6>
    19aa:	1f 92       	push	r1
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62

	unsigned portLONG ulOvfMatch;

	ulOvfMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	9d e7       	ldi	r25, 0x7D	; 125
    19b4:	a0 e0       	ldi	r26, 0x00	; 0
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	9a 83       	std	Y+2, r25	; 0x02
    19bc:	ab 83       	std	Y+3, r26	; 0x03
    19be:	bc 83       	std	Y+4, r27	; 0x04

	// We only have 16bits so have to scale to get our required tick rate.
	ulOvfMatch /= portCLOCK_PRESCALER_TIMER0;
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	9a 81       	ldd	r25, Y+2	; 0x02
    19c4:	ab 81       	ldd	r26, Y+3	; 0x03
    19c6:	bc 81       	ldd	r27, Y+4	; 0x04
    19c8:	68 94       	set
    19ca:	15 f8       	bld	r1, 5
    19cc:	b6 95       	lsr	r27
    19ce:	a7 95       	ror	r26
    19d0:	97 95       	ror	r25
    19d2:	87 95       	ror	r24
    19d4:	16 94       	lsr	r1
    19d6:	d1 f7       	brne	.-12     	; 0x19cc <prvSetupTimerInterrupt+0x28>
    19d8:	89 83       	std	Y+1, r24	; 0x01
    19da:	9a 83       	std	Y+2, r25	; 0x02
    19dc:	ab 83       	std	Y+3, r26	; 0x03
    19de:	bc 83       	std	Y+4, r27	; 0x04

	// Adjust for correct value. (because overflow clear if CNT > PER)
	ulOvfMatch -= ( unsigned portLONG ) 1;
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	9a 81       	ldd	r25, Y+2	; 0x02
    19e4:	ab 81       	ldd	r26, Y+3	; 0x03
    19e6:	bc 81       	ldd	r27, Y+4	; 0x04
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	a1 09       	sbc	r26, r1
    19ec:	b1 09       	sbc	r27, r1
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	9a 83       	std	Y+2, r25	; 0x02
    19f2:	ab 83       	std	Y+3, r26	; 0x03
    19f4:	bc 83       	std	Y+4, r27	; 0x04

	// Setup overflow value
	TC_SetPeriod( &TCC0, ulOvfMatch);
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	98 e0       	ldi	r25, 0x08	; 8
    19fa:	29 81       	ldd	r18, Y+1	; 0x01
    19fc:	3a 81       	ldd	r19, Y+2	; 0x02
    19fe:	fc 01       	movw	r30, r24
    1a00:	26 a3       	std	Z+38, r18	; 0x26
    1a02:	37 a3       	std	Z+39, r19	; 0x27
		
	// Setup clock source and compare match behaviour.
	TC0_ConfigClockSource( &TCC0, TC_CLKSEL_DIV64_gc);
    1a04:	65 e0       	ldi	r22, 0x05	; 5
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	98 e0       	ldi	r25, 0x08	; 8
    1a0a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <TC0_ConfigClockSource>

	// Enable the interrupt - this is okay as interrupts are currently globally disabled.
	// The tick interrupt may run in one of the three levels.
#if   configKERNEL_INTERRUPT_PRIORITY == 0
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_LO_gc);	//low interrupt priority
    1a0e:	61 e0       	ldi	r22, 0x01	; 1
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	98 e0       	ldi	r25, 0x08	; 8
    1a14:	0e 94 37 04 	call	0x86e	; 0x86e <TC0_SetOverflowIntLevel>
#elif configKERNEL_INTERRUPT_PRIORITY == 1
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_MED_gc);	//medium interrupt priority
#elif configKERNEL_INTERRUPT_PRIORITY == 2
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_HI_gc);	//high interrupt priority
#endif
}
    1a18:	00 00       	nop
    1a1a:	24 96       	adiw	r28, 0x04	; 4
    1a1c:	cd bf       	out	0x3d, r28	; 61
    1a1e:	de bf       	out	0x3e, r29	; 62
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <xQueueGenericReset>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	25 97       	sbiw	r28, 0x05	; 5
    1a30:	cd bf       	out	0x3d, r28	; 61
    1a32:	de bf       	out	0x3e, r29	; 62
    1a34:	8b 83       	std	Y+3, r24	; 0x03
    1a36:	9c 83       	std	Y+4, r25	; 0x04
    1a38:	6d 83       	std	Y+5, r22	; 0x05
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    1a40:	9a 83       	std	Y+2, r25	; 0x02
    1a42:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1a46:	ff 93       	push	r31
    1a48:	f8 7f       	andi	r31, 0xF8	; 248
    1a4a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	9a 81       	ldd	r25, Y+2	; 0x02
    1a52:	fc 01       	movw	r30, r24
    1a54:	80 81       	ld	r24, Z
    1a56:	91 81       	ldd	r25, Z+1	; 0x01
    1a58:	29 81       	ldd	r18, Y+1	; 0x01
    1a5a:	3a 81       	ldd	r19, Y+2	; 0x02
    1a5c:	f9 01       	movw	r30, r18
    1a5e:	27 8d       	ldd	r18, Z+31	; 0x1f
    1a60:	42 2f       	mov	r20, r18
    1a62:	50 e0       	ldi	r21, 0x00	; 0
    1a64:	29 81       	ldd	r18, Y+1	; 0x01
    1a66:	3a 81       	ldd	r19, Y+2	; 0x02
    1a68:	f9 01       	movw	r30, r18
    1a6a:	20 a1       	ldd	r18, Z+32	; 0x20
    1a6c:	22 2f       	mov	r18, r18
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	42 9f       	mul	r20, r18
    1a72:	b0 01       	movw	r22, r0
    1a74:	43 9f       	mul	r20, r19
    1a76:	70 0d       	add	r23, r0
    1a78:	52 9f       	mul	r21, r18
    1a7a:	70 0d       	add	r23, r0
    1a7c:	11 24       	eor	r1, r1
    1a7e:	9b 01       	movw	r18, r22
    1a80:	28 0f       	add	r18, r24
    1a82:	39 1f       	adc	r19, r25
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	9a 81       	ldd	r25, Y+2	; 0x02
    1a88:	fc 01       	movw	r30, r24
    1a8a:	22 83       	std	Z+2, r18	; 0x02
    1a8c:	33 83       	std	Z+3, r19	; 0x03
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	9a 81       	ldd	r25, Y+2	; 0x02
    1a92:	fc 01       	movw	r30, r24
    1a94:	16 8e       	std	Z+30, r1	; 0x1e
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	20 81       	ld	r18, Z
    1a9e:	31 81       	ldd	r19, Z+1	; 0x01
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	24 83       	std	Z+4, r18	; 0x04
    1aa8:	35 83       	std	Z+5, r19	; 0x05
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	9a 81       	ldd	r25, Y+2	; 0x02
    1aae:	fc 01       	movw	r30, r24
    1ab0:	80 81       	ld	r24, Z
    1ab2:	91 81       	ldd	r25, Z+1	; 0x01
    1ab4:	29 81       	ldd	r18, Y+1	; 0x01
    1ab6:	3a 81       	ldd	r19, Y+2	; 0x02
    1ab8:	f9 01       	movw	r30, r18
    1aba:	27 8d       	ldd	r18, Z+31	; 0x1f
    1abc:	22 2f       	mov	r18, r18
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	a9 01       	movw	r20, r18
    1ac2:	41 50       	subi	r20, 0x01	; 1
    1ac4:	51 09       	sbc	r21, r1
    1ac6:	29 81       	ldd	r18, Y+1	; 0x01
    1ac8:	3a 81       	ldd	r19, Y+2	; 0x02
    1aca:	f9 01       	movw	r30, r18
    1acc:	20 a1       	ldd	r18, Z+32	; 0x20
    1ace:	22 2f       	mov	r18, r18
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	42 9f       	mul	r20, r18
    1ad4:	b0 01       	movw	r22, r0
    1ad6:	43 9f       	mul	r20, r19
    1ad8:	70 0d       	add	r23, r0
    1ada:	52 9f       	mul	r21, r18
    1adc:	70 0d       	add	r23, r0
    1ade:	11 24       	eor	r1, r1
    1ae0:	9b 01       	movw	r18, r22
    1ae2:	28 0f       	add	r18, r24
    1ae4:	39 1f       	adc	r19, r25
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aea:	fc 01       	movw	r30, r24
    1aec:	26 83       	std	Z+6, r18	; 0x06
    1aee:	37 83       	std	Z+7, r19	; 0x07
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	9a 81       	ldd	r25, Y+2	; 0x02
    1af4:	2f ef       	ldi	r18, 0xFF	; 255
    1af6:	fc 01       	movw	r30, r24
    1af8:	21 a3       	std	Z+33, r18	; 0x21
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	9a 81       	ldd	r25, Y+2	; 0x02
    1afe:	2f ef       	ldi	r18, 0xFF	; 255
    1b00:	fc 01       	movw	r30, r24
    1b02:	22 a3       	std	Z+34, r18	; 0x22
    1b04:	8d 81       	ldd	r24, Y+5	; 0x05
    1b06:	88 23       	and	r24, r24
    1b08:	81 f4       	brne	.+32     	; 0x1b2a <xQueueGenericReset+0x104>
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0e:	fc 01       	movw	r30, r24
    1b10:	80 85       	ldd	r24, Z+8	; 0x08
    1b12:	88 23       	and	r24, r24
    1b14:	a1 f0       	breq	.+40     	; 0x1b3e <xQueueGenericReset+0x118>
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1a:	08 96       	adiw	r24, 0x08	; 8
    1b1c:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <xTaskRemoveFromEventList>
    1b20:	88 23       	and	r24, r24
    1b22:	69 f0       	breq	.+26     	; 0x1b3e <xQueueGenericReset+0x118>
    1b24:	0e 94 c3 0b 	call	0x1786	; 0x1786 <vPortYield>
    1b28:	0a c0       	rjmp	.+20     	; 0x1b3e <xQueueGenericReset+0x118>
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2e:	08 96       	adiw	r24, 0x08	; 8
    1b30:	0e 94 2c 08 	call	0x1058	; 0x1058 <vListInitialise>
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	9a 81       	ldd	r25, Y+2	; 0x02
    1b38:	43 96       	adiw	r24, 0x13	; 19
    1b3a:	0e 94 2c 08 	call	0x1058	; 0x1058 <vListInitialise>
    1b3e:	ff 91       	pop	r31
    1b40:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	25 96       	adiw	r28, 0x05	; 5
    1b48:	cd bf       	out	0x3d, r28	; 61
    1b4a:	de bf       	out	0x3e, r29	; 62
    1b4c:	df 91       	pop	r29
    1b4e:	cf 91       	pop	r28
    1b50:	08 95       	ret

00001b52 <xQueueGenericCreate>:
    1b52:	0f 93       	push	r16
    1b54:	1f 93       	push	r17
    1b56:	cf 93       	push	r28
    1b58:	df 93       	push	r29
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	29 97       	sbiw	r28, 0x09	; 9
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	de bf       	out	0x3e, r29	; 62
    1b64:	8f 83       	std	Y+7, r24	; 0x07
    1b66:	68 87       	std	Y+8, r22	; 0x08
    1b68:	49 87       	std	Y+9, r20	; 0x09
    1b6a:	88 85       	ldd	r24, Y+8	; 0x08
    1b6c:	88 23       	and	r24, r24
    1b6e:	19 f4       	brne	.+6      	; 0x1b76 <xQueueGenericCreate+0x24>
    1b70:	19 82       	std	Y+1, r1	; 0x01
    1b72:	1a 82       	std	Y+2, r1	; 0x02
    1b74:	0f c0       	rjmp	.+30     	; 0x1b94 <xQueueGenericCreate+0x42>
    1b76:	8f 81       	ldd	r24, Y+7	; 0x07
    1b78:	48 2f       	mov	r20, r24
    1b7a:	50 e0       	ldi	r21, 0x00	; 0
    1b7c:	88 85       	ldd	r24, Y+8	; 0x08
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	42 9f       	mul	r20, r18
    1b84:	c0 01       	movw	r24, r0
    1b86:	43 9f       	mul	r20, r19
    1b88:	90 0d       	add	r25, r0
    1b8a:	52 9f       	mul	r21, r18
    1b8c:	90 0d       	add	r25, r0
    1b8e:	11 24       	eor	r1, r1
    1b90:	89 83       	std	Y+1, r24	; 0x01
    1b92:	9a 83       	std	Y+2, r25	; 0x02
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	9a 81       	ldd	r25, Y+2	; 0x02
    1b98:	85 96       	adiw	r24, 0x25	; 37
    1b9a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <pvPortMalloc>
    1b9e:	8b 83       	std	Y+3, r24	; 0x03
    1ba0:	9c 83       	std	Y+4, r25	; 0x04
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba6:	89 2b       	or	r24, r25
    1ba8:	81 f0       	breq	.+32     	; 0x1bca <xQueueGenericCreate+0x78>
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	9c 81       	ldd	r25, Y+4	; 0x04
    1bae:	85 96       	adiw	r24, 0x25	; 37
    1bb0:	8d 83       	std	Y+5, r24	; 0x05
    1bb2:	9e 83       	std	Y+6, r25	; 0x06
    1bb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bba:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbc:	89 01       	movw	r16, r18
    1bbe:	29 85       	ldd	r18, Y+9	; 0x09
    1bc0:	ac 01       	movw	r20, r24
    1bc2:	68 85       	ldd	r22, Y+8	; 0x08
    1bc4:	8f 81       	ldd	r24, Y+7	; 0x07
    1bc6:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <prvInitialiseNewQueue>
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bce:	29 96       	adiw	r28, 0x09	; 9
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	1f 91       	pop	r17
    1bda:	0f 91       	pop	r16
    1bdc:	08 95       	ret

00001bde <prvInitialiseNewQueue>:
    1bde:	0f 93       	push	r16
    1be0:	1f 93       	push	r17
    1be2:	cf 93       	push	r28
    1be4:	df 93       	push	r29
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	27 97       	sbiw	r28, 0x07	; 7
    1bec:	cd bf       	out	0x3d, r28	; 61
    1bee:	de bf       	out	0x3e, r29	; 62
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	6a 83       	std	Y+2, r22	; 0x02
    1bf4:	4b 83       	std	Y+3, r20	; 0x03
    1bf6:	5c 83       	std	Y+4, r21	; 0x04
    1bf8:	2d 83       	std	Y+5, r18	; 0x05
    1bfa:	0e 83       	std	Y+6, r16	; 0x06
    1bfc:	1f 83       	std	Y+7, r17	; 0x07
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	88 23       	and	r24, r24
    1c02:	41 f4       	brne	.+16     	; 0x1c14 <prvInitialiseNewQueue+0x36>
    1c04:	8e 81       	ldd	r24, Y+6	; 0x06
    1c06:	9f 81       	ldd	r25, Y+7	; 0x07
    1c08:	2e 81       	ldd	r18, Y+6	; 0x06
    1c0a:	3f 81       	ldd	r19, Y+7	; 0x07
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	20 83       	st	Z, r18
    1c10:	31 83       	std	Z+1, r19	; 0x01
    1c12:	07 c0       	rjmp	.+14     	; 0x1c22 <prvInitialiseNewQueue+0x44>
    1c14:	8e 81       	ldd	r24, Y+6	; 0x06
    1c16:	9f 81       	ldd	r25, Y+7	; 0x07
    1c18:	2b 81       	ldd	r18, Y+3	; 0x03
    1c1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	20 83       	st	Z, r18
    1c20:	31 83       	std	Z+1, r19	; 0x01
    1c22:	8e 81       	ldd	r24, Y+6	; 0x06
    1c24:	9f 81       	ldd	r25, Y+7	; 0x07
    1c26:	29 81       	ldd	r18, Y+1	; 0x01
    1c28:	fc 01       	movw	r30, r24
    1c2a:	27 8f       	std	Z+31, r18	; 0x1f
    1c2c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c2e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c30:	2a 81       	ldd	r18, Y+2	; 0x02
    1c32:	fc 01       	movw	r30, r24
    1c34:	20 a3       	std	Z+32, r18	; 0x20
    1c36:	8e 81       	ldd	r24, Y+6	; 0x06
    1c38:	9f 81       	ldd	r25, Y+7	; 0x07
    1c3a:	61 e0       	ldi	r22, 0x01	; 1
    1c3c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <xQueueGenericReset>
    1c40:	8e 81       	ldd	r24, Y+6	; 0x06
    1c42:	9f 81       	ldd	r25, Y+7	; 0x07
    1c44:	2d 81       	ldd	r18, Y+5	; 0x05
    1c46:	fc 01       	movw	r30, r24
    1c48:	24 a3       	std	Z+36, r18	; 0x24
    1c4a:	00 00       	nop
    1c4c:	27 96       	adiw	r28, 0x07	; 7
    1c4e:	cd bf       	out	0x3d, r28	; 61
    1c50:	de bf       	out	0x3e, r29	; 62
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	1f 91       	pop	r17
    1c58:	0f 91       	pop	r16
    1c5a:	08 95       	ret

00001c5c <xQueueGenericSend>:
    1c5c:	0f 93       	push	r16
    1c5e:	cf 93       	push	r28
    1c60:	df 93       	push	r29
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	62 97       	sbiw	r28, 0x12	; 18
    1c68:	cd bf       	out	0x3d, r28	; 61
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	8a 87       	std	Y+10, r24	; 0x0a
    1c6e:	9b 87       	std	Y+11, r25	; 0x0b
    1c70:	6c 87       	std	Y+12, r22	; 0x0c
    1c72:	7d 87       	std	Y+13, r23	; 0x0d
    1c74:	2e 87       	std	Y+14, r18	; 0x0e
    1c76:	3f 87       	std	Y+15, r19	; 0x0f
    1c78:	48 8b       	std	Y+16, r20	; 0x10
    1c7a:	59 8b       	std	Y+17, r21	; 0x11
    1c7c:	0a 8b       	std	Y+18, r16	; 0x12
    1c7e:	19 82       	std	Y+1, r1	; 0x01
    1c80:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c82:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c84:	8a 83       	std	Y+2, r24	; 0x02
    1c86:	9b 83       	std	Y+3, r25	; 0x03
    1c88:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c8c:	ff 93       	push	r31
    1c8e:	f8 7f       	andi	r31, 0xF8	; 248
    1c90:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	9b 81       	ldd	r25, Y+3	; 0x03
    1c98:	fc 01       	movw	r30, r24
    1c9a:	26 8d       	ldd	r18, Z+30	; 0x1e
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	87 8d       	ldd	r24, Z+31	; 0x1f
    1ca4:	28 17       	cp	r18, r24
    1ca6:	18 f0       	brcs	.+6      	; 0x1cae <xQueueGenericSend+0x52>
    1ca8:	8a 89       	ldd	r24, Y+18	; 0x12
    1caa:	82 30       	cpi	r24, 0x02	; 2
    1cac:	19 f5       	brne	.+70     	; 0x1cf4 <xQueueGenericSend+0x98>
    1cae:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cb0:	3d 85       	ldd	r19, Y+13	; 0x0d
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb6:	4a 89       	ldd	r20, Y+18	; 0x12
    1cb8:	b9 01       	movw	r22, r18
    1cba:	0e 94 2c 10 	call	0x2058	; 0x2058 <prvCopyDataToQueue>
    1cbe:	8c 83       	std	Y+4, r24	; 0x04
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	83 89       	ldd	r24, Z+19	; 0x13
    1cc8:	88 23       	and	r24, r24
    1cca:	51 f0       	breq	.+20     	; 0x1ce0 <xQueueGenericSend+0x84>
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd0:	43 96       	adiw	r24, 0x13	; 19
    1cd2:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <xTaskRemoveFromEventList>
    1cd6:	88 23       	and	r24, r24
    1cd8:	41 f0       	breq	.+16     	; 0x1cea <xQueueGenericSend+0x8e>
    1cda:	0e 94 c3 0b 	call	0x1786	; 0x1786 <vPortYield>
    1cde:	05 c0       	rjmp	.+10     	; 0x1cea <xQueueGenericSend+0x8e>
    1ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce2:	88 23       	and	r24, r24
    1ce4:	11 f0       	breq	.+4      	; 0x1cea <xQueueGenericSend+0x8e>
    1ce6:	0e 94 c3 0b 	call	0x1786	; 0x1786 <vPortYield>
    1cea:	ff 91       	pop	r31
    1cec:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	6f c0       	rjmp	.+222    	; 0x1dd2 <xQueueGenericSend+0x176>
    1cf4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cf6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cf8:	a8 89       	ldd	r26, Y+16	; 0x10
    1cfa:	b9 89       	ldd	r27, Y+17	; 0x11
    1cfc:	89 2b       	or	r24, r25
    1cfe:	8a 2b       	or	r24, r26
    1d00:	8b 2b       	or	r24, r27
    1d02:	29 f4       	brne	.+10     	; 0x1d0e <xQueueGenericSend+0xb2>
    1d04:	ff 91       	pop	r31
    1d06:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	62 c0       	rjmp	.+196    	; 0x1dd2 <xQueueGenericSend+0x176>
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	88 23       	and	r24, r24
    1d12:	31 f4       	brne	.+12     	; 0x1d20 <xQueueGenericSend+0xc4>
    1d14:	ce 01       	movw	r24, r28
    1d16:	05 96       	adiw	r24, 0x05	; 5
    1d18:	0e 94 88 18 	call	0x3110	; 0x3110 <vTaskInternalSetTimeOutState>
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	89 83       	std	Y+1, r24	; 0x01
    1d20:	ff 91       	pop	r31
    1d22:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1d26:	0e 94 77 14 	call	0x28ee	; 0x28ee <vTaskSuspendAll>
    1d2a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1d2e:	ff 93       	push	r31
    1d30:	f8 7f       	andi	r31, 0xF8	; 248
    1d32:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	9b 81       	ldd	r25, Y+3	; 0x03
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	81 a1       	ldd	r24, Z+33	; 0x21
    1d3e:	8f 3f       	cpi	r24, 0xFF	; 255
    1d40:	21 f4       	brne	.+8      	; 0x1d4a <xQueueGenericSend+0xee>
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	9b 81       	ldd	r25, Y+3	; 0x03
    1d46:	fc 01       	movw	r30, r24
    1d48:	11 a2       	std	Z+33, r1	; 0x21
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4e:	fc 01       	movw	r30, r24
    1d50:	82 a1       	ldd	r24, Z+34	; 0x22
    1d52:	8f 3f       	cpi	r24, 0xFF	; 255
    1d54:	21 f4       	brne	.+8      	; 0x1d5e <xQueueGenericSend+0x102>
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	12 a2       	std	Z+34, r1	; 0x22
    1d5e:	ff 91       	pop	r31
    1d60:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1d64:	9e 01       	movw	r18, r28
    1d66:	22 5f       	subi	r18, 0xF2	; 242
    1d68:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	05 96       	adiw	r24, 0x05	; 5
    1d6e:	b9 01       	movw	r22, r18
    1d70:	0e 94 ab 18 	call	0x3156	; 0x3156 <xTaskCheckForTimeOut>
    1d74:	88 23       	and	r24, r24
    1d76:	31 f5       	brne	.+76     	; 0x1dc4 <xQueueGenericSend+0x168>
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7c:	0e 94 b7 11 	call	0x236e	; 0x236e <prvIsQueueFull>
    1d80:	88 23       	and	r24, r24
    1d82:	c9 f0       	breq	.+50     	; 0x1db6 <xQueueGenericSend+0x15a>
    1d84:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d86:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d88:	a8 89       	ldd	r26, Y+16	; 0x10
    1d8a:	b9 89       	ldd	r27, Y+17	; 0x11
    1d8c:	2a 81       	ldd	r18, Y+2	; 0x02
    1d8e:	3b 81       	ldd	r19, Y+3	; 0x03
    1d90:	28 5f       	subi	r18, 0xF8	; 248
    1d92:	3f 4f       	sbci	r19, 0xFF	; 255
    1d94:	ac 01       	movw	r20, r24
    1d96:	bd 01       	movw	r22, r26
    1d98:	c9 01       	movw	r24, r18
    1d9a:	0e 94 22 17 	call	0x2e44	; 0x2e44 <vTaskPlaceOnEventList>
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	9b 81       	ldd	r25, Y+3	; 0x03
    1da2:	0e 94 31 11 	call	0x2262	; 0x2262 <prvUnlockQueue>
    1da6:	0e 94 84 14 	call	0x2908	; 0x2908 <xTaskResumeAll>
    1daa:	88 23       	and	r24, r24
    1dac:	09 f0       	breq	.+2      	; 0x1db0 <xQueueGenericSend+0x154>
    1dae:	6c cf       	rjmp	.-296    	; 0x1c88 <xQueueGenericSend+0x2c>
    1db0:	0e 94 c3 0b 	call	0x1786	; 0x1786 <vPortYield>
    1db4:	69 cf       	rjmp	.-302    	; 0x1c88 <xQueueGenericSend+0x2c>
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dba:	0e 94 31 11 	call	0x2262	; 0x2262 <prvUnlockQueue>
    1dbe:	0e 94 84 14 	call	0x2908	; 0x2908 <xTaskResumeAll>
    1dc2:	62 cf       	rjmp	.-316    	; 0x1c88 <xQueueGenericSend+0x2c>
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc8:	0e 94 31 11 	call	0x2262	; 0x2262 <prvUnlockQueue>
    1dcc:	0e 94 84 14 	call	0x2908	; 0x2908 <xTaskResumeAll>
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	62 96       	adiw	r28, 0x12	; 18
    1dd4:	cd bf       	out	0x3d, r28	; 61
    1dd6:	de bf       	out	0x3e, r29	; 62
    1dd8:	df 91       	pop	r29
    1dda:	cf 91       	pop	r28
    1ddc:	0f 91       	pop	r16
    1dde:	08 95       	ret

00001de0 <xQueueGenericSendFromISR>:
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	2c 97       	sbiw	r28, 0x0c	; 12
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	8e 83       	std	Y+6, r24	; 0x06
    1df0:	9f 83       	std	Y+7, r25	; 0x07
    1df2:	68 87       	std	Y+8, r22	; 0x08
    1df4:	79 87       	std	Y+9, r23	; 0x09
    1df6:	4a 87       	std	Y+10, r20	; 0x0a
    1df8:	5b 87       	std	Y+11, r21	; 0x0b
    1dfa:	2c 87       	std	Y+12, r18	; 0x0c
    1dfc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dfe:	9f 81       	ldd	r25, Y+7	; 0x07
    1e00:	8a 83       	std	Y+2, r24	; 0x02
    1e02:	9b 83       	std	Y+3, r25	; 0x03
    1e04:	0e 94 9b 09 	call	0x1336	; 0x1336 <_portSetInterruptMaskFromIsr>
    1e08:	8c 83       	std	Y+4, r24	; 0x04
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e0e:	fc 01       	movw	r30, r24
    1e10:	26 8d       	ldd	r18, Z+30	; 0x1e
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	9b 81       	ldd	r25, Y+3	; 0x03
    1e16:	fc 01       	movw	r30, r24
    1e18:	87 8d       	ldd	r24, Z+31	; 0x1f
    1e1a:	28 17       	cp	r18, r24
    1e1c:	18 f0       	brcs	.+6      	; 0x1e24 <xQueueGenericSendFromISR+0x44>
    1e1e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e20:	82 30       	cpi	r24, 0x02	; 2
    1e22:	89 f5       	brne	.+98     	; 0x1e86 <xQueueGenericSendFromISR+0xa6>
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	9b 81       	ldd	r25, Y+3	; 0x03
    1e28:	fc 01       	movw	r30, r24
    1e2a:	82 a1       	ldd	r24, Z+34	; 0x22
    1e2c:	8d 83       	std	Y+5, r24	; 0x05
    1e2e:	28 85       	ldd	r18, Y+8	; 0x08
    1e30:	39 85       	ldd	r19, Y+9	; 0x09
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	9b 81       	ldd	r25, Y+3	; 0x03
    1e36:	4c 85       	ldd	r20, Y+12	; 0x0c
    1e38:	b9 01       	movw	r22, r18
    1e3a:	0e 94 2c 10 	call	0x2058	; 0x2058 <prvCopyDataToQueue>
    1e3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e40:	8f 3f       	cpi	r24, 0xFF	; 255
    1e42:	b9 f4       	brne	.+46     	; 0x1e72 <xQueueGenericSendFromISR+0x92>
    1e44:	8a 81       	ldd	r24, Y+2	; 0x02
    1e46:	9b 81       	ldd	r25, Y+3	; 0x03
    1e48:	fc 01       	movw	r30, r24
    1e4a:	83 89       	ldd	r24, Z+19	; 0x13
    1e4c:	88 23       	and	r24, r24
    1e4e:	c1 f0       	breq	.+48     	; 0x1e80 <xQueueGenericSendFromISR+0xa0>
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	9b 81       	ldd	r25, Y+3	; 0x03
    1e54:	43 96       	adiw	r24, 0x13	; 19
    1e56:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <xTaskRemoveFromEventList>
    1e5a:	88 23       	and	r24, r24
    1e5c:	89 f0       	breq	.+34     	; 0x1e80 <xQueueGenericSendFromISR+0xa0>
    1e5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e60:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e62:	89 2b       	or	r24, r25
    1e64:	69 f0       	breq	.+26     	; 0x1e80 <xQueueGenericSendFromISR+0xa0>
    1e66:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e68:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e6a:	21 e0       	ldi	r18, 0x01	; 1
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	20 83       	st	Z, r18
    1e70:	07 c0       	rjmp	.+14     	; 0x1e80 <xQueueGenericSendFromISR+0xa0>
    1e72:	8d 81       	ldd	r24, Y+5	; 0x05
    1e74:	8f 5f       	subi	r24, 0xFF	; 255
    1e76:	28 2f       	mov	r18, r24
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7c:	fc 01       	movw	r30, r24
    1e7e:	22 a3       	std	Z+34, r18	; 0x22
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	01 c0       	rjmp	.+2      	; 0x1e88 <xQueueGenericSendFromISR+0xa8>
    1e86:	19 82       	std	Y+1, r1	; 0x01
    1e88:	80 ea       	ldi	r24, 0xA0	; 160
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e8e:	fc 01       	movw	r30, r24
    1e90:	22 83       	std	Z+2, r18	; 0x02
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	2c 96       	adiw	r28, 0x0c	; 12
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	de bf       	out	0x3e, r29	; 62
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	08 95       	ret

00001ea0 <xQueueReceive>:
    1ea0:	cf 93       	push	r28
    1ea2:	df 93       	push	r29
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    1ea8:	61 97       	sbiw	r28, 0x11	; 17
    1eaa:	cd bf       	out	0x3d, r28	; 61
    1eac:	de bf       	out	0x3e, r29	; 62
    1eae:	8a 87       	std	Y+10, r24	; 0x0a
    1eb0:	9b 87       	std	Y+11, r25	; 0x0b
    1eb2:	6c 87       	std	Y+12, r22	; 0x0c
    1eb4:	7d 87       	std	Y+13, r23	; 0x0d
    1eb6:	2e 87       	std	Y+14, r18	; 0x0e
    1eb8:	3f 87       	std	Y+15, r19	; 0x0f
    1eba:	48 8b       	std	Y+16, r20	; 0x10
    1ebc:	59 8b       	std	Y+17, r21	; 0x11
    1ebe:	19 82       	std	Y+1, r1	; 0x01
    1ec0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ec2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ec4:	8a 83       	std	Y+2, r24	; 0x02
    1ec6:	9b 83       	std	Y+3, r25	; 0x03
    1ec8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ecc:	ff 93       	push	r31
    1ece:	f8 7f       	andi	r31, 0xF8	; 248
    1ed0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed8:	fc 01       	movw	r30, r24
    1eda:	86 8d       	ldd	r24, Z+30	; 0x1e
    1edc:	8c 83       	std	Y+4, r24	; 0x04
    1ede:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee0:	88 23       	and	r24, r24
    1ee2:	11 f1       	breq	.+68     	; 0x1f28 <xQueueReceive+0x88>
    1ee4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ee6:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	9b 81       	ldd	r25, Y+3	; 0x03
    1eec:	b9 01       	movw	r22, r18
    1eee:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <prvCopyDataFromQueue>
    1ef2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef4:	2f ef       	ldi	r18, 0xFF	; 255
    1ef6:	28 0f       	add	r18, r24
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	9b 81       	ldd	r25, Y+3	; 0x03
    1efc:	fc 01       	movw	r30, r24
    1efe:	26 8f       	std	Z+30, r18	; 0x1e
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	9b 81       	ldd	r25, Y+3	; 0x03
    1f04:	fc 01       	movw	r30, r24
    1f06:	80 85       	ldd	r24, Z+8	; 0x08
    1f08:	88 23       	and	r24, r24
    1f0a:	49 f0       	breq	.+18     	; 0x1f1e <xQueueReceive+0x7e>
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f10:	08 96       	adiw	r24, 0x08	; 8
    1f12:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <xTaskRemoveFromEventList>
    1f16:	88 23       	and	r24, r24
    1f18:	11 f0       	breq	.+4      	; 0x1f1e <xQueueReceive+0x7e>
    1f1a:	0e 94 c3 0b 	call	0x1786	; 0x1786 <vPortYield>
    1f1e:	ff 91       	pop	r31
    1f20:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	76 c0       	rjmp	.+236    	; 0x2014 <xQueueReceive+0x174>
    1f28:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f2a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f2c:	a8 89       	ldd	r26, Y+16	; 0x10
    1f2e:	b9 89       	ldd	r27, Y+17	; 0x11
    1f30:	89 2b       	or	r24, r25
    1f32:	8a 2b       	or	r24, r26
    1f34:	8b 2b       	or	r24, r27
    1f36:	29 f4       	brne	.+10     	; 0x1f42 <xQueueReceive+0xa2>
    1f38:	ff 91       	pop	r31
    1f3a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	69 c0       	rjmp	.+210    	; 0x2014 <xQueueReceive+0x174>
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	88 23       	and	r24, r24
    1f46:	31 f4       	brne	.+12     	; 0x1f54 <xQueueReceive+0xb4>
    1f48:	ce 01       	movw	r24, r28
    1f4a:	05 96       	adiw	r24, 0x05	; 5
    1f4c:	0e 94 88 18 	call	0x3110	; 0x3110 <vTaskInternalSetTimeOutState>
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	89 83       	std	Y+1, r24	; 0x01
    1f54:	ff 91       	pop	r31
    1f56:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f5a:	0e 94 77 14 	call	0x28ee	; 0x28ee <vTaskSuspendAll>
    1f5e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f62:	ff 93       	push	r31
    1f64:	f8 7f       	andi	r31, 0xF8	; 248
    1f66:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6e:	fc 01       	movw	r30, r24
    1f70:	81 a1       	ldd	r24, Z+33	; 0x21
    1f72:	8f 3f       	cpi	r24, 0xFF	; 255
    1f74:	21 f4       	brne	.+8      	; 0x1f7e <xQueueReceive+0xde>
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	9b 81       	ldd	r25, Y+3	; 0x03
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	11 a2       	std	Z+33, r1	; 0x21
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	9b 81       	ldd	r25, Y+3	; 0x03
    1f82:	fc 01       	movw	r30, r24
    1f84:	82 a1       	ldd	r24, Z+34	; 0x22
    1f86:	8f 3f       	cpi	r24, 0xFF	; 255
    1f88:	21 f4       	brne	.+8      	; 0x1f92 <xQueueReceive+0xf2>
    1f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8e:	fc 01       	movw	r30, r24
    1f90:	12 a2       	std	Z+34, r1	; 0x22
    1f92:	ff 91       	pop	r31
    1f94:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f98:	9e 01       	movw	r18, r28
    1f9a:	22 5f       	subi	r18, 0xF2	; 242
    1f9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	05 96       	adiw	r24, 0x05	; 5
    1fa2:	b9 01       	movw	r22, r18
    1fa4:	0e 94 ab 18 	call	0x3156	; 0x3156 <xTaskCheckForTimeOut>
    1fa8:	88 23       	and	r24, r24
    1faa:	31 f5       	brne	.+76     	; 0x1ff8 <xQueueReceive+0x158>
    1fac:	8a 81       	ldd	r24, Y+2	; 0x02
    1fae:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb0:	0e 94 96 11 	call	0x232c	; 0x232c <prvIsQueueEmpty>
    1fb4:	88 23       	and	r24, r24
    1fb6:	c9 f0       	breq	.+50     	; 0x1fea <xQueueReceive+0x14a>
    1fb8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fba:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fbc:	a8 89       	ldd	r26, Y+16	; 0x10
    1fbe:	b9 89       	ldd	r27, Y+17	; 0x11
    1fc0:	2a 81       	ldd	r18, Y+2	; 0x02
    1fc2:	3b 81       	ldd	r19, Y+3	; 0x03
    1fc4:	2d 5e       	subi	r18, 0xED	; 237
    1fc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc8:	ac 01       	movw	r20, r24
    1fca:	bd 01       	movw	r22, r26
    1fcc:	c9 01       	movw	r24, r18
    1fce:	0e 94 22 17 	call	0x2e44	; 0x2e44 <vTaskPlaceOnEventList>
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd6:	0e 94 31 11 	call	0x2262	; 0x2262 <prvUnlockQueue>
    1fda:	0e 94 84 14 	call	0x2908	; 0x2908 <xTaskResumeAll>
    1fde:	88 23       	and	r24, r24
    1fe0:	09 f0       	breq	.+2      	; 0x1fe4 <xQueueReceive+0x144>
    1fe2:	72 cf       	rjmp	.-284    	; 0x1ec8 <xQueueReceive+0x28>
    1fe4:	0e 94 c3 0b 	call	0x1786	; 0x1786 <vPortYield>
    1fe8:	6f cf       	rjmp	.-290    	; 0x1ec8 <xQueueReceive+0x28>
    1fea:	8a 81       	ldd	r24, Y+2	; 0x02
    1fec:	9b 81       	ldd	r25, Y+3	; 0x03
    1fee:	0e 94 31 11 	call	0x2262	; 0x2262 <prvUnlockQueue>
    1ff2:	0e 94 84 14 	call	0x2908	; 0x2908 <xTaskResumeAll>
    1ff6:	68 cf       	rjmp	.-304    	; 0x1ec8 <xQueueReceive+0x28>
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	9b 81       	ldd	r25, Y+3	; 0x03
    1ffc:	0e 94 31 11 	call	0x2262	; 0x2262 <prvUnlockQueue>
    2000:	0e 94 84 14 	call	0x2908	; 0x2908 <xTaskResumeAll>
    2004:	8a 81       	ldd	r24, Y+2	; 0x02
    2006:	9b 81       	ldd	r25, Y+3	; 0x03
    2008:	0e 94 96 11 	call	0x232c	; 0x232c <prvIsQueueEmpty>
    200c:	88 23       	and	r24, r24
    200e:	09 f4       	brne	.+2      	; 0x2012 <xQueueReceive+0x172>
    2010:	5b cf       	rjmp	.-330    	; 0x1ec8 <xQueueReceive+0x28>
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	61 96       	adiw	r28, 0x11	; 17
    2016:	cd bf       	out	0x3d, r28	; 61
    2018:	de bf       	out	0x3e, r29	; 62
    201a:	df 91       	pop	r29
    201c:	cf 91       	pop	r28
    201e:	08 95       	ret

00002020 <uxQueueMessagesWaiting>:
    2020:	cf 93       	push	r28
    2022:	df 93       	push	r29
    2024:	00 d0       	rcall	.+0      	; 0x2026 <uxQueueMessagesWaiting+0x6>
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
    202a:	8a 83       	std	Y+2, r24	; 0x02
    202c:	9b 83       	std	Y+3, r25	; 0x03
    202e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2032:	ff 93       	push	r31
    2034:	f8 7f       	andi	r31, 0xF8	; 248
    2036:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	9b 81       	ldd	r25, Y+3	; 0x03
    203e:	fc 01       	movw	r30, r24
    2040:	86 8d       	ldd	r24, Z+30	; 0x1e
    2042:	89 83       	std	Y+1, r24	; 0x01
    2044:	ff 91       	pop	r31
    2046:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	23 96       	adiw	r28, 0x03	; 3
    204e:	cd bf       	out	0x3d, r28	; 61
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	df 91       	pop	r29
    2054:	cf 91       	pop	r28
    2056:	08 95       	ret

00002058 <prvCopyDataToQueue>:
    2058:	cf 93       	push	r28
    205a:	df 93       	push	r29
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	27 97       	sbiw	r28, 0x07	; 7
    2062:	cd bf       	out	0x3d, r28	; 61
    2064:	de bf       	out	0x3e, r29	; 62
    2066:	8b 83       	std	Y+3, r24	; 0x03
    2068:	9c 83       	std	Y+4, r25	; 0x04
    206a:	6d 83       	std	Y+5, r22	; 0x05
    206c:	7e 83       	std	Y+6, r23	; 0x06
    206e:	4f 83       	std	Y+7, r20	; 0x07
    2070:	1a 82       	std	Y+2, r1	; 0x02
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	9c 81       	ldd	r25, Y+4	; 0x04
    2076:	fc 01       	movw	r30, r24
    2078:	86 8d       	ldd	r24, Z+30	; 0x1e
    207a:	89 83       	std	Y+1, r24	; 0x01
    207c:	8b 81       	ldd	r24, Y+3	; 0x03
    207e:	9c 81       	ldd	r25, Y+4	; 0x04
    2080:	fc 01       	movw	r30, r24
    2082:	80 a1       	ldd	r24, Z+32	; 0x20
    2084:	88 23       	and	r24, r24
    2086:	09 f4       	brne	.+2      	; 0x208a <prvCopyDataToQueue+0x32>
    2088:	8e c0       	rjmp	.+284    	; 0x21a6 <prvCopyDataToQueue+0x14e>
    208a:	8f 81       	ldd	r24, Y+7	; 0x07
    208c:	88 23       	and	r24, r24
    208e:	d9 f5       	brne	.+118    	; 0x2106 <prvCopyDataToQueue+0xae>
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	9c 81       	ldd	r25, Y+4	; 0x04
    2094:	fc 01       	movw	r30, r24
    2096:	80 a1       	ldd	r24, Z+32	; 0x20
    2098:	48 2f       	mov	r20, r24
    209a:	50 e0       	ldi	r21, 0x00	; 0
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	9c 81       	ldd	r25, Y+4	; 0x04
    20a0:	fc 01       	movw	r30, r24
    20a2:	84 81       	ldd	r24, Z+4	; 0x04
    20a4:	95 81       	ldd	r25, Z+5	; 0x05
    20a6:	2d 81       	ldd	r18, Y+5	; 0x05
    20a8:	3e 81       	ldd	r19, Y+6	; 0x06
    20aa:	b9 01       	movw	r22, r18
    20ac:	0e 94 33 3b 	call	0x7666	; 0x7666 <memcpy>
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	9c 81       	ldd	r25, Y+4	; 0x04
    20b4:	fc 01       	movw	r30, r24
    20b6:	24 81       	ldd	r18, Z+4	; 0x04
    20b8:	35 81       	ldd	r19, Z+5	; 0x05
    20ba:	8b 81       	ldd	r24, Y+3	; 0x03
    20bc:	9c 81       	ldd	r25, Y+4	; 0x04
    20be:	fc 01       	movw	r30, r24
    20c0:	80 a1       	ldd	r24, Z+32	; 0x20
    20c2:	88 2f       	mov	r24, r24
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	28 0f       	add	r18, r24
    20c8:	39 1f       	adc	r19, r25
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	fc 01       	movw	r30, r24
    20d0:	24 83       	std	Z+4, r18	; 0x04
    20d2:	35 83       	std	Z+5, r19	; 0x05
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	9c 81       	ldd	r25, Y+4	; 0x04
    20d8:	fc 01       	movw	r30, r24
    20da:	24 81       	ldd	r18, Z+4	; 0x04
    20dc:	35 81       	ldd	r19, Z+5	; 0x05
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	9c 81       	ldd	r25, Y+4	; 0x04
    20e2:	fc 01       	movw	r30, r24
    20e4:	82 81       	ldd	r24, Z+2	; 0x02
    20e6:	93 81       	ldd	r25, Z+3	; 0x03
    20e8:	28 17       	cp	r18, r24
    20ea:	39 07       	cpc	r19, r25
    20ec:	08 f4       	brcc	.+2      	; 0x20f0 <prvCopyDataToQueue+0x98>
    20ee:	5b c0       	rjmp	.+182    	; 0x21a6 <prvCopyDataToQueue+0x14e>
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	9c 81       	ldd	r25, Y+4	; 0x04
    20f4:	fc 01       	movw	r30, r24
    20f6:	20 81       	ld	r18, Z
    20f8:	31 81       	ldd	r19, Z+1	; 0x01
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	9c 81       	ldd	r25, Y+4	; 0x04
    20fe:	fc 01       	movw	r30, r24
    2100:	24 83       	std	Z+4, r18	; 0x04
    2102:	35 83       	std	Z+5, r19	; 0x05
    2104:	50 c0       	rjmp	.+160    	; 0x21a6 <prvCopyDataToQueue+0x14e>
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	9c 81       	ldd	r25, Y+4	; 0x04
    210a:	fc 01       	movw	r30, r24
    210c:	80 a1       	ldd	r24, Z+32	; 0x20
    210e:	48 2f       	mov	r20, r24
    2110:	50 e0       	ldi	r21, 0x00	; 0
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	9c 81       	ldd	r25, Y+4	; 0x04
    2116:	fc 01       	movw	r30, r24
    2118:	86 81       	ldd	r24, Z+6	; 0x06
    211a:	97 81       	ldd	r25, Z+7	; 0x07
    211c:	2d 81       	ldd	r18, Y+5	; 0x05
    211e:	3e 81       	ldd	r19, Y+6	; 0x06
    2120:	b9 01       	movw	r22, r18
    2122:	0e 94 33 3b 	call	0x7666	; 0x7666 <memcpy>
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	9c 81       	ldd	r25, Y+4	; 0x04
    212a:	fc 01       	movw	r30, r24
    212c:	26 81       	ldd	r18, Z+6	; 0x06
    212e:	37 81       	ldd	r19, Z+7	; 0x07
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	9c 81       	ldd	r25, Y+4	; 0x04
    2134:	fc 01       	movw	r30, r24
    2136:	80 a1       	ldd	r24, Z+32	; 0x20
    2138:	88 2f       	mov	r24, r24
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	91 95       	neg	r25
    213e:	81 95       	neg	r24
    2140:	91 09       	sbc	r25, r1
    2142:	28 0f       	add	r18, r24
    2144:	39 1f       	adc	r19, r25
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	9c 81       	ldd	r25, Y+4	; 0x04
    214a:	fc 01       	movw	r30, r24
    214c:	26 83       	std	Z+6, r18	; 0x06
    214e:	37 83       	std	Z+7, r19	; 0x07
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	9c 81       	ldd	r25, Y+4	; 0x04
    2154:	fc 01       	movw	r30, r24
    2156:	26 81       	ldd	r18, Z+6	; 0x06
    2158:	37 81       	ldd	r19, Z+7	; 0x07
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	9c 81       	ldd	r25, Y+4	; 0x04
    215e:	fc 01       	movw	r30, r24
    2160:	80 81       	ld	r24, Z
    2162:	91 81       	ldd	r25, Z+1	; 0x01
    2164:	28 17       	cp	r18, r24
    2166:	39 07       	cpc	r19, r25
    2168:	a8 f4       	brcc	.+42     	; 0x2194 <prvCopyDataToQueue+0x13c>
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	9c 81       	ldd	r25, Y+4	; 0x04
    216e:	fc 01       	movw	r30, r24
    2170:	22 81       	ldd	r18, Z+2	; 0x02
    2172:	33 81       	ldd	r19, Z+3	; 0x03
    2174:	8b 81       	ldd	r24, Y+3	; 0x03
    2176:	9c 81       	ldd	r25, Y+4	; 0x04
    2178:	fc 01       	movw	r30, r24
    217a:	80 a1       	ldd	r24, Z+32	; 0x20
    217c:	88 2f       	mov	r24, r24
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	91 95       	neg	r25
    2182:	81 95       	neg	r24
    2184:	91 09       	sbc	r25, r1
    2186:	28 0f       	add	r18, r24
    2188:	39 1f       	adc	r19, r25
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	9c 81       	ldd	r25, Y+4	; 0x04
    218e:	fc 01       	movw	r30, r24
    2190:	26 83       	std	Z+6, r18	; 0x06
    2192:	37 83       	std	Z+7, r19	; 0x07
    2194:	8f 81       	ldd	r24, Y+7	; 0x07
    2196:	82 30       	cpi	r24, 0x02	; 2
    2198:	31 f4       	brne	.+12     	; 0x21a6 <prvCopyDataToQueue+0x14e>
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	88 23       	and	r24, r24
    219e:	19 f0       	breq	.+6      	; 0x21a6 <prvCopyDataToQueue+0x14e>
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	81 50       	subi	r24, 0x01	; 1
    21a4:	89 83       	std	Y+1, r24	; 0x01
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	21 e0       	ldi	r18, 0x01	; 1
    21aa:	28 0f       	add	r18, r24
    21ac:	8b 81       	ldd	r24, Y+3	; 0x03
    21ae:	9c 81       	ldd	r25, Y+4	; 0x04
    21b0:	fc 01       	movw	r30, r24
    21b2:	26 8f       	std	Z+30, r18	; 0x1e
    21b4:	8a 81       	ldd	r24, Y+2	; 0x02
    21b6:	27 96       	adiw	r28, 0x07	; 7
    21b8:	cd bf       	out	0x3d, r28	; 61
    21ba:	de bf       	out	0x3e, r29	; 62
    21bc:	df 91       	pop	r29
    21be:	cf 91       	pop	r28
    21c0:	08 95       	ret

000021c2 <prvCopyDataFromQueue>:
    21c2:	cf 93       	push	r28
    21c4:	df 93       	push	r29
    21c6:	00 d0       	rcall	.+0      	; 0x21c8 <prvCopyDataFromQueue+0x6>
    21c8:	1f 92       	push	r1
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
    21ce:	89 83       	std	Y+1, r24	; 0x01
    21d0:	9a 83       	std	Y+2, r25	; 0x02
    21d2:	6b 83       	std	Y+3, r22	; 0x03
    21d4:	7c 83       	std	Y+4, r23	; 0x04
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	9a 81       	ldd	r25, Y+2	; 0x02
    21da:	fc 01       	movw	r30, r24
    21dc:	80 a1       	ldd	r24, Z+32	; 0x20
    21de:	88 23       	and	r24, r24
    21e0:	c9 f1       	breq	.+114    	; 0x2254 <prvCopyDataFromQueue+0x92>
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	9a 81       	ldd	r25, Y+2	; 0x02
    21e6:	fc 01       	movw	r30, r24
    21e8:	26 81       	ldd	r18, Z+6	; 0x06
    21ea:	37 81       	ldd	r19, Z+7	; 0x07
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	9a 81       	ldd	r25, Y+2	; 0x02
    21f0:	fc 01       	movw	r30, r24
    21f2:	80 a1       	ldd	r24, Z+32	; 0x20
    21f4:	88 2f       	mov	r24, r24
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	28 0f       	add	r18, r24
    21fa:	39 1f       	adc	r19, r25
    21fc:	89 81       	ldd	r24, Y+1	; 0x01
    21fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2200:	fc 01       	movw	r30, r24
    2202:	26 83       	std	Z+6, r18	; 0x06
    2204:	37 83       	std	Z+7, r19	; 0x07
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	9a 81       	ldd	r25, Y+2	; 0x02
    220a:	fc 01       	movw	r30, r24
    220c:	26 81       	ldd	r18, Z+6	; 0x06
    220e:	37 81       	ldd	r19, Z+7	; 0x07
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	9a 81       	ldd	r25, Y+2	; 0x02
    2214:	fc 01       	movw	r30, r24
    2216:	82 81       	ldd	r24, Z+2	; 0x02
    2218:	93 81       	ldd	r25, Z+3	; 0x03
    221a:	28 17       	cp	r18, r24
    221c:	39 07       	cpc	r19, r25
    221e:	50 f0       	brcs	.+20     	; 0x2234 <prvCopyDataFromQueue+0x72>
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	9a 81       	ldd	r25, Y+2	; 0x02
    2224:	fc 01       	movw	r30, r24
    2226:	20 81       	ld	r18, Z
    2228:	31 81       	ldd	r19, Z+1	; 0x01
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	9a 81       	ldd	r25, Y+2	; 0x02
    222e:	fc 01       	movw	r30, r24
    2230:	26 83       	std	Z+6, r18	; 0x06
    2232:	37 83       	std	Z+7, r19	; 0x07
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	9a 81       	ldd	r25, Y+2	; 0x02
    2238:	fc 01       	movw	r30, r24
    223a:	80 a1       	ldd	r24, Z+32	; 0x20
    223c:	48 2f       	mov	r20, r24
    223e:	50 e0       	ldi	r21, 0x00	; 0
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	9a 81       	ldd	r25, Y+2	; 0x02
    2244:	fc 01       	movw	r30, r24
    2246:	26 81       	ldd	r18, Z+6	; 0x06
    2248:	37 81       	ldd	r19, Z+7	; 0x07
    224a:	8b 81       	ldd	r24, Y+3	; 0x03
    224c:	9c 81       	ldd	r25, Y+4	; 0x04
    224e:	b9 01       	movw	r22, r18
    2250:	0e 94 33 3b 	call	0x7666	; 0x7666 <memcpy>
    2254:	00 00       	nop
    2256:	24 96       	adiw	r28, 0x04	; 4
    2258:	cd bf       	out	0x3d, r28	; 61
    225a:	de bf       	out	0x3e, r29	; 62
    225c:	df 91       	pop	r29
    225e:	cf 91       	pop	r28
    2260:	08 95       	ret

00002262 <prvUnlockQueue>:
    2262:	cf 93       	push	r28
    2264:	df 93       	push	r29
    2266:	00 d0       	rcall	.+0      	; 0x2268 <prvUnlockQueue+0x6>
    2268:	1f 92       	push	r1
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
    226e:	8b 83       	std	Y+3, r24	; 0x03
    2270:	9c 83       	std	Y+4, r25	; 0x04
    2272:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2276:	ff 93       	push	r31
    2278:	f8 7f       	andi	r31, 0xF8	; 248
    227a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	9c 81       	ldd	r25, Y+4	; 0x04
    2282:	fc 01       	movw	r30, r24
    2284:	82 a1       	ldd	r24, Z+34	; 0x22
    2286:	89 83       	std	Y+1, r24	; 0x01
    2288:	12 c0       	rjmp	.+36     	; 0x22ae <prvUnlockQueue+0x4c>
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	9c 81       	ldd	r25, Y+4	; 0x04
    228e:	fc 01       	movw	r30, r24
    2290:	83 89       	ldd	r24, Z+19	; 0x13
    2292:	88 23       	and	r24, r24
    2294:	81 f0       	breq	.+32     	; 0x22b6 <prvUnlockQueue+0x54>
    2296:	8b 81       	ldd	r24, Y+3	; 0x03
    2298:	9c 81       	ldd	r25, Y+4	; 0x04
    229a:	43 96       	adiw	r24, 0x13	; 19
    229c:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <xTaskRemoveFromEventList>
    22a0:	88 23       	and	r24, r24
    22a2:	11 f0       	breq	.+4      	; 0x22a8 <prvUnlockQueue+0x46>
    22a4:	0e 94 53 19 	call	0x32a6	; 0x32a6 <vTaskMissedYield>
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	81 50       	subi	r24, 0x01	; 1
    22ac:	89 83       	std	Y+1, r24	; 0x01
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	18 16       	cp	r1, r24
    22b2:	5c f3       	brlt	.-42     	; 0x228a <prvUnlockQueue+0x28>
    22b4:	01 c0       	rjmp	.+2      	; 0x22b8 <prvUnlockQueue+0x56>
    22b6:	00 00       	nop
    22b8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ba:	9c 81       	ldd	r25, Y+4	; 0x04
    22bc:	2f ef       	ldi	r18, 0xFF	; 255
    22be:	fc 01       	movw	r30, r24
    22c0:	22 a3       	std	Z+34, r18	; 0x22
    22c2:	ff 91       	pop	r31
    22c4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    22c8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    22cc:	ff 93       	push	r31
    22ce:	f8 7f       	andi	r31, 0xF8	; 248
    22d0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	9c 81       	ldd	r25, Y+4	; 0x04
    22d8:	fc 01       	movw	r30, r24
    22da:	81 a1       	ldd	r24, Z+33	; 0x21
    22dc:	8a 83       	std	Y+2, r24	; 0x02
    22de:	12 c0       	rjmp	.+36     	; 0x2304 <prvUnlockQueue+0xa2>
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	9c 81       	ldd	r25, Y+4	; 0x04
    22e4:	fc 01       	movw	r30, r24
    22e6:	80 85       	ldd	r24, Z+8	; 0x08
    22e8:	88 23       	and	r24, r24
    22ea:	81 f0       	breq	.+32     	; 0x230c <prvUnlockQueue+0xaa>
    22ec:	8b 81       	ldd	r24, Y+3	; 0x03
    22ee:	9c 81       	ldd	r25, Y+4	; 0x04
    22f0:	08 96       	adiw	r24, 0x08	; 8
    22f2:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <xTaskRemoveFromEventList>
    22f6:	88 23       	and	r24, r24
    22f8:	11 f0       	breq	.+4      	; 0x22fe <prvUnlockQueue+0x9c>
    22fa:	0e 94 53 19 	call	0x32a6	; 0x32a6 <vTaskMissedYield>
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	81 50       	subi	r24, 0x01	; 1
    2302:	8a 83       	std	Y+2, r24	; 0x02
    2304:	8a 81       	ldd	r24, Y+2	; 0x02
    2306:	18 16       	cp	r1, r24
    2308:	5c f3       	brlt	.-42     	; 0x22e0 <prvUnlockQueue+0x7e>
    230a:	01 c0       	rjmp	.+2      	; 0x230e <prvUnlockQueue+0xac>
    230c:	00 00       	nop
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	9c 81       	ldd	r25, Y+4	; 0x04
    2312:	2f ef       	ldi	r18, 0xFF	; 255
    2314:	fc 01       	movw	r30, r24
    2316:	21 a3       	std	Z+33, r18	; 0x21
    2318:	ff 91       	pop	r31
    231a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    231e:	00 00       	nop
    2320:	24 96       	adiw	r28, 0x04	; 4
    2322:	cd bf       	out	0x3d, r28	; 61
    2324:	de bf       	out	0x3e, r29	; 62
    2326:	df 91       	pop	r29
    2328:	cf 91       	pop	r28
    232a:	08 95       	ret

0000232c <prvIsQueueEmpty>:
    232c:	cf 93       	push	r28
    232e:	df 93       	push	r29
    2330:	00 d0       	rcall	.+0      	; 0x2332 <prvIsQueueEmpty+0x6>
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	8a 83       	std	Y+2, r24	; 0x02
    2338:	9b 83       	std	Y+3, r25	; 0x03
    233a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    233e:	ff 93       	push	r31
    2340:	f8 7f       	andi	r31, 0xF8	; 248
    2342:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	9b 81       	ldd	r25, Y+3	; 0x03
    234a:	fc 01       	movw	r30, r24
    234c:	86 8d       	ldd	r24, Z+30	; 0x1e
    234e:	88 23       	and	r24, r24
    2350:	19 f4       	brne	.+6      	; 0x2358 <prvIsQueueEmpty+0x2c>
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	89 83       	std	Y+1, r24	; 0x01
    2356:	01 c0       	rjmp	.+2      	; 0x235a <prvIsQueueEmpty+0x2e>
    2358:	19 82       	std	Y+1, r1	; 0x01
    235a:	ff 91       	pop	r31
    235c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	23 96       	adiw	r28, 0x03	; 3
    2364:	cd bf       	out	0x3d, r28	; 61
    2366:	de bf       	out	0x3e, r29	; 62
    2368:	df 91       	pop	r29
    236a:	cf 91       	pop	r28
    236c:	08 95       	ret

0000236e <prvIsQueueFull>:
    236e:	cf 93       	push	r28
    2370:	df 93       	push	r29
    2372:	00 d0       	rcall	.+0      	; 0x2374 <prvIsQueueFull+0x6>
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
    2378:	8a 83       	std	Y+2, r24	; 0x02
    237a:	9b 83       	std	Y+3, r25	; 0x03
    237c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2380:	ff 93       	push	r31
    2382:	f8 7f       	andi	r31, 0xF8	; 248
    2384:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2388:	8a 81       	ldd	r24, Y+2	; 0x02
    238a:	9b 81       	ldd	r25, Y+3	; 0x03
    238c:	fc 01       	movw	r30, r24
    238e:	26 8d       	ldd	r18, Z+30	; 0x1e
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	9b 81       	ldd	r25, Y+3	; 0x03
    2394:	fc 01       	movw	r30, r24
    2396:	87 8d       	ldd	r24, Z+31	; 0x1f
    2398:	28 17       	cp	r18, r24
    239a:	19 f4       	brne	.+6      	; 0x23a2 <prvIsQueueFull+0x34>
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	89 83       	std	Y+1, r24	; 0x01
    23a0:	01 c0       	rjmp	.+2      	; 0x23a4 <prvIsQueueFull+0x36>
    23a2:	19 82       	std	Y+1, r1	; 0x01
    23a4:	ff 91       	pop	r31
    23a6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	23 96       	adiw	r28, 0x03	; 3
    23ae:	cd bf       	out	0x3d, r28	; 61
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	df 91       	pop	r29
    23b4:	cf 91       	pop	r28
    23b6:	08 95       	ret

000023b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    23b8:	cf 93       	push	r28
    23ba:	df 93       	push	r29
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	29 97       	sbiw	r28, 0x09	; 9
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	de bf       	out	0x3e, r29	; 62
    23c6:	8b 83       	std	Y+3, r24	; 0x03
    23c8:	9c 83       	std	Y+4, r25	; 0x04
    23ca:	4d 83       	std	Y+5, r20	; 0x05
    23cc:	5e 83       	std	Y+6, r21	; 0x06
    23ce:	6f 83       	std	Y+7, r22	; 0x07
    23d0:	78 87       	std	Y+8, r23	; 0x08
    23d2:	29 87       	std	Y+9, r18	; 0x09
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	9c 81       	ldd	r25, Y+4	; 0x04
    23d8:	89 83       	std	Y+1, r24	; 0x01
    23da:	9a 83       	std	Y+2, r25	; 0x02
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    23dc:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    23e0:	ff 93       	push	r31
    23e2:	f8 7f       	andi	r31, 0xF8	; 248
    23e4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	9a 81       	ldd	r25, Y+2	; 0x02
    23ec:	fc 01       	movw	r30, r24
    23ee:	81 a1       	ldd	r24, Z+33	; 0x21
    23f0:	8f 3f       	cpi	r24, 0xFF	; 255
    23f2:	21 f4       	brne	.+8      	; 0x23fc <vQueueWaitForMessageRestricted+0x44>
    23f4:	89 81       	ldd	r24, Y+1	; 0x01
    23f6:	9a 81       	ldd	r25, Y+2	; 0x02
    23f8:	fc 01       	movw	r30, r24
    23fa:	11 a2       	std	Z+33, r1	; 0x21
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2400:	fc 01       	movw	r30, r24
    2402:	82 a1       	ldd	r24, Z+34	; 0x22
    2404:	8f 3f       	cpi	r24, 0xFF	; 255
    2406:	21 f4       	brne	.+8      	; 0x2410 <vQueueWaitForMessageRestricted+0x58>
    2408:	89 81       	ldd	r24, Y+1	; 0x01
    240a:	9a 81       	ldd	r25, Y+2	; 0x02
    240c:	fc 01       	movw	r30, r24
    240e:	12 a2       	std	Z+34, r1	; 0x22
    2410:	ff 91       	pop	r31
    2412:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	9a 81       	ldd	r25, Y+2	; 0x02
    241a:	fc 01       	movw	r30, r24
    241c:	86 8d       	ldd	r24, Z+30	; 0x1e
    241e:	88 23       	and	r24, r24
    2420:	71 f4       	brne	.+28     	; 0x243e <vQueueWaitForMessageRestricted+0x86>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	9a 81       	ldd	r25, Y+2	; 0x02
    2426:	fc 01       	movw	r30, r24
    2428:	73 96       	adiw	r30, 0x13	; 19
    242a:	8d 81       	ldd	r24, Y+5	; 0x05
    242c:	9e 81       	ldd	r25, Y+6	; 0x06
    242e:	af 81       	ldd	r26, Y+7	; 0x07
    2430:	b8 85       	ldd	r27, Y+8	; 0x08
    2432:	29 85       	ldd	r18, Y+9	; 0x09
    2434:	ac 01       	movw	r20, r24
    2436:	bd 01       	movw	r22, r26
    2438:	cf 01       	movw	r24, r30
    243a:	0e 94 89 17 	call	0x2f12	; 0x2f12 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	9a 81       	ldd	r25, Y+2	; 0x02
    2442:	0e 94 31 11 	call	0x2262	; 0x2262 <prvUnlockQueue>
	}
    2446:	00 00       	nop
    2448:	29 96       	adiw	r28, 0x09	; 9
    244a:	cd bf       	out	0x3d, r28	; 61
    244c:	de bf       	out	0x3e, r29	; 62
    244e:	df 91       	pop	r29
    2450:	cf 91       	pop	r28
    2452:	08 95       	ret

00002454 <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    2454:	8f 92       	push	r8
    2456:	9f 92       	push	r9
    2458:	af 92       	push	r10
    245a:	bf 92       	push	r11
    245c:	cf 92       	push	r12
    245e:	df 92       	push	r13
    2460:	ef 92       	push	r14
    2462:	ff 92       	push	r15
    2464:	0f 93       	push	r16
    2466:	1f 93       	push	r17
    2468:	cf 93       	push	r28
    246a:	df 93       	push	r29
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
    2470:	60 97       	sbiw	r28, 0x10	; 16
    2472:	cd bf       	out	0x3d, r28	; 61
    2474:	de bf       	out	0x3e, r29	; 62
    2476:	8e 83       	std	Y+6, r24	; 0x06
    2478:	9f 83       	std	Y+7, r25	; 0x07
    247a:	68 87       	std	Y+8, r22	; 0x08
    247c:	79 87       	std	Y+9, r23	; 0x09
    247e:	4a 87       	std	Y+10, r20	; 0x0a
    2480:	5b 87       	std	Y+11, r21	; 0x0b
    2482:	2c 87       	std	Y+12, r18	; 0x0c
    2484:	3d 87       	std	Y+13, r19	; 0x0d
    2486:	0e 87       	std	Y+14, r16	; 0x0e
    2488:	ef 86       	std	Y+15, r14	; 0x0f
    248a:	f8 8a       	std	Y+16, r15	; 0x10
    248c:	8a 85       	ldd	r24, Y+10	; 0x0a
    248e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2490:	0e 94 da 07 	call	0xfb4	; 0xfb4 <pvPortMalloc>
    2494:	8c 83       	std	Y+4, r24	; 0x04
    2496:	9d 83       	std	Y+5, r25	; 0x05
    2498:	8c 81       	ldd	r24, Y+4	; 0x04
    249a:	9d 81       	ldd	r25, Y+5	; 0x05
    249c:	89 2b       	or	r24, r25
    249e:	b9 f0       	breq	.+46     	; 0x24ce <xTaskCreate+0x7a>
    24a0:	8c e2       	ldi	r24, 0x2C	; 44
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	0e 94 da 07 	call	0xfb4	; 0xfb4 <pvPortMalloc>
    24a8:	89 83       	std	Y+1, r24	; 0x01
    24aa:	9a 83       	std	Y+2, r25	; 0x02
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	9a 81       	ldd	r25, Y+2	; 0x02
    24b0:	89 2b       	or	r24, r25
    24b2:	41 f0       	breq	.+16     	; 0x24c4 <xTaskCreate+0x70>
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	9a 81       	ldd	r25, Y+2	; 0x02
    24b8:	2c 81       	ldd	r18, Y+4	; 0x04
    24ba:	3d 81       	ldd	r19, Y+5	; 0x05
    24bc:	fc 01       	movw	r30, r24
    24be:	23 8f       	std	Z+27, r18	; 0x1b
    24c0:	34 8f       	std	Z+28, r19	; 0x1c
    24c2:	07 c0       	rjmp	.+14     	; 0x24d2 <xTaskCreate+0x7e>
    24c4:	8c 81       	ldd	r24, Y+4	; 0x04
    24c6:	9d 81       	ldd	r25, Y+5	; 0x05
    24c8:	0e 94 1e 08 	call	0x103c	; 0x103c <vPortFree>
    24cc:	02 c0       	rjmp	.+4      	; 0x24d2 <xTaskCreate+0x7e>
    24ce:	19 82       	std	Y+1, r1	; 0x01
    24d0:	1a 82       	std	Y+2, r1	; 0x02
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	9a 81       	ldd	r25, Y+2	; 0x02
    24d6:	89 2b       	or	r24, r25
    24d8:	09 f1       	breq	.+66     	; 0x251c <xTaskCreate+0xc8>
    24da:	8a 85       	ldd	r24, Y+10	; 0x0a
    24dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    24de:	cc 01       	movw	r24, r24
    24e0:	a0 e0       	ldi	r26, 0x00	; 0
    24e2:	b0 e0       	ldi	r27, 0x00	; 0
    24e4:	09 81       	ldd	r16, Y+1	; 0x01
    24e6:	1a 81       	ldd	r17, Y+2	; 0x02
    24e8:	4f 85       	ldd	r20, Y+15	; 0x0f
    24ea:	58 89       	ldd	r21, Y+16	; 0x10
    24ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    24ee:	3d 85       	ldd	r19, Y+13	; 0x0d
    24f0:	68 85       	ldd	r22, Y+8	; 0x08
    24f2:	79 85       	ldd	r23, Y+9	; 0x09
    24f4:	ee 81       	ldd	r30, Y+6	; 0x06
    24f6:	ff 81       	ldd	r31, Y+7	; 0x07
    24f8:	81 2c       	mov	r8, r1
    24fa:	91 2c       	mov	r9, r1
    24fc:	58 01       	movw	r10, r16
    24fe:	6a 01       	movw	r12, r20
    2500:	ee 84       	ldd	r14, Y+14	; 0x0e
    2502:	89 01       	movw	r16, r18
    2504:	9c 01       	movw	r18, r24
    2506:	ad 01       	movw	r20, r26
    2508:	cf 01       	movw	r24, r30
    250a:	0e 94 a1 12 	call	0x2542	; 0x2542 <prvInitialiseNewTask>
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	9a 81       	ldd	r25, Y+2	; 0x02
    2512:	0e 94 77 13 	call	0x26ee	; 0x26ee <prvAddNewTaskToReadyList>
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	8b 83       	std	Y+3, r24	; 0x03
    251a:	02 c0       	rjmp	.+4      	; 0x2520 <xTaskCreate+0xcc>
    251c:	8f ef       	ldi	r24, 0xFF	; 255
    251e:	8b 83       	std	Y+3, r24	; 0x03
    2520:	8b 81       	ldd	r24, Y+3	; 0x03
    2522:	60 96       	adiw	r28, 0x10	; 16
    2524:	cd bf       	out	0x3d, r28	; 61
    2526:	de bf       	out	0x3e, r29	; 62
    2528:	df 91       	pop	r29
    252a:	cf 91       	pop	r28
    252c:	1f 91       	pop	r17
    252e:	0f 91       	pop	r16
    2530:	ff 90       	pop	r15
    2532:	ef 90       	pop	r14
    2534:	df 90       	pop	r13
    2536:	cf 90       	pop	r12
    2538:	bf 90       	pop	r11
    253a:	af 90       	pop	r10
    253c:	9f 90       	pop	r9
    253e:	8f 90       	pop	r8
    2540:	08 95       	ret

00002542 <prvInitialiseNewTask>:
    2542:	8f 92       	push	r8
    2544:	9f 92       	push	r9
    2546:	af 92       	push	r10
    2548:	bf 92       	push	r11
    254a:	cf 92       	push	r12
    254c:	df 92       	push	r13
    254e:	ef 92       	push	r14
    2550:	ff 92       	push	r15
    2552:	0f 93       	push	r16
    2554:	1f 93       	push	r17
    2556:	cf 93       	push	r28
    2558:	df 93       	push	r29
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	64 97       	sbiw	r28, 0x14	; 20
    2560:	cd bf       	out	0x3d, r28	; 61
    2562:	de bf       	out	0x3e, r29	; 62
    2564:	8c 83       	std	Y+4, r24	; 0x04
    2566:	9d 83       	std	Y+5, r25	; 0x05
    2568:	6e 83       	std	Y+6, r22	; 0x06
    256a:	7f 83       	std	Y+7, r23	; 0x07
    256c:	28 87       	std	Y+8, r18	; 0x08
    256e:	39 87       	std	Y+9, r19	; 0x09
    2570:	4a 87       	std	Y+10, r20	; 0x0a
    2572:	5b 87       	std	Y+11, r21	; 0x0b
    2574:	0c 87       	std	Y+12, r16	; 0x0c
    2576:	1d 87       	std	Y+13, r17	; 0x0d
    2578:	ee 86       	std	Y+14, r14	; 0x0e
    257a:	cf 86       	std	Y+15, r12	; 0x0f
    257c:	d8 8a       	std	Y+16, r13	; 0x10
    257e:	a9 8a       	std	Y+17, r10	; 0x11
    2580:	ba 8a       	std	Y+18, r11	; 0x12
    2582:	8b 8a       	std	Y+19, r8	; 0x13
    2584:	9c 8a       	std	Y+20, r9	; 0x14
    2586:	28 85       	ldd	r18, Y+8	; 0x08
    2588:	39 85       	ldd	r19, Y+9	; 0x09
    258a:	89 89       	ldd	r24, Y+17	; 0x11
    258c:	9a 89       	ldd	r25, Y+18	; 0x12
    258e:	fc 01       	movw	r30, r24
    2590:	83 8d       	ldd	r24, Z+27	; 0x1b
    2592:	94 8d       	ldd	r25, Z+28	; 0x1c
    2594:	a9 01       	movw	r20, r18
    2596:	65 ea       	ldi	r22, 0xA5	; 165
    2598:	70 e0       	ldi	r23, 0x00	; 0
    259a:	0e 94 3c 3b 	call	0x7678	; 0x7678 <memset>
    259e:	89 89       	ldd	r24, Y+17	; 0x11
    25a0:	9a 89       	ldd	r25, Y+18	; 0x12
    25a2:	fc 01       	movw	r30, r24
    25a4:	23 8d       	ldd	r18, Z+27	; 0x1b
    25a6:	34 8d       	ldd	r19, Z+28	; 0x1c
    25a8:	88 85       	ldd	r24, Y+8	; 0x08
    25aa:	99 85       	ldd	r25, Y+9	; 0x09
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	82 0f       	add	r24, r18
    25b0:	93 1f       	adc	r25, r19
    25b2:	8a 83       	std	Y+2, r24	; 0x02
    25b4:	9b 83       	std	Y+3, r25	; 0x03
    25b6:	19 82       	std	Y+1, r1	; 0x01
    25b8:	21 c0       	rjmp	.+66     	; 0x25fc <prvInitialiseNewTask+0xba>
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	88 2f       	mov	r24, r24
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	29 81       	ldd	r18, Y+1	; 0x01
    25c2:	22 2f       	mov	r18, r18
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	4e 81       	ldd	r20, Y+6	; 0x06
    25c8:	5f 81       	ldd	r21, Y+7	; 0x07
    25ca:	24 0f       	add	r18, r20
    25cc:	35 1f       	adc	r19, r21
    25ce:	f9 01       	movw	r30, r18
    25d0:	40 81       	ld	r20, Z
    25d2:	29 89       	ldd	r18, Y+17	; 0x11
    25d4:	3a 89       	ldd	r19, Y+18	; 0x12
    25d6:	82 0f       	add	r24, r18
    25d8:	93 1f       	adc	r25, r19
    25da:	4d 96       	adiw	r24, 0x1d	; 29
    25dc:	fc 01       	movw	r30, r24
    25de:	40 83       	st	Z, r20
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	88 2f       	mov	r24, r24
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	2e 81       	ldd	r18, Y+6	; 0x06
    25e8:	3f 81       	ldd	r19, Y+7	; 0x07
    25ea:	82 0f       	add	r24, r18
    25ec:	93 1f       	adc	r25, r19
    25ee:	fc 01       	movw	r30, r24
    25f0:	80 81       	ld	r24, Z
    25f2:	88 23       	and	r24, r24
    25f4:	39 f0       	breq	.+14     	; 0x2604 <prvInitialiseNewTask+0xc2>
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	8f 5f       	subi	r24, 0xFF	; 255
    25fa:	89 83       	std	Y+1, r24	; 0x01
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	88 30       	cpi	r24, 0x08	; 8
    2600:	e0 f2       	brcs	.-72     	; 0x25ba <prvInitialiseNewTask+0x78>
    2602:	01 c0       	rjmp	.+2      	; 0x2606 <prvInitialiseNewTask+0xc4>
    2604:	00 00       	nop
    2606:	89 89       	ldd	r24, Y+17	; 0x11
    2608:	9a 89       	ldd	r25, Y+18	; 0x12
    260a:	fc 01       	movw	r30, r24
    260c:	14 a2       	std	Z+36, r1	; 0x24
    260e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2610:	84 30       	cpi	r24, 0x04	; 4
    2612:	10 f0       	brcs	.+4      	; 0x2618 <prvInitialiseNewTask+0xd6>
    2614:	83 e0       	ldi	r24, 0x03	; 3
    2616:	8e 87       	std	Y+14, r24	; 0x0e
    2618:	89 89       	ldd	r24, Y+17	; 0x11
    261a:	9a 89       	ldd	r25, Y+18	; 0x12
    261c:	2e 85       	ldd	r18, Y+14	; 0x0e
    261e:	fc 01       	movw	r30, r24
    2620:	22 8f       	std	Z+26, r18	; 0x1a
    2622:	89 89       	ldd	r24, Y+17	; 0x11
    2624:	9a 89       	ldd	r25, Y+18	; 0x12
    2626:	02 96       	adiw	r24, 0x02	; 2
    2628:	0e 94 66 08 	call	0x10cc	; 0x10cc <vListInitialiseItem>
    262c:	89 89       	ldd	r24, Y+17	; 0x11
    262e:	9a 89       	ldd	r25, Y+18	; 0x12
    2630:	0e 96       	adiw	r24, 0x0e	; 14
    2632:	0e 94 66 08 	call	0x10cc	; 0x10cc <vListInitialiseItem>
    2636:	89 89       	ldd	r24, Y+17	; 0x11
    2638:	9a 89       	ldd	r25, Y+18	; 0x12
    263a:	29 89       	ldd	r18, Y+17	; 0x11
    263c:	3a 89       	ldd	r19, Y+18	; 0x12
    263e:	fc 01       	movw	r30, r24
    2640:	22 87       	std	Z+10, r18	; 0x0a
    2642:	33 87       	std	Z+11, r19	; 0x0b
    2644:	8e 85       	ldd	r24, Y+14	; 0x0e
    2646:	88 2f       	mov	r24, r24
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	a0 e0       	ldi	r26, 0x00	; 0
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	24 e0       	ldi	r18, 0x04	; 4
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	40 e0       	ldi	r20, 0x00	; 0
    2654:	50 e0       	ldi	r21, 0x00	; 0
    2656:	79 01       	movw	r14, r18
    2658:	8a 01       	movw	r16, r20
    265a:	e8 1a       	sub	r14, r24
    265c:	f9 0a       	sbc	r15, r25
    265e:	0a 0b       	sbc	r16, r26
    2660:	1b 0b       	sbc	r17, r27
    2662:	d8 01       	movw	r26, r16
    2664:	c7 01       	movw	r24, r14
    2666:	29 89       	ldd	r18, Y+17	; 0x11
    2668:	3a 89       	ldd	r19, Y+18	; 0x12
    266a:	f9 01       	movw	r30, r18
    266c:	86 87       	std	Z+14, r24	; 0x0e
    266e:	97 87       	std	Z+15, r25	; 0x0f
    2670:	a0 8b       	std	Z+16, r26	; 0x10
    2672:	b1 8b       	std	Z+17, r27	; 0x11
    2674:	89 89       	ldd	r24, Y+17	; 0x11
    2676:	9a 89       	ldd	r25, Y+18	; 0x12
    2678:	29 89       	ldd	r18, Y+17	; 0x11
    267a:	3a 89       	ldd	r19, Y+18	; 0x12
    267c:	fc 01       	movw	r30, r24
    267e:	26 8b       	std	Z+22, r18	; 0x16
    2680:	37 8b       	std	Z+23, r19	; 0x17
    2682:	89 89       	ldd	r24, Y+17	; 0x11
    2684:	9a 89       	ldd	r25, Y+18	; 0x12
    2686:	fc 01       	movw	r30, r24
    2688:	17 a2       	std	Z+39, r1	; 0x27
    268a:	10 a6       	std	Z+40, r1	; 0x28
    268c:	11 a6       	std	Z+41, r1	; 0x29
    268e:	12 a6       	std	Z+42, r1	; 0x2a
    2690:	89 89       	ldd	r24, Y+17	; 0x11
    2692:	9a 89       	ldd	r25, Y+18	; 0x12
    2694:	fc 01       	movw	r30, r24
    2696:	13 a6       	std	Z+43, r1	; 0x2b
    2698:	4c 85       	ldd	r20, Y+12	; 0x0c
    269a:	5d 85       	ldd	r21, Y+13	; 0x0d
    269c:	2c 81       	ldd	r18, Y+4	; 0x04
    269e:	3d 81       	ldd	r19, Y+5	; 0x05
    26a0:	8a 81       	ldd	r24, Y+2	; 0x02
    26a2:	9b 81       	ldd	r25, Y+3	; 0x03
    26a4:	b9 01       	movw	r22, r18
    26a6:	0e 94 b2 09 	call	0x1364	; 0x1364 <pxPortInitialiseStack>
    26aa:	9c 01       	movw	r18, r24
    26ac:	89 89       	ldd	r24, Y+17	; 0x11
    26ae:	9a 89       	ldd	r25, Y+18	; 0x12
    26b0:	fc 01       	movw	r30, r24
    26b2:	20 83       	st	Z, r18
    26b4:	31 83       	std	Z+1, r19	; 0x01
    26b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26b8:	98 89       	ldd	r25, Y+16	; 0x10
    26ba:	89 2b       	or	r24, r25
    26bc:	39 f0       	breq	.+14     	; 0x26cc <prvInitialiseNewTask+0x18a>
    26be:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c0:	98 89       	ldd	r25, Y+16	; 0x10
    26c2:	29 89       	ldd	r18, Y+17	; 0x11
    26c4:	3a 89       	ldd	r19, Y+18	; 0x12
    26c6:	fc 01       	movw	r30, r24
    26c8:	20 83       	st	Z, r18
    26ca:	31 83       	std	Z+1, r19	; 0x01
    26cc:	00 00       	nop
    26ce:	64 96       	adiw	r28, 0x14	; 20
    26d0:	cd bf       	out	0x3d, r28	; 61
    26d2:	de bf       	out	0x3e, r29	; 62
    26d4:	df 91       	pop	r29
    26d6:	cf 91       	pop	r28
    26d8:	1f 91       	pop	r17
    26da:	0f 91       	pop	r16
    26dc:	ff 90       	pop	r15
    26de:	ef 90       	pop	r14
    26e0:	df 90       	pop	r13
    26e2:	cf 90       	pop	r12
    26e4:	bf 90       	pop	r11
    26e6:	af 90       	pop	r10
    26e8:	9f 90       	pop	r9
    26ea:	8f 90       	pop	r8
    26ec:	08 95       	ret

000026ee <prvAddNewTaskToReadyList>:
    26ee:	cf 93       	push	r28
    26f0:	df 93       	push	r29
    26f2:	1f 92       	push	r1
    26f4:	1f 92       	push	r1
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
    26fa:	89 83       	std	Y+1, r24	; 0x01
    26fc:	9a 83       	std	Y+2, r25	; 0x02
    26fe:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2702:	ff 93       	push	r31
    2704:	f8 7f       	andi	r31, 0xF8	; 248
    2706:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    270a:	80 91 84 2c 	lds	r24, 0x2C84	; 0x802c84 <uxCurrentNumberOfTasks>
    270e:	8f 5f       	subi	r24, 0xFF	; 255
    2710:	80 93 84 2c 	sts	0x2C84, r24	; 0x802c84 <uxCurrentNumberOfTasks>
    2714:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    2718:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    271c:	89 2b       	or	r24, r25
    271e:	69 f4       	brne	.+26     	; 0x273a <prvAddNewTaskToReadyList+0x4c>
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	9a 81       	ldd	r25, Y+2	; 0x02
    2724:	80 93 1a 2c 	sts	0x2C1A, r24	; 0x802c1a <pxCurrentTCB>
    2728:	90 93 1b 2c 	sts	0x2C1B, r25	; 0x802c1b <pxCurrentTCB+0x1>
    272c:	80 91 84 2c 	lds	r24, 0x2C84	; 0x802c84 <uxCurrentNumberOfTasks>
    2730:	81 30       	cpi	r24, 0x01	; 1
    2732:	c9 f4       	brne	.+50     	; 0x2766 <prvAddNewTaskToReadyList+0x78>
    2734:	0e 94 71 19 	call	0x32e2	; 0x32e2 <prvInitialiseTaskLists>
    2738:	16 c0       	rjmp	.+44     	; 0x2766 <prvAddNewTaskToReadyList+0x78>
    273a:	80 91 8a 2c 	lds	r24, 0x2C8A	; 0x802c8a <xSchedulerRunning>
    273e:	88 23       	and	r24, r24
    2740:	91 f4       	brne	.+36     	; 0x2766 <prvAddNewTaskToReadyList+0x78>
    2742:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    2746:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    274a:	fc 01       	movw	r30, r24
    274c:	22 8d       	ldd	r18, Z+26	; 0x1a
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	9a 81       	ldd	r25, Y+2	; 0x02
    2752:	fc 01       	movw	r30, r24
    2754:	82 8d       	ldd	r24, Z+26	; 0x1a
    2756:	82 17       	cp	r24, r18
    2758:	30 f0       	brcs	.+12     	; 0x2766 <prvAddNewTaskToReadyList+0x78>
    275a:	89 81       	ldd	r24, Y+1	; 0x01
    275c:	9a 81       	ldd	r25, Y+2	; 0x02
    275e:	80 93 1a 2c 	sts	0x2C1A, r24	; 0x802c1a <pxCurrentTCB>
    2762:	90 93 1b 2c 	sts	0x2C1B, r25	; 0x802c1b <pxCurrentTCB+0x1>
    2766:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <uxTaskNumber>
    276a:	8f 5f       	subi	r24, 0xFF	; 255
    276c:	80 93 8e 2c 	sts	0x2C8E, r24	; 0x802c8e <uxTaskNumber>
    2770:	20 91 8e 2c 	lds	r18, 0x2C8E	; 0x802c8e <uxTaskNumber>
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	9a 81       	ldd	r25, Y+2	; 0x02
    2778:	fc 01       	movw	r30, r24
    277a:	25 a3       	std	Z+37, r18	; 0x25
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	9a 81       	ldd	r25, Y+2	; 0x02
    2780:	fc 01       	movw	r30, r24
    2782:	92 8d       	ldd	r25, Z+26	; 0x1a
    2784:	80 91 89 2c 	lds	r24, 0x2C89	; 0x802c89 <uxTopReadyPriority>
    2788:	89 17       	cp	r24, r25
    278a:	30 f4       	brcc	.+12     	; 0x2798 <prvAddNewTaskToReadyList+0xaa>
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	9a 81       	ldd	r25, Y+2	; 0x02
    2790:	fc 01       	movw	r30, r24
    2792:	82 8d       	ldd	r24, Z+26	; 0x1a
    2794:	80 93 89 2c 	sts	0x2C89, r24	; 0x802c89 <uxTopReadyPriority>
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	9a 81       	ldd	r25, Y+2	; 0x02
    279c:	ac 01       	movw	r20, r24
    279e:	4e 5f       	subi	r20, 0xFE	; 254
    27a0:	5f 4f       	sbci	r21, 0xFF	; 255
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	9a 81       	ldd	r25, Y+2	; 0x02
    27a6:	fc 01       	movw	r30, r24
    27a8:	82 8d       	ldd	r24, Z+26	; 0x1a
    27aa:	28 2f       	mov	r18, r24
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	6b e0       	ldi	r22, 0x0B	; 11
    27b0:	62 9f       	mul	r22, r18
    27b2:	c0 01       	movw	r24, r0
    27b4:	63 9f       	mul	r22, r19
    27b6:	90 0d       	add	r25, r0
    27b8:	11 24       	eor	r1, r1
    27ba:	84 5e       	subi	r24, 0xE4	; 228
    27bc:	93 4d       	sbci	r25, 0xD3	; 211
    27be:	ba 01       	movw	r22, r20
    27c0:	0e 94 79 08 	call	0x10f2	; 0x10f2 <vListInsertEnd>
    27c4:	ff 91       	pop	r31
    27c6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    27ca:	80 91 8a 2c 	lds	r24, 0x2C8A	; 0x802c8a <xSchedulerRunning>
    27ce:	88 23       	and	r24, r24
    27d0:	71 f0       	breq	.+28     	; 0x27ee <prvAddNewTaskToReadyList+0x100>
    27d2:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    27d6:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    27da:	fc 01       	movw	r30, r24
    27dc:	22 8d       	ldd	r18, Z+26	; 0x1a
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	9a 81       	ldd	r25, Y+2	; 0x02
    27e2:	fc 01       	movw	r30, r24
    27e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    27e6:	28 17       	cp	r18, r24
    27e8:	10 f4       	brcc	.+4      	; 0x27ee <prvAddNewTaskToReadyList+0x100>
    27ea:	0e 94 c3 0b 	call	0x1786	; 0x1786 <vPortYield>
    27ee:	00 00       	nop
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	df 91       	pop	r29
    27f6:	cf 91       	pop	r28
    27f8:	08 95       	ret

000027fa <vTaskDelay>:
    27fa:	cf 93       	push	r28
    27fc:	df 93       	push	r29
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	25 97       	sbiw	r28, 0x05	; 5
    2804:	cd bf       	out	0x3d, r28	; 61
    2806:	de bf       	out	0x3e, r29	; 62
    2808:	6a 83       	std	Y+2, r22	; 0x02
    280a:	7b 83       	std	Y+3, r23	; 0x03
    280c:	8c 83       	std	Y+4, r24	; 0x04
    280e:	9d 83       	std	Y+5, r25	; 0x05
    2810:	19 82       	std	Y+1, r1	; 0x01
    2812:	8a 81       	ldd	r24, Y+2	; 0x02
    2814:	9b 81       	ldd	r25, Y+3	; 0x03
    2816:	ac 81       	ldd	r26, Y+4	; 0x04
    2818:	bd 81       	ldd	r27, Y+5	; 0x05
    281a:	89 2b       	or	r24, r25
    281c:	8a 2b       	or	r24, r26
    281e:	8b 2b       	or	r24, r27
    2820:	71 f0       	breq	.+28     	; 0x283e <vTaskDelay+0x44>
    2822:	0e 94 77 14 	call	0x28ee	; 0x28ee <vTaskSuspendAll>
    2826:	8a 81       	ldd	r24, Y+2	; 0x02
    2828:	9b 81       	ldd	r25, Y+3	; 0x03
    282a:	ac 81       	ldd	r26, Y+4	; 0x04
    282c:	bd 81       	ldd	r27, Y+5	; 0x05
    282e:	40 e0       	ldi	r20, 0x00	; 0
    2830:	bc 01       	movw	r22, r24
    2832:	cd 01       	movw	r24, r26
    2834:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <prvAddCurrentTaskToDelayedList>
    2838:	0e 94 84 14 	call	0x2908	; 0x2908 <xTaskResumeAll>
    283c:	89 83       	std	Y+1, r24	; 0x01
    283e:	89 81       	ldd	r24, Y+1	; 0x01
    2840:	88 23       	and	r24, r24
    2842:	11 f4       	brne	.+4      	; 0x2848 <vTaskDelay+0x4e>
    2844:	0e 94 c3 0b 	call	0x1786	; 0x1786 <vPortYield>
    2848:	00 00       	nop
    284a:	25 96       	adiw	r28, 0x05	; 5
    284c:	cd bf       	out	0x3d, r28	; 61
    284e:	de bf       	out	0x3e, r29	; 62
    2850:	df 91       	pop	r29
    2852:	cf 91       	pop	r28
    2854:	08 95       	ret

00002856 <vTaskStartScheduler>:
    2856:	ef 92       	push	r14
    2858:	ff 92       	push	r15
    285a:	0f 93       	push	r16
    285c:	cf 93       	push	r28
    285e:	df 93       	push	r29
    2860:	1f 92       	push	r1
    2862:	cd b7       	in	r28, 0x3d	; 61
    2864:	de b7       	in	r29, 0x3e	; 62
    2866:	0f 2e       	mov	r0, r31
    2868:	f3 e9       	ldi	r31, 0x93	; 147
    286a:	ef 2e       	mov	r14, r31
    286c:	fc e2       	ldi	r31, 0x2C	; 44
    286e:	ff 2e       	mov	r15, r31
    2870:	f0 2d       	mov	r31, r0
    2872:	00 e0       	ldi	r16, 0x00	; 0
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	48 ec       	ldi	r20, 0xC8	; 200
    287a:	50 e0       	ldi	r21, 0x00	; 0
    287c:	60 e0       	ldi	r22, 0x00	; 0
    287e:	70 e2       	ldi	r23, 0x20	; 32
    2880:	8e e5       	ldi	r24, 0x5E	; 94
    2882:	99 e1       	ldi	r25, 0x19	; 25
    2884:	0e 94 2a 12 	call	0x2454	; 0x2454 <xTaskCreate>
    2888:	89 83       	std	Y+1, r24	; 0x01
    288a:	89 81       	ldd	r24, Y+1	; 0x01
    288c:	81 30       	cpi	r24, 0x01	; 1
    288e:	19 f4       	brne	.+6      	; 0x2896 <vTaskStartScheduler+0x40>
    2890:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <xTimerCreateTimerTask>
    2894:	89 83       	std	Y+1, r24	; 0x01
    2896:	89 81       	ldd	r24, Y+1	; 0x01
    2898:	81 30       	cpi	r24, 0x01	; 1
    289a:	09 f5       	brne	.+66     	; 0x28de <vTaskStartScheduler+0x88>
    289c:	80 ea       	ldi	r24, 0xA0	; 160
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	20 ea       	ldi	r18, 0xA0	; 160
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	f9 01       	movw	r30, r18
    28a6:	22 81       	ldd	r18, Z+2	; 0x02
    28a8:	28 7f       	andi	r18, 0xF8	; 248
    28aa:	fc 01       	movw	r30, r24
    28ac:	22 83       	std	Z+2, r18	; 0x02
    28ae:	8f ef       	ldi	r24, 0xFF	; 255
    28b0:	9f ef       	ldi	r25, 0xFF	; 255
    28b2:	dc 01       	movw	r26, r24
    28b4:	80 93 8f 2c 	sts	0x2C8F, r24	; 0x802c8f <xNextTaskUnblockTime>
    28b8:	90 93 90 2c 	sts	0x2C90, r25	; 0x802c90 <xNextTaskUnblockTime+0x1>
    28bc:	a0 93 91 2c 	sts	0x2C91, r26	; 0x802c91 <xNextTaskUnblockTime+0x2>
    28c0:	b0 93 92 2c 	sts	0x2C92, r27	; 0x802c92 <xNextTaskUnblockTime+0x3>
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	80 93 8a 2c 	sts	0x2C8A, r24	; 0x802c8a <xSchedulerRunning>
    28ca:	10 92 85 2c 	sts	0x2C85, r1	; 0x802c85 <xTickCount>
    28ce:	10 92 86 2c 	sts	0x2C86, r1	; 0x802c86 <xTickCount+0x1>
    28d2:	10 92 87 2c 	sts	0x2C87, r1	; 0x802c87 <xTickCount+0x2>
    28d6:	10 92 88 2c 	sts	0x2C88, r1	; 0x802c88 <xTickCount+0x3>
    28da:	0e 94 8b 0b 	call	0x1716	; 0x1716 <xPortStartScheduler>
    28de:	00 00       	nop
    28e0:	0f 90       	pop	r0
    28e2:	df 91       	pop	r29
    28e4:	cf 91       	pop	r28
    28e6:	0f 91       	pop	r16
    28e8:	ff 90       	pop	r15
    28ea:	ef 90       	pop	r14
    28ec:	08 95       	ret

000028ee <vTaskSuspendAll>:
    28ee:	cf 93       	push	r28
    28f0:	df 93       	push	r29
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
    28f6:	80 91 95 2c 	lds	r24, 0x2C95	; 0x802c95 <uxSchedulerSuspended>
    28fa:	8f 5f       	subi	r24, 0xFF	; 255
    28fc:	80 93 95 2c 	sts	0x2C95, r24	; 0x802c95 <uxSchedulerSuspended>
    2900:	00 00       	nop
    2902:	df 91       	pop	r29
    2904:	cf 91       	pop	r28
    2906:	08 95       	ret

00002908 <xTaskResumeAll>:
    2908:	cf 93       	push	r28
    290a:	df 93       	push	r29
    290c:	00 d0       	rcall	.+0      	; 0x290e <xTaskResumeAll+0x6>
    290e:	1f 92       	push	r1
    2910:	cd b7       	in	r28, 0x3d	; 61
    2912:	de b7       	in	r29, 0x3e	; 62
    2914:	19 82       	std	Y+1, r1	; 0x01
    2916:	1a 82       	std	Y+2, r1	; 0x02
    2918:	1b 82       	std	Y+3, r1	; 0x03
    291a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    291e:	ff 93       	push	r31
    2920:	f8 7f       	andi	r31, 0xF8	; 248
    2922:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2926:	80 91 95 2c 	lds	r24, 0x2C95	; 0x802c95 <uxSchedulerSuspended>
    292a:	81 50       	subi	r24, 0x01	; 1
    292c:	80 93 95 2c 	sts	0x2C95, r24	; 0x802c95 <uxSchedulerSuspended>
    2930:	80 91 95 2c 	lds	r24, 0x2C95	; 0x802c95 <uxSchedulerSuspended>
    2934:	88 23       	and	r24, r24
    2936:	09 f0       	breq	.+2      	; 0x293a <xTaskResumeAll+0x32>
    2938:	74 c0       	rjmp	.+232    	; 0x2a22 <xTaskResumeAll+0x11a>
    293a:	80 91 84 2c 	lds	r24, 0x2C84	; 0x802c84 <uxCurrentNumberOfTasks>
    293e:	88 23       	and	r24, r24
    2940:	09 f4       	brne	.+2      	; 0x2944 <xTaskResumeAll+0x3c>
    2942:	6f c0       	rjmp	.+222    	; 0x2a22 <xTaskResumeAll+0x11a>
    2944:	46 c0       	rjmp	.+140    	; 0x29d2 <xTaskResumeAll+0xca>
    2946:	80 91 69 2c 	lds	r24, 0x2C69	; 0x802c69 <xPendingReadyList+0x7>
    294a:	90 91 6a 2c 	lds	r25, 0x2C6A	; 0x802c6a <xPendingReadyList+0x8>
    294e:	fc 01       	movw	r30, r24
    2950:	80 85       	ldd	r24, Z+8	; 0x08
    2952:	91 85       	ldd	r25, Z+9	; 0x09
    2954:	89 83       	std	Y+1, r24	; 0x01
    2956:	9a 83       	std	Y+2, r25	; 0x02
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	9a 81       	ldd	r25, Y+2	; 0x02
    295c:	0e 96       	adiw	r24, 0x0e	; 14
    295e:	0e 94 45 09 	call	0x128a	; 0x128a <uxListRemove>
    2962:	89 81       	ldd	r24, Y+1	; 0x01
    2964:	9a 81       	ldd	r25, Y+2	; 0x02
    2966:	02 96       	adiw	r24, 0x02	; 2
    2968:	0e 94 45 09 	call	0x128a	; 0x128a <uxListRemove>
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	9a 81       	ldd	r25, Y+2	; 0x02
    2970:	fc 01       	movw	r30, r24
    2972:	92 8d       	ldd	r25, Z+26	; 0x1a
    2974:	80 91 89 2c 	lds	r24, 0x2C89	; 0x802c89 <uxTopReadyPriority>
    2978:	89 17       	cp	r24, r25
    297a:	30 f4       	brcc	.+12     	; 0x2988 <xTaskResumeAll+0x80>
    297c:	89 81       	ldd	r24, Y+1	; 0x01
    297e:	9a 81       	ldd	r25, Y+2	; 0x02
    2980:	fc 01       	movw	r30, r24
    2982:	82 8d       	ldd	r24, Z+26	; 0x1a
    2984:	80 93 89 2c 	sts	0x2C89, r24	; 0x802c89 <uxTopReadyPriority>
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	9a 81       	ldd	r25, Y+2	; 0x02
    298c:	ac 01       	movw	r20, r24
    298e:	4e 5f       	subi	r20, 0xFE	; 254
    2990:	5f 4f       	sbci	r21, 0xFF	; 255
    2992:	89 81       	ldd	r24, Y+1	; 0x01
    2994:	9a 81       	ldd	r25, Y+2	; 0x02
    2996:	fc 01       	movw	r30, r24
    2998:	82 8d       	ldd	r24, Z+26	; 0x1a
    299a:	28 2f       	mov	r18, r24
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	6b e0       	ldi	r22, 0x0B	; 11
    29a0:	62 9f       	mul	r22, r18
    29a2:	c0 01       	movw	r24, r0
    29a4:	63 9f       	mul	r22, r19
    29a6:	90 0d       	add	r25, r0
    29a8:	11 24       	eor	r1, r1
    29aa:	84 5e       	subi	r24, 0xE4	; 228
    29ac:	93 4d       	sbci	r25, 0xD3	; 211
    29ae:	ba 01       	movw	r22, r20
    29b0:	0e 94 79 08 	call	0x10f2	; 0x10f2 <vListInsertEnd>
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	9a 81       	ldd	r25, Y+2	; 0x02
    29b8:	fc 01       	movw	r30, r24
    29ba:	22 8d       	ldd	r18, Z+26	; 0x1a
    29bc:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    29c0:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    29c4:	fc 01       	movw	r30, r24
    29c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    29c8:	28 17       	cp	r18, r24
    29ca:	18 f0       	brcs	.+6      	; 0x29d2 <xTaskResumeAll+0xca>
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	80 93 8c 2c 	sts	0x2C8C, r24	; 0x802c8c <xYieldPending>
    29d2:	80 91 62 2c 	lds	r24, 0x2C62	; 0x802c62 <xPendingReadyList>
    29d6:	88 23       	and	r24, r24
    29d8:	09 f0       	breq	.+2      	; 0x29dc <xTaskResumeAll+0xd4>
    29da:	b5 cf       	rjmp	.-150    	; 0x2946 <xTaskResumeAll+0x3e>
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	9a 81       	ldd	r25, Y+2	; 0x02
    29e0:	89 2b       	or	r24, r25
    29e2:	11 f0       	breq	.+4      	; 0x29e8 <xTaskResumeAll+0xe0>
    29e4:	0e 94 ff 19 	call	0x33fe	; 0x33fe <prvResetNextTaskUnblockTime>
    29e8:	80 91 8b 2c 	lds	r24, 0x2C8B	; 0x802c8b <uxPendedTicks>
    29ec:	8c 83       	std	Y+4, r24	; 0x04
    29ee:	8c 81       	ldd	r24, Y+4	; 0x04
    29f0:	88 23       	and	r24, r24
    29f2:	79 f0       	breq	.+30     	; 0x2a12 <xTaskResumeAll+0x10a>
    29f4:	0e 94 42 15 	call	0x2a84	; 0x2a84 <xTaskIncrementTick>
    29f8:	88 23       	and	r24, r24
    29fa:	19 f0       	breq	.+6      	; 0x2a02 <xTaskResumeAll+0xfa>
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	80 93 8c 2c 	sts	0x2C8C, r24	; 0x802c8c <xYieldPending>
    2a02:	8c 81       	ldd	r24, Y+4	; 0x04
    2a04:	81 50       	subi	r24, 0x01	; 1
    2a06:	8c 83       	std	Y+4, r24	; 0x04
    2a08:	8c 81       	ldd	r24, Y+4	; 0x04
    2a0a:	88 23       	and	r24, r24
    2a0c:	99 f7       	brne	.-26     	; 0x29f4 <xTaskResumeAll+0xec>
    2a0e:	10 92 8b 2c 	sts	0x2C8B, r1	; 0x802c8b <uxPendedTicks>
    2a12:	80 91 8c 2c 	lds	r24, 0x2C8C	; 0x802c8c <xYieldPending>
    2a16:	88 23       	and	r24, r24
    2a18:	21 f0       	breq	.+8      	; 0x2a22 <xTaskResumeAll+0x11a>
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	8b 83       	std	Y+3, r24	; 0x03
    2a1e:	0e 94 c3 0b 	call	0x1786	; 0x1786 <vPortYield>
    2a22:	ff 91       	pop	r31
    2a24:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2a28:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2a:	24 96       	adiw	r28, 0x04	; 4
    2a2c:	cd bf       	out	0x3d, r28	; 61
    2a2e:	de bf       	out	0x3e, r29	; 62
    2a30:	df 91       	pop	r29
    2a32:	cf 91       	pop	r28
    2a34:	08 95       	ret

00002a36 <xTaskGetTickCount>:
    2a36:	cf 93       	push	r28
    2a38:	df 93       	push	r29
    2a3a:	00 d0       	rcall	.+0      	; 0x2a3c <xTaskGetTickCount+0x6>
    2a3c:	1f 92       	push	r1
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
    2a42:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2a46:	ff 93       	push	r31
    2a48:	f8 7f       	andi	r31, 0xF8	; 248
    2a4a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2a4e:	80 91 85 2c 	lds	r24, 0x2C85	; 0x802c85 <xTickCount>
    2a52:	90 91 86 2c 	lds	r25, 0x2C86	; 0x802c86 <xTickCount+0x1>
    2a56:	a0 91 87 2c 	lds	r26, 0x2C87	; 0x802c87 <xTickCount+0x2>
    2a5a:	b0 91 88 2c 	lds	r27, 0x2C88	; 0x802c88 <xTickCount+0x3>
    2a5e:	89 83       	std	Y+1, r24	; 0x01
    2a60:	9a 83       	std	Y+2, r25	; 0x02
    2a62:	ab 83       	std	Y+3, r26	; 0x03
    2a64:	bc 83       	std	Y+4, r27	; 0x04
    2a66:	ff 91       	pop	r31
    2a68:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a70:	ab 81       	ldd	r26, Y+3	; 0x03
    2a72:	bc 81       	ldd	r27, Y+4	; 0x04
    2a74:	bc 01       	movw	r22, r24
    2a76:	cd 01       	movw	r24, r26
    2a78:	24 96       	adiw	r28, 0x04	; 4
    2a7a:	cd bf       	out	0x3d, r28	; 61
    2a7c:	de bf       	out	0x3e, r29	; 62
    2a7e:	df 91       	pop	r29
    2a80:	cf 91       	pop	r28
    2a82:	08 95       	ret

00002a84 <xTaskIncrementTick>:
    2a84:	cf 93       	push	r28
    2a86:	df 93       	push	r29
    2a88:	cd b7       	in	r28, 0x3d	; 61
    2a8a:	de b7       	in	r29, 0x3e	; 62
    2a8c:	2d 97       	sbiw	r28, 0x0d	; 13
    2a8e:	cd bf       	out	0x3d, r28	; 61
    2a90:	de bf       	out	0x3e, r29	; 62
    2a92:	19 82       	std	Y+1, r1	; 0x01
    2a94:	80 91 95 2c 	lds	r24, 0x2C95	; 0x802c95 <uxSchedulerSuspended>
    2a98:	88 23       	and	r24, r24
    2a9a:	09 f0       	breq	.+2      	; 0x2a9e <xTaskIncrementTick+0x1a>
    2a9c:	f1 c0       	rjmp	.+482    	; 0x2c80 <xTaskIncrementTick+0x1fc>
    2a9e:	80 91 85 2c 	lds	r24, 0x2C85	; 0x802c85 <xTickCount>
    2aa2:	90 91 86 2c 	lds	r25, 0x2C86	; 0x802c86 <xTickCount+0x1>
    2aa6:	a0 91 87 2c 	lds	r26, 0x2C87	; 0x802c87 <xTickCount+0x2>
    2aaa:	b0 91 88 2c 	lds	r27, 0x2C88	; 0x802c88 <xTickCount+0x3>
    2aae:	01 96       	adiw	r24, 0x01	; 1
    2ab0:	a1 1d       	adc	r26, r1
    2ab2:	b1 1d       	adc	r27, r1
    2ab4:	8a 83       	std	Y+2, r24	; 0x02
    2ab6:	9b 83       	std	Y+3, r25	; 0x03
    2ab8:	ac 83       	std	Y+4, r26	; 0x04
    2aba:	bd 83       	std	Y+5, r27	; 0x05
    2abc:	8a 81       	ldd	r24, Y+2	; 0x02
    2abe:	9b 81       	ldd	r25, Y+3	; 0x03
    2ac0:	ac 81       	ldd	r26, Y+4	; 0x04
    2ac2:	bd 81       	ldd	r27, Y+5	; 0x05
    2ac4:	80 93 85 2c 	sts	0x2C85, r24	; 0x802c85 <xTickCount>
    2ac8:	90 93 86 2c 	sts	0x2C86, r25	; 0x802c86 <xTickCount+0x1>
    2acc:	a0 93 87 2c 	sts	0x2C87, r26	; 0x802c87 <xTickCount+0x2>
    2ad0:	b0 93 88 2c 	sts	0x2C88, r27	; 0x802c88 <xTickCount+0x3>
    2ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad8:	ac 81       	ldd	r26, Y+4	; 0x04
    2ada:	bd 81       	ldd	r27, Y+5	; 0x05
    2adc:	89 2b       	or	r24, r25
    2ade:	8a 2b       	or	r24, r26
    2ae0:	8b 2b       	or	r24, r27
    2ae2:	d9 f4       	brne	.+54     	; 0x2b1a <xTaskIncrementTick+0x96>
    2ae4:	80 91 5e 2c 	lds	r24, 0x2C5E	; 0x802c5e <pxDelayedTaskList>
    2ae8:	90 91 5f 2c 	lds	r25, 0x2C5F	; 0x802c5f <pxDelayedTaskList+0x1>
    2aec:	8e 83       	std	Y+6, r24	; 0x06
    2aee:	9f 83       	std	Y+7, r25	; 0x07
    2af0:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <pxOverflowDelayedTaskList>
    2af4:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <pxOverflowDelayedTaskList+0x1>
    2af8:	80 93 5e 2c 	sts	0x2C5E, r24	; 0x802c5e <pxDelayedTaskList>
    2afc:	90 93 5f 2c 	sts	0x2C5F, r25	; 0x802c5f <pxDelayedTaskList+0x1>
    2b00:	8e 81       	ldd	r24, Y+6	; 0x06
    2b02:	9f 81       	ldd	r25, Y+7	; 0x07
    2b04:	80 93 60 2c 	sts	0x2C60, r24	; 0x802c60 <pxOverflowDelayedTaskList>
    2b08:	90 93 61 2c 	sts	0x2C61, r25	; 0x802c61 <pxOverflowDelayedTaskList+0x1>
    2b0c:	80 91 8d 2c 	lds	r24, 0x2C8D	; 0x802c8d <xNumOfOverflows>
    2b10:	8f 5f       	subi	r24, 0xFF	; 255
    2b12:	80 93 8d 2c 	sts	0x2C8D, r24	; 0x802c8d <xNumOfOverflows>
    2b16:	0e 94 ff 19 	call	0x33fe	; 0x33fe <prvResetNextTaskUnblockTime>
    2b1a:	80 91 8f 2c 	lds	r24, 0x2C8F	; 0x802c8f <xNextTaskUnblockTime>
    2b1e:	90 91 90 2c 	lds	r25, 0x2C90	; 0x802c90 <xNextTaskUnblockTime+0x1>
    2b22:	a0 91 91 2c 	lds	r26, 0x2C91	; 0x802c91 <xNextTaskUnblockTime+0x2>
    2b26:	b0 91 92 2c 	lds	r27, 0x2C92	; 0x802c92 <xNextTaskUnblockTime+0x3>
    2b2a:	2a 81       	ldd	r18, Y+2	; 0x02
    2b2c:	3b 81       	ldd	r19, Y+3	; 0x03
    2b2e:	4c 81       	ldd	r20, Y+4	; 0x04
    2b30:	5d 81       	ldd	r21, Y+5	; 0x05
    2b32:	28 17       	cp	r18, r24
    2b34:	39 07       	cpc	r19, r25
    2b36:	4a 07       	cpc	r20, r26
    2b38:	5b 07       	cpc	r21, r27
    2b3a:	08 f4       	brcc	.+2      	; 0x2b3e <xTaskIncrementTick+0xba>
    2b3c:	8a c0       	rjmp	.+276    	; 0x2c52 <xTaskIncrementTick+0x1ce>
    2b3e:	80 91 5e 2c 	lds	r24, 0x2C5E	; 0x802c5e <pxDelayedTaskList>
    2b42:	90 91 5f 2c 	lds	r25, 0x2C5F	; 0x802c5f <pxDelayedTaskList+0x1>
    2b46:	fc 01       	movw	r30, r24
    2b48:	80 81       	ld	r24, Z
    2b4a:	88 23       	and	r24, r24
    2b4c:	61 f4       	brne	.+24     	; 0x2b66 <xTaskIncrementTick+0xe2>
    2b4e:	8f ef       	ldi	r24, 0xFF	; 255
    2b50:	9f ef       	ldi	r25, 0xFF	; 255
    2b52:	dc 01       	movw	r26, r24
    2b54:	80 93 8f 2c 	sts	0x2C8F, r24	; 0x802c8f <xNextTaskUnblockTime>
    2b58:	90 93 90 2c 	sts	0x2C90, r25	; 0x802c90 <xNextTaskUnblockTime+0x1>
    2b5c:	a0 93 91 2c 	sts	0x2C91, r26	; 0x802c91 <xNextTaskUnblockTime+0x2>
    2b60:	b0 93 92 2c 	sts	0x2C92, r27	; 0x802c92 <xNextTaskUnblockTime+0x3>
    2b64:	76 c0       	rjmp	.+236    	; 0x2c52 <xTaskIncrementTick+0x1ce>
    2b66:	80 91 5e 2c 	lds	r24, 0x2C5E	; 0x802c5e <pxDelayedTaskList>
    2b6a:	90 91 5f 2c 	lds	r25, 0x2C5F	; 0x802c5f <pxDelayedTaskList+0x1>
    2b6e:	fc 01       	movw	r30, r24
    2b70:	87 81       	ldd	r24, Z+7	; 0x07
    2b72:	90 85       	ldd	r25, Z+8	; 0x08
    2b74:	fc 01       	movw	r30, r24
    2b76:	80 85       	ldd	r24, Z+8	; 0x08
    2b78:	91 85       	ldd	r25, Z+9	; 0x09
    2b7a:	88 87       	std	Y+8, r24	; 0x08
    2b7c:	99 87       	std	Y+9, r25	; 0x09
    2b7e:	88 85       	ldd	r24, Y+8	; 0x08
    2b80:	99 85       	ldd	r25, Y+9	; 0x09
    2b82:	fc 01       	movw	r30, r24
    2b84:	82 81       	ldd	r24, Z+2	; 0x02
    2b86:	93 81       	ldd	r25, Z+3	; 0x03
    2b88:	a4 81       	ldd	r26, Z+4	; 0x04
    2b8a:	b5 81       	ldd	r27, Z+5	; 0x05
    2b8c:	8a 87       	std	Y+10, r24	; 0x0a
    2b8e:	9b 87       	std	Y+11, r25	; 0x0b
    2b90:	ac 87       	std	Y+12, r26	; 0x0c
    2b92:	bd 87       	std	Y+13, r27	; 0x0d
    2b94:	2a 81       	ldd	r18, Y+2	; 0x02
    2b96:	3b 81       	ldd	r19, Y+3	; 0x03
    2b98:	4c 81       	ldd	r20, Y+4	; 0x04
    2b9a:	5d 81       	ldd	r21, Y+5	; 0x05
    2b9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ba0:	ac 85       	ldd	r26, Y+12	; 0x0c
    2ba2:	bd 85       	ldd	r27, Y+13	; 0x0d
    2ba4:	28 17       	cp	r18, r24
    2ba6:	39 07       	cpc	r19, r25
    2ba8:	4a 07       	cpc	r20, r26
    2baa:	5b 07       	cpc	r21, r27
    2bac:	68 f4       	brcc	.+26     	; 0x2bc8 <xTaskIncrementTick+0x144>
    2bae:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bb0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bb2:	ac 85       	ldd	r26, Y+12	; 0x0c
    2bb4:	bd 85       	ldd	r27, Y+13	; 0x0d
    2bb6:	80 93 8f 2c 	sts	0x2C8F, r24	; 0x802c8f <xNextTaskUnblockTime>
    2bba:	90 93 90 2c 	sts	0x2C90, r25	; 0x802c90 <xNextTaskUnblockTime+0x1>
    2bbe:	a0 93 91 2c 	sts	0x2C91, r26	; 0x802c91 <xNextTaskUnblockTime+0x2>
    2bc2:	b0 93 92 2c 	sts	0x2C92, r27	; 0x802c92 <xNextTaskUnblockTime+0x3>
    2bc6:	45 c0       	rjmp	.+138    	; 0x2c52 <xTaskIncrementTick+0x1ce>
    2bc8:	88 85       	ldd	r24, Y+8	; 0x08
    2bca:	99 85       	ldd	r25, Y+9	; 0x09
    2bcc:	02 96       	adiw	r24, 0x02	; 2
    2bce:	0e 94 45 09 	call	0x128a	; 0x128a <uxListRemove>
    2bd2:	88 85       	ldd	r24, Y+8	; 0x08
    2bd4:	99 85       	ldd	r25, Y+9	; 0x09
    2bd6:	fc 01       	movw	r30, r24
    2bd8:	80 8d       	ldd	r24, Z+24	; 0x18
    2bda:	91 8d       	ldd	r25, Z+25	; 0x19
    2bdc:	89 2b       	or	r24, r25
    2bde:	29 f0       	breq	.+10     	; 0x2bea <xTaskIncrementTick+0x166>
    2be0:	88 85       	ldd	r24, Y+8	; 0x08
    2be2:	99 85       	ldd	r25, Y+9	; 0x09
    2be4:	0e 96       	adiw	r24, 0x0e	; 14
    2be6:	0e 94 45 09 	call	0x128a	; 0x128a <uxListRemove>
    2bea:	88 85       	ldd	r24, Y+8	; 0x08
    2bec:	99 85       	ldd	r25, Y+9	; 0x09
    2bee:	fc 01       	movw	r30, r24
    2bf0:	92 8d       	ldd	r25, Z+26	; 0x1a
    2bf2:	80 91 89 2c 	lds	r24, 0x2C89	; 0x802c89 <uxTopReadyPriority>
    2bf6:	89 17       	cp	r24, r25
    2bf8:	30 f4       	brcc	.+12     	; 0x2c06 <xTaskIncrementTick+0x182>
    2bfa:	88 85       	ldd	r24, Y+8	; 0x08
    2bfc:	99 85       	ldd	r25, Y+9	; 0x09
    2bfe:	fc 01       	movw	r30, r24
    2c00:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c02:	80 93 89 2c 	sts	0x2C89, r24	; 0x802c89 <uxTopReadyPriority>
    2c06:	88 85       	ldd	r24, Y+8	; 0x08
    2c08:	99 85       	ldd	r25, Y+9	; 0x09
    2c0a:	ac 01       	movw	r20, r24
    2c0c:	4e 5f       	subi	r20, 0xFE	; 254
    2c0e:	5f 4f       	sbci	r21, 0xFF	; 255
    2c10:	88 85       	ldd	r24, Y+8	; 0x08
    2c12:	99 85       	ldd	r25, Y+9	; 0x09
    2c14:	fc 01       	movw	r30, r24
    2c16:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c18:	28 2f       	mov	r18, r24
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	6b e0       	ldi	r22, 0x0B	; 11
    2c1e:	62 9f       	mul	r22, r18
    2c20:	c0 01       	movw	r24, r0
    2c22:	63 9f       	mul	r22, r19
    2c24:	90 0d       	add	r25, r0
    2c26:	11 24       	eor	r1, r1
    2c28:	84 5e       	subi	r24, 0xE4	; 228
    2c2a:	93 4d       	sbci	r25, 0xD3	; 211
    2c2c:	ba 01       	movw	r22, r20
    2c2e:	0e 94 79 08 	call	0x10f2	; 0x10f2 <vListInsertEnd>
    2c32:	88 85       	ldd	r24, Y+8	; 0x08
    2c34:	99 85       	ldd	r25, Y+9	; 0x09
    2c36:	fc 01       	movw	r30, r24
    2c38:	22 8d       	ldd	r18, Z+26	; 0x1a
    2c3a:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    2c3e:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    2c42:	fc 01       	movw	r30, r24
    2c44:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c46:	28 17       	cp	r18, r24
    2c48:	08 f4       	brcc	.+2      	; 0x2c4c <xTaskIncrementTick+0x1c8>
    2c4a:	79 cf       	rjmp	.-270    	; 0x2b3e <xTaskIncrementTick+0xba>
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	89 83       	std	Y+1, r24	; 0x01
    2c50:	76 cf       	rjmp	.-276    	; 0x2b3e <xTaskIncrementTick+0xba>
    2c52:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    2c56:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    2c5a:	fc 01       	movw	r30, r24
    2c5c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c5e:	28 2f       	mov	r18, r24
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	4b e0       	ldi	r20, 0x0B	; 11
    2c64:	42 9f       	mul	r20, r18
    2c66:	c0 01       	movw	r24, r0
    2c68:	43 9f       	mul	r20, r19
    2c6a:	90 0d       	add	r25, r0
    2c6c:	11 24       	eor	r1, r1
    2c6e:	84 5e       	subi	r24, 0xE4	; 228
    2c70:	93 4d       	sbci	r25, 0xD3	; 211
    2c72:	fc 01       	movw	r30, r24
    2c74:	80 81       	ld	r24, Z
    2c76:	82 30       	cpi	r24, 0x02	; 2
    2c78:	40 f0       	brcs	.+16     	; 0x2c8a <xTaskIncrementTick+0x206>
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	89 83       	std	Y+1, r24	; 0x01
    2c7e:	05 c0       	rjmp	.+10     	; 0x2c8a <xTaskIncrementTick+0x206>
    2c80:	80 91 8b 2c 	lds	r24, 0x2C8B	; 0x802c8b <uxPendedTicks>
    2c84:	8f 5f       	subi	r24, 0xFF	; 255
    2c86:	80 93 8b 2c 	sts	0x2C8B, r24	; 0x802c8b <uxPendedTicks>
    2c8a:	80 91 8c 2c 	lds	r24, 0x2C8C	; 0x802c8c <xYieldPending>
    2c8e:	88 23       	and	r24, r24
    2c90:	11 f0       	breq	.+4      	; 0x2c96 <xTaskIncrementTick+0x212>
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	89 83       	std	Y+1, r24	; 0x01
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
    2c98:	2d 96       	adiw	r28, 0x0d	; 13
    2c9a:	cd bf       	out	0x3d, r28	; 61
    2c9c:	de bf       	out	0x3e, r29	; 62
    2c9e:	df 91       	pop	r29
    2ca0:	cf 91       	pop	r28
    2ca2:	08 95       	ret

00002ca4 <vTaskSwitchContext>:
    2ca4:	cf 93       	push	r28
    2ca6:	df 93       	push	r29
    2ca8:	cd b7       	in	r28, 0x3d	; 61
    2caa:	de b7       	in	r29, 0x3e	; 62
    2cac:	29 97       	sbiw	r28, 0x09	; 9
    2cae:	cd bf       	out	0x3d, r28	; 61
    2cb0:	de bf       	out	0x3e, r29	; 62
    2cb2:	80 91 95 2c 	lds	r24, 0x2C95	; 0x802c95 <uxSchedulerSuspended>
    2cb6:	88 23       	and	r24, r24
    2cb8:	21 f0       	breq	.+8      	; 0x2cc2 <vTaskSwitchContext+0x1e>
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	80 93 8c 2c 	sts	0x2C8C, r24	; 0x802c8c <xYieldPending>
    2cc0:	ba c0       	rjmp	.+372    	; 0x2e36 <vTaskSwitchContext+0x192>
    2cc2:	10 92 8c 2c 	sts	0x2C8C, r1	; 0x802c8c <xYieldPending>
    2cc6:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    2cca:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    2cce:	fc 01       	movw	r30, r24
    2cd0:	83 8d       	ldd	r24, Z+27	; 0x1b
    2cd2:	94 8d       	ldd	r25, Z+28	; 0x1c
    2cd4:	8a 83       	std	Y+2, r24	; 0x02
    2cd6:	9b 83       	std	Y+3, r25	; 0x03
    2cd8:	85 ea       	ldi	r24, 0xA5	; 165
    2cda:	95 ea       	ldi	r25, 0xA5	; 165
    2cdc:	dc 01       	movw	r26, r24
    2cde:	8c 83       	std	Y+4, r24	; 0x04
    2ce0:	9d 83       	std	Y+5, r25	; 0x05
    2ce2:	ae 83       	std	Y+6, r26	; 0x06
    2ce4:	bf 83       	std	Y+7, r27	; 0x07
    2ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cea:	fc 01       	movw	r30, r24
    2cec:	20 81       	ld	r18, Z
    2cee:	31 81       	ldd	r19, Z+1	; 0x01
    2cf0:	42 81       	ldd	r20, Z+2	; 0x02
    2cf2:	53 81       	ldd	r21, Z+3	; 0x03
    2cf4:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf6:	9d 81       	ldd	r25, Y+5	; 0x05
    2cf8:	ae 81       	ldd	r26, Y+6	; 0x06
    2cfa:	bf 81       	ldd	r27, Y+7	; 0x07
    2cfc:	28 17       	cp	r18, r24
    2cfe:	39 07       	cpc	r19, r25
    2d00:	4a 07       	cpc	r20, r26
    2d02:	5b 07       	cpc	r21, r27
    2d04:	99 f5       	brne	.+102    	; 0x2d6c <vTaskSwitchContext+0xc8>
    2d06:	8a 81       	ldd	r24, Y+2	; 0x02
    2d08:	9b 81       	ldd	r25, Y+3	; 0x03
    2d0a:	04 96       	adiw	r24, 0x04	; 4
    2d0c:	fc 01       	movw	r30, r24
    2d0e:	20 81       	ld	r18, Z
    2d10:	31 81       	ldd	r19, Z+1	; 0x01
    2d12:	42 81       	ldd	r20, Z+2	; 0x02
    2d14:	53 81       	ldd	r21, Z+3	; 0x03
    2d16:	8c 81       	ldd	r24, Y+4	; 0x04
    2d18:	9d 81       	ldd	r25, Y+5	; 0x05
    2d1a:	ae 81       	ldd	r26, Y+6	; 0x06
    2d1c:	bf 81       	ldd	r27, Y+7	; 0x07
    2d1e:	28 17       	cp	r18, r24
    2d20:	39 07       	cpc	r19, r25
    2d22:	4a 07       	cpc	r20, r26
    2d24:	5b 07       	cpc	r21, r27
    2d26:	11 f5       	brne	.+68     	; 0x2d6c <vTaskSwitchContext+0xc8>
    2d28:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d2c:	08 96       	adiw	r24, 0x08	; 8
    2d2e:	fc 01       	movw	r30, r24
    2d30:	20 81       	ld	r18, Z
    2d32:	31 81       	ldd	r19, Z+1	; 0x01
    2d34:	42 81       	ldd	r20, Z+2	; 0x02
    2d36:	53 81       	ldd	r21, Z+3	; 0x03
    2d38:	8c 81       	ldd	r24, Y+4	; 0x04
    2d3a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d3c:	ae 81       	ldd	r26, Y+6	; 0x06
    2d3e:	bf 81       	ldd	r27, Y+7	; 0x07
    2d40:	28 17       	cp	r18, r24
    2d42:	39 07       	cpc	r19, r25
    2d44:	4a 07       	cpc	r20, r26
    2d46:	5b 07       	cpc	r21, r27
    2d48:	89 f4       	brne	.+34     	; 0x2d6c <vTaskSwitchContext+0xc8>
    2d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d4e:	0c 96       	adiw	r24, 0x0c	; 12
    2d50:	fc 01       	movw	r30, r24
    2d52:	20 81       	ld	r18, Z
    2d54:	31 81       	ldd	r19, Z+1	; 0x01
    2d56:	42 81       	ldd	r20, Z+2	; 0x02
    2d58:	53 81       	ldd	r21, Z+3	; 0x03
    2d5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d5c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d5e:	ae 81       	ldd	r26, Y+6	; 0x06
    2d60:	bf 81       	ldd	r27, Y+7	; 0x07
    2d62:	28 17       	cp	r18, r24
    2d64:	39 07       	cpc	r19, r25
    2d66:	4a 07       	cpc	r20, r26
    2d68:	5b 07       	cpc	r21, r27
    2d6a:	71 f0       	breq	.+28     	; 0x2d88 <vTaskSwitchContext+0xe4>
    2d6c:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    2d70:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    2d74:	9c 01       	movw	r18, r24
    2d76:	23 5e       	subi	r18, 0xE3	; 227
    2d78:	3f 4f       	sbci	r19, 0xFF	; 255
    2d7a:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    2d7e:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    2d82:	b9 01       	movw	r22, r18
    2d84:	0e 94 53 04 	call	0x8a6	; 0x8a6 <vApplicationStackOverflowHook>
    2d88:	80 91 89 2c 	lds	r24, 0x2C89	; 0x802c89 <uxTopReadyPriority>
    2d8c:	89 83       	std	Y+1, r24	; 0x01
    2d8e:	03 c0       	rjmp	.+6      	; 0x2d96 <vTaskSwitchContext+0xf2>
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	81 50       	subi	r24, 0x01	; 1
    2d94:	89 83       	std	Y+1, r24	; 0x01
    2d96:	89 81       	ldd	r24, Y+1	; 0x01
    2d98:	28 2f       	mov	r18, r24
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	4b e0       	ldi	r20, 0x0B	; 11
    2d9e:	42 9f       	mul	r20, r18
    2da0:	c0 01       	movw	r24, r0
    2da2:	43 9f       	mul	r20, r19
    2da4:	90 0d       	add	r25, r0
    2da6:	11 24       	eor	r1, r1
    2da8:	84 5e       	subi	r24, 0xE4	; 228
    2daa:	93 4d       	sbci	r25, 0xD3	; 211
    2dac:	fc 01       	movw	r30, r24
    2dae:	80 81       	ld	r24, Z
    2db0:	88 23       	and	r24, r24
    2db2:	71 f3       	breq	.-36     	; 0x2d90 <vTaskSwitchContext+0xec>
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	28 2f       	mov	r18, r24
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	4b e0       	ldi	r20, 0x0B	; 11
    2dbc:	42 9f       	mul	r20, r18
    2dbe:	c0 01       	movw	r24, r0
    2dc0:	43 9f       	mul	r20, r19
    2dc2:	90 0d       	add	r25, r0
    2dc4:	11 24       	eor	r1, r1
    2dc6:	84 5e       	subi	r24, 0xE4	; 228
    2dc8:	93 4d       	sbci	r25, 0xD3	; 211
    2dca:	88 87       	std	Y+8, r24	; 0x08
    2dcc:	99 87       	std	Y+9, r25	; 0x09
    2dce:	88 85       	ldd	r24, Y+8	; 0x08
    2dd0:	99 85       	ldd	r25, Y+9	; 0x09
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	81 81       	ldd	r24, Z+1	; 0x01
    2dd6:	92 81       	ldd	r25, Z+2	; 0x02
    2dd8:	fc 01       	movw	r30, r24
    2dda:	24 81       	ldd	r18, Z+4	; 0x04
    2ddc:	35 81       	ldd	r19, Z+5	; 0x05
    2dde:	88 85       	ldd	r24, Y+8	; 0x08
    2de0:	99 85       	ldd	r25, Y+9	; 0x09
    2de2:	fc 01       	movw	r30, r24
    2de4:	21 83       	std	Z+1, r18	; 0x01
    2de6:	32 83       	std	Z+2, r19	; 0x02
    2de8:	88 85       	ldd	r24, Y+8	; 0x08
    2dea:	99 85       	ldd	r25, Y+9	; 0x09
    2dec:	fc 01       	movw	r30, r24
    2dee:	21 81       	ldd	r18, Z+1	; 0x01
    2df0:	32 81       	ldd	r19, Z+2	; 0x02
    2df2:	88 85       	ldd	r24, Y+8	; 0x08
    2df4:	99 85       	ldd	r25, Y+9	; 0x09
    2df6:	03 96       	adiw	r24, 0x03	; 3
    2df8:	28 17       	cp	r18, r24
    2dfa:	39 07       	cpc	r19, r25
    2dfc:	69 f4       	brne	.+26     	; 0x2e18 <vTaskSwitchContext+0x174>
    2dfe:	88 85       	ldd	r24, Y+8	; 0x08
    2e00:	99 85       	ldd	r25, Y+9	; 0x09
    2e02:	fc 01       	movw	r30, r24
    2e04:	81 81       	ldd	r24, Z+1	; 0x01
    2e06:	92 81       	ldd	r25, Z+2	; 0x02
    2e08:	fc 01       	movw	r30, r24
    2e0a:	24 81       	ldd	r18, Z+4	; 0x04
    2e0c:	35 81       	ldd	r19, Z+5	; 0x05
    2e0e:	88 85       	ldd	r24, Y+8	; 0x08
    2e10:	99 85       	ldd	r25, Y+9	; 0x09
    2e12:	fc 01       	movw	r30, r24
    2e14:	21 83       	std	Z+1, r18	; 0x01
    2e16:	32 83       	std	Z+2, r19	; 0x02
    2e18:	88 85       	ldd	r24, Y+8	; 0x08
    2e1a:	99 85       	ldd	r25, Y+9	; 0x09
    2e1c:	fc 01       	movw	r30, r24
    2e1e:	81 81       	ldd	r24, Z+1	; 0x01
    2e20:	92 81       	ldd	r25, Z+2	; 0x02
    2e22:	fc 01       	movw	r30, r24
    2e24:	80 85       	ldd	r24, Z+8	; 0x08
    2e26:	91 85       	ldd	r25, Z+9	; 0x09
    2e28:	80 93 1a 2c 	sts	0x2C1A, r24	; 0x802c1a <pxCurrentTCB>
    2e2c:	90 93 1b 2c 	sts	0x2C1B, r25	; 0x802c1b <pxCurrentTCB+0x1>
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	80 93 89 2c 	sts	0x2C89, r24	; 0x802c89 <uxTopReadyPriority>
    2e36:	00 00       	nop
    2e38:	29 96       	adiw	r28, 0x09	; 9
    2e3a:	cd bf       	out	0x3d, r28	; 61
    2e3c:	de bf       	out	0x3e, r29	; 62
    2e3e:	df 91       	pop	r29
    2e40:	cf 91       	pop	r28
    2e42:	08 95       	ret

00002e44 <vTaskPlaceOnEventList>:
    2e44:	cf 93       	push	r28
    2e46:	df 93       	push	r29
    2e48:	00 d0       	rcall	.+0      	; 0x2e4a <vTaskPlaceOnEventList+0x6>
    2e4a:	00 d0       	rcall	.+0      	; 0x2e4c <vTaskPlaceOnEventList+0x8>
    2e4c:	cd b7       	in	r28, 0x3d	; 61
    2e4e:	de b7       	in	r29, 0x3e	; 62
    2e50:	89 83       	std	Y+1, r24	; 0x01
    2e52:	9a 83       	std	Y+2, r25	; 0x02
    2e54:	4b 83       	std	Y+3, r20	; 0x03
    2e56:	5c 83       	std	Y+4, r21	; 0x04
    2e58:	6d 83       	std	Y+5, r22	; 0x05
    2e5a:	7e 83       	std	Y+6, r23	; 0x06
    2e5c:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    2e60:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    2e64:	9c 01       	movw	r18, r24
    2e66:	22 5f       	subi	r18, 0xF2	; 242
    2e68:	3f 4f       	sbci	r19, 0xFF	; 255
    2e6a:	89 81       	ldd	r24, Y+1	; 0x01
    2e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e6e:	b9 01       	movw	r22, r18
    2e70:	0e 94 c4 08 	call	0x1188	; 0x1188 <vListInsert>
    2e74:	8b 81       	ldd	r24, Y+3	; 0x03
    2e76:	9c 81       	ldd	r25, Y+4	; 0x04
    2e78:	ad 81       	ldd	r26, Y+5	; 0x05
    2e7a:	be 81       	ldd	r27, Y+6	; 0x06
    2e7c:	41 e0       	ldi	r20, 0x01	; 1
    2e7e:	bc 01       	movw	r22, r24
    2e80:	cd 01       	movw	r24, r26
    2e82:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <prvAddCurrentTaskToDelayedList>
    2e86:	00 00       	nop
    2e88:	26 96       	adiw	r28, 0x06	; 6
    2e8a:	cd bf       	out	0x3d, r28	; 61
    2e8c:	de bf       	out	0x3e, r29	; 62
    2e8e:	df 91       	pop	r29
    2e90:	cf 91       	pop	r28
    2e92:	08 95       	ret

00002e94 <vTaskPlaceOnUnorderedEventList>:
    2e94:	0f 93       	push	r16
    2e96:	1f 93       	push	r17
    2e98:	cf 93       	push	r28
    2e9a:	df 93       	push	r29
    2e9c:	cd b7       	in	r28, 0x3d	; 61
    2e9e:	de b7       	in	r29, 0x3e	; 62
    2ea0:	2a 97       	sbiw	r28, 0x0a	; 10
    2ea2:	cd bf       	out	0x3d, r28	; 61
    2ea4:	de bf       	out	0x3e, r29	; 62
    2ea6:	89 83       	std	Y+1, r24	; 0x01
    2ea8:	9a 83       	std	Y+2, r25	; 0x02
    2eaa:	4b 83       	std	Y+3, r20	; 0x03
    2eac:	5c 83       	std	Y+4, r21	; 0x04
    2eae:	6d 83       	std	Y+5, r22	; 0x05
    2eb0:	7e 83       	std	Y+6, r23	; 0x06
    2eb2:	0f 83       	std	Y+7, r16	; 0x07
    2eb4:	18 87       	std	Y+8, r17	; 0x08
    2eb6:	29 87       	std	Y+9, r18	; 0x09
    2eb8:	3a 87       	std	Y+10, r19	; 0x0a
    2eba:	20 91 1a 2c 	lds	r18, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    2ebe:	30 91 1b 2c 	lds	r19, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    2ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec6:	ad 81       	ldd	r26, Y+5	; 0x05
    2ec8:	be 81       	ldd	r27, Y+6	; 0x06
    2eca:	b0 68       	ori	r27, 0x80	; 128
    2ecc:	f9 01       	movw	r30, r18
    2ece:	86 87       	std	Z+14, r24	; 0x0e
    2ed0:	97 87       	std	Z+15, r25	; 0x0f
    2ed2:	a0 8b       	std	Z+16, r26	; 0x10
    2ed4:	b1 8b       	std	Z+17, r27	; 0x11
    2ed6:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    2eda:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    2ede:	9c 01       	movw	r18, r24
    2ee0:	22 5f       	subi	r18, 0xF2	; 242
    2ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee8:	b9 01       	movw	r22, r18
    2eea:	0e 94 79 08 	call	0x10f2	; 0x10f2 <vListInsertEnd>
    2eee:	8f 81       	ldd	r24, Y+7	; 0x07
    2ef0:	98 85       	ldd	r25, Y+8	; 0x08
    2ef2:	a9 85       	ldd	r26, Y+9	; 0x09
    2ef4:	ba 85       	ldd	r27, Y+10	; 0x0a
    2ef6:	41 e0       	ldi	r20, 0x01	; 1
    2ef8:	bc 01       	movw	r22, r24
    2efa:	cd 01       	movw	r24, r26
    2efc:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <prvAddCurrentTaskToDelayedList>
    2f00:	00 00       	nop
    2f02:	2a 96       	adiw	r28, 0x0a	; 10
    2f04:	cd bf       	out	0x3d, r28	; 61
    2f06:	de bf       	out	0x3e, r29	; 62
    2f08:	df 91       	pop	r29
    2f0a:	cf 91       	pop	r28
    2f0c:	1f 91       	pop	r17
    2f0e:	0f 91       	pop	r16
    2f10:	08 95       	ret

00002f12 <vTaskPlaceOnEventListRestricted>:
    2f12:	cf 93       	push	r28
    2f14:	df 93       	push	r29
    2f16:	cd b7       	in	r28, 0x3d	; 61
    2f18:	de b7       	in	r29, 0x3e	; 62
    2f1a:	27 97       	sbiw	r28, 0x07	; 7
    2f1c:	cd bf       	out	0x3d, r28	; 61
    2f1e:	de bf       	out	0x3e, r29	; 62
    2f20:	89 83       	std	Y+1, r24	; 0x01
    2f22:	9a 83       	std	Y+2, r25	; 0x02
    2f24:	4b 83       	std	Y+3, r20	; 0x03
    2f26:	5c 83       	std	Y+4, r21	; 0x04
    2f28:	6d 83       	std	Y+5, r22	; 0x05
    2f2a:	7e 83       	std	Y+6, r23	; 0x06
    2f2c:	2f 83       	std	Y+7, r18	; 0x07
    2f2e:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    2f32:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    2f36:	9c 01       	movw	r18, r24
    2f38:	22 5f       	subi	r18, 0xF2	; 242
    2f3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f3c:	89 81       	ldd	r24, Y+1	; 0x01
    2f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f40:	b9 01       	movw	r22, r18
    2f42:	0e 94 79 08 	call	0x10f2	; 0x10f2 <vListInsertEnd>
    2f46:	8f 81       	ldd	r24, Y+7	; 0x07
    2f48:	88 23       	and	r24, r24
    2f4a:	39 f0       	breq	.+14     	; 0x2f5a <vTaskPlaceOnEventListRestricted+0x48>
    2f4c:	8f ef       	ldi	r24, 0xFF	; 255
    2f4e:	9f ef       	ldi	r25, 0xFF	; 255
    2f50:	dc 01       	movw	r26, r24
    2f52:	8b 83       	std	Y+3, r24	; 0x03
    2f54:	9c 83       	std	Y+4, r25	; 0x04
    2f56:	ad 83       	std	Y+5, r26	; 0x05
    2f58:	be 83       	std	Y+6, r27	; 0x06
    2f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5e:	ad 81       	ldd	r26, Y+5	; 0x05
    2f60:	be 81       	ldd	r27, Y+6	; 0x06
    2f62:	4f 81       	ldd	r20, Y+7	; 0x07
    2f64:	bc 01       	movw	r22, r24
    2f66:	cd 01       	movw	r24, r26
    2f68:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <prvAddCurrentTaskToDelayedList>
    2f6c:	00 00       	nop
    2f6e:	27 96       	adiw	r28, 0x07	; 7
    2f70:	cd bf       	out	0x3d, r28	; 61
    2f72:	de bf       	out	0x3e, r29	; 62
    2f74:	df 91       	pop	r29
    2f76:	cf 91       	pop	r28
    2f78:	08 95       	ret

00002f7a <xTaskRemoveFromEventList>:
    2f7a:	cf 93       	push	r28
    2f7c:	df 93       	push	r29
    2f7e:	cd b7       	in	r28, 0x3d	; 61
    2f80:	de b7       	in	r29, 0x3e	; 62
    2f82:	25 97       	sbiw	r28, 0x05	; 5
    2f84:	cd bf       	out	0x3d, r28	; 61
    2f86:	de bf       	out	0x3e, r29	; 62
    2f88:	8c 83       	std	Y+4, r24	; 0x04
    2f8a:	9d 83       	std	Y+5, r25	; 0x05
    2f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f8e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f90:	fc 01       	movw	r30, r24
    2f92:	87 81       	ldd	r24, Z+7	; 0x07
    2f94:	90 85       	ldd	r25, Z+8	; 0x08
    2f96:	fc 01       	movw	r30, r24
    2f98:	80 85       	ldd	r24, Z+8	; 0x08
    2f9a:	91 85       	ldd	r25, Z+9	; 0x09
    2f9c:	8a 83       	std	Y+2, r24	; 0x02
    2f9e:	9b 83       	std	Y+3, r25	; 0x03
    2fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa4:	0e 96       	adiw	r24, 0x0e	; 14
    2fa6:	0e 94 45 09 	call	0x128a	; 0x128a <uxListRemove>
    2faa:	80 91 95 2c 	lds	r24, 0x2C95	; 0x802c95 <uxSchedulerSuspended>
    2fae:	88 23       	and	r24, r24
    2fb0:	51 f5       	brne	.+84     	; 0x3006 <xTaskRemoveFromEventList+0x8c>
    2fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb4:	9b 81       	ldd	r25, Y+3	; 0x03
    2fb6:	02 96       	adiw	r24, 0x02	; 2
    2fb8:	0e 94 45 09 	call	0x128a	; 0x128a <uxListRemove>
    2fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbe:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc0:	fc 01       	movw	r30, r24
    2fc2:	92 8d       	ldd	r25, Z+26	; 0x1a
    2fc4:	80 91 89 2c 	lds	r24, 0x2C89	; 0x802c89 <uxTopReadyPriority>
    2fc8:	89 17       	cp	r24, r25
    2fca:	30 f4       	brcc	.+12     	; 0x2fd8 <xTaskRemoveFromEventList+0x5e>
    2fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fce:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd0:	fc 01       	movw	r30, r24
    2fd2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fd4:	80 93 89 2c 	sts	0x2C89, r24	; 0x802c89 <uxTopReadyPriority>
    2fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fda:	9b 81       	ldd	r25, Y+3	; 0x03
    2fdc:	ac 01       	movw	r20, r24
    2fde:	4e 5f       	subi	r20, 0xFE	; 254
    2fe0:	5f 4f       	sbci	r21, 0xFF	; 255
    2fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe4:	9b 81       	ldd	r25, Y+3	; 0x03
    2fe6:	fc 01       	movw	r30, r24
    2fe8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fea:	28 2f       	mov	r18, r24
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	6b e0       	ldi	r22, 0x0B	; 11
    2ff0:	62 9f       	mul	r22, r18
    2ff2:	c0 01       	movw	r24, r0
    2ff4:	63 9f       	mul	r22, r19
    2ff6:	90 0d       	add	r25, r0
    2ff8:	11 24       	eor	r1, r1
    2ffa:	84 5e       	subi	r24, 0xE4	; 228
    2ffc:	93 4d       	sbci	r25, 0xD3	; 211
    2ffe:	ba 01       	movw	r22, r20
    3000:	0e 94 79 08 	call	0x10f2	; 0x10f2 <vListInsertEnd>
    3004:	08 c0       	rjmp	.+16     	; 0x3016 <xTaskRemoveFromEventList+0x9c>
    3006:	8a 81       	ldd	r24, Y+2	; 0x02
    3008:	9b 81       	ldd	r25, Y+3	; 0x03
    300a:	0e 96       	adiw	r24, 0x0e	; 14
    300c:	bc 01       	movw	r22, r24
    300e:	82 e6       	ldi	r24, 0x62	; 98
    3010:	9c e2       	ldi	r25, 0x2C	; 44
    3012:	0e 94 79 08 	call	0x10f2	; 0x10f2 <vListInsertEnd>
    3016:	8a 81       	ldd	r24, Y+2	; 0x02
    3018:	9b 81       	ldd	r25, Y+3	; 0x03
    301a:	fc 01       	movw	r30, r24
    301c:	22 8d       	ldd	r18, Z+26	; 0x1a
    301e:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    3022:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    3026:	fc 01       	movw	r30, r24
    3028:	82 8d       	ldd	r24, Z+26	; 0x1a
    302a:	82 17       	cp	r24, r18
    302c:	30 f4       	brcc	.+12     	; 0x303a <xTaskRemoveFromEventList+0xc0>
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	89 83       	std	Y+1, r24	; 0x01
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	80 93 8c 2c 	sts	0x2C8C, r24	; 0x802c8c <xYieldPending>
    3038:	01 c0       	rjmp	.+2      	; 0x303c <xTaskRemoveFromEventList+0xc2>
    303a:	19 82       	std	Y+1, r1	; 0x01
    303c:	89 81       	ldd	r24, Y+1	; 0x01
    303e:	25 96       	adiw	r28, 0x05	; 5
    3040:	cd bf       	out	0x3d, r28	; 61
    3042:	de bf       	out	0x3e, r29	; 62
    3044:	df 91       	pop	r29
    3046:	cf 91       	pop	r28
    3048:	08 95       	ret

0000304a <vTaskRemoveFromUnorderedEventList>:
    304a:	cf 93       	push	r28
    304c:	df 93       	push	r29
    304e:	cd b7       	in	r28, 0x3d	; 61
    3050:	de b7       	in	r29, 0x3e	; 62
    3052:	28 97       	sbiw	r28, 0x08	; 8
    3054:	cd bf       	out	0x3d, r28	; 61
    3056:	de bf       	out	0x3e, r29	; 62
    3058:	8b 83       	std	Y+3, r24	; 0x03
    305a:	9c 83       	std	Y+4, r25	; 0x04
    305c:	4d 83       	std	Y+5, r20	; 0x05
    305e:	5e 83       	std	Y+6, r21	; 0x06
    3060:	6f 83       	std	Y+7, r22	; 0x07
    3062:	78 87       	std	Y+8, r23	; 0x08
    3064:	8d 81       	ldd	r24, Y+5	; 0x05
    3066:	9e 81       	ldd	r25, Y+6	; 0x06
    3068:	af 81       	ldd	r26, Y+7	; 0x07
    306a:	b8 85       	ldd	r27, Y+8	; 0x08
    306c:	b0 68       	ori	r27, 0x80	; 128
    306e:	2b 81       	ldd	r18, Y+3	; 0x03
    3070:	3c 81       	ldd	r19, Y+4	; 0x04
    3072:	f9 01       	movw	r30, r18
    3074:	80 83       	st	Z, r24
    3076:	91 83       	std	Z+1, r25	; 0x01
    3078:	a2 83       	std	Z+2, r26	; 0x02
    307a:	b3 83       	std	Z+3, r27	; 0x03
    307c:	8b 81       	ldd	r24, Y+3	; 0x03
    307e:	9c 81       	ldd	r25, Y+4	; 0x04
    3080:	fc 01       	movw	r30, r24
    3082:	80 85       	ldd	r24, Z+8	; 0x08
    3084:	91 85       	ldd	r25, Z+9	; 0x09
    3086:	89 83       	std	Y+1, r24	; 0x01
    3088:	9a 83       	std	Y+2, r25	; 0x02
    308a:	8b 81       	ldd	r24, Y+3	; 0x03
    308c:	9c 81       	ldd	r25, Y+4	; 0x04
    308e:	0e 94 45 09 	call	0x128a	; 0x128a <uxListRemove>
    3092:	89 81       	ldd	r24, Y+1	; 0x01
    3094:	9a 81       	ldd	r25, Y+2	; 0x02
    3096:	02 96       	adiw	r24, 0x02	; 2
    3098:	0e 94 45 09 	call	0x128a	; 0x128a <uxListRemove>
    309c:	89 81       	ldd	r24, Y+1	; 0x01
    309e:	9a 81       	ldd	r25, Y+2	; 0x02
    30a0:	fc 01       	movw	r30, r24
    30a2:	92 8d       	ldd	r25, Z+26	; 0x1a
    30a4:	80 91 89 2c 	lds	r24, 0x2C89	; 0x802c89 <uxTopReadyPriority>
    30a8:	89 17       	cp	r24, r25
    30aa:	30 f4       	brcc	.+12     	; 0x30b8 <vTaskRemoveFromUnorderedEventList+0x6e>
    30ac:	89 81       	ldd	r24, Y+1	; 0x01
    30ae:	9a 81       	ldd	r25, Y+2	; 0x02
    30b0:	fc 01       	movw	r30, r24
    30b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    30b4:	80 93 89 2c 	sts	0x2C89, r24	; 0x802c89 <uxTopReadyPriority>
    30b8:	89 81       	ldd	r24, Y+1	; 0x01
    30ba:	9a 81       	ldd	r25, Y+2	; 0x02
    30bc:	ac 01       	movw	r20, r24
    30be:	4e 5f       	subi	r20, 0xFE	; 254
    30c0:	5f 4f       	sbci	r21, 0xFF	; 255
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	9a 81       	ldd	r25, Y+2	; 0x02
    30c6:	fc 01       	movw	r30, r24
    30c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    30ca:	28 2f       	mov	r18, r24
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	6b e0       	ldi	r22, 0x0B	; 11
    30d0:	62 9f       	mul	r22, r18
    30d2:	c0 01       	movw	r24, r0
    30d4:	63 9f       	mul	r22, r19
    30d6:	90 0d       	add	r25, r0
    30d8:	11 24       	eor	r1, r1
    30da:	84 5e       	subi	r24, 0xE4	; 228
    30dc:	93 4d       	sbci	r25, 0xD3	; 211
    30de:	ba 01       	movw	r22, r20
    30e0:	0e 94 79 08 	call	0x10f2	; 0x10f2 <vListInsertEnd>
    30e4:	89 81       	ldd	r24, Y+1	; 0x01
    30e6:	9a 81       	ldd	r25, Y+2	; 0x02
    30e8:	fc 01       	movw	r30, r24
    30ea:	22 8d       	ldd	r18, Z+26	; 0x1a
    30ec:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    30f0:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    30f4:	fc 01       	movw	r30, r24
    30f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    30f8:	82 17       	cp	r24, r18
    30fa:	18 f4       	brcc	.+6      	; 0x3102 <vTaskRemoveFromUnorderedEventList+0xb8>
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	80 93 8c 2c 	sts	0x2C8C, r24	; 0x802c8c <xYieldPending>
    3102:	00 00       	nop
    3104:	28 96       	adiw	r28, 0x08	; 8
    3106:	cd bf       	out	0x3d, r28	; 61
    3108:	de bf       	out	0x3e, r29	; 62
    310a:	df 91       	pop	r29
    310c:	cf 91       	pop	r28
    310e:	08 95       	ret

00003110 <vTaskInternalSetTimeOutState>:
    3110:	cf 93       	push	r28
    3112:	df 93       	push	r29
    3114:	1f 92       	push	r1
    3116:	1f 92       	push	r1
    3118:	cd b7       	in	r28, 0x3d	; 61
    311a:	de b7       	in	r29, 0x3e	; 62
    311c:	89 83       	std	Y+1, r24	; 0x01
    311e:	9a 83       	std	Y+2, r25	; 0x02
    3120:	20 91 8d 2c 	lds	r18, 0x2C8D	; 0x802c8d <xNumOfOverflows>
    3124:	89 81       	ldd	r24, Y+1	; 0x01
    3126:	9a 81       	ldd	r25, Y+2	; 0x02
    3128:	fc 01       	movw	r30, r24
    312a:	20 83       	st	Z, r18
    312c:	80 91 85 2c 	lds	r24, 0x2C85	; 0x802c85 <xTickCount>
    3130:	90 91 86 2c 	lds	r25, 0x2C86	; 0x802c86 <xTickCount+0x1>
    3134:	a0 91 87 2c 	lds	r26, 0x2C87	; 0x802c87 <xTickCount+0x2>
    3138:	b0 91 88 2c 	lds	r27, 0x2C88	; 0x802c88 <xTickCount+0x3>
    313c:	29 81       	ldd	r18, Y+1	; 0x01
    313e:	3a 81       	ldd	r19, Y+2	; 0x02
    3140:	f9 01       	movw	r30, r18
    3142:	81 83       	std	Z+1, r24	; 0x01
    3144:	92 83       	std	Z+2, r25	; 0x02
    3146:	a3 83       	std	Z+3, r26	; 0x03
    3148:	b4 83       	std	Z+4, r27	; 0x04
    314a:	00 00       	nop
    314c:	0f 90       	pop	r0
    314e:	0f 90       	pop	r0
    3150:	df 91       	pop	r29
    3152:	cf 91       	pop	r28
    3154:	08 95       	ret

00003156 <xTaskCheckForTimeOut>:
    3156:	ef 92       	push	r14
    3158:	ff 92       	push	r15
    315a:	0f 93       	push	r16
    315c:	1f 93       	push	r17
    315e:	cf 93       	push	r28
    3160:	df 93       	push	r29
    3162:	cd b7       	in	r28, 0x3d	; 61
    3164:	de b7       	in	r29, 0x3e	; 62
    3166:	2d 97       	sbiw	r28, 0x0d	; 13
    3168:	cd bf       	out	0x3d, r28	; 61
    316a:	de bf       	out	0x3e, r29	; 62
    316c:	8a 87       	std	Y+10, r24	; 0x0a
    316e:	9b 87       	std	Y+11, r25	; 0x0b
    3170:	6c 87       	std	Y+12, r22	; 0x0c
    3172:	7d 87       	std	Y+13, r23	; 0x0d
    3174:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3178:	ff 93       	push	r31
    317a:	f8 7f       	andi	r31, 0xF8	; 248
    317c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3180:	80 91 85 2c 	lds	r24, 0x2C85	; 0x802c85 <xTickCount>
    3184:	90 91 86 2c 	lds	r25, 0x2C86	; 0x802c86 <xTickCount+0x1>
    3188:	a0 91 87 2c 	lds	r26, 0x2C87	; 0x802c87 <xTickCount+0x2>
    318c:	b0 91 88 2c 	lds	r27, 0x2C88	; 0x802c88 <xTickCount+0x3>
    3190:	8a 83       	std	Y+2, r24	; 0x02
    3192:	9b 83       	std	Y+3, r25	; 0x03
    3194:	ac 83       	std	Y+4, r26	; 0x04
    3196:	bd 83       	std	Y+5, r27	; 0x05
    3198:	8a 85       	ldd	r24, Y+10	; 0x0a
    319a:	9b 85       	ldd	r25, Y+11	; 0x0b
    319c:	fc 01       	movw	r30, r24
    319e:	81 81       	ldd	r24, Z+1	; 0x01
    31a0:	92 81       	ldd	r25, Z+2	; 0x02
    31a2:	a3 81       	ldd	r26, Z+3	; 0x03
    31a4:	b4 81       	ldd	r27, Z+4	; 0x04
    31a6:	2a 81       	ldd	r18, Y+2	; 0x02
    31a8:	3b 81       	ldd	r19, Y+3	; 0x03
    31aa:	4c 81       	ldd	r20, Y+4	; 0x04
    31ac:	5d 81       	ldd	r21, Y+5	; 0x05
    31ae:	79 01       	movw	r14, r18
    31b0:	8a 01       	movw	r16, r20
    31b2:	e8 1a       	sub	r14, r24
    31b4:	f9 0a       	sbc	r15, r25
    31b6:	0a 0b       	sbc	r16, r26
    31b8:	1b 0b       	sbc	r17, r27
    31ba:	d8 01       	movw	r26, r16
    31bc:	c7 01       	movw	r24, r14
    31be:	8e 83       	std	Y+6, r24	; 0x06
    31c0:	9f 83       	std	Y+7, r25	; 0x07
    31c2:	a8 87       	std	Y+8, r26	; 0x08
    31c4:	b9 87       	std	Y+9, r27	; 0x09
    31c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    31c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    31ca:	fc 01       	movw	r30, r24
    31cc:	80 81       	ld	r24, Z
    31ce:	91 81       	ldd	r25, Z+1	; 0x01
    31d0:	a2 81       	ldd	r26, Z+2	; 0x02
    31d2:	b3 81       	ldd	r27, Z+3	; 0x03
    31d4:	8f 3f       	cpi	r24, 0xFF	; 255
    31d6:	9f 4f       	sbci	r25, 0xFF	; 255
    31d8:	af 4f       	sbci	r26, 0xFF	; 255
    31da:	bf 4f       	sbci	r27, 0xFF	; 255
    31dc:	11 f4       	brne	.+4      	; 0x31e2 <xTaskCheckForTimeOut+0x8c>
    31de:	19 82       	std	Y+1, r1	; 0x01
    31e0:	54 c0       	rjmp	.+168    	; 0x328a <xTaskCheckForTimeOut+0x134>
    31e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    31e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    31e6:	fc 01       	movw	r30, r24
    31e8:	90 81       	ld	r25, Z
    31ea:	80 91 8d 2c 	lds	r24, 0x2C8D	; 0x802c8d <xNumOfOverflows>
    31ee:	98 17       	cp	r25, r24
    31f0:	99 f0       	breq	.+38     	; 0x3218 <xTaskCheckForTimeOut+0xc2>
    31f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    31f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    31f6:	fc 01       	movw	r30, r24
    31f8:	21 81       	ldd	r18, Z+1	; 0x01
    31fa:	32 81       	ldd	r19, Z+2	; 0x02
    31fc:	43 81       	ldd	r20, Z+3	; 0x03
    31fe:	54 81       	ldd	r21, Z+4	; 0x04
    3200:	8a 81       	ldd	r24, Y+2	; 0x02
    3202:	9b 81       	ldd	r25, Y+3	; 0x03
    3204:	ac 81       	ldd	r26, Y+4	; 0x04
    3206:	bd 81       	ldd	r27, Y+5	; 0x05
    3208:	82 17       	cp	r24, r18
    320a:	93 07       	cpc	r25, r19
    320c:	a4 07       	cpc	r26, r20
    320e:	b5 07       	cpc	r27, r21
    3210:	18 f0       	brcs	.+6      	; 0x3218 <xTaskCheckForTimeOut+0xc2>
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	89 83       	std	Y+1, r24	; 0x01
    3216:	39 c0       	rjmp	.+114    	; 0x328a <xTaskCheckForTimeOut+0x134>
    3218:	8c 85       	ldd	r24, Y+12	; 0x0c
    321a:	9d 85       	ldd	r25, Y+13	; 0x0d
    321c:	fc 01       	movw	r30, r24
    321e:	20 81       	ld	r18, Z
    3220:	31 81       	ldd	r19, Z+1	; 0x01
    3222:	42 81       	ldd	r20, Z+2	; 0x02
    3224:	53 81       	ldd	r21, Z+3	; 0x03
    3226:	8e 81       	ldd	r24, Y+6	; 0x06
    3228:	9f 81       	ldd	r25, Y+7	; 0x07
    322a:	a8 85       	ldd	r26, Y+8	; 0x08
    322c:	b9 85       	ldd	r27, Y+9	; 0x09
    322e:	82 17       	cp	r24, r18
    3230:	93 07       	cpc	r25, r19
    3232:	a4 07       	cpc	r26, r20
    3234:	b5 07       	cpc	r27, r21
    3236:	00 f5       	brcc	.+64     	; 0x3278 <xTaskCheckForTimeOut+0x122>
    3238:	8c 85       	ldd	r24, Y+12	; 0x0c
    323a:	9d 85       	ldd	r25, Y+13	; 0x0d
    323c:	fc 01       	movw	r30, r24
    323e:	20 81       	ld	r18, Z
    3240:	31 81       	ldd	r19, Z+1	; 0x01
    3242:	42 81       	ldd	r20, Z+2	; 0x02
    3244:	53 81       	ldd	r21, Z+3	; 0x03
    3246:	8e 81       	ldd	r24, Y+6	; 0x06
    3248:	9f 81       	ldd	r25, Y+7	; 0x07
    324a:	a8 85       	ldd	r26, Y+8	; 0x08
    324c:	b9 85       	ldd	r27, Y+9	; 0x09
    324e:	79 01       	movw	r14, r18
    3250:	8a 01       	movw	r16, r20
    3252:	e8 1a       	sub	r14, r24
    3254:	f9 0a       	sbc	r15, r25
    3256:	0a 0b       	sbc	r16, r26
    3258:	1b 0b       	sbc	r17, r27
    325a:	d8 01       	movw	r26, r16
    325c:	c7 01       	movw	r24, r14
    325e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3260:	3d 85       	ldd	r19, Y+13	; 0x0d
    3262:	f9 01       	movw	r30, r18
    3264:	80 83       	st	Z, r24
    3266:	91 83       	std	Z+1, r25	; 0x01
    3268:	a2 83       	std	Z+2, r26	; 0x02
    326a:	b3 83       	std	Z+3, r27	; 0x03
    326c:	8a 85       	ldd	r24, Y+10	; 0x0a
    326e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3270:	0e 94 88 18 	call	0x3110	; 0x3110 <vTaskInternalSetTimeOutState>
    3274:	19 82       	std	Y+1, r1	; 0x01
    3276:	09 c0       	rjmp	.+18     	; 0x328a <xTaskCheckForTimeOut+0x134>
    3278:	8c 85       	ldd	r24, Y+12	; 0x0c
    327a:	9d 85       	ldd	r25, Y+13	; 0x0d
    327c:	fc 01       	movw	r30, r24
    327e:	10 82       	st	Z, r1
    3280:	11 82       	std	Z+1, r1	; 0x01
    3282:	12 82       	std	Z+2, r1	; 0x02
    3284:	13 82       	std	Z+3, r1	; 0x03
    3286:	81 e0       	ldi	r24, 0x01	; 1
    3288:	89 83       	std	Y+1, r24	; 0x01
    328a:	ff 91       	pop	r31
    328c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3290:	89 81       	ldd	r24, Y+1	; 0x01
    3292:	2d 96       	adiw	r28, 0x0d	; 13
    3294:	cd bf       	out	0x3d, r28	; 61
    3296:	de bf       	out	0x3e, r29	; 62
    3298:	df 91       	pop	r29
    329a:	cf 91       	pop	r28
    329c:	1f 91       	pop	r17
    329e:	0f 91       	pop	r16
    32a0:	ff 90       	pop	r15
    32a2:	ef 90       	pop	r14
    32a4:	08 95       	ret

000032a6 <vTaskMissedYield>:
    32a6:	cf 93       	push	r28
    32a8:	df 93       	push	r29
    32aa:	cd b7       	in	r28, 0x3d	; 61
    32ac:	de b7       	in	r29, 0x3e	; 62
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	80 93 8c 2c 	sts	0x2C8C, r24	; 0x802c8c <xYieldPending>
    32b4:	00 00       	nop
    32b6:	df 91       	pop	r29
    32b8:	cf 91       	pop	r28
    32ba:	08 95       	ret

000032bc <prvIdleTask>:
    32bc:	cf 93       	push	r28
    32be:	df 93       	push	r29
    32c0:	1f 92       	push	r1
    32c2:	1f 92       	push	r1
    32c4:	cd b7       	in	r28, 0x3d	; 61
    32c6:	de b7       	in	r29, 0x3e	; 62
    32c8:	89 83       	std	Y+1, r24	; 0x01
    32ca:	9a 83       	std	Y+2, r25	; 0x02
    32cc:	0e 94 b0 19 	call	0x3360	; 0x3360 <prvCheckTasksWaitingTermination>
    32d0:	80 91 1c 2c 	lds	r24, 0x2C1C	; 0x802c1c <pxReadyTasksLists>
    32d4:	82 30       	cpi	r24, 0x02	; 2
    32d6:	10 f0       	brcs	.+4      	; 0x32dc <prvIdleTask+0x20>
    32d8:	0e 94 c3 0b 	call	0x1786	; 0x1786 <vPortYield>
    32dc:	0e 94 24 23 	call	0x4648	; 0x4648 <vApplicationIdleHook>
    32e0:	f5 cf       	rjmp	.-22     	; 0x32cc <prvIdleTask+0x10>

000032e2 <prvInitialiseTaskLists>:
    32e2:	cf 93       	push	r28
    32e4:	df 93       	push	r29
    32e6:	1f 92       	push	r1
    32e8:	cd b7       	in	r28, 0x3d	; 61
    32ea:	de b7       	in	r29, 0x3e	; 62
    32ec:	19 82       	std	Y+1, r1	; 0x01
    32ee:	10 c0       	rjmp	.+32     	; 0x3310 <prvInitialiseTaskLists+0x2e>
    32f0:	89 81       	ldd	r24, Y+1	; 0x01
    32f2:	28 2f       	mov	r18, r24
    32f4:	30 e0       	ldi	r19, 0x00	; 0
    32f6:	4b e0       	ldi	r20, 0x0B	; 11
    32f8:	42 9f       	mul	r20, r18
    32fa:	c0 01       	movw	r24, r0
    32fc:	43 9f       	mul	r20, r19
    32fe:	90 0d       	add	r25, r0
    3300:	11 24       	eor	r1, r1
    3302:	84 5e       	subi	r24, 0xE4	; 228
    3304:	93 4d       	sbci	r25, 0xD3	; 211
    3306:	0e 94 2c 08 	call	0x1058	; 0x1058 <vListInitialise>
    330a:	89 81       	ldd	r24, Y+1	; 0x01
    330c:	8f 5f       	subi	r24, 0xFF	; 255
    330e:	89 83       	std	Y+1, r24	; 0x01
    3310:	89 81       	ldd	r24, Y+1	; 0x01
    3312:	84 30       	cpi	r24, 0x04	; 4
    3314:	68 f3       	brcs	.-38     	; 0x32f0 <prvInitialiseTaskLists+0xe>
    3316:	88 e4       	ldi	r24, 0x48	; 72
    3318:	9c e2       	ldi	r25, 0x2C	; 44
    331a:	0e 94 2c 08 	call	0x1058	; 0x1058 <vListInitialise>
    331e:	83 e5       	ldi	r24, 0x53	; 83
    3320:	9c e2       	ldi	r25, 0x2C	; 44
    3322:	0e 94 2c 08 	call	0x1058	; 0x1058 <vListInitialise>
    3326:	82 e6       	ldi	r24, 0x62	; 98
    3328:	9c e2       	ldi	r25, 0x2C	; 44
    332a:	0e 94 2c 08 	call	0x1058	; 0x1058 <vListInitialise>
    332e:	8d e6       	ldi	r24, 0x6D	; 109
    3330:	9c e2       	ldi	r25, 0x2C	; 44
    3332:	0e 94 2c 08 	call	0x1058	; 0x1058 <vListInitialise>
    3336:	89 e7       	ldi	r24, 0x79	; 121
    3338:	9c e2       	ldi	r25, 0x2C	; 44
    333a:	0e 94 2c 08 	call	0x1058	; 0x1058 <vListInitialise>
    333e:	88 e4       	ldi	r24, 0x48	; 72
    3340:	9c e2       	ldi	r25, 0x2C	; 44
    3342:	80 93 5e 2c 	sts	0x2C5E, r24	; 0x802c5e <pxDelayedTaskList>
    3346:	90 93 5f 2c 	sts	0x2C5F, r25	; 0x802c5f <pxDelayedTaskList+0x1>
    334a:	83 e5       	ldi	r24, 0x53	; 83
    334c:	9c e2       	ldi	r25, 0x2C	; 44
    334e:	80 93 60 2c 	sts	0x2C60, r24	; 0x802c60 <pxOverflowDelayedTaskList>
    3352:	90 93 61 2c 	sts	0x2C61, r25	; 0x802c61 <pxOverflowDelayedTaskList+0x1>
    3356:	00 00       	nop
    3358:	0f 90       	pop	r0
    335a:	df 91       	pop	r29
    335c:	cf 91       	pop	r28
    335e:	08 95       	ret

00003360 <prvCheckTasksWaitingTermination>:
    3360:	cf 93       	push	r28
    3362:	df 93       	push	r29
    3364:	1f 92       	push	r1
    3366:	1f 92       	push	r1
    3368:	cd b7       	in	r28, 0x3d	; 61
    336a:	de b7       	in	r29, 0x3e	; 62
    336c:	25 c0       	rjmp	.+74     	; 0x33b8 <prvCheckTasksWaitingTermination+0x58>
    336e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3372:	ff 93       	push	r31
    3374:	f8 7f       	andi	r31, 0xF8	; 248
    3376:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    337a:	80 91 74 2c 	lds	r24, 0x2C74	; 0x802c74 <xTasksWaitingTermination+0x7>
    337e:	90 91 75 2c 	lds	r25, 0x2C75	; 0x802c75 <xTasksWaitingTermination+0x8>
    3382:	fc 01       	movw	r30, r24
    3384:	80 85       	ldd	r24, Z+8	; 0x08
    3386:	91 85       	ldd	r25, Z+9	; 0x09
    3388:	89 83       	std	Y+1, r24	; 0x01
    338a:	9a 83       	std	Y+2, r25	; 0x02
    338c:	89 81       	ldd	r24, Y+1	; 0x01
    338e:	9a 81       	ldd	r25, Y+2	; 0x02
    3390:	02 96       	adiw	r24, 0x02	; 2
    3392:	0e 94 45 09 	call	0x128a	; 0x128a <uxListRemove>
    3396:	80 91 84 2c 	lds	r24, 0x2C84	; 0x802c84 <uxCurrentNumberOfTasks>
    339a:	81 50       	subi	r24, 0x01	; 1
    339c:	80 93 84 2c 	sts	0x2C84, r24	; 0x802c84 <uxCurrentNumberOfTasks>
    33a0:	80 91 78 2c 	lds	r24, 0x2C78	; 0x802c78 <uxDeletedTasksWaitingCleanUp>
    33a4:	81 50       	subi	r24, 0x01	; 1
    33a6:	80 93 78 2c 	sts	0x2C78, r24	; 0x802c78 <uxDeletedTasksWaitingCleanUp>
    33aa:	ff 91       	pop	r31
    33ac:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    33b0:	89 81       	ldd	r24, Y+1	; 0x01
    33b2:	9a 81       	ldd	r25, Y+2	; 0x02
    33b4:	0e 94 e6 19 	call	0x33cc	; 0x33cc <prvDeleteTCB>
    33b8:	80 91 78 2c 	lds	r24, 0x2C78	; 0x802c78 <uxDeletedTasksWaitingCleanUp>
    33bc:	88 23       	and	r24, r24
    33be:	b9 f6       	brne	.-82     	; 0x336e <prvCheckTasksWaitingTermination+0xe>
    33c0:	00 00       	nop
    33c2:	0f 90       	pop	r0
    33c4:	0f 90       	pop	r0
    33c6:	df 91       	pop	r29
    33c8:	cf 91       	pop	r28
    33ca:	08 95       	ret

000033cc <prvDeleteTCB>:
    33cc:	cf 93       	push	r28
    33ce:	df 93       	push	r29
    33d0:	1f 92       	push	r1
    33d2:	1f 92       	push	r1
    33d4:	cd b7       	in	r28, 0x3d	; 61
    33d6:	de b7       	in	r29, 0x3e	; 62
    33d8:	89 83       	std	Y+1, r24	; 0x01
    33da:	9a 83       	std	Y+2, r25	; 0x02
    33dc:	89 81       	ldd	r24, Y+1	; 0x01
    33de:	9a 81       	ldd	r25, Y+2	; 0x02
    33e0:	fc 01       	movw	r30, r24
    33e2:	83 8d       	ldd	r24, Z+27	; 0x1b
    33e4:	94 8d       	ldd	r25, Z+28	; 0x1c
    33e6:	0e 94 1e 08 	call	0x103c	; 0x103c <vPortFree>
    33ea:	89 81       	ldd	r24, Y+1	; 0x01
    33ec:	9a 81       	ldd	r25, Y+2	; 0x02
    33ee:	0e 94 1e 08 	call	0x103c	; 0x103c <vPortFree>
    33f2:	00 00       	nop
    33f4:	0f 90       	pop	r0
    33f6:	0f 90       	pop	r0
    33f8:	df 91       	pop	r29
    33fa:	cf 91       	pop	r28
    33fc:	08 95       	ret

000033fe <prvResetNextTaskUnblockTime>:
    33fe:	cf 93       	push	r28
    3400:	df 93       	push	r29
    3402:	1f 92       	push	r1
    3404:	1f 92       	push	r1
    3406:	cd b7       	in	r28, 0x3d	; 61
    3408:	de b7       	in	r29, 0x3e	; 62
    340a:	80 91 5e 2c 	lds	r24, 0x2C5E	; 0x802c5e <pxDelayedTaskList>
    340e:	90 91 5f 2c 	lds	r25, 0x2C5F	; 0x802c5f <pxDelayedTaskList+0x1>
    3412:	fc 01       	movw	r30, r24
    3414:	80 81       	ld	r24, Z
    3416:	88 23       	and	r24, r24
    3418:	61 f4       	brne	.+24     	; 0x3432 <prvResetNextTaskUnblockTime+0x34>
    341a:	8f ef       	ldi	r24, 0xFF	; 255
    341c:	9f ef       	ldi	r25, 0xFF	; 255
    341e:	dc 01       	movw	r26, r24
    3420:	80 93 8f 2c 	sts	0x2C8F, r24	; 0x802c8f <xNextTaskUnblockTime>
    3424:	90 93 90 2c 	sts	0x2C90, r25	; 0x802c90 <xNextTaskUnblockTime+0x1>
    3428:	a0 93 91 2c 	sts	0x2C91, r26	; 0x802c91 <xNextTaskUnblockTime+0x2>
    342c:	b0 93 92 2c 	sts	0x2C92, r27	; 0x802c92 <xNextTaskUnblockTime+0x3>
    3430:	1b c0       	rjmp	.+54     	; 0x3468 <prvResetNextTaskUnblockTime+0x6a>
    3432:	80 91 5e 2c 	lds	r24, 0x2C5E	; 0x802c5e <pxDelayedTaskList>
    3436:	90 91 5f 2c 	lds	r25, 0x2C5F	; 0x802c5f <pxDelayedTaskList+0x1>
    343a:	fc 01       	movw	r30, r24
    343c:	87 81       	ldd	r24, Z+7	; 0x07
    343e:	90 85       	ldd	r25, Z+8	; 0x08
    3440:	fc 01       	movw	r30, r24
    3442:	80 85       	ldd	r24, Z+8	; 0x08
    3444:	91 85       	ldd	r25, Z+9	; 0x09
    3446:	89 83       	std	Y+1, r24	; 0x01
    3448:	9a 83       	std	Y+2, r25	; 0x02
    344a:	89 81       	ldd	r24, Y+1	; 0x01
    344c:	9a 81       	ldd	r25, Y+2	; 0x02
    344e:	fc 01       	movw	r30, r24
    3450:	82 81       	ldd	r24, Z+2	; 0x02
    3452:	93 81       	ldd	r25, Z+3	; 0x03
    3454:	a4 81       	ldd	r26, Z+4	; 0x04
    3456:	b5 81       	ldd	r27, Z+5	; 0x05
    3458:	80 93 8f 2c 	sts	0x2C8F, r24	; 0x802c8f <xNextTaskUnblockTime>
    345c:	90 93 90 2c 	sts	0x2C90, r25	; 0x802c90 <xNextTaskUnblockTime+0x1>
    3460:	a0 93 91 2c 	sts	0x2C91, r26	; 0x802c91 <xNextTaskUnblockTime+0x2>
    3464:	b0 93 92 2c 	sts	0x2C92, r27	; 0x802c92 <xNextTaskUnblockTime+0x3>
    3468:	00 00       	nop
    346a:	0f 90       	pop	r0
    346c:	0f 90       	pop	r0
    346e:	df 91       	pop	r29
    3470:	cf 91       	pop	r28
    3472:	08 95       	ret

00003474 <xTaskGetSchedulerState>:
    3474:	cf 93       	push	r28
    3476:	df 93       	push	r29
    3478:	1f 92       	push	r1
    347a:	cd b7       	in	r28, 0x3d	; 61
    347c:	de b7       	in	r29, 0x3e	; 62
    347e:	80 91 8a 2c 	lds	r24, 0x2C8A	; 0x802c8a <xSchedulerRunning>
    3482:	88 23       	and	r24, r24
    3484:	19 f4       	brne	.+6      	; 0x348c <xTaskGetSchedulerState+0x18>
    3486:	81 e0       	ldi	r24, 0x01	; 1
    3488:	89 83       	std	Y+1, r24	; 0x01
    348a:	08 c0       	rjmp	.+16     	; 0x349c <xTaskGetSchedulerState+0x28>
    348c:	80 91 95 2c 	lds	r24, 0x2C95	; 0x802c95 <uxSchedulerSuspended>
    3490:	88 23       	and	r24, r24
    3492:	19 f4       	brne	.+6      	; 0x349a <xTaskGetSchedulerState+0x26>
    3494:	82 e0       	ldi	r24, 0x02	; 2
    3496:	89 83       	std	Y+1, r24	; 0x01
    3498:	01 c0       	rjmp	.+2      	; 0x349c <xTaskGetSchedulerState+0x28>
    349a:	19 82       	std	Y+1, r1	; 0x01
    349c:	89 81       	ldd	r24, Y+1	; 0x01
    349e:	0f 90       	pop	r0
    34a0:	df 91       	pop	r29
    34a2:	cf 91       	pop	r28
    34a4:	08 95       	ret

000034a6 <uxTaskResetEventItemValue>:
    34a6:	ef 92       	push	r14
    34a8:	ff 92       	push	r15
    34aa:	0f 93       	push	r16
    34ac:	1f 93       	push	r17
    34ae:	cf 93       	push	r28
    34b0:	df 93       	push	r29
    34b2:	00 d0       	rcall	.+0      	; 0x34b4 <uxTaskResetEventItemValue+0xe>
    34b4:	1f 92       	push	r1
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62
    34ba:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    34be:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    34c2:	fc 01       	movw	r30, r24
    34c4:	86 85       	ldd	r24, Z+14	; 0x0e
    34c6:	97 85       	ldd	r25, Z+15	; 0x0f
    34c8:	a0 89       	ldd	r26, Z+16	; 0x10
    34ca:	b1 89       	ldd	r27, Z+17	; 0x11
    34cc:	89 83       	std	Y+1, r24	; 0x01
    34ce:	9a 83       	std	Y+2, r25	; 0x02
    34d0:	ab 83       	std	Y+3, r26	; 0x03
    34d2:	bc 83       	std	Y+4, r27	; 0x04
    34d4:	60 91 1a 2c 	lds	r22, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    34d8:	70 91 1b 2c 	lds	r23, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    34dc:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    34e0:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    34e4:	fc 01       	movw	r30, r24
    34e6:	82 8d       	ldd	r24, Z+26	; 0x1a
    34e8:	88 2f       	mov	r24, r24
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	a0 e0       	ldi	r26, 0x00	; 0
    34ee:	b0 e0       	ldi	r27, 0x00	; 0
    34f0:	24 e0       	ldi	r18, 0x04	; 4
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	40 e0       	ldi	r20, 0x00	; 0
    34f6:	50 e0       	ldi	r21, 0x00	; 0
    34f8:	79 01       	movw	r14, r18
    34fa:	8a 01       	movw	r16, r20
    34fc:	e8 1a       	sub	r14, r24
    34fe:	f9 0a       	sbc	r15, r25
    3500:	0a 0b       	sbc	r16, r26
    3502:	1b 0b       	sbc	r17, r27
    3504:	d8 01       	movw	r26, r16
    3506:	c7 01       	movw	r24, r14
    3508:	fb 01       	movw	r30, r22
    350a:	86 87       	std	Z+14, r24	; 0x0e
    350c:	97 87       	std	Z+15, r25	; 0x0f
    350e:	a0 8b       	std	Z+16, r26	; 0x10
    3510:	b1 8b       	std	Z+17, r27	; 0x11
    3512:	89 81       	ldd	r24, Y+1	; 0x01
    3514:	9a 81       	ldd	r25, Y+2	; 0x02
    3516:	ab 81       	ldd	r26, Y+3	; 0x03
    3518:	bc 81       	ldd	r27, Y+4	; 0x04
    351a:	bc 01       	movw	r22, r24
    351c:	cd 01       	movw	r24, r26
    351e:	24 96       	adiw	r28, 0x04	; 4
    3520:	cd bf       	out	0x3d, r28	; 61
    3522:	de bf       	out	0x3e, r29	; 62
    3524:	df 91       	pop	r29
    3526:	cf 91       	pop	r28
    3528:	1f 91       	pop	r17
    352a:	0f 91       	pop	r16
    352c:	ff 90       	pop	r15
    352e:	ef 90       	pop	r14
    3530:	08 95       	ret

00003532 <xTaskNotifyWait>:
    3532:	cf 92       	push	r12
    3534:	df 92       	push	r13
    3536:	ef 92       	push	r14
    3538:	ff 92       	push	r15
    353a:	0f 93       	push	r16
    353c:	1f 93       	push	r17
    353e:	cf 93       	push	r28
    3540:	df 93       	push	r29
    3542:	cd b7       	in	r28, 0x3d	; 61
    3544:	de b7       	in	r29, 0x3e	; 62
    3546:	2f 97       	sbiw	r28, 0x0f	; 15
    3548:	cd bf       	out	0x3d, r28	; 61
    354a:	de bf       	out	0x3e, r29	; 62
    354c:	6a 83       	std	Y+2, r22	; 0x02
    354e:	7b 83       	std	Y+3, r23	; 0x03
    3550:	8c 83       	std	Y+4, r24	; 0x04
    3552:	9d 83       	std	Y+5, r25	; 0x05
    3554:	2e 83       	std	Y+6, r18	; 0x06
    3556:	3f 83       	std	Y+7, r19	; 0x07
    3558:	48 87       	std	Y+8, r20	; 0x08
    355a:	59 87       	std	Y+9, r21	; 0x09
    355c:	0a 87       	std	Y+10, r16	; 0x0a
    355e:	1b 87       	std	Y+11, r17	; 0x0b
    3560:	cc 86       	std	Y+12, r12	; 0x0c
    3562:	dd 86       	std	Y+13, r13	; 0x0d
    3564:	ee 86       	std	Y+14, r14	; 0x0e
    3566:	ff 86       	std	Y+15, r15	; 0x0f
    3568:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    356c:	ff 93       	push	r31
    356e:	f8 7f       	andi	r31, 0xF8	; 248
    3570:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3574:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    3578:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    357c:	fc 01       	movw	r30, r24
    357e:	83 a5       	ldd	r24, Z+43	; 0x2b
    3580:	82 30       	cpi	r24, 0x02	; 2
    3582:	a1 f1       	breq	.+104    	; 0x35ec <xTaskNotifyWait+0xba>
    3584:	60 91 1a 2c 	lds	r22, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    3588:	70 91 1b 2c 	lds	r23, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    358c:	fb 01       	movw	r30, r22
    358e:	27 a1       	ldd	r18, Z+39	; 0x27
    3590:	30 a5       	ldd	r19, Z+40	; 0x28
    3592:	41 a5       	ldd	r20, Z+41	; 0x29
    3594:	52 a5       	ldd	r21, Z+42	; 0x2a
    3596:	8a 81       	ldd	r24, Y+2	; 0x02
    3598:	9b 81       	ldd	r25, Y+3	; 0x03
    359a:	ac 81       	ldd	r26, Y+4	; 0x04
    359c:	bd 81       	ldd	r27, Y+5	; 0x05
    359e:	80 95       	com	r24
    35a0:	90 95       	com	r25
    35a2:	a0 95       	com	r26
    35a4:	b0 95       	com	r27
    35a6:	82 23       	and	r24, r18
    35a8:	93 23       	and	r25, r19
    35aa:	a4 23       	and	r26, r20
    35ac:	b5 23       	and	r27, r21
    35ae:	fb 01       	movw	r30, r22
    35b0:	87 a3       	std	Z+39, r24	; 0x27
    35b2:	90 a7       	std	Z+40, r25	; 0x28
    35b4:	a1 a7       	std	Z+41, r26	; 0x29
    35b6:	b2 a7       	std	Z+42, r27	; 0x2a
    35b8:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    35bc:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    35c0:	21 e0       	ldi	r18, 0x01	; 1
    35c2:	fc 01       	movw	r30, r24
    35c4:	23 a7       	std	Z+43, r18	; 0x2b
    35c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    35c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    35ca:	ae 85       	ldd	r26, Y+14	; 0x0e
    35cc:	bf 85       	ldd	r27, Y+15	; 0x0f
    35ce:	89 2b       	or	r24, r25
    35d0:	8a 2b       	or	r24, r26
    35d2:	8b 2b       	or	r24, r27
    35d4:	59 f0       	breq	.+22     	; 0x35ec <xTaskNotifyWait+0xba>
    35d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    35d8:	9d 85       	ldd	r25, Y+13	; 0x0d
    35da:	ae 85       	ldd	r26, Y+14	; 0x0e
    35dc:	bf 85       	ldd	r27, Y+15	; 0x0f
    35de:	41 e0       	ldi	r20, 0x01	; 1
    35e0:	bc 01       	movw	r22, r24
    35e2:	cd 01       	movw	r24, r26
    35e4:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <prvAddCurrentTaskToDelayedList>
    35e8:	0e 94 c3 0b 	call	0x1786	; 0x1786 <vPortYield>
    35ec:	ff 91       	pop	r31
    35ee:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    35f2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    35f6:	ff 93       	push	r31
    35f8:	f8 7f       	andi	r31, 0xF8	; 248
    35fa:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    35fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    3600:	9b 85       	ldd	r25, Y+11	; 0x0b
    3602:	89 2b       	or	r24, r25
    3604:	81 f0       	breq	.+32     	; 0x3626 <xTaskNotifyWait+0xf4>
    3606:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    360a:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    360e:	fc 01       	movw	r30, r24
    3610:	87 a1       	ldd	r24, Z+39	; 0x27
    3612:	90 a5       	ldd	r25, Z+40	; 0x28
    3614:	a1 a5       	ldd	r26, Z+41	; 0x29
    3616:	b2 a5       	ldd	r27, Z+42	; 0x2a
    3618:	2a 85       	ldd	r18, Y+10	; 0x0a
    361a:	3b 85       	ldd	r19, Y+11	; 0x0b
    361c:	f9 01       	movw	r30, r18
    361e:	80 83       	st	Z, r24
    3620:	91 83       	std	Z+1, r25	; 0x01
    3622:	a2 83       	std	Z+2, r26	; 0x02
    3624:	b3 83       	std	Z+3, r27	; 0x03
    3626:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    362a:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    362e:	fc 01       	movw	r30, r24
    3630:	83 a5       	ldd	r24, Z+43	; 0x2b
    3632:	82 30       	cpi	r24, 0x02	; 2
    3634:	11 f0       	breq	.+4      	; 0x363a <xTaskNotifyWait+0x108>
    3636:	19 82       	std	Y+1, r1	; 0x01
    3638:	1c c0       	rjmp	.+56     	; 0x3672 <xTaskNotifyWait+0x140>
    363a:	60 91 1a 2c 	lds	r22, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    363e:	70 91 1b 2c 	lds	r23, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    3642:	fb 01       	movw	r30, r22
    3644:	27 a1       	ldd	r18, Z+39	; 0x27
    3646:	30 a5       	ldd	r19, Z+40	; 0x28
    3648:	41 a5       	ldd	r20, Z+41	; 0x29
    364a:	52 a5       	ldd	r21, Z+42	; 0x2a
    364c:	8e 81       	ldd	r24, Y+6	; 0x06
    364e:	9f 81       	ldd	r25, Y+7	; 0x07
    3650:	a8 85       	ldd	r26, Y+8	; 0x08
    3652:	b9 85       	ldd	r27, Y+9	; 0x09
    3654:	80 95       	com	r24
    3656:	90 95       	com	r25
    3658:	a0 95       	com	r26
    365a:	b0 95       	com	r27
    365c:	82 23       	and	r24, r18
    365e:	93 23       	and	r25, r19
    3660:	a4 23       	and	r26, r20
    3662:	b5 23       	and	r27, r21
    3664:	fb 01       	movw	r30, r22
    3666:	87 a3       	std	Z+39, r24	; 0x27
    3668:	90 a7       	std	Z+40, r25	; 0x28
    366a:	a1 a7       	std	Z+41, r26	; 0x29
    366c:	b2 a7       	std	Z+42, r27	; 0x2a
    366e:	81 e0       	ldi	r24, 0x01	; 1
    3670:	89 83       	std	Y+1, r24	; 0x01
    3672:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    3676:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    367a:	fc 01       	movw	r30, r24
    367c:	13 a6       	std	Z+43, r1	; 0x2b
    367e:	ff 91       	pop	r31
    3680:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3684:	89 81       	ldd	r24, Y+1	; 0x01
    3686:	2f 96       	adiw	r28, 0x0f	; 15
    3688:	cd bf       	out	0x3d, r28	; 61
    368a:	de bf       	out	0x3e, r29	; 62
    368c:	df 91       	pop	r29
    368e:	cf 91       	pop	r28
    3690:	1f 91       	pop	r17
    3692:	0f 91       	pop	r16
    3694:	ff 90       	pop	r15
    3696:	ef 90       	pop	r14
    3698:	df 90       	pop	r13
    369a:	cf 90       	pop	r12
    369c:	08 95       	ret

0000369e <xTaskGenericNotify>:
    369e:	0f 93       	push	r16
    36a0:	1f 93       	push	r17
    36a2:	cf 93       	push	r28
    36a4:	df 93       	push	r29
    36a6:	cd b7       	in	r28, 0x3d	; 61
    36a8:	de b7       	in	r29, 0x3e	; 62
    36aa:	2d 97       	sbiw	r28, 0x0d	; 13
    36ac:	cd bf       	out	0x3d, r28	; 61
    36ae:	de bf       	out	0x3e, r29	; 62
    36b0:	8d 83       	std	Y+5, r24	; 0x05
    36b2:	9e 83       	std	Y+6, r25	; 0x06
    36b4:	4f 83       	std	Y+7, r20	; 0x07
    36b6:	58 87       	std	Y+8, r21	; 0x08
    36b8:	69 87       	std	Y+9, r22	; 0x09
    36ba:	7a 87       	std	Y+10, r23	; 0x0a
    36bc:	2b 87       	std	Y+11, r18	; 0x0b
    36be:	0c 87       	std	Y+12, r16	; 0x0c
    36c0:	1d 87       	std	Y+13, r17	; 0x0d
    36c2:	81 e0       	ldi	r24, 0x01	; 1
    36c4:	89 83       	std	Y+1, r24	; 0x01
    36c6:	8d 81       	ldd	r24, Y+5	; 0x05
    36c8:	9e 81       	ldd	r25, Y+6	; 0x06
    36ca:	8a 83       	std	Y+2, r24	; 0x02
    36cc:	9b 83       	std	Y+3, r25	; 0x03
    36ce:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    36d2:	ff 93       	push	r31
    36d4:	f8 7f       	andi	r31, 0xF8	; 248
    36d6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    36da:	8c 85       	ldd	r24, Y+12	; 0x0c
    36dc:	9d 85       	ldd	r25, Y+13	; 0x0d
    36de:	89 2b       	or	r24, r25
    36e0:	71 f0       	breq	.+28     	; 0x36fe <xTaskGenericNotify+0x60>
    36e2:	8a 81       	ldd	r24, Y+2	; 0x02
    36e4:	9b 81       	ldd	r25, Y+3	; 0x03
    36e6:	fc 01       	movw	r30, r24
    36e8:	87 a1       	ldd	r24, Z+39	; 0x27
    36ea:	90 a5       	ldd	r25, Z+40	; 0x28
    36ec:	a1 a5       	ldd	r26, Z+41	; 0x29
    36ee:	b2 a5       	ldd	r27, Z+42	; 0x2a
    36f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    36f2:	3d 85       	ldd	r19, Y+13	; 0x0d
    36f4:	f9 01       	movw	r30, r18
    36f6:	80 83       	st	Z, r24
    36f8:	91 83       	std	Z+1, r25	; 0x01
    36fa:	a2 83       	std	Z+2, r26	; 0x02
    36fc:	b3 83       	std	Z+3, r27	; 0x03
    36fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3700:	9b 81       	ldd	r25, Y+3	; 0x03
    3702:	fc 01       	movw	r30, r24
    3704:	83 a5       	ldd	r24, Z+43	; 0x2b
    3706:	8c 83       	std	Y+4, r24	; 0x04
    3708:	8a 81       	ldd	r24, Y+2	; 0x02
    370a:	9b 81       	ldd	r25, Y+3	; 0x03
    370c:	22 e0       	ldi	r18, 0x02	; 2
    370e:	fc 01       	movw	r30, r24
    3710:	23 a7       	std	Z+43, r18	; 0x2b
    3712:	8b 85       	ldd	r24, Y+11	; 0x0b
    3714:	88 2f       	mov	r24, r24
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	82 30       	cpi	r24, 0x02	; 2
    371a:	91 05       	cpc	r25, r1
    371c:	31 f1       	breq	.+76     	; 0x376a <xTaskGenericNotify+0xcc>
    371e:	83 30       	cpi	r24, 0x03	; 3
    3720:	91 05       	cpc	r25, r1
    3722:	34 f4       	brge	.+12     	; 0x3730 <xTaskGenericNotify+0x92>
    3724:	00 97       	sbiw	r24, 0x00	; 0
    3726:	09 f4       	brne	.+2      	; 0x372a <xTaskGenericNotify+0x8c>
    3728:	4f c0       	rjmp	.+158    	; 0x37c8 <xTaskGenericNotify+0x12a>
    372a:	01 97       	sbiw	r24, 0x01	; 1
    372c:	39 f0       	breq	.+14     	; 0x373c <xTaskGenericNotify+0x9e>
    372e:	4d c0       	rjmp	.+154    	; 0x37ca <xTaskGenericNotify+0x12c>
    3730:	83 30       	cpi	r24, 0x03	; 3
    3732:	91 05       	cpc	r25, r1
    3734:	61 f1       	breq	.+88     	; 0x378e <xTaskGenericNotify+0xf0>
    3736:	04 97       	sbiw	r24, 0x04	; 4
    3738:	b1 f1       	breq	.+108    	; 0x37a6 <xTaskGenericNotify+0x108>
    373a:	47 c0       	rjmp	.+142    	; 0x37ca <xTaskGenericNotify+0x12c>
    373c:	8a 81       	ldd	r24, Y+2	; 0x02
    373e:	9b 81       	ldd	r25, Y+3	; 0x03
    3740:	fc 01       	movw	r30, r24
    3742:	27 a1       	ldd	r18, Z+39	; 0x27
    3744:	30 a5       	ldd	r19, Z+40	; 0x28
    3746:	41 a5       	ldd	r20, Z+41	; 0x29
    3748:	52 a5       	ldd	r21, Z+42	; 0x2a
    374a:	8f 81       	ldd	r24, Y+7	; 0x07
    374c:	98 85       	ldd	r25, Y+8	; 0x08
    374e:	a9 85       	ldd	r26, Y+9	; 0x09
    3750:	ba 85       	ldd	r27, Y+10	; 0x0a
    3752:	82 2b       	or	r24, r18
    3754:	93 2b       	or	r25, r19
    3756:	a4 2b       	or	r26, r20
    3758:	b5 2b       	or	r27, r21
    375a:	2a 81       	ldd	r18, Y+2	; 0x02
    375c:	3b 81       	ldd	r19, Y+3	; 0x03
    375e:	f9 01       	movw	r30, r18
    3760:	87 a3       	std	Z+39, r24	; 0x27
    3762:	90 a7       	std	Z+40, r25	; 0x28
    3764:	a1 a7       	std	Z+41, r26	; 0x29
    3766:	b2 a7       	std	Z+42, r27	; 0x2a
    3768:	30 c0       	rjmp	.+96     	; 0x37ca <xTaskGenericNotify+0x12c>
    376a:	8a 81       	ldd	r24, Y+2	; 0x02
    376c:	9b 81       	ldd	r25, Y+3	; 0x03
    376e:	fc 01       	movw	r30, r24
    3770:	87 a1       	ldd	r24, Z+39	; 0x27
    3772:	90 a5       	ldd	r25, Z+40	; 0x28
    3774:	a1 a5       	ldd	r26, Z+41	; 0x29
    3776:	b2 a5       	ldd	r27, Z+42	; 0x2a
    3778:	01 96       	adiw	r24, 0x01	; 1
    377a:	a1 1d       	adc	r26, r1
    377c:	b1 1d       	adc	r27, r1
    377e:	2a 81       	ldd	r18, Y+2	; 0x02
    3780:	3b 81       	ldd	r19, Y+3	; 0x03
    3782:	f9 01       	movw	r30, r18
    3784:	87 a3       	std	Z+39, r24	; 0x27
    3786:	90 a7       	std	Z+40, r25	; 0x28
    3788:	a1 a7       	std	Z+41, r26	; 0x29
    378a:	b2 a7       	std	Z+42, r27	; 0x2a
    378c:	1e c0       	rjmp	.+60     	; 0x37ca <xTaskGenericNotify+0x12c>
    378e:	2a 81       	ldd	r18, Y+2	; 0x02
    3790:	3b 81       	ldd	r19, Y+3	; 0x03
    3792:	8f 81       	ldd	r24, Y+7	; 0x07
    3794:	98 85       	ldd	r25, Y+8	; 0x08
    3796:	a9 85       	ldd	r26, Y+9	; 0x09
    3798:	ba 85       	ldd	r27, Y+10	; 0x0a
    379a:	f9 01       	movw	r30, r18
    379c:	87 a3       	std	Z+39, r24	; 0x27
    379e:	90 a7       	std	Z+40, r25	; 0x28
    37a0:	a1 a7       	std	Z+41, r26	; 0x29
    37a2:	b2 a7       	std	Z+42, r27	; 0x2a
    37a4:	12 c0       	rjmp	.+36     	; 0x37ca <xTaskGenericNotify+0x12c>
    37a6:	8c 81       	ldd	r24, Y+4	; 0x04
    37a8:	82 30       	cpi	r24, 0x02	; 2
    37aa:	61 f0       	breq	.+24     	; 0x37c4 <xTaskGenericNotify+0x126>
    37ac:	2a 81       	ldd	r18, Y+2	; 0x02
    37ae:	3b 81       	ldd	r19, Y+3	; 0x03
    37b0:	8f 81       	ldd	r24, Y+7	; 0x07
    37b2:	98 85       	ldd	r25, Y+8	; 0x08
    37b4:	a9 85       	ldd	r26, Y+9	; 0x09
    37b6:	ba 85       	ldd	r27, Y+10	; 0x0a
    37b8:	f9 01       	movw	r30, r18
    37ba:	87 a3       	std	Z+39, r24	; 0x27
    37bc:	90 a7       	std	Z+40, r25	; 0x28
    37be:	a1 a7       	std	Z+41, r26	; 0x29
    37c0:	b2 a7       	std	Z+42, r27	; 0x2a
    37c2:	03 c0       	rjmp	.+6      	; 0x37ca <xTaskGenericNotify+0x12c>
    37c4:	19 82       	std	Y+1, r1	; 0x01
    37c6:	01 c0       	rjmp	.+2      	; 0x37ca <xTaskGenericNotify+0x12c>
    37c8:	00 00       	nop
    37ca:	8c 81       	ldd	r24, Y+4	; 0x04
    37cc:	81 30       	cpi	r24, 0x01	; 1
    37ce:	b9 f5       	brne	.+110    	; 0x383e <xTaskGenericNotify+0x1a0>
    37d0:	8a 81       	ldd	r24, Y+2	; 0x02
    37d2:	9b 81       	ldd	r25, Y+3	; 0x03
    37d4:	02 96       	adiw	r24, 0x02	; 2
    37d6:	0e 94 45 09 	call	0x128a	; 0x128a <uxListRemove>
    37da:	8a 81       	ldd	r24, Y+2	; 0x02
    37dc:	9b 81       	ldd	r25, Y+3	; 0x03
    37de:	fc 01       	movw	r30, r24
    37e0:	92 8d       	ldd	r25, Z+26	; 0x1a
    37e2:	80 91 89 2c 	lds	r24, 0x2C89	; 0x802c89 <uxTopReadyPriority>
    37e6:	89 17       	cp	r24, r25
    37e8:	30 f4       	brcc	.+12     	; 0x37f6 <xTaskGenericNotify+0x158>
    37ea:	8a 81       	ldd	r24, Y+2	; 0x02
    37ec:	9b 81       	ldd	r25, Y+3	; 0x03
    37ee:	fc 01       	movw	r30, r24
    37f0:	82 8d       	ldd	r24, Z+26	; 0x1a
    37f2:	80 93 89 2c 	sts	0x2C89, r24	; 0x802c89 <uxTopReadyPriority>
    37f6:	8a 81       	ldd	r24, Y+2	; 0x02
    37f8:	9b 81       	ldd	r25, Y+3	; 0x03
    37fa:	ac 01       	movw	r20, r24
    37fc:	4e 5f       	subi	r20, 0xFE	; 254
    37fe:	5f 4f       	sbci	r21, 0xFF	; 255
    3800:	8a 81       	ldd	r24, Y+2	; 0x02
    3802:	9b 81       	ldd	r25, Y+3	; 0x03
    3804:	fc 01       	movw	r30, r24
    3806:	82 8d       	ldd	r24, Z+26	; 0x1a
    3808:	28 2f       	mov	r18, r24
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	6b e0       	ldi	r22, 0x0B	; 11
    380e:	62 9f       	mul	r22, r18
    3810:	c0 01       	movw	r24, r0
    3812:	63 9f       	mul	r22, r19
    3814:	90 0d       	add	r25, r0
    3816:	11 24       	eor	r1, r1
    3818:	84 5e       	subi	r24, 0xE4	; 228
    381a:	93 4d       	sbci	r25, 0xD3	; 211
    381c:	ba 01       	movw	r22, r20
    381e:	0e 94 79 08 	call	0x10f2	; 0x10f2 <vListInsertEnd>
    3822:	8a 81       	ldd	r24, Y+2	; 0x02
    3824:	9b 81       	ldd	r25, Y+3	; 0x03
    3826:	fc 01       	movw	r30, r24
    3828:	22 8d       	ldd	r18, Z+26	; 0x1a
    382a:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    382e:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    3832:	fc 01       	movw	r30, r24
    3834:	82 8d       	ldd	r24, Z+26	; 0x1a
    3836:	82 17       	cp	r24, r18
    3838:	10 f4       	brcc	.+4      	; 0x383e <xTaskGenericNotify+0x1a0>
    383a:	0e 94 c3 0b 	call	0x1786	; 0x1786 <vPortYield>
    383e:	ff 91       	pop	r31
    3840:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3844:	89 81       	ldd	r24, Y+1	; 0x01
    3846:	2d 96       	adiw	r28, 0x0d	; 13
    3848:	cd bf       	out	0x3d, r28	; 61
    384a:	de bf       	out	0x3e, r29	; 62
    384c:	df 91       	pop	r29
    384e:	cf 91       	pop	r28
    3850:	1f 91       	pop	r17
    3852:	0f 91       	pop	r16
    3854:	08 95       	ret

00003856 <xTaskGenericNotifyFromISR>:
    3856:	ef 92       	push	r14
    3858:	ff 92       	push	r15
    385a:	0f 93       	push	r16
    385c:	1f 93       	push	r17
    385e:	cf 93       	push	r28
    3860:	df 93       	push	r29
    3862:	cd b7       	in	r28, 0x3d	; 61
    3864:	de b7       	in	r29, 0x3e	; 62
    3866:	60 97       	sbiw	r28, 0x10	; 16
    3868:	cd bf       	out	0x3d, r28	; 61
    386a:	de bf       	out	0x3e, r29	; 62
    386c:	8e 83       	std	Y+6, r24	; 0x06
    386e:	9f 83       	std	Y+7, r25	; 0x07
    3870:	48 87       	std	Y+8, r20	; 0x08
    3872:	59 87       	std	Y+9, r21	; 0x09
    3874:	6a 87       	std	Y+10, r22	; 0x0a
    3876:	7b 87       	std	Y+11, r23	; 0x0b
    3878:	2c 87       	std	Y+12, r18	; 0x0c
    387a:	0d 87       	std	Y+13, r16	; 0x0d
    387c:	1e 87       	std	Y+14, r17	; 0x0e
    387e:	ef 86       	std	Y+15, r14	; 0x0f
    3880:	f8 8a       	std	Y+16, r15	; 0x10
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	89 83       	std	Y+1, r24	; 0x01
    3886:	8e 81       	ldd	r24, Y+6	; 0x06
    3888:	9f 81       	ldd	r25, Y+7	; 0x07
    388a:	8a 83       	std	Y+2, r24	; 0x02
    388c:	9b 83       	std	Y+3, r25	; 0x03
    388e:	0e 94 9b 09 	call	0x1336	; 0x1336 <_portSetInterruptMaskFromIsr>
    3892:	8c 83       	std	Y+4, r24	; 0x04
    3894:	8d 85       	ldd	r24, Y+13	; 0x0d
    3896:	9e 85       	ldd	r25, Y+14	; 0x0e
    3898:	89 2b       	or	r24, r25
    389a:	71 f0       	breq	.+28     	; 0x38b8 <xTaskGenericNotifyFromISR+0x62>
    389c:	8a 81       	ldd	r24, Y+2	; 0x02
    389e:	9b 81       	ldd	r25, Y+3	; 0x03
    38a0:	fc 01       	movw	r30, r24
    38a2:	87 a1       	ldd	r24, Z+39	; 0x27
    38a4:	90 a5       	ldd	r25, Z+40	; 0x28
    38a6:	a1 a5       	ldd	r26, Z+41	; 0x29
    38a8:	b2 a5       	ldd	r27, Z+42	; 0x2a
    38aa:	2d 85       	ldd	r18, Y+13	; 0x0d
    38ac:	3e 85       	ldd	r19, Y+14	; 0x0e
    38ae:	f9 01       	movw	r30, r18
    38b0:	80 83       	st	Z, r24
    38b2:	91 83       	std	Z+1, r25	; 0x01
    38b4:	a2 83       	std	Z+2, r26	; 0x02
    38b6:	b3 83       	std	Z+3, r27	; 0x03
    38b8:	8a 81       	ldd	r24, Y+2	; 0x02
    38ba:	9b 81       	ldd	r25, Y+3	; 0x03
    38bc:	fc 01       	movw	r30, r24
    38be:	83 a5       	ldd	r24, Z+43	; 0x2b
    38c0:	8d 83       	std	Y+5, r24	; 0x05
    38c2:	8a 81       	ldd	r24, Y+2	; 0x02
    38c4:	9b 81       	ldd	r25, Y+3	; 0x03
    38c6:	22 e0       	ldi	r18, 0x02	; 2
    38c8:	fc 01       	movw	r30, r24
    38ca:	23 a7       	std	Z+43, r18	; 0x2b
    38cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    38ce:	88 2f       	mov	r24, r24
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	82 30       	cpi	r24, 0x02	; 2
    38d4:	91 05       	cpc	r25, r1
    38d6:	31 f1       	breq	.+76     	; 0x3924 <xTaskGenericNotifyFromISR+0xce>
    38d8:	83 30       	cpi	r24, 0x03	; 3
    38da:	91 05       	cpc	r25, r1
    38dc:	34 f4       	brge	.+12     	; 0x38ea <xTaskGenericNotifyFromISR+0x94>
    38de:	00 97       	sbiw	r24, 0x00	; 0
    38e0:	09 f4       	brne	.+2      	; 0x38e4 <xTaskGenericNotifyFromISR+0x8e>
    38e2:	4f c0       	rjmp	.+158    	; 0x3982 <xTaskGenericNotifyFromISR+0x12c>
    38e4:	01 97       	sbiw	r24, 0x01	; 1
    38e6:	39 f0       	breq	.+14     	; 0x38f6 <xTaskGenericNotifyFromISR+0xa0>
    38e8:	4d c0       	rjmp	.+154    	; 0x3984 <xTaskGenericNotifyFromISR+0x12e>
    38ea:	83 30       	cpi	r24, 0x03	; 3
    38ec:	91 05       	cpc	r25, r1
    38ee:	61 f1       	breq	.+88     	; 0x3948 <xTaskGenericNotifyFromISR+0xf2>
    38f0:	04 97       	sbiw	r24, 0x04	; 4
    38f2:	b1 f1       	breq	.+108    	; 0x3960 <xTaskGenericNotifyFromISR+0x10a>
    38f4:	47 c0       	rjmp	.+142    	; 0x3984 <xTaskGenericNotifyFromISR+0x12e>
    38f6:	8a 81       	ldd	r24, Y+2	; 0x02
    38f8:	9b 81       	ldd	r25, Y+3	; 0x03
    38fa:	fc 01       	movw	r30, r24
    38fc:	27 a1       	ldd	r18, Z+39	; 0x27
    38fe:	30 a5       	ldd	r19, Z+40	; 0x28
    3900:	41 a5       	ldd	r20, Z+41	; 0x29
    3902:	52 a5       	ldd	r21, Z+42	; 0x2a
    3904:	88 85       	ldd	r24, Y+8	; 0x08
    3906:	99 85       	ldd	r25, Y+9	; 0x09
    3908:	aa 85       	ldd	r26, Y+10	; 0x0a
    390a:	bb 85       	ldd	r27, Y+11	; 0x0b
    390c:	82 2b       	or	r24, r18
    390e:	93 2b       	or	r25, r19
    3910:	a4 2b       	or	r26, r20
    3912:	b5 2b       	or	r27, r21
    3914:	2a 81       	ldd	r18, Y+2	; 0x02
    3916:	3b 81       	ldd	r19, Y+3	; 0x03
    3918:	f9 01       	movw	r30, r18
    391a:	87 a3       	std	Z+39, r24	; 0x27
    391c:	90 a7       	std	Z+40, r25	; 0x28
    391e:	a1 a7       	std	Z+41, r26	; 0x29
    3920:	b2 a7       	std	Z+42, r27	; 0x2a
    3922:	30 c0       	rjmp	.+96     	; 0x3984 <xTaskGenericNotifyFromISR+0x12e>
    3924:	8a 81       	ldd	r24, Y+2	; 0x02
    3926:	9b 81       	ldd	r25, Y+3	; 0x03
    3928:	fc 01       	movw	r30, r24
    392a:	87 a1       	ldd	r24, Z+39	; 0x27
    392c:	90 a5       	ldd	r25, Z+40	; 0x28
    392e:	a1 a5       	ldd	r26, Z+41	; 0x29
    3930:	b2 a5       	ldd	r27, Z+42	; 0x2a
    3932:	01 96       	adiw	r24, 0x01	; 1
    3934:	a1 1d       	adc	r26, r1
    3936:	b1 1d       	adc	r27, r1
    3938:	2a 81       	ldd	r18, Y+2	; 0x02
    393a:	3b 81       	ldd	r19, Y+3	; 0x03
    393c:	f9 01       	movw	r30, r18
    393e:	87 a3       	std	Z+39, r24	; 0x27
    3940:	90 a7       	std	Z+40, r25	; 0x28
    3942:	a1 a7       	std	Z+41, r26	; 0x29
    3944:	b2 a7       	std	Z+42, r27	; 0x2a
    3946:	1e c0       	rjmp	.+60     	; 0x3984 <xTaskGenericNotifyFromISR+0x12e>
    3948:	2a 81       	ldd	r18, Y+2	; 0x02
    394a:	3b 81       	ldd	r19, Y+3	; 0x03
    394c:	88 85       	ldd	r24, Y+8	; 0x08
    394e:	99 85       	ldd	r25, Y+9	; 0x09
    3950:	aa 85       	ldd	r26, Y+10	; 0x0a
    3952:	bb 85       	ldd	r27, Y+11	; 0x0b
    3954:	f9 01       	movw	r30, r18
    3956:	87 a3       	std	Z+39, r24	; 0x27
    3958:	90 a7       	std	Z+40, r25	; 0x28
    395a:	a1 a7       	std	Z+41, r26	; 0x29
    395c:	b2 a7       	std	Z+42, r27	; 0x2a
    395e:	12 c0       	rjmp	.+36     	; 0x3984 <xTaskGenericNotifyFromISR+0x12e>
    3960:	8d 81       	ldd	r24, Y+5	; 0x05
    3962:	82 30       	cpi	r24, 0x02	; 2
    3964:	61 f0       	breq	.+24     	; 0x397e <xTaskGenericNotifyFromISR+0x128>
    3966:	2a 81       	ldd	r18, Y+2	; 0x02
    3968:	3b 81       	ldd	r19, Y+3	; 0x03
    396a:	88 85       	ldd	r24, Y+8	; 0x08
    396c:	99 85       	ldd	r25, Y+9	; 0x09
    396e:	aa 85       	ldd	r26, Y+10	; 0x0a
    3970:	bb 85       	ldd	r27, Y+11	; 0x0b
    3972:	f9 01       	movw	r30, r18
    3974:	87 a3       	std	Z+39, r24	; 0x27
    3976:	90 a7       	std	Z+40, r25	; 0x28
    3978:	a1 a7       	std	Z+41, r26	; 0x29
    397a:	b2 a7       	std	Z+42, r27	; 0x2a
    397c:	03 c0       	rjmp	.+6      	; 0x3984 <xTaskGenericNotifyFromISR+0x12e>
    397e:	19 82       	std	Y+1, r1	; 0x01
    3980:	01 c0       	rjmp	.+2      	; 0x3984 <xTaskGenericNotifyFromISR+0x12e>
    3982:	00 00       	nop
    3984:	8d 81       	ldd	r24, Y+5	; 0x05
    3986:	81 30       	cpi	r24, 0x01	; 1
    3988:	09 f0       	breq	.+2      	; 0x398c <xTaskGenericNotifyFromISR+0x136>
    398a:	4f c0       	rjmp	.+158    	; 0x3a2a <xTaskGenericNotifyFromISR+0x1d4>
    398c:	80 91 95 2c 	lds	r24, 0x2C95	; 0x802c95 <uxSchedulerSuspended>
    3990:	88 23       	and	r24, r24
    3992:	51 f5       	brne	.+84     	; 0x39e8 <xTaskGenericNotifyFromISR+0x192>
    3994:	8a 81       	ldd	r24, Y+2	; 0x02
    3996:	9b 81       	ldd	r25, Y+3	; 0x03
    3998:	02 96       	adiw	r24, 0x02	; 2
    399a:	0e 94 45 09 	call	0x128a	; 0x128a <uxListRemove>
    399e:	8a 81       	ldd	r24, Y+2	; 0x02
    39a0:	9b 81       	ldd	r25, Y+3	; 0x03
    39a2:	fc 01       	movw	r30, r24
    39a4:	92 8d       	ldd	r25, Z+26	; 0x1a
    39a6:	80 91 89 2c 	lds	r24, 0x2C89	; 0x802c89 <uxTopReadyPriority>
    39aa:	89 17       	cp	r24, r25
    39ac:	30 f4       	brcc	.+12     	; 0x39ba <xTaskGenericNotifyFromISR+0x164>
    39ae:	8a 81       	ldd	r24, Y+2	; 0x02
    39b0:	9b 81       	ldd	r25, Y+3	; 0x03
    39b2:	fc 01       	movw	r30, r24
    39b4:	82 8d       	ldd	r24, Z+26	; 0x1a
    39b6:	80 93 89 2c 	sts	0x2C89, r24	; 0x802c89 <uxTopReadyPriority>
    39ba:	8a 81       	ldd	r24, Y+2	; 0x02
    39bc:	9b 81       	ldd	r25, Y+3	; 0x03
    39be:	ac 01       	movw	r20, r24
    39c0:	4e 5f       	subi	r20, 0xFE	; 254
    39c2:	5f 4f       	sbci	r21, 0xFF	; 255
    39c4:	8a 81       	ldd	r24, Y+2	; 0x02
    39c6:	9b 81       	ldd	r25, Y+3	; 0x03
    39c8:	fc 01       	movw	r30, r24
    39ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    39cc:	28 2f       	mov	r18, r24
    39ce:	30 e0       	ldi	r19, 0x00	; 0
    39d0:	6b e0       	ldi	r22, 0x0B	; 11
    39d2:	62 9f       	mul	r22, r18
    39d4:	c0 01       	movw	r24, r0
    39d6:	63 9f       	mul	r22, r19
    39d8:	90 0d       	add	r25, r0
    39da:	11 24       	eor	r1, r1
    39dc:	84 5e       	subi	r24, 0xE4	; 228
    39de:	93 4d       	sbci	r25, 0xD3	; 211
    39e0:	ba 01       	movw	r22, r20
    39e2:	0e 94 79 08 	call	0x10f2	; 0x10f2 <vListInsertEnd>
    39e6:	08 c0       	rjmp	.+16     	; 0x39f8 <xTaskGenericNotifyFromISR+0x1a2>
    39e8:	8a 81       	ldd	r24, Y+2	; 0x02
    39ea:	9b 81       	ldd	r25, Y+3	; 0x03
    39ec:	0e 96       	adiw	r24, 0x0e	; 14
    39ee:	bc 01       	movw	r22, r24
    39f0:	82 e6       	ldi	r24, 0x62	; 98
    39f2:	9c e2       	ldi	r25, 0x2C	; 44
    39f4:	0e 94 79 08 	call	0x10f2	; 0x10f2 <vListInsertEnd>
    39f8:	8a 81       	ldd	r24, Y+2	; 0x02
    39fa:	9b 81       	ldd	r25, Y+3	; 0x03
    39fc:	fc 01       	movw	r30, r24
    39fe:	22 8d       	ldd	r18, Z+26	; 0x1a
    3a00:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    3a04:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    3a08:	fc 01       	movw	r30, r24
    3a0a:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a0c:	82 17       	cp	r24, r18
    3a0e:	68 f4       	brcc	.+26     	; 0x3a2a <xTaskGenericNotifyFromISR+0x1d4>
    3a10:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a12:	98 89       	ldd	r25, Y+16	; 0x10
    3a14:	89 2b       	or	r24, r25
    3a16:	31 f0       	breq	.+12     	; 0x3a24 <xTaskGenericNotifyFromISR+0x1ce>
    3a18:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a1a:	98 89       	ldd	r25, Y+16	; 0x10
    3a1c:	21 e0       	ldi	r18, 0x01	; 1
    3a1e:	fc 01       	movw	r30, r24
    3a20:	20 83       	st	Z, r18
    3a22:	03 c0       	rjmp	.+6      	; 0x3a2a <xTaskGenericNotifyFromISR+0x1d4>
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	80 93 8c 2c 	sts	0x2C8C, r24	; 0x802c8c <xYieldPending>
    3a2a:	80 ea       	ldi	r24, 0xA0	; 160
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	2c 81       	ldd	r18, Y+4	; 0x04
    3a30:	fc 01       	movw	r30, r24
    3a32:	22 83       	std	Z+2, r18	; 0x02
    3a34:	89 81       	ldd	r24, Y+1	; 0x01
    3a36:	60 96       	adiw	r28, 0x10	; 16
    3a38:	cd bf       	out	0x3d, r28	; 61
    3a3a:	de bf       	out	0x3e, r29	; 62
    3a3c:	df 91       	pop	r29
    3a3e:	cf 91       	pop	r28
    3a40:	1f 91       	pop	r17
    3a42:	0f 91       	pop	r16
    3a44:	ff 90       	pop	r15
    3a46:	ef 90       	pop	r14
    3a48:	08 95       	ret

00003a4a <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    3a4a:	cf 93       	push	r28
    3a4c:	df 93       	push	r29
    3a4e:	cd b7       	in	r28, 0x3d	; 61
    3a50:	de b7       	in	r29, 0x3e	; 62
    3a52:	2d 97       	sbiw	r28, 0x0d	; 13
    3a54:	cd bf       	out	0x3d, r28	; 61
    3a56:	de bf       	out	0x3e, r29	; 62
    3a58:	69 87       	std	Y+9, r22	; 0x09
    3a5a:	7a 87       	std	Y+10, r23	; 0x0a
    3a5c:	8b 87       	std	Y+11, r24	; 0x0b
    3a5e:	9c 87       	std	Y+12, r25	; 0x0c
    3a60:	4d 87       	std	Y+13, r20	; 0x0d
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    3a62:	80 91 85 2c 	lds	r24, 0x2C85	; 0x802c85 <xTickCount>
    3a66:	90 91 86 2c 	lds	r25, 0x2C86	; 0x802c86 <xTickCount+0x1>
    3a6a:	a0 91 87 2c 	lds	r26, 0x2C87	; 0x802c87 <xTickCount+0x2>
    3a6e:	b0 91 88 2c 	lds	r27, 0x2C88	; 0x802c88 <xTickCount+0x3>
    3a72:	89 83       	std	Y+1, r24	; 0x01
    3a74:	9a 83       	std	Y+2, r25	; 0x02
    3a76:	ab 83       	std	Y+3, r26	; 0x03
    3a78:	bc 83       	std	Y+4, r27	; 0x04
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3a7a:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    3a7e:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    3a82:	02 96       	adiw	r24, 0x02	; 2
    3a84:	0e 94 45 09 	call	0x128a	; 0x128a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    3a88:	89 85       	ldd	r24, Y+9	; 0x09
    3a8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a8c:	ab 85       	ldd	r26, Y+11	; 0x0b
    3a8e:	bc 85       	ldd	r27, Y+12	; 0x0c
    3a90:	8f 3f       	cpi	r24, 0xFF	; 255
    3a92:	9f 4f       	sbci	r25, 0xFF	; 255
    3a94:	af 4f       	sbci	r26, 0xFF	; 255
    3a96:	bf 4f       	sbci	r27, 0xFF	; 255
    3a98:	71 f4       	brne	.+28     	; 0x3ab6 <prvAddCurrentTaskToDelayedList+0x6c>
    3a9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a9c:	88 23       	and	r24, r24
    3a9e:	59 f0       	breq	.+22     	; 0x3ab6 <prvAddCurrentTaskToDelayedList+0x6c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3aa0:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    3aa4:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    3aa8:	02 96       	adiw	r24, 0x02	; 2
    3aaa:	bc 01       	movw	r22, r24
    3aac:	89 e7       	ldi	r24, 0x79	; 121
    3aae:	9c e2       	ldi	r25, 0x2C	; 44
    3ab0:	0e 94 79 08 	call	0x10f2	; 0x10f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3ab4:	64 c0       	rjmp	.+200    	; 0x3b7e <prvAddCurrentTaskToDelayedList+0x134>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    3ab6:	29 81       	ldd	r18, Y+1	; 0x01
    3ab8:	3a 81       	ldd	r19, Y+2	; 0x02
    3aba:	4b 81       	ldd	r20, Y+3	; 0x03
    3abc:	5c 81       	ldd	r21, Y+4	; 0x04
    3abe:	89 85       	ldd	r24, Y+9	; 0x09
    3ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ac2:	ab 85       	ldd	r26, Y+11	; 0x0b
    3ac4:	bc 85       	ldd	r27, Y+12	; 0x0c
    3ac6:	82 0f       	add	r24, r18
    3ac8:	93 1f       	adc	r25, r19
    3aca:	a4 1f       	adc	r26, r20
    3acc:	b5 1f       	adc	r27, r21
    3ace:	8d 83       	std	Y+5, r24	; 0x05
    3ad0:	9e 83       	std	Y+6, r25	; 0x06
    3ad2:	af 83       	std	Y+7, r26	; 0x07
    3ad4:	b8 87       	std	Y+8, r27	; 0x08

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    3ad6:	20 91 1a 2c 	lds	r18, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    3ada:	30 91 1b 2c 	lds	r19, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    3ade:	8d 81       	ldd	r24, Y+5	; 0x05
    3ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ae2:	af 81       	ldd	r26, Y+7	; 0x07
    3ae4:	b8 85       	ldd	r27, Y+8	; 0x08
    3ae6:	f9 01       	movw	r30, r18
    3ae8:	82 83       	std	Z+2, r24	; 0x02
    3aea:	93 83       	std	Z+3, r25	; 0x03
    3aec:	a4 83       	std	Z+4, r26	; 0x04
    3aee:	b5 83       	std	Z+5, r27	; 0x05

			if( xTimeToWake < xConstTickCount )
    3af0:	2d 81       	ldd	r18, Y+5	; 0x05
    3af2:	3e 81       	ldd	r19, Y+6	; 0x06
    3af4:	4f 81       	ldd	r20, Y+7	; 0x07
    3af6:	58 85       	ldd	r21, Y+8	; 0x08
    3af8:	89 81       	ldd	r24, Y+1	; 0x01
    3afa:	9a 81       	ldd	r25, Y+2	; 0x02
    3afc:	ab 81       	ldd	r26, Y+3	; 0x03
    3afe:	bc 81       	ldd	r27, Y+4	; 0x04
    3b00:	28 17       	cp	r18, r24
    3b02:	39 07       	cpc	r19, r25
    3b04:	4a 07       	cpc	r20, r26
    3b06:	5b 07       	cpc	r21, r27
    3b08:	78 f4       	brcc	.+30     	; 0x3b28 <prvAddCurrentTaskToDelayedList+0xde>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3b0a:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    3b0e:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    3b12:	9c 01       	movw	r18, r24
    3b14:	2e 5f       	subi	r18, 0xFE	; 254
    3b16:	3f 4f       	sbci	r19, 0xFF	; 255
    3b18:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <pxOverflowDelayedTaskList>
    3b1c:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <pxOverflowDelayedTaskList+0x1>
    3b20:	b9 01       	movw	r22, r18
    3b22:	0e 94 c4 08 	call	0x1188	; 0x1188 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3b26:	2b c0       	rjmp	.+86     	; 0x3b7e <prvAddCurrentTaskToDelayedList+0x134>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3b28:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <pxCurrentTCB>
    3b2c:	90 91 1b 2c 	lds	r25, 0x2C1B	; 0x802c1b <pxCurrentTCB+0x1>
    3b30:	9c 01       	movw	r18, r24
    3b32:	2e 5f       	subi	r18, 0xFE	; 254
    3b34:	3f 4f       	sbci	r19, 0xFF	; 255
    3b36:	80 91 5e 2c 	lds	r24, 0x2C5E	; 0x802c5e <pxDelayedTaskList>
    3b3a:	90 91 5f 2c 	lds	r25, 0x2C5F	; 0x802c5f <pxDelayedTaskList+0x1>
    3b3e:	b9 01       	movw	r22, r18
    3b40:	0e 94 c4 08 	call	0x1188	; 0x1188 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    3b44:	80 91 8f 2c 	lds	r24, 0x2C8F	; 0x802c8f <xNextTaskUnblockTime>
    3b48:	90 91 90 2c 	lds	r25, 0x2C90	; 0x802c90 <xNextTaskUnblockTime+0x1>
    3b4c:	a0 91 91 2c 	lds	r26, 0x2C91	; 0x802c91 <xNextTaskUnblockTime+0x2>
    3b50:	b0 91 92 2c 	lds	r27, 0x2C92	; 0x802c92 <xNextTaskUnblockTime+0x3>
    3b54:	2d 81       	ldd	r18, Y+5	; 0x05
    3b56:	3e 81       	ldd	r19, Y+6	; 0x06
    3b58:	4f 81       	ldd	r20, Y+7	; 0x07
    3b5a:	58 85       	ldd	r21, Y+8	; 0x08
    3b5c:	28 17       	cp	r18, r24
    3b5e:	39 07       	cpc	r19, r25
    3b60:	4a 07       	cpc	r20, r26
    3b62:	5b 07       	cpc	r21, r27
    3b64:	60 f4       	brcc	.+24     	; 0x3b7e <prvAddCurrentTaskToDelayedList+0x134>
				{
					xNextTaskUnblockTime = xTimeToWake;
    3b66:	8d 81       	ldd	r24, Y+5	; 0x05
    3b68:	9e 81       	ldd	r25, Y+6	; 0x06
    3b6a:	af 81       	ldd	r26, Y+7	; 0x07
    3b6c:	b8 85       	ldd	r27, Y+8	; 0x08
    3b6e:	80 93 8f 2c 	sts	0x2C8F, r24	; 0x802c8f <xNextTaskUnblockTime>
    3b72:	90 93 90 2c 	sts	0x2C90, r25	; 0x802c90 <xNextTaskUnblockTime+0x1>
    3b76:	a0 93 91 2c 	sts	0x2C91, r26	; 0x802c91 <xNextTaskUnblockTime+0x2>
    3b7a:	b0 93 92 2c 	sts	0x2C92, r27	; 0x802c92 <xNextTaskUnblockTime+0x3>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3b7e:	00 00       	nop
    3b80:	2d 96       	adiw	r28, 0x0d	; 13
    3b82:	cd bf       	out	0x3d, r28	; 61
    3b84:	de bf       	out	0x3e, r29	; 62
    3b86:	df 91       	pop	r29
    3b88:	cf 91       	pop	r28
    3b8a:	08 95       	ret

00003b8c <xTimerCreateTimerTask>:
	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
}
    3b8c:	ef 92       	push	r14
    3b8e:	ff 92       	push	r15
    3b90:	0f 93       	push	r16
    3b92:	cf 93       	push	r28
    3b94:	df 93       	push	r29
    3b96:	1f 92       	push	r1
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
    3b9c:	19 82       	std	Y+1, r1	; 0x01
    3b9e:	0e 94 57 22 	call	0x44ae	; 0x44ae <prvCheckForValidListAndQueue>
    3ba2:	80 91 b0 2c 	lds	r24, 0x2CB0	; 0x802cb0 <xTimerQueue>
    3ba6:	90 91 b1 2c 	lds	r25, 0x2CB1	; 0x802cb1 <xTimerQueue+0x1>
    3baa:	89 2b       	or	r24, r25
    3bac:	91 f0       	breq	.+36     	; 0x3bd2 <xTimerCreateTimerTask+0x46>
    3bae:	0f 2e       	mov	r0, r31
    3bb0:	f2 eb       	ldi	r31, 0xB2	; 178
    3bb2:	ef 2e       	mov	r14, r31
    3bb4:	fc e2       	ldi	r31, 0x2C	; 44
    3bb6:	ff 2e       	mov	r15, r31
    3bb8:	f0 2d       	mov	r31, r0
    3bba:	03 e0       	ldi	r16, 0x03	; 3
    3bbc:	20 e0       	ldi	r18, 0x00	; 0
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	48 ec       	ldi	r20, 0xC8	; 200
    3bc2:	50 e0       	ldi	r21, 0x00	; 0
    3bc4:	65 e0       	ldi	r22, 0x05	; 5
    3bc6:	70 e2       	ldi	r23, 0x20	; 32
    3bc8:	8c ed       	ldi	r24, 0xDC	; 220
    3bca:	9e e1       	ldi	r25, 0x1E	; 30
    3bcc:	0e 94 2a 12 	call	0x2454	; 0x2454 <xTaskCreate>
    3bd0:	89 83       	std	Y+1, r24	; 0x01
    3bd2:	89 81       	ldd	r24, Y+1	; 0x01
    3bd4:	0f 90       	pop	r0
    3bd6:	df 91       	pop	r29
    3bd8:	cf 91       	pop	r28
    3bda:	0f 91       	pop	r16
    3bdc:	ff 90       	pop	r15
    3bde:	ef 90       	pop	r14
    3be0:	08 95       	ret

00003be2 <xTimerGenericCommand>:
    3be2:	cf 92       	push	r12
    3be4:	df 92       	push	r13
    3be6:	ef 92       	push	r14
    3be8:	ff 92       	push	r15
    3bea:	0f 93       	push	r16
    3bec:	1f 93       	push	r17
    3bee:	cf 93       	push	r28
    3bf0:	df 93       	push	r29
    3bf2:	cd b7       	in	r28, 0x3d	; 61
    3bf4:	de b7       	in	r29, 0x3e	; 62
    3bf6:	67 97       	sbiw	r28, 0x17	; 23
    3bf8:	cd bf       	out	0x3d, r28	; 61
    3bfa:	de bf       	out	0x3e, r29	; 62
    3bfc:	8b 87       	std	Y+11, r24	; 0x0b
    3bfe:	9c 87       	std	Y+12, r25	; 0x0c
    3c00:	6d 87       	std	Y+13, r22	; 0x0d
    3c02:	2e 87       	std	Y+14, r18	; 0x0e
    3c04:	3f 87       	std	Y+15, r19	; 0x0f
    3c06:	48 8b       	std	Y+16, r20	; 0x10
    3c08:	59 8b       	std	Y+17, r21	; 0x11
    3c0a:	0a 8b       	std	Y+18, r16	; 0x12
    3c0c:	1b 8b       	std	Y+19, r17	; 0x13
    3c0e:	cc 8a       	std	Y+20, r12	; 0x14
    3c10:	dd 8a       	std	Y+21, r13	; 0x15
    3c12:	ee 8a       	std	Y+22, r14	; 0x16
    3c14:	ff 8a       	std	Y+23, r15	; 0x17
    3c16:	19 82       	std	Y+1, r1	; 0x01
    3c18:	80 91 b0 2c 	lds	r24, 0x2CB0	; 0x802cb0 <xTimerQueue>
    3c1c:	90 91 b1 2c 	lds	r25, 0x2CB1	; 0x802cb1 <xTimerQueue+0x1>
    3c20:	89 2b       	or	r24, r25
    3c22:	09 f4       	brne	.+2      	; 0x3c26 <xTimerGenericCommand+0x44>
    3c24:	44 c0       	rjmp	.+136    	; 0x3cae <xTimerGenericCommand+0xcc>
    3c26:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c28:	8a 83       	std	Y+2, r24	; 0x02
    3c2a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c2c:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c2e:	a8 89       	ldd	r26, Y+16	; 0x10
    3c30:	b9 89       	ldd	r27, Y+17	; 0x11
    3c32:	8b 83       	std	Y+3, r24	; 0x03
    3c34:	9c 83       	std	Y+4, r25	; 0x04
    3c36:	ad 83       	std	Y+5, r26	; 0x05
    3c38:	be 83       	std	Y+6, r27	; 0x06
    3c3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c3e:	8f 83       	std	Y+7, r24	; 0x07
    3c40:	98 87       	std	Y+8, r25	; 0x08
    3c42:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c44:	86 30       	cpi	r24, 0x06	; 6
    3c46:	34 f5       	brge	.+76     	; 0x3c94 <xTimerGenericCommand+0xb2>
    3c48:	0e 94 3a 1a 	call	0x3474	; 0x3474 <xTaskGetSchedulerState>
    3c4c:	82 30       	cpi	r24, 0x02	; 2
    3c4e:	99 f4       	brne	.+38     	; 0x3c76 <xTimerGenericCommand+0x94>
    3c50:	e0 91 b0 2c 	lds	r30, 0x2CB0	; 0x802cb0 <xTimerQueue>
    3c54:	f0 91 b1 2c 	lds	r31, 0x2CB1	; 0x802cb1 <xTimerQueue+0x1>
    3c58:	8c 89       	ldd	r24, Y+20	; 0x14
    3c5a:	9d 89       	ldd	r25, Y+21	; 0x15
    3c5c:	ae 89       	ldd	r26, Y+22	; 0x16
    3c5e:	bf 89       	ldd	r27, Y+23	; 0x17
    3c60:	be 01       	movw	r22, r28
    3c62:	6e 5f       	subi	r22, 0xFE	; 254
    3c64:	7f 4f       	sbci	r23, 0xFF	; 255
    3c66:	00 e0       	ldi	r16, 0x00	; 0
    3c68:	9c 01       	movw	r18, r24
    3c6a:	ad 01       	movw	r20, r26
    3c6c:	cf 01       	movw	r24, r30
    3c6e:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <xQueueGenericSend>
    3c72:	89 83       	std	Y+1, r24	; 0x01
    3c74:	1c c0       	rjmp	.+56     	; 0x3cae <xTimerGenericCommand+0xcc>
    3c76:	80 91 b0 2c 	lds	r24, 0x2CB0	; 0x802cb0 <xTimerQueue>
    3c7a:	90 91 b1 2c 	lds	r25, 0x2CB1	; 0x802cb1 <xTimerQueue+0x1>
    3c7e:	be 01       	movw	r22, r28
    3c80:	6e 5f       	subi	r22, 0xFE	; 254
    3c82:	7f 4f       	sbci	r23, 0xFF	; 255
    3c84:	00 e0       	ldi	r16, 0x00	; 0
    3c86:	20 e0       	ldi	r18, 0x00	; 0
    3c88:	30 e0       	ldi	r19, 0x00	; 0
    3c8a:	a9 01       	movw	r20, r18
    3c8c:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <xQueueGenericSend>
    3c90:	89 83       	std	Y+1, r24	; 0x01
    3c92:	0d c0       	rjmp	.+26     	; 0x3cae <xTimerGenericCommand+0xcc>
    3c94:	80 91 b0 2c 	lds	r24, 0x2CB0	; 0x802cb0 <xTimerQueue>
    3c98:	90 91 b1 2c 	lds	r25, 0x2CB1	; 0x802cb1 <xTimerQueue+0x1>
    3c9c:	4a 89       	ldd	r20, Y+18	; 0x12
    3c9e:	5b 89       	ldd	r21, Y+19	; 0x13
    3ca0:	be 01       	movw	r22, r28
    3ca2:	6e 5f       	subi	r22, 0xFE	; 254
    3ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ca6:	20 e0       	ldi	r18, 0x00	; 0
    3ca8:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <xQueueGenericSendFromISR>
    3cac:	89 83       	std	Y+1, r24	; 0x01
    3cae:	89 81       	ldd	r24, Y+1	; 0x01
    3cb0:	67 96       	adiw	r28, 0x17	; 23
    3cb2:	cd bf       	out	0x3d, r28	; 61
    3cb4:	de bf       	out	0x3e, r29	; 62
    3cb6:	df 91       	pop	r29
    3cb8:	cf 91       	pop	r28
    3cba:	1f 91       	pop	r17
    3cbc:	0f 91       	pop	r16
    3cbe:	ff 90       	pop	r15
    3cc0:	ef 90       	pop	r14
    3cc2:	df 90       	pop	r13
    3cc4:	cf 90       	pop	r12
    3cc6:	08 95       	ret

00003cc8 <prvProcessExpiredTimer>:
    3cc8:	cf 92       	push	r12
    3cca:	df 92       	push	r13
    3ccc:	ef 92       	push	r14
    3cce:	ff 92       	push	r15
    3cd0:	0f 93       	push	r16
    3cd2:	1f 93       	push	r17
    3cd4:	cf 93       	push	r28
    3cd6:	df 93       	push	r29
    3cd8:	cd b7       	in	r28, 0x3d	; 61
    3cda:	de b7       	in	r29, 0x3e	; 62
    3cdc:	2b 97       	sbiw	r28, 0x0b	; 11
    3cde:	cd bf       	out	0x3d, r28	; 61
    3ce0:	de bf       	out	0x3e, r29	; 62
    3ce2:	6c 83       	std	Y+4, r22	; 0x04
    3ce4:	7d 83       	std	Y+5, r23	; 0x05
    3ce6:	8e 83       	std	Y+6, r24	; 0x06
    3ce8:	9f 83       	std	Y+7, r25	; 0x07
    3cea:	28 87       	std	Y+8, r18	; 0x08
    3cec:	39 87       	std	Y+9, r19	; 0x09
    3cee:	4a 87       	std	Y+10, r20	; 0x0a
    3cf0:	5b 87       	std	Y+11, r21	; 0x0b
    3cf2:	80 91 ac 2c 	lds	r24, 0x2CAC	; 0x802cac <pxCurrentTimerList>
    3cf6:	90 91 ad 2c 	lds	r25, 0x2CAD	; 0x802cad <pxCurrentTimerList+0x1>
    3cfa:	fc 01       	movw	r30, r24
    3cfc:	87 81       	ldd	r24, Z+7	; 0x07
    3cfe:	90 85       	ldd	r25, Z+8	; 0x08
    3d00:	fc 01       	movw	r30, r24
    3d02:	80 85       	ldd	r24, Z+8	; 0x08
    3d04:	91 85       	ldd	r25, Z+9	; 0x09
    3d06:	89 83       	std	Y+1, r24	; 0x01
    3d08:	9a 83       	std	Y+2, r25	; 0x02
    3d0a:	89 81       	ldd	r24, Y+1	; 0x01
    3d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d0e:	02 96       	adiw	r24, 0x02	; 2
    3d10:	0e 94 45 09 	call	0x128a	; 0x128a <uxListRemove>
    3d14:	89 81       	ldd	r24, Y+1	; 0x01
    3d16:	9a 81       	ldd	r25, Y+2	; 0x02
    3d18:	fc 01       	movw	r30, r24
    3d1a:	82 89       	ldd	r24, Z+18	; 0x12
    3d1c:	81 30       	cpi	r24, 0x01	; 1
    3d1e:	b1 f5       	brne	.+108    	; 0x3d8c <prvProcessExpiredTimer+0xc4>
    3d20:	89 81       	ldd	r24, Y+1	; 0x01
    3d22:	9a 81       	ldd	r25, Y+2	; 0x02
    3d24:	fc 01       	movw	r30, r24
    3d26:	26 85       	ldd	r18, Z+14	; 0x0e
    3d28:	37 85       	ldd	r19, Z+15	; 0x0f
    3d2a:	40 89       	ldd	r20, Z+16	; 0x10
    3d2c:	51 89       	ldd	r21, Z+17	; 0x11
    3d2e:	8c 81       	ldd	r24, Y+4	; 0x04
    3d30:	9d 81       	ldd	r25, Y+5	; 0x05
    3d32:	ae 81       	ldd	r26, Y+6	; 0x06
    3d34:	bf 81       	ldd	r27, Y+7	; 0x07
    3d36:	82 0f       	add	r24, r18
    3d38:	93 1f       	adc	r25, r19
    3d3a:	a4 1f       	adc	r26, r20
    3d3c:	b5 1f       	adc	r27, r21
    3d3e:	ec 80       	ldd	r14, Y+4	; 0x04
    3d40:	fd 80       	ldd	r15, Y+5	; 0x05
    3d42:	0e 81       	ldd	r16, Y+6	; 0x06
    3d44:	1f 81       	ldd	r17, Y+7	; 0x07
    3d46:	28 85       	ldd	r18, Y+8	; 0x08
    3d48:	39 85       	ldd	r19, Y+9	; 0x09
    3d4a:	4a 85       	ldd	r20, Y+10	; 0x0a
    3d4c:	5b 85       	ldd	r21, Y+11	; 0x0b
    3d4e:	e9 81       	ldd	r30, Y+1	; 0x01
    3d50:	fa 81       	ldd	r31, Y+2	; 0x02
    3d52:	67 01       	movw	r12, r14
    3d54:	78 01       	movw	r14, r16
    3d56:	89 01       	movw	r16, r18
    3d58:	9a 01       	movw	r18, r20
    3d5a:	ac 01       	movw	r20, r24
    3d5c:	bd 01       	movw	r22, r26
    3d5e:	cf 01       	movw	r24, r30
    3d60:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <prvInsertTimerInActiveList>
    3d64:	88 23       	and	r24, r24
    3d66:	91 f0       	breq	.+36     	; 0x3d8c <prvProcessExpiredTimer+0xc4>
    3d68:	8c 81       	ldd	r24, Y+4	; 0x04
    3d6a:	9d 81       	ldd	r25, Y+5	; 0x05
    3d6c:	ae 81       	ldd	r26, Y+6	; 0x06
    3d6e:	bf 81       	ldd	r27, Y+7	; 0x07
    3d70:	e9 81       	ldd	r30, Y+1	; 0x01
    3d72:	fa 81       	ldd	r31, Y+2	; 0x02
    3d74:	c1 2c       	mov	r12, r1
    3d76:	d1 2c       	mov	r13, r1
    3d78:	76 01       	movw	r14, r12
    3d7a:	00 e0       	ldi	r16, 0x00	; 0
    3d7c:	10 e0       	ldi	r17, 0x00	; 0
    3d7e:	9c 01       	movw	r18, r24
    3d80:	ad 01       	movw	r20, r26
    3d82:	60 e0       	ldi	r22, 0x00	; 0
    3d84:	cf 01       	movw	r24, r30
    3d86:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <xTimerGenericCommand>
    3d8a:	8b 83       	std	Y+3, r24	; 0x03
    3d8c:	89 81       	ldd	r24, Y+1	; 0x01
    3d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d90:	fc 01       	movw	r30, r24
    3d92:	25 89       	ldd	r18, Z+21	; 0x15
    3d94:	36 89       	ldd	r19, Z+22	; 0x16
    3d96:	89 81       	ldd	r24, Y+1	; 0x01
    3d98:	9a 81       	ldd	r25, Y+2	; 0x02
    3d9a:	f9 01       	movw	r30, r18
    3d9c:	19 95       	eicall
    3d9e:	00 00       	nop
    3da0:	2b 96       	adiw	r28, 0x0b	; 11
    3da2:	cd bf       	out	0x3d, r28	; 61
    3da4:	de bf       	out	0x3e, r29	; 62
    3da6:	df 91       	pop	r29
    3da8:	cf 91       	pop	r28
    3daa:	1f 91       	pop	r17
    3dac:	0f 91       	pop	r16
    3dae:	ff 90       	pop	r15
    3db0:	ef 90       	pop	r14
    3db2:	df 90       	pop	r13
    3db4:	cf 90       	pop	r12
    3db6:	08 95       	ret

00003db8 <prvTimerTask>:
    3db8:	cf 93       	push	r28
    3dba:	df 93       	push	r29
    3dbc:	cd b7       	in	r28, 0x3d	; 61
    3dbe:	de b7       	in	r29, 0x3e	; 62
    3dc0:	27 97       	sbiw	r28, 0x07	; 7
    3dc2:	cd bf       	out	0x3d, r28	; 61
    3dc4:	de bf       	out	0x3e, r29	; 62
    3dc6:	8e 83       	std	Y+6, r24	; 0x06
    3dc8:	9f 83       	std	Y+7, r25	; 0x07
    3dca:	ce 01       	movw	r24, r28
    3dcc:	05 96       	adiw	r24, 0x05	; 5
    3dce:	0e 94 77 1f 	call	0x3eee	; 0x3eee <prvGetNextExpireTime>
    3dd2:	dc 01       	movw	r26, r24
    3dd4:	cb 01       	movw	r24, r22
    3dd6:	89 83       	std	Y+1, r24	; 0x01
    3dd8:	9a 83       	std	Y+2, r25	; 0x02
    3dda:	ab 83       	std	Y+3, r26	; 0x03
    3ddc:	bc 83       	std	Y+4, r27	; 0x04
    3dde:	2d 81       	ldd	r18, Y+5	; 0x05
    3de0:	89 81       	ldd	r24, Y+1	; 0x01
    3de2:	9a 81       	ldd	r25, Y+2	; 0x02
    3de4:	ab 81       	ldd	r26, Y+3	; 0x03
    3de6:	bc 81       	ldd	r27, Y+4	; 0x04
    3de8:	42 2f       	mov	r20, r18
    3dea:	bc 01       	movw	r22, r24
    3dec:	cd 01       	movw	r24, r26
    3dee:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <prvProcessTimerOrBlockTask>
    3df2:	0e 94 93 20 	call	0x4126	; 0x4126 <prvProcessReceivedCommands>
    3df6:	e9 cf       	rjmp	.-46     	; 0x3dca <prvTimerTask+0x12>

00003df8 <prvProcessTimerOrBlockTask>:
    3df8:	ef 92       	push	r14
    3dfa:	ff 92       	push	r15
    3dfc:	0f 93       	push	r16
    3dfe:	1f 93       	push	r17
    3e00:	cf 93       	push	r28
    3e02:	df 93       	push	r29
    3e04:	cd b7       	in	r28, 0x3d	; 61
    3e06:	de b7       	in	r29, 0x3e	; 62
    3e08:	2a 97       	sbiw	r28, 0x0a	; 10
    3e0a:	cd bf       	out	0x3d, r28	; 61
    3e0c:	de bf       	out	0x3e, r29	; 62
    3e0e:	6e 83       	std	Y+6, r22	; 0x06
    3e10:	7f 83       	std	Y+7, r23	; 0x07
    3e12:	88 87       	std	Y+8, r24	; 0x08
    3e14:	99 87       	std	Y+9, r25	; 0x09
    3e16:	4a 87       	std	Y+10, r20	; 0x0a
    3e18:	0e 94 77 14 	call	0x28ee	; 0x28ee <vTaskSuspendAll>
    3e1c:	ce 01       	movw	r24, r28
    3e1e:	05 96       	adiw	r24, 0x05	; 5
    3e20:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <prvSampleTimeNow>
    3e24:	dc 01       	movw	r26, r24
    3e26:	cb 01       	movw	r24, r22
    3e28:	89 83       	std	Y+1, r24	; 0x01
    3e2a:	9a 83       	std	Y+2, r25	; 0x02
    3e2c:	ab 83       	std	Y+3, r26	; 0x03
    3e2e:	bc 83       	std	Y+4, r27	; 0x04
    3e30:	8d 81       	ldd	r24, Y+5	; 0x05
    3e32:	88 23       	and	r24, r24
    3e34:	09 f0       	breq	.+2      	; 0x3e38 <prvProcessTimerOrBlockTask+0x40>
    3e36:	4e c0       	rjmp	.+156    	; 0x3ed4 <prvProcessTimerOrBlockTask+0xdc>
    3e38:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e3a:	88 23       	and	r24, r24
    3e3c:	e1 f4       	brne	.+56     	; 0x3e76 <prvProcessTimerOrBlockTask+0x7e>
    3e3e:	2e 81       	ldd	r18, Y+6	; 0x06
    3e40:	3f 81       	ldd	r19, Y+7	; 0x07
    3e42:	48 85       	ldd	r20, Y+8	; 0x08
    3e44:	59 85       	ldd	r21, Y+9	; 0x09
    3e46:	89 81       	ldd	r24, Y+1	; 0x01
    3e48:	9a 81       	ldd	r25, Y+2	; 0x02
    3e4a:	ab 81       	ldd	r26, Y+3	; 0x03
    3e4c:	bc 81       	ldd	r27, Y+4	; 0x04
    3e4e:	82 17       	cp	r24, r18
    3e50:	93 07       	cpc	r25, r19
    3e52:	a4 07       	cpc	r26, r20
    3e54:	b5 07       	cpc	r27, r21
    3e56:	78 f0       	brcs	.+30     	; 0x3e76 <prvProcessTimerOrBlockTask+0x7e>
    3e58:	0e 94 84 14 	call	0x2908	; 0x2908 <xTaskResumeAll>
    3e5c:	29 81       	ldd	r18, Y+1	; 0x01
    3e5e:	3a 81       	ldd	r19, Y+2	; 0x02
    3e60:	4b 81       	ldd	r20, Y+3	; 0x03
    3e62:	5c 81       	ldd	r21, Y+4	; 0x04
    3e64:	8e 81       	ldd	r24, Y+6	; 0x06
    3e66:	9f 81       	ldd	r25, Y+7	; 0x07
    3e68:	a8 85       	ldd	r26, Y+8	; 0x08
    3e6a:	b9 85       	ldd	r27, Y+9	; 0x09
    3e6c:	bc 01       	movw	r22, r24
    3e6e:	cd 01       	movw	r24, r26
    3e70:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <prvProcessExpiredTimer>
    3e74:	31 c0       	rjmp	.+98     	; 0x3ed8 <prvProcessTimerOrBlockTask+0xe0>
    3e76:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e78:	88 23       	and	r24, r24
    3e7a:	59 f0       	breq	.+22     	; 0x3e92 <prvProcessTimerOrBlockTask+0x9a>
    3e7c:	80 91 ae 2c 	lds	r24, 0x2CAE	; 0x802cae <pxOverflowTimerList>
    3e80:	90 91 af 2c 	lds	r25, 0x2CAF	; 0x802caf <pxOverflowTimerList+0x1>
    3e84:	fc 01       	movw	r30, r24
    3e86:	90 81       	ld	r25, Z
    3e88:	81 e0       	ldi	r24, 0x01	; 1
    3e8a:	99 23       	and	r25, r25
    3e8c:	09 f0       	breq	.+2      	; 0x3e90 <prvProcessTimerOrBlockTask+0x98>
    3e8e:	80 e0       	ldi	r24, 0x00	; 0
    3e90:	8a 87       	std	Y+10, r24	; 0x0a
    3e92:	2e 81       	ldd	r18, Y+6	; 0x06
    3e94:	3f 81       	ldd	r19, Y+7	; 0x07
    3e96:	48 85       	ldd	r20, Y+8	; 0x08
    3e98:	59 85       	ldd	r21, Y+9	; 0x09
    3e9a:	89 81       	ldd	r24, Y+1	; 0x01
    3e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e9e:	ab 81       	ldd	r26, Y+3	; 0x03
    3ea0:	bc 81       	ldd	r27, Y+4	; 0x04
    3ea2:	79 01       	movw	r14, r18
    3ea4:	8a 01       	movw	r16, r20
    3ea6:	e8 1a       	sub	r14, r24
    3ea8:	f9 0a       	sbc	r15, r25
    3eaa:	0a 0b       	sbc	r16, r26
    3eac:	1b 0b       	sbc	r17, r27
    3eae:	d8 01       	movw	r26, r16
    3eb0:	c7 01       	movw	r24, r14
    3eb2:	e0 91 b0 2c 	lds	r30, 0x2CB0	; 0x802cb0 <xTimerQueue>
    3eb6:	f0 91 b1 2c 	lds	r31, 0x2CB1	; 0x802cb1 <xTimerQueue+0x1>
    3eba:	2a 85       	ldd	r18, Y+10	; 0x0a
    3ebc:	ac 01       	movw	r20, r24
    3ebe:	bd 01       	movw	r22, r26
    3ec0:	cf 01       	movw	r24, r30
    3ec2:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <vQueueWaitForMessageRestricted>
    3ec6:	0e 94 84 14 	call	0x2908	; 0x2908 <xTaskResumeAll>
    3eca:	88 23       	and	r24, r24
    3ecc:	29 f4       	brne	.+10     	; 0x3ed8 <prvProcessTimerOrBlockTask+0xe0>
    3ece:	0e 94 c3 0b 	call	0x1786	; 0x1786 <vPortYield>
    3ed2:	02 c0       	rjmp	.+4      	; 0x3ed8 <prvProcessTimerOrBlockTask+0xe0>
    3ed4:	0e 94 84 14 	call	0x2908	; 0x2908 <xTaskResumeAll>
    3ed8:	00 00       	nop
    3eda:	2a 96       	adiw	r28, 0x0a	; 10
    3edc:	cd bf       	out	0x3d, r28	; 61
    3ede:	de bf       	out	0x3e, r29	; 62
    3ee0:	df 91       	pop	r29
    3ee2:	cf 91       	pop	r28
    3ee4:	1f 91       	pop	r17
    3ee6:	0f 91       	pop	r16
    3ee8:	ff 90       	pop	r15
    3eea:	ef 90       	pop	r14
    3eec:	08 95       	ret

00003eee <prvGetNextExpireTime>:
    3eee:	cf 93       	push	r28
    3ef0:	df 93       	push	r29
    3ef2:	00 d0       	rcall	.+0      	; 0x3ef4 <prvGetNextExpireTime+0x6>
    3ef4:	00 d0       	rcall	.+0      	; 0x3ef6 <prvGetNextExpireTime+0x8>
    3ef6:	cd b7       	in	r28, 0x3d	; 61
    3ef8:	de b7       	in	r29, 0x3e	; 62
    3efa:	8d 83       	std	Y+5, r24	; 0x05
    3efc:	9e 83       	std	Y+6, r25	; 0x06
    3efe:	80 91 ac 2c 	lds	r24, 0x2CAC	; 0x802cac <pxCurrentTimerList>
    3f02:	90 91 ad 2c 	lds	r25, 0x2CAD	; 0x802cad <pxCurrentTimerList+0x1>
    3f06:	fc 01       	movw	r30, r24
    3f08:	90 81       	ld	r25, Z
    3f0a:	81 e0       	ldi	r24, 0x01	; 1
    3f0c:	99 23       	and	r25, r25
    3f0e:	09 f0       	breq	.+2      	; 0x3f12 <prvGetNextExpireTime+0x24>
    3f10:	80 e0       	ldi	r24, 0x00	; 0
    3f12:	28 2f       	mov	r18, r24
    3f14:	8d 81       	ldd	r24, Y+5	; 0x05
    3f16:	9e 81       	ldd	r25, Y+6	; 0x06
    3f18:	fc 01       	movw	r30, r24
    3f1a:	20 83       	st	Z, r18
    3f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f20:	fc 01       	movw	r30, r24
    3f22:	80 81       	ld	r24, Z
    3f24:	88 23       	and	r24, r24
    3f26:	89 f4       	brne	.+34     	; 0x3f4a <prvGetNextExpireTime+0x5c>
    3f28:	80 91 ac 2c 	lds	r24, 0x2CAC	; 0x802cac <pxCurrentTimerList>
    3f2c:	90 91 ad 2c 	lds	r25, 0x2CAD	; 0x802cad <pxCurrentTimerList+0x1>
    3f30:	fc 01       	movw	r30, r24
    3f32:	87 81       	ldd	r24, Z+7	; 0x07
    3f34:	90 85       	ldd	r25, Z+8	; 0x08
    3f36:	fc 01       	movw	r30, r24
    3f38:	80 81       	ld	r24, Z
    3f3a:	91 81       	ldd	r25, Z+1	; 0x01
    3f3c:	a2 81       	ldd	r26, Z+2	; 0x02
    3f3e:	b3 81       	ldd	r27, Z+3	; 0x03
    3f40:	89 83       	std	Y+1, r24	; 0x01
    3f42:	9a 83       	std	Y+2, r25	; 0x02
    3f44:	ab 83       	std	Y+3, r26	; 0x03
    3f46:	bc 83       	std	Y+4, r27	; 0x04
    3f48:	04 c0       	rjmp	.+8      	; 0x3f52 <prvGetNextExpireTime+0x64>
    3f4a:	19 82       	std	Y+1, r1	; 0x01
    3f4c:	1a 82       	std	Y+2, r1	; 0x02
    3f4e:	1b 82       	std	Y+3, r1	; 0x03
    3f50:	1c 82       	std	Y+4, r1	; 0x04
    3f52:	89 81       	ldd	r24, Y+1	; 0x01
    3f54:	9a 81       	ldd	r25, Y+2	; 0x02
    3f56:	ab 81       	ldd	r26, Y+3	; 0x03
    3f58:	bc 81       	ldd	r27, Y+4	; 0x04
    3f5a:	bc 01       	movw	r22, r24
    3f5c:	cd 01       	movw	r24, r26
    3f5e:	26 96       	adiw	r28, 0x06	; 6
    3f60:	cd bf       	out	0x3d, r28	; 61
    3f62:	de bf       	out	0x3e, r29	; 62
    3f64:	df 91       	pop	r29
    3f66:	cf 91       	pop	r28
    3f68:	08 95       	ret

00003f6a <prvSampleTimeNow>:
    3f6a:	cf 93       	push	r28
    3f6c:	df 93       	push	r29
    3f6e:	00 d0       	rcall	.+0      	; 0x3f70 <prvSampleTimeNow+0x6>
    3f70:	00 d0       	rcall	.+0      	; 0x3f72 <prvSampleTimeNow+0x8>
    3f72:	cd b7       	in	r28, 0x3d	; 61
    3f74:	de b7       	in	r29, 0x3e	; 62
    3f76:	8d 83       	std	Y+5, r24	; 0x05
    3f78:	9e 83       	std	Y+6, r25	; 0x06
    3f7a:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <xTaskGetTickCount>
    3f7e:	dc 01       	movw	r26, r24
    3f80:	cb 01       	movw	r24, r22
    3f82:	89 83       	std	Y+1, r24	; 0x01
    3f84:	9a 83       	std	Y+2, r25	; 0x02
    3f86:	ab 83       	std	Y+3, r26	; 0x03
    3f88:	bc 83       	std	Y+4, r27	; 0x04
    3f8a:	80 91 b4 2c 	lds	r24, 0x2CB4	; 0x802cb4 <xLastTime.4745>
    3f8e:	90 91 b5 2c 	lds	r25, 0x2CB5	; 0x802cb5 <xLastTime.4745+0x1>
    3f92:	a0 91 b6 2c 	lds	r26, 0x2CB6	; 0x802cb6 <xLastTime.4745+0x2>
    3f96:	b0 91 b7 2c 	lds	r27, 0x2CB7	; 0x802cb7 <xLastTime.4745+0x3>
    3f9a:	29 81       	ldd	r18, Y+1	; 0x01
    3f9c:	3a 81       	ldd	r19, Y+2	; 0x02
    3f9e:	4b 81       	ldd	r20, Y+3	; 0x03
    3fa0:	5c 81       	ldd	r21, Y+4	; 0x04
    3fa2:	28 17       	cp	r18, r24
    3fa4:	39 07       	cpc	r19, r25
    3fa6:	4a 07       	cpc	r20, r26
    3fa8:	5b 07       	cpc	r21, r27
    3faa:	40 f4       	brcc	.+16     	; 0x3fbc <prvSampleTimeNow+0x52>
    3fac:	0e 94 9d 21 	call	0x433a	; 0x433a <prvSwitchTimerLists>
    3fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    3fb4:	21 e0       	ldi	r18, 0x01	; 1
    3fb6:	fc 01       	movw	r30, r24
    3fb8:	20 83       	st	Z, r18
    3fba:	04 c0       	rjmp	.+8      	; 0x3fc4 <prvSampleTimeNow+0x5a>
    3fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    3fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    3fc0:	fc 01       	movw	r30, r24
    3fc2:	10 82       	st	Z, r1
    3fc4:	89 81       	ldd	r24, Y+1	; 0x01
    3fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fc8:	ab 81       	ldd	r26, Y+3	; 0x03
    3fca:	bc 81       	ldd	r27, Y+4	; 0x04
    3fcc:	80 93 b4 2c 	sts	0x2CB4, r24	; 0x802cb4 <xLastTime.4745>
    3fd0:	90 93 b5 2c 	sts	0x2CB5, r25	; 0x802cb5 <xLastTime.4745+0x1>
    3fd4:	a0 93 b6 2c 	sts	0x2CB6, r26	; 0x802cb6 <xLastTime.4745+0x2>
    3fd8:	b0 93 b7 2c 	sts	0x2CB7, r27	; 0x802cb7 <xLastTime.4745+0x3>
    3fdc:	89 81       	ldd	r24, Y+1	; 0x01
    3fde:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe0:	ab 81       	ldd	r26, Y+3	; 0x03
    3fe2:	bc 81       	ldd	r27, Y+4	; 0x04
    3fe4:	bc 01       	movw	r22, r24
    3fe6:	cd 01       	movw	r24, r26
    3fe8:	26 96       	adiw	r28, 0x06	; 6
    3fea:	cd bf       	out	0x3d, r28	; 61
    3fec:	de bf       	out	0x3e, r29	; 62
    3fee:	df 91       	pop	r29
    3ff0:	cf 91       	pop	r28
    3ff2:	08 95       	ret

00003ff4 <prvInsertTimerInActiveList>:
    3ff4:	cf 92       	push	r12
    3ff6:	df 92       	push	r13
    3ff8:	ef 92       	push	r14
    3ffa:	ff 92       	push	r15
    3ffc:	0f 93       	push	r16
    3ffe:	1f 93       	push	r17
    4000:	cf 93       	push	r28
    4002:	df 93       	push	r29
    4004:	cd b7       	in	r28, 0x3d	; 61
    4006:	de b7       	in	r29, 0x3e	; 62
    4008:	2f 97       	sbiw	r28, 0x0f	; 15
    400a:	cd bf       	out	0x3d, r28	; 61
    400c:	de bf       	out	0x3e, r29	; 62
    400e:	8a 83       	std	Y+2, r24	; 0x02
    4010:	9b 83       	std	Y+3, r25	; 0x03
    4012:	4c 83       	std	Y+4, r20	; 0x04
    4014:	5d 83       	std	Y+5, r21	; 0x05
    4016:	6e 83       	std	Y+6, r22	; 0x06
    4018:	7f 83       	std	Y+7, r23	; 0x07
    401a:	08 87       	std	Y+8, r16	; 0x08
    401c:	19 87       	std	Y+9, r17	; 0x09
    401e:	2a 87       	std	Y+10, r18	; 0x0a
    4020:	3b 87       	std	Y+11, r19	; 0x0b
    4022:	cc 86       	std	Y+12, r12	; 0x0c
    4024:	dd 86       	std	Y+13, r13	; 0x0d
    4026:	ee 86       	std	Y+14, r14	; 0x0e
    4028:	ff 86       	std	Y+15, r15	; 0x0f
    402a:	19 82       	std	Y+1, r1	; 0x01
    402c:	2a 81       	ldd	r18, Y+2	; 0x02
    402e:	3b 81       	ldd	r19, Y+3	; 0x03
    4030:	8c 81       	ldd	r24, Y+4	; 0x04
    4032:	9d 81       	ldd	r25, Y+5	; 0x05
    4034:	ae 81       	ldd	r26, Y+6	; 0x06
    4036:	bf 81       	ldd	r27, Y+7	; 0x07
    4038:	f9 01       	movw	r30, r18
    403a:	82 83       	std	Z+2, r24	; 0x02
    403c:	93 83       	std	Z+3, r25	; 0x03
    403e:	a4 83       	std	Z+4, r26	; 0x04
    4040:	b5 83       	std	Z+5, r27	; 0x05
    4042:	8a 81       	ldd	r24, Y+2	; 0x02
    4044:	9b 81       	ldd	r25, Y+3	; 0x03
    4046:	2a 81       	ldd	r18, Y+2	; 0x02
    4048:	3b 81       	ldd	r19, Y+3	; 0x03
    404a:	fc 01       	movw	r30, r24
    404c:	22 87       	std	Z+10, r18	; 0x0a
    404e:	33 87       	std	Z+11, r19	; 0x0b
    4050:	2c 81       	ldd	r18, Y+4	; 0x04
    4052:	3d 81       	ldd	r19, Y+5	; 0x05
    4054:	4e 81       	ldd	r20, Y+6	; 0x06
    4056:	5f 81       	ldd	r21, Y+7	; 0x07
    4058:	88 85       	ldd	r24, Y+8	; 0x08
    405a:	99 85       	ldd	r25, Y+9	; 0x09
    405c:	aa 85       	ldd	r26, Y+10	; 0x0a
    405e:	bb 85       	ldd	r27, Y+11	; 0x0b
    4060:	82 17       	cp	r24, r18
    4062:	93 07       	cpc	r25, r19
    4064:	a4 07       	cpc	r26, r20
    4066:	b5 07       	cpc	r27, r21
    4068:	40 f1       	brcs	.+80     	; 0x40ba <__stack+0xbb>
    406a:	28 85       	ldd	r18, Y+8	; 0x08
    406c:	39 85       	ldd	r19, Y+9	; 0x09
    406e:	4a 85       	ldd	r20, Y+10	; 0x0a
    4070:	5b 85       	ldd	r21, Y+11	; 0x0b
    4072:	8c 85       	ldd	r24, Y+12	; 0x0c
    4074:	9d 85       	ldd	r25, Y+13	; 0x0d
    4076:	ae 85       	ldd	r26, Y+14	; 0x0e
    4078:	bf 85       	ldd	r27, Y+15	; 0x0f
    407a:	28 1b       	sub	r18, r24
    407c:	39 0b       	sbc	r19, r25
    407e:	4a 0b       	sbc	r20, r26
    4080:	5b 0b       	sbc	r21, r27
    4082:	8a 81       	ldd	r24, Y+2	; 0x02
    4084:	9b 81       	ldd	r25, Y+3	; 0x03
    4086:	fc 01       	movw	r30, r24
    4088:	86 85       	ldd	r24, Z+14	; 0x0e
    408a:	97 85       	ldd	r25, Z+15	; 0x0f
    408c:	a0 89       	ldd	r26, Z+16	; 0x10
    408e:	b1 89       	ldd	r27, Z+17	; 0x11
    4090:	28 17       	cp	r18, r24
    4092:	39 07       	cpc	r19, r25
    4094:	4a 07       	cpc	r20, r26
    4096:	5b 07       	cpc	r21, r27
    4098:	18 f0       	brcs	.+6      	; 0x40a0 <__stack+0xa1>
    409a:	81 e0       	ldi	r24, 0x01	; 1
    409c:	89 83       	std	Y+1, r24	; 0x01
    409e:	36 c0       	rjmp	.+108    	; 0x410c <__stack+0x10d>
    40a0:	8a 81       	ldd	r24, Y+2	; 0x02
    40a2:	9b 81       	ldd	r25, Y+3	; 0x03
    40a4:	9c 01       	movw	r18, r24
    40a6:	2e 5f       	subi	r18, 0xFE	; 254
    40a8:	3f 4f       	sbci	r19, 0xFF	; 255
    40aa:	80 91 ae 2c 	lds	r24, 0x2CAE	; 0x802cae <pxOverflowTimerList>
    40ae:	90 91 af 2c 	lds	r25, 0x2CAF	; 0x802caf <pxOverflowTimerList+0x1>
    40b2:	b9 01       	movw	r22, r18
    40b4:	0e 94 c4 08 	call	0x1188	; 0x1188 <vListInsert>
    40b8:	29 c0       	rjmp	.+82     	; 0x410c <__stack+0x10d>
    40ba:	28 85       	ldd	r18, Y+8	; 0x08
    40bc:	39 85       	ldd	r19, Y+9	; 0x09
    40be:	4a 85       	ldd	r20, Y+10	; 0x0a
    40c0:	5b 85       	ldd	r21, Y+11	; 0x0b
    40c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    40c4:	9d 85       	ldd	r25, Y+13	; 0x0d
    40c6:	ae 85       	ldd	r26, Y+14	; 0x0e
    40c8:	bf 85       	ldd	r27, Y+15	; 0x0f
    40ca:	28 17       	cp	r18, r24
    40cc:	39 07       	cpc	r19, r25
    40ce:	4a 07       	cpc	r20, r26
    40d0:	5b 07       	cpc	r21, r27
    40d2:	80 f4       	brcc	.+32     	; 0x40f4 <__stack+0xf5>
    40d4:	2c 81       	ldd	r18, Y+4	; 0x04
    40d6:	3d 81       	ldd	r19, Y+5	; 0x05
    40d8:	4e 81       	ldd	r20, Y+6	; 0x06
    40da:	5f 81       	ldd	r21, Y+7	; 0x07
    40dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    40de:	9d 85       	ldd	r25, Y+13	; 0x0d
    40e0:	ae 85       	ldd	r26, Y+14	; 0x0e
    40e2:	bf 85       	ldd	r27, Y+15	; 0x0f
    40e4:	28 17       	cp	r18, r24
    40e6:	39 07       	cpc	r19, r25
    40e8:	4a 07       	cpc	r20, r26
    40ea:	5b 07       	cpc	r21, r27
    40ec:	18 f0       	brcs	.+6      	; 0x40f4 <__stack+0xf5>
    40ee:	81 e0       	ldi	r24, 0x01	; 1
    40f0:	89 83       	std	Y+1, r24	; 0x01
    40f2:	0c c0       	rjmp	.+24     	; 0x410c <__stack+0x10d>
    40f4:	8a 81       	ldd	r24, Y+2	; 0x02
    40f6:	9b 81       	ldd	r25, Y+3	; 0x03
    40f8:	9c 01       	movw	r18, r24
    40fa:	2e 5f       	subi	r18, 0xFE	; 254
    40fc:	3f 4f       	sbci	r19, 0xFF	; 255
    40fe:	80 91 ac 2c 	lds	r24, 0x2CAC	; 0x802cac <pxCurrentTimerList>
    4102:	90 91 ad 2c 	lds	r25, 0x2CAD	; 0x802cad <pxCurrentTimerList+0x1>
    4106:	b9 01       	movw	r22, r18
    4108:	0e 94 c4 08 	call	0x1188	; 0x1188 <vListInsert>
    410c:	89 81       	ldd	r24, Y+1	; 0x01
    410e:	2f 96       	adiw	r28, 0x0f	; 15
    4110:	cd bf       	out	0x3d, r28	; 61
    4112:	de bf       	out	0x3e, r29	; 62
    4114:	df 91       	pop	r29
    4116:	cf 91       	pop	r28
    4118:	1f 91       	pop	r17
    411a:	0f 91       	pop	r16
    411c:	ff 90       	pop	r15
    411e:	ef 90       	pop	r14
    4120:	df 90       	pop	r13
    4122:	cf 90       	pop	r12
    4124:	08 95       	ret

00004126 <prvProcessReceivedCommands>:
    4126:	cf 92       	push	r12
    4128:	df 92       	push	r13
    412a:	ef 92       	push	r14
    412c:	ff 92       	push	r15
    412e:	0f 93       	push	r16
    4130:	1f 93       	push	r17
    4132:	cf 93       	push	r28
    4134:	df 93       	push	r29
    4136:	cd b7       	in	r28, 0x3d	; 61
    4138:	de b7       	in	r29, 0x3e	; 62
    413a:	65 97       	sbiw	r28, 0x15	; 21
    413c:	cd bf       	out	0x3d, r28	; 61
    413e:	de bf       	out	0x3e, r29	; 62
    4140:	e0 c0       	rjmp	.+448    	; 0x4302 <prvProcessReceivedCommands+0x1dc>
    4142:	8a 85       	ldd	r24, Y+10	; 0x0a
    4144:	88 23       	and	r24, r24
    4146:	fc f4       	brge	.+62     	; 0x4186 <prvProcessReceivedCommands+0x60>
    4148:	ce 01       	movw	r24, r28
    414a:	0a 96       	adiw	r24, 0x0a	; 10
    414c:	01 96       	adiw	r24, 0x01	; 1
    414e:	89 83       	std	Y+1, r24	; 0x01
    4150:	9a 83       	std	Y+2, r25	; 0x02
    4152:	89 81       	ldd	r24, Y+1	; 0x01
    4154:	9a 81       	ldd	r25, Y+2	; 0x02
    4156:	fc 01       	movw	r30, r24
    4158:	20 81       	ld	r18, Z
    415a:	31 81       	ldd	r19, Z+1	; 0x01
    415c:	89 81       	ldd	r24, Y+1	; 0x01
    415e:	9a 81       	ldd	r25, Y+2	; 0x02
    4160:	fc 01       	movw	r30, r24
    4162:	84 81       	ldd	r24, Z+4	; 0x04
    4164:	95 81       	ldd	r25, Z+5	; 0x05
    4166:	a6 81       	ldd	r26, Z+6	; 0x06
    4168:	b7 81       	ldd	r27, Z+7	; 0x07
    416a:	49 81       	ldd	r20, Y+1	; 0x01
    416c:	5a 81       	ldd	r21, Y+2	; 0x02
    416e:	fa 01       	movw	r30, r20
    4170:	02 80       	ldd	r0, Z+2	; 0x02
    4172:	f3 81       	ldd	r31, Z+3	; 0x03
    4174:	e0 2d       	mov	r30, r0
    4176:	ec 8b       	std	Y+20, r30	; 0x14
    4178:	fd 8b       	std	Y+21, r31	; 0x15
    417a:	ac 01       	movw	r20, r24
    417c:	bd 01       	movw	r22, r26
    417e:	8c 89       	ldd	r24, Y+20	; 0x14
    4180:	9d 89       	ldd	r25, Y+21	; 0x15
    4182:	f9 01       	movw	r30, r18
    4184:	19 95       	eicall
    4186:	8a 85       	ldd	r24, Y+10	; 0x0a
    4188:	88 23       	and	r24, r24
    418a:	0c f4       	brge	.+2      	; 0x418e <prvProcessReceivedCommands+0x68>
    418c:	ba c0       	rjmp	.+372    	; 0x4302 <prvProcessReceivedCommands+0x1dc>
    418e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4190:	98 89       	ldd	r25, Y+16	; 0x10
    4192:	8b 83       	std	Y+3, r24	; 0x03
    4194:	9c 83       	std	Y+4, r25	; 0x04
    4196:	8b 81       	ldd	r24, Y+3	; 0x03
    4198:	9c 81       	ldd	r25, Y+4	; 0x04
    419a:	fc 01       	movw	r30, r24
    419c:	84 85       	ldd	r24, Z+12	; 0x0c
    419e:	95 85       	ldd	r25, Z+13	; 0x0d
    41a0:	89 2b       	or	r24, r25
    41a2:	29 f0       	breq	.+10     	; 0x41ae <prvProcessReceivedCommands+0x88>
    41a4:	8b 81       	ldd	r24, Y+3	; 0x03
    41a6:	9c 81       	ldd	r25, Y+4	; 0x04
    41a8:	02 96       	adiw	r24, 0x02	; 2
    41aa:	0e 94 45 09 	call	0x128a	; 0x128a <uxListRemove>
    41ae:	ce 01       	movw	r24, r28
    41b0:	43 96       	adiw	r24, 0x13	; 19
    41b2:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <prvSampleTimeNow>
    41b6:	dc 01       	movw	r26, r24
    41b8:	cb 01       	movw	r24, r22
    41ba:	8d 83       	std	Y+5, r24	; 0x05
    41bc:	9e 83       	std	Y+6, r25	; 0x06
    41be:	af 83       	std	Y+7, r26	; 0x07
    41c0:	b8 87       	std	Y+8, r27	; 0x08
    41c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    41c4:	08 2e       	mov	r0, r24
    41c6:	00 0c       	add	r0, r0
    41c8:	99 0b       	sbc	r25, r25
    41ca:	09 2e       	mov	r0, r25
    41cc:	00 0c       	add	r0, r0
    41ce:	aa 0b       	sbc	r26, r26
    41d0:	bb 0b       	sbc	r27, r27
    41d2:	40 e0       	ldi	r20, 0x00	; 0
    41d4:	50 e0       	ldi	r21, 0x00	; 0
    41d6:	29 e0       	ldi	r18, 0x09	; 9
    41d8:	30 e0       	ldi	r19, 0x00	; 0
    41da:	84 1b       	sub	r24, r20
    41dc:	95 0b       	sbc	r25, r21
    41de:	28 17       	cp	r18, r24
    41e0:	39 07       	cpc	r19, r25
    41e2:	08 f4       	brcc	.+2      	; 0x41e6 <prvProcessReceivedCommands+0xc0>
    41e4:	8d c0       	rjmp	.+282    	; 0x4300 <prvProcessReceivedCommands+0x1da>
    41e6:	fc 01       	movw	r30, r24
    41e8:	88 27       	eor	r24, r24
    41ea:	e2 50       	subi	r30, 0x02	; 2
    41ec:	ff 4f       	sbci	r31, 0xFF	; 255
    41ee:	8f 4f       	sbci	r24, 0xFF	; 255
    41f0:	0c 94 48 3a 	jmp	0x7490	; 0x7490 <__tablejump2__>
    41f4:	eb 84       	ldd	r14, Y+11	; 0x0b
    41f6:	fc 84       	ldd	r15, Y+12	; 0x0c
    41f8:	0d 85       	ldd	r16, Y+13	; 0x0d
    41fa:	1e 85       	ldd	r17, Y+14	; 0x0e
    41fc:	2b 85       	ldd	r18, Y+11	; 0x0b
    41fe:	3c 85       	ldd	r19, Y+12	; 0x0c
    4200:	4d 85       	ldd	r20, Y+13	; 0x0d
    4202:	5e 85       	ldd	r21, Y+14	; 0x0e
    4204:	8b 81       	ldd	r24, Y+3	; 0x03
    4206:	9c 81       	ldd	r25, Y+4	; 0x04
    4208:	fc 01       	movw	r30, r24
    420a:	86 85       	ldd	r24, Z+14	; 0x0e
    420c:	97 85       	ldd	r25, Z+15	; 0x0f
    420e:	a0 89       	ldd	r26, Z+16	; 0x10
    4210:	b1 89       	ldd	r27, Z+17	; 0x11
    4212:	82 0f       	add	r24, r18
    4214:	93 1f       	adc	r25, r19
    4216:	a4 1f       	adc	r26, r20
    4218:	b5 1f       	adc	r27, r21
    421a:	2d 81       	ldd	r18, Y+5	; 0x05
    421c:	3e 81       	ldd	r19, Y+6	; 0x06
    421e:	4f 81       	ldd	r20, Y+7	; 0x07
    4220:	58 85       	ldd	r21, Y+8	; 0x08
    4222:	eb 81       	ldd	r30, Y+3	; 0x03
    4224:	fc 81       	ldd	r31, Y+4	; 0x04
    4226:	67 01       	movw	r12, r14
    4228:	78 01       	movw	r14, r16
    422a:	89 01       	movw	r16, r18
    422c:	9a 01       	movw	r18, r20
    422e:	ac 01       	movw	r20, r24
    4230:	bd 01       	movw	r22, r26
    4232:	cf 01       	movw	r24, r30
    4234:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <prvInsertTimerInActiveList>
    4238:	88 23       	and	r24, r24
    423a:	09 f4       	brne	.+2      	; 0x423e <prvProcessReceivedCommands+0x118>
    423c:	62 c0       	rjmp	.+196    	; 0x4302 <prvProcessReceivedCommands+0x1dc>
    423e:	8b 81       	ldd	r24, Y+3	; 0x03
    4240:	9c 81       	ldd	r25, Y+4	; 0x04
    4242:	fc 01       	movw	r30, r24
    4244:	25 89       	ldd	r18, Z+21	; 0x15
    4246:	36 89       	ldd	r19, Z+22	; 0x16
    4248:	8b 81       	ldd	r24, Y+3	; 0x03
    424a:	9c 81       	ldd	r25, Y+4	; 0x04
    424c:	f9 01       	movw	r30, r18
    424e:	19 95       	eicall
    4250:	8b 81       	ldd	r24, Y+3	; 0x03
    4252:	9c 81       	ldd	r25, Y+4	; 0x04
    4254:	fc 01       	movw	r30, r24
    4256:	82 89       	ldd	r24, Z+18	; 0x12
    4258:	81 30       	cpi	r24, 0x01	; 1
    425a:	09 f0       	breq	.+2      	; 0x425e <prvProcessReceivedCommands+0x138>
    425c:	52 c0       	rjmp	.+164    	; 0x4302 <prvProcessReceivedCommands+0x1dc>
    425e:	2b 85       	ldd	r18, Y+11	; 0x0b
    4260:	3c 85       	ldd	r19, Y+12	; 0x0c
    4262:	4d 85       	ldd	r20, Y+13	; 0x0d
    4264:	5e 85       	ldd	r21, Y+14	; 0x0e
    4266:	8b 81       	ldd	r24, Y+3	; 0x03
    4268:	9c 81       	ldd	r25, Y+4	; 0x04
    426a:	fc 01       	movw	r30, r24
    426c:	86 85       	ldd	r24, Z+14	; 0x0e
    426e:	97 85       	ldd	r25, Z+15	; 0x0f
    4270:	a0 89       	ldd	r26, Z+16	; 0x10
    4272:	b1 89       	ldd	r27, Z+17	; 0x11
    4274:	82 0f       	add	r24, r18
    4276:	93 1f       	adc	r25, r19
    4278:	a4 1f       	adc	r26, r20
    427a:	b5 1f       	adc	r27, r21
    427c:	eb 81       	ldd	r30, Y+3	; 0x03
    427e:	fc 81       	ldd	r31, Y+4	; 0x04
    4280:	c1 2c       	mov	r12, r1
    4282:	d1 2c       	mov	r13, r1
    4284:	76 01       	movw	r14, r12
    4286:	00 e0       	ldi	r16, 0x00	; 0
    4288:	10 e0       	ldi	r17, 0x00	; 0
    428a:	9c 01       	movw	r18, r24
    428c:	ad 01       	movw	r20, r26
    428e:	60 e0       	ldi	r22, 0x00	; 0
    4290:	cf 01       	movw	r24, r30
    4292:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <xTimerGenericCommand>
    4296:	89 87       	std	Y+9, r24	; 0x09
    4298:	34 c0       	rjmp	.+104    	; 0x4302 <prvProcessReceivedCommands+0x1dc>
    429a:	8b 85       	ldd	r24, Y+11	; 0x0b
    429c:	9c 85       	ldd	r25, Y+12	; 0x0c
    429e:	ad 85       	ldd	r26, Y+13	; 0x0d
    42a0:	be 85       	ldd	r27, Y+14	; 0x0e
    42a2:	2b 81       	ldd	r18, Y+3	; 0x03
    42a4:	3c 81       	ldd	r19, Y+4	; 0x04
    42a6:	f9 01       	movw	r30, r18
    42a8:	86 87       	std	Z+14, r24	; 0x0e
    42aa:	97 87       	std	Z+15, r25	; 0x0f
    42ac:	a0 8b       	std	Z+16, r26	; 0x10
    42ae:	b1 8b       	std	Z+17, r27	; 0x11
    42b0:	8b 81       	ldd	r24, Y+3	; 0x03
    42b2:	9c 81       	ldd	r25, Y+4	; 0x04
    42b4:	fc 01       	movw	r30, r24
    42b6:	26 85       	ldd	r18, Z+14	; 0x0e
    42b8:	37 85       	ldd	r19, Z+15	; 0x0f
    42ba:	40 89       	ldd	r20, Z+16	; 0x10
    42bc:	51 89       	ldd	r21, Z+17	; 0x11
    42be:	8d 81       	ldd	r24, Y+5	; 0x05
    42c0:	9e 81       	ldd	r25, Y+6	; 0x06
    42c2:	af 81       	ldd	r26, Y+7	; 0x07
    42c4:	b8 85       	ldd	r27, Y+8	; 0x08
    42c6:	82 0f       	add	r24, r18
    42c8:	93 1f       	adc	r25, r19
    42ca:	a4 1f       	adc	r26, r20
    42cc:	b5 1f       	adc	r27, r21
    42ce:	ed 80       	ldd	r14, Y+5	; 0x05
    42d0:	fe 80       	ldd	r15, Y+6	; 0x06
    42d2:	0f 81       	ldd	r16, Y+7	; 0x07
    42d4:	18 85       	ldd	r17, Y+8	; 0x08
    42d6:	2d 81       	ldd	r18, Y+5	; 0x05
    42d8:	3e 81       	ldd	r19, Y+6	; 0x06
    42da:	4f 81       	ldd	r20, Y+7	; 0x07
    42dc:	58 85       	ldd	r21, Y+8	; 0x08
    42de:	eb 81       	ldd	r30, Y+3	; 0x03
    42e0:	fc 81       	ldd	r31, Y+4	; 0x04
    42e2:	67 01       	movw	r12, r14
    42e4:	78 01       	movw	r14, r16
    42e6:	89 01       	movw	r16, r18
    42e8:	9a 01       	movw	r18, r20
    42ea:	ac 01       	movw	r20, r24
    42ec:	bd 01       	movw	r22, r26
    42ee:	cf 01       	movw	r24, r30
    42f0:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <prvInsertTimerInActiveList>
    42f4:	06 c0       	rjmp	.+12     	; 0x4302 <prvProcessReceivedCommands+0x1dc>
    42f6:	8b 81       	ldd	r24, Y+3	; 0x03
    42f8:	9c 81       	ldd	r25, Y+4	; 0x04
    42fa:	0e 94 1e 08 	call	0x103c	; 0x103c <vPortFree>
    42fe:	01 c0       	rjmp	.+2      	; 0x4302 <prvProcessReceivedCommands+0x1dc>
    4300:	00 00       	nop
    4302:	80 91 b0 2c 	lds	r24, 0x2CB0	; 0x802cb0 <xTimerQueue>
    4306:	90 91 b1 2c 	lds	r25, 0x2CB1	; 0x802cb1 <xTimerQueue+0x1>
    430a:	be 01       	movw	r22, r28
    430c:	66 5f       	subi	r22, 0xF6	; 246
    430e:	7f 4f       	sbci	r23, 0xFF	; 255
    4310:	20 e0       	ldi	r18, 0x00	; 0
    4312:	30 e0       	ldi	r19, 0x00	; 0
    4314:	a9 01       	movw	r20, r18
    4316:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <xQueueReceive>
    431a:	88 23       	and	r24, r24
    431c:	09 f0       	breq	.+2      	; 0x4320 <prvProcessReceivedCommands+0x1fa>
    431e:	11 cf       	rjmp	.-478    	; 0x4142 <prvProcessReceivedCommands+0x1c>
    4320:	00 00       	nop
    4322:	65 96       	adiw	r28, 0x15	; 21
    4324:	cd bf       	out	0x3d, r28	; 61
    4326:	de bf       	out	0x3e, r29	; 62
    4328:	df 91       	pop	r29
    432a:	cf 91       	pop	r28
    432c:	1f 91       	pop	r17
    432e:	0f 91       	pop	r16
    4330:	ff 90       	pop	r15
    4332:	ef 90       	pop	r14
    4334:	df 90       	pop	r13
    4336:	cf 90       	pop	r12
    4338:	08 95       	ret

0000433a <prvSwitchTimerLists>:
    433a:	cf 92       	push	r12
    433c:	df 92       	push	r13
    433e:	ef 92       	push	r14
    4340:	ff 92       	push	r15
    4342:	0f 93       	push	r16
    4344:	1f 93       	push	r17
    4346:	cf 93       	push	r28
    4348:	df 93       	push	r29
    434a:	cd b7       	in	r28, 0x3d	; 61
    434c:	de b7       	in	r29, 0x3e	; 62
    434e:	2d 97       	sbiw	r28, 0x0d	; 13
    4350:	cd bf       	out	0x3d, r28	; 61
    4352:	de bf       	out	0x3e, r29	; 62
    4354:	82 c0       	rjmp	.+260    	; 0x445a <prvSwitchTimerLists+0x120>
    4356:	80 91 ac 2c 	lds	r24, 0x2CAC	; 0x802cac <pxCurrentTimerList>
    435a:	90 91 ad 2c 	lds	r25, 0x2CAD	; 0x802cad <pxCurrentTimerList+0x1>
    435e:	fc 01       	movw	r30, r24
    4360:	87 81       	ldd	r24, Z+7	; 0x07
    4362:	90 85       	ldd	r25, Z+8	; 0x08
    4364:	fc 01       	movw	r30, r24
    4366:	80 81       	ld	r24, Z
    4368:	91 81       	ldd	r25, Z+1	; 0x01
    436a:	a2 81       	ldd	r26, Z+2	; 0x02
    436c:	b3 81       	ldd	r27, Z+3	; 0x03
    436e:	89 83       	std	Y+1, r24	; 0x01
    4370:	9a 83       	std	Y+2, r25	; 0x02
    4372:	ab 83       	std	Y+3, r26	; 0x03
    4374:	bc 83       	std	Y+4, r27	; 0x04
    4376:	80 91 ac 2c 	lds	r24, 0x2CAC	; 0x802cac <pxCurrentTimerList>
    437a:	90 91 ad 2c 	lds	r25, 0x2CAD	; 0x802cad <pxCurrentTimerList+0x1>
    437e:	fc 01       	movw	r30, r24
    4380:	87 81       	ldd	r24, Z+7	; 0x07
    4382:	90 85       	ldd	r25, Z+8	; 0x08
    4384:	fc 01       	movw	r30, r24
    4386:	80 85       	ldd	r24, Z+8	; 0x08
    4388:	91 85       	ldd	r25, Z+9	; 0x09
    438a:	8d 83       	std	Y+5, r24	; 0x05
    438c:	9e 83       	std	Y+6, r25	; 0x06
    438e:	8d 81       	ldd	r24, Y+5	; 0x05
    4390:	9e 81       	ldd	r25, Y+6	; 0x06
    4392:	02 96       	adiw	r24, 0x02	; 2
    4394:	0e 94 45 09 	call	0x128a	; 0x128a <uxListRemove>
    4398:	8d 81       	ldd	r24, Y+5	; 0x05
    439a:	9e 81       	ldd	r25, Y+6	; 0x06
    439c:	fc 01       	movw	r30, r24
    439e:	25 89       	ldd	r18, Z+21	; 0x15
    43a0:	36 89       	ldd	r19, Z+22	; 0x16
    43a2:	8d 81       	ldd	r24, Y+5	; 0x05
    43a4:	9e 81       	ldd	r25, Y+6	; 0x06
    43a6:	f9 01       	movw	r30, r18
    43a8:	19 95       	eicall
    43aa:	8d 81       	ldd	r24, Y+5	; 0x05
    43ac:	9e 81       	ldd	r25, Y+6	; 0x06
    43ae:	fc 01       	movw	r30, r24
    43b0:	82 89       	ldd	r24, Z+18	; 0x12
    43b2:	81 30       	cpi	r24, 0x01	; 1
    43b4:	09 f0       	breq	.+2      	; 0x43b8 <prvSwitchTimerLists+0x7e>
    43b6:	51 c0       	rjmp	.+162    	; 0x445a <prvSwitchTimerLists+0x120>
    43b8:	8d 81       	ldd	r24, Y+5	; 0x05
    43ba:	9e 81       	ldd	r25, Y+6	; 0x06
    43bc:	fc 01       	movw	r30, r24
    43be:	26 85       	ldd	r18, Z+14	; 0x0e
    43c0:	37 85       	ldd	r19, Z+15	; 0x0f
    43c2:	40 89       	ldd	r20, Z+16	; 0x10
    43c4:	51 89       	ldd	r21, Z+17	; 0x11
    43c6:	89 81       	ldd	r24, Y+1	; 0x01
    43c8:	9a 81       	ldd	r25, Y+2	; 0x02
    43ca:	ab 81       	ldd	r26, Y+3	; 0x03
    43cc:	bc 81       	ldd	r27, Y+4	; 0x04
    43ce:	82 0f       	add	r24, r18
    43d0:	93 1f       	adc	r25, r19
    43d2:	a4 1f       	adc	r26, r20
    43d4:	b5 1f       	adc	r27, r21
    43d6:	8f 83       	std	Y+7, r24	; 0x07
    43d8:	98 87       	std	Y+8, r25	; 0x08
    43da:	a9 87       	std	Y+9, r26	; 0x09
    43dc:	ba 87       	std	Y+10, r27	; 0x0a
    43de:	2f 81       	ldd	r18, Y+7	; 0x07
    43e0:	38 85       	ldd	r19, Y+8	; 0x08
    43e2:	49 85       	ldd	r20, Y+9	; 0x09
    43e4:	5a 85       	ldd	r21, Y+10	; 0x0a
    43e6:	89 81       	ldd	r24, Y+1	; 0x01
    43e8:	9a 81       	ldd	r25, Y+2	; 0x02
    43ea:	ab 81       	ldd	r26, Y+3	; 0x03
    43ec:	bc 81       	ldd	r27, Y+4	; 0x04
    43ee:	82 17       	cp	r24, r18
    43f0:	93 07       	cpc	r25, r19
    43f2:	a4 07       	cpc	r26, r20
    43f4:	b5 07       	cpc	r27, r21
    43f6:	f8 f4       	brcc	.+62     	; 0x4436 <prvSwitchTimerLists+0xfc>
    43f8:	2d 81       	ldd	r18, Y+5	; 0x05
    43fa:	3e 81       	ldd	r19, Y+6	; 0x06
    43fc:	8f 81       	ldd	r24, Y+7	; 0x07
    43fe:	98 85       	ldd	r25, Y+8	; 0x08
    4400:	a9 85       	ldd	r26, Y+9	; 0x09
    4402:	ba 85       	ldd	r27, Y+10	; 0x0a
    4404:	f9 01       	movw	r30, r18
    4406:	82 83       	std	Z+2, r24	; 0x02
    4408:	93 83       	std	Z+3, r25	; 0x03
    440a:	a4 83       	std	Z+4, r26	; 0x04
    440c:	b5 83       	std	Z+5, r27	; 0x05
    440e:	8d 81       	ldd	r24, Y+5	; 0x05
    4410:	9e 81       	ldd	r25, Y+6	; 0x06
    4412:	2d 81       	ldd	r18, Y+5	; 0x05
    4414:	3e 81       	ldd	r19, Y+6	; 0x06
    4416:	fc 01       	movw	r30, r24
    4418:	22 87       	std	Z+10, r18	; 0x0a
    441a:	33 87       	std	Z+11, r19	; 0x0b
    441c:	8d 81       	ldd	r24, Y+5	; 0x05
    441e:	9e 81       	ldd	r25, Y+6	; 0x06
    4420:	9c 01       	movw	r18, r24
    4422:	2e 5f       	subi	r18, 0xFE	; 254
    4424:	3f 4f       	sbci	r19, 0xFF	; 255
    4426:	80 91 ac 2c 	lds	r24, 0x2CAC	; 0x802cac <pxCurrentTimerList>
    442a:	90 91 ad 2c 	lds	r25, 0x2CAD	; 0x802cad <pxCurrentTimerList+0x1>
    442e:	b9 01       	movw	r22, r18
    4430:	0e 94 c4 08 	call	0x1188	; 0x1188 <vListInsert>
    4434:	12 c0       	rjmp	.+36     	; 0x445a <prvSwitchTimerLists+0x120>
    4436:	89 81       	ldd	r24, Y+1	; 0x01
    4438:	9a 81       	ldd	r25, Y+2	; 0x02
    443a:	ab 81       	ldd	r26, Y+3	; 0x03
    443c:	bc 81       	ldd	r27, Y+4	; 0x04
    443e:	ed 81       	ldd	r30, Y+5	; 0x05
    4440:	fe 81       	ldd	r31, Y+6	; 0x06
    4442:	c1 2c       	mov	r12, r1
    4444:	d1 2c       	mov	r13, r1
    4446:	76 01       	movw	r14, r12
    4448:	00 e0       	ldi	r16, 0x00	; 0
    444a:	10 e0       	ldi	r17, 0x00	; 0
    444c:	9c 01       	movw	r18, r24
    444e:	ad 01       	movw	r20, r26
    4450:	60 e0       	ldi	r22, 0x00	; 0
    4452:	cf 01       	movw	r24, r30
    4454:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <xTimerGenericCommand>
    4458:	8b 87       	std	Y+11, r24	; 0x0b
    445a:	80 91 ac 2c 	lds	r24, 0x2CAC	; 0x802cac <pxCurrentTimerList>
    445e:	90 91 ad 2c 	lds	r25, 0x2CAD	; 0x802cad <pxCurrentTimerList+0x1>
    4462:	fc 01       	movw	r30, r24
    4464:	80 81       	ld	r24, Z
    4466:	88 23       	and	r24, r24
    4468:	09 f0       	breq	.+2      	; 0x446c <prvSwitchTimerLists+0x132>
    446a:	75 cf       	rjmp	.-278    	; 0x4356 <prvSwitchTimerLists+0x1c>
    446c:	80 91 ac 2c 	lds	r24, 0x2CAC	; 0x802cac <pxCurrentTimerList>
    4470:	90 91 ad 2c 	lds	r25, 0x2CAD	; 0x802cad <pxCurrentTimerList+0x1>
    4474:	8c 87       	std	Y+12, r24	; 0x0c
    4476:	9d 87       	std	Y+13, r25	; 0x0d
    4478:	80 91 ae 2c 	lds	r24, 0x2CAE	; 0x802cae <pxOverflowTimerList>
    447c:	90 91 af 2c 	lds	r25, 0x2CAF	; 0x802caf <pxOverflowTimerList+0x1>
    4480:	80 93 ac 2c 	sts	0x2CAC, r24	; 0x802cac <pxCurrentTimerList>
    4484:	90 93 ad 2c 	sts	0x2CAD, r25	; 0x802cad <pxCurrentTimerList+0x1>
    4488:	8c 85       	ldd	r24, Y+12	; 0x0c
    448a:	9d 85       	ldd	r25, Y+13	; 0x0d
    448c:	80 93 ae 2c 	sts	0x2CAE, r24	; 0x802cae <pxOverflowTimerList>
    4490:	90 93 af 2c 	sts	0x2CAF, r25	; 0x802caf <pxOverflowTimerList+0x1>
    4494:	00 00       	nop
    4496:	2d 96       	adiw	r28, 0x0d	; 13
    4498:	cd bf       	out	0x3d, r28	; 61
    449a:	de bf       	out	0x3e, r29	; 62
    449c:	df 91       	pop	r29
    449e:	cf 91       	pop	r28
    44a0:	1f 91       	pop	r17
    44a2:	0f 91       	pop	r16
    44a4:	ff 90       	pop	r15
    44a6:	ef 90       	pop	r14
    44a8:	df 90       	pop	r13
    44aa:	cf 90       	pop	r12
    44ac:	08 95       	ret

000044ae <prvCheckForValidListAndQueue>:
    44ae:	cf 93       	push	r28
    44b0:	df 93       	push	r29
    44b2:	cd b7       	in	r28, 0x3d	; 61
    44b4:	de b7       	in	r29, 0x3e	; 62
    44b6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    44ba:	ff 93       	push	r31
    44bc:	f8 7f       	andi	r31, 0xF8	; 248
    44be:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    44c2:	80 91 b0 2c 	lds	r24, 0x2CB0	; 0x802cb0 <xTimerQueue>
    44c6:	90 91 b1 2c 	lds	r25, 0x2CB1	; 0x802cb1 <xTimerQueue+0x1>
    44ca:	89 2b       	or	r24, r25
    44cc:	e9 f4       	brne	.+58     	; 0x4508 <prvCheckForValidListAndQueue+0x5a>
    44ce:	86 e9       	ldi	r24, 0x96	; 150
    44d0:	9c e2       	ldi	r25, 0x2C	; 44
    44d2:	0e 94 2c 08 	call	0x1058	; 0x1058 <vListInitialise>
    44d6:	81 ea       	ldi	r24, 0xA1	; 161
    44d8:	9c e2       	ldi	r25, 0x2C	; 44
    44da:	0e 94 2c 08 	call	0x1058	; 0x1058 <vListInitialise>
    44de:	86 e9       	ldi	r24, 0x96	; 150
    44e0:	9c e2       	ldi	r25, 0x2C	; 44
    44e2:	80 93 ac 2c 	sts	0x2CAC, r24	; 0x802cac <pxCurrentTimerList>
    44e6:	90 93 ad 2c 	sts	0x2CAD, r25	; 0x802cad <pxCurrentTimerList+0x1>
    44ea:	81 ea       	ldi	r24, 0xA1	; 161
    44ec:	9c e2       	ldi	r25, 0x2C	; 44
    44ee:	80 93 ae 2c 	sts	0x2CAE, r24	; 0x802cae <pxOverflowTimerList>
    44f2:	90 93 af 2c 	sts	0x2CAF, r25	; 0x802caf <pxOverflowTimerList+0x1>
    44f6:	40 e0       	ldi	r20, 0x00	; 0
    44f8:	69 e0       	ldi	r22, 0x09	; 9
    44fa:	85 e0       	ldi	r24, 0x05	; 5
    44fc:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <xQueueGenericCreate>
    4500:	80 93 b0 2c 	sts	0x2CB0, r24	; 0x802cb0 <xTimerQueue>
    4504:	90 93 b1 2c 	sts	0x2CB1, r25	; 0x802cb1 <xTimerQueue+0x1>
    4508:	ff 91       	pop	r31
    450a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    450e:	00 00       	nop
    4510:	df 91       	pop	r29
    4512:	cf 91       	pop	r28
    4514:	08 95       	ret

00004516 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    4516:	0f 93       	push	r16
    4518:	1f 93       	push	r17
    451a:	cf 93       	push	r28
    451c:	df 93       	push	r29
    451e:	cd b7       	in	r28, 0x3d	; 61
    4520:	de b7       	in	r29, 0x3e	; 62
    4522:	64 97       	sbiw	r28, 0x14	; 20
    4524:	cd bf       	out	0x3d, r28	; 61
    4526:	de bf       	out	0x3e, r29	; 62
    4528:	8b 87       	std	Y+11, r24	; 0x0b
    452a:	9c 87       	std	Y+12, r25	; 0x0c
    452c:	6d 87       	std	Y+13, r22	; 0x0d
    452e:	7e 87       	std	Y+14, r23	; 0x0e
    4530:	2f 87       	std	Y+15, r18	; 0x0f
    4532:	38 8b       	std	Y+16, r19	; 0x10
    4534:	49 8b       	std	Y+17, r20	; 0x11
    4536:	5a 8b       	std	Y+18, r21	; 0x12
    4538:	0b 8b       	std	Y+19, r16	; 0x13
    453a:	1c 8b       	std	Y+20, r17	; 0x14
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    453c:	8e ef       	ldi	r24, 0xFE	; 254
    453e:	8a 83       	std	Y+2, r24	; 0x02
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    4540:	8b 85       	ldd	r24, Y+11	; 0x0b
    4542:	9c 85       	ldd	r25, Y+12	; 0x0c
    4544:	8b 83       	std	Y+3, r24	; 0x03
    4546:	9c 83       	std	Y+4, r25	; 0x04
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    4548:	8d 85       	ldd	r24, Y+13	; 0x0d
    454a:	9e 85       	ldd	r25, Y+14	; 0x0e
    454c:	8d 83       	std	Y+5, r24	; 0x05
    454e:	9e 83       	std	Y+6, r25	; 0x06
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    4550:	8f 85       	ldd	r24, Y+15	; 0x0f
    4552:	98 89       	ldd	r25, Y+16	; 0x10
    4554:	a9 89       	ldd	r26, Y+17	; 0x11
    4556:	ba 89       	ldd	r27, Y+18	; 0x12
    4558:	8f 83       	std	Y+7, r24	; 0x07
    455a:	98 87       	std	Y+8, r25	; 0x08
    455c:	a9 87       	std	Y+9, r26	; 0x09
    455e:	ba 87       	std	Y+10, r27	; 0x0a

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    4560:	80 91 b0 2c 	lds	r24, 0x2CB0	; 0x802cb0 <xTimerQueue>
    4564:	90 91 b1 2c 	lds	r25, 0x2CB1	; 0x802cb1 <xTimerQueue+0x1>
    4568:	4b 89       	ldd	r20, Y+19	; 0x13
    456a:	5c 89       	ldd	r21, Y+20	; 0x14
    456c:	be 01       	movw	r22, r28
    456e:	6e 5f       	subi	r22, 0xFE	; 254
    4570:	7f 4f       	sbci	r23, 0xFF	; 255
    4572:	20 e0       	ldi	r18, 0x00	; 0
    4574:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <xQueueGenericSendFromISR>
    4578:	89 83       	std	Y+1, r24	; 0x01

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
    457a:	89 81       	ldd	r24, Y+1	; 0x01
	}
    457c:	64 96       	adiw	r28, 0x14	; 20
    457e:	cd bf       	out	0x3d, r28	; 61
    4580:	de bf       	out	0x3e, r29	; 62
    4582:	df 91       	pop	r29
    4584:	cf 91       	pop	r28
    4586:	1f 91       	pop	r17
    4588:	0f 91       	pop	r16
    458a:	08 95       	ret

0000458c <vInitClock>:
#include "init.h"
#include "clksys_driver.h"


void vInitClock(void)
{
    458c:	cf 93       	push	r28
    458e:	df 93       	push	r29
    4590:	cd b7       	in	r28, 0x3d	; 61
    4592:	de b7       	in	r29, 0x3e	; 62
	CLKSYS_Enable( OSC_RC2MEN_bm );
    4594:	80 e5       	ldi	r24, 0x50	; 80
    4596:	90 e0       	ldi	r25, 0x00	; 0
    4598:	20 e5       	ldi	r18, 0x50	; 80
    459a:	30 e0       	ldi	r19, 0x00	; 0
    459c:	f9 01       	movw	r30, r18
    459e:	20 81       	ld	r18, Z
    45a0:	21 60       	ori	r18, 0x01	; 1
    45a2:	fc 01       	movw	r30, r24
    45a4:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    45a6:	80 e5       	ldi	r24, 0x50	; 80
    45a8:	90 e0       	ldi	r25, 0x00	; 0
    45aa:	fc 01       	movw	r30, r24
    45ac:	81 81       	ldd	r24, Z+1	; 0x01
    45ae:	88 2f       	mov	r24, r24
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	81 70       	andi	r24, 0x01	; 1
    45b4:	99 27       	eor	r25, r25
    45b6:	89 2b       	or	r24, r25
    45b8:	b1 f3       	breq	.-20     	; 0x45a6 <vInitClock+0x1a>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    45ba:	80 e0       	ldi	r24, 0x00	; 0
    45bc:	0e 94 dd 03 	call	0x7ba	; 0x7ba <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    45c0:	8e e1       	ldi	r24, 0x1E	; 30
    45c2:	0e 94 a6 03 	call	0x74c	; 0x74c <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    45c6:	60 e0       	ldi	r22, 0x00	; 0
    45c8:	80 e0       	ldi	r24, 0x00	; 0
    45ca:	0e 94 c6 03 	call	0x78c	; 0x78c <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    45ce:	43 e0       	ldi	r20, 0x03	; 3
    45d0:	60 e0       	ldi	r22, 0x00	; 0
    45d2:	80 e4       	ldi	r24, 0x40	; 64
    45d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    45d8:	80 e5       	ldi	r24, 0x50	; 80
    45da:	90 e0       	ldi	r25, 0x00	; 0
    45dc:	20 e5       	ldi	r18, 0x50	; 80
    45de:	30 e0       	ldi	r19, 0x00	; 0
    45e0:	f9 01       	movw	r30, r18
    45e2:	20 81       	ld	r18, Z
    45e4:	28 60       	ori	r18, 0x08	; 8
    45e6:	fc 01       	movw	r30, r24
    45e8:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    45ea:	80 e5       	ldi	r24, 0x50	; 80
    45ec:	90 e0       	ldi	r25, 0x00	; 0
    45ee:	fc 01       	movw	r30, r24
    45f0:	81 81       	ldd	r24, Z+1	; 0x01
    45f2:	88 2f       	mov	r24, r24
    45f4:	90 e0       	ldi	r25, 0x00	; 0
    45f6:	88 70       	andi	r24, 0x08	; 8
    45f8:	99 27       	eor	r25, r25
    45fa:	89 2b       	or	r24, r25
    45fc:	b1 f3       	breq	.-20     	; 0x45ea <vInitClock+0x5e>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    45fe:	64 e0       	ldi	r22, 0x04	; 4
    4600:	80 ec       	ldi	r24, 0xC0	; 192
    4602:	0e 94 8e 03 	call	0x71c	; 0x71c <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    4606:	80 e5       	ldi	r24, 0x50	; 80
    4608:	90 e0       	ldi	r25, 0x00	; 0
    460a:	20 e5       	ldi	r18, 0x50	; 80
    460c:	30 e0       	ldi	r19, 0x00	; 0
    460e:	f9 01       	movw	r30, r18
    4610:	20 81       	ld	r18, Z
    4612:	20 61       	ori	r18, 0x10	; 16
    4614:	fc 01       	movw	r30, r24
    4616:	20 83       	st	Z, r18
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    4618:	60 e0       	ldi	r22, 0x00	; 0
    461a:	80 e0       	ldi	r24, 0x00	; 0
    461c:	0e 94 c6 03 	call	0x78c	; 0x78c <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    4620:	80 e5       	ldi	r24, 0x50	; 80
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	fc 01       	movw	r30, r24
    4626:	81 81       	ldd	r24, Z+1	; 0x01
    4628:	88 2f       	mov	r24, r24
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	80 71       	andi	r24, 0x10	; 16
    462e:	99 27       	eor	r25, r25
    4630:	89 2b       	or	r24, r25
    4632:	b1 f3       	breq	.-20     	; 0x4620 <vInitClock+0x94>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    4634:	84 e0       	ldi	r24, 0x04	; 4
    4636:	0e 94 dd 03 	call	0x7ba	; 0x7ba <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    463a:	87 e0       	ldi	r24, 0x07	; 7
    463c:	0e 94 a6 03 	call	0x74c	; 0x74c <CLKSYS_Disable>
    4640:	00 00       	nop
    4642:	df 91       	pop	r29
    4644:	cf 91       	pop	r28
    4646:	08 95       	ret

00004648 <vApplicationIdleHook>:
                    xEventGroupClearBits(xTimeKom,WAIT_TIMER);
                }
            }
        }

    }
    4648:	cf 93       	push	r28
    464a:	df 93       	push	r29
    464c:	cd b7       	in	r28, 0x3d	; 61
    464e:	de b7       	in	r29, 0x3e	; 62
    4650:	00 00       	nop
    4652:	df 91       	pop	r29
    4654:	cf 91       	pop	r28
    4656:	08 95       	ret

00004658 <main>:
    4658:	ef 92       	push	r14
    465a:	ff 92       	push	r15
    465c:	0f 93       	push	r16
    465e:	cf 93       	push	r28
    4660:	df 93       	push	r29
    4662:	cd b7       	in	r28, 0x3d	; 61
    4664:	de b7       	in	r29, 0x3e	; 62
    4666:	0e 94 c6 22 	call	0x458c	; 0x458c <vInitClock>
    466a:	0e 94 2f 2b 	call	0x565e	; 0x565e <vInitDisplay>
    466e:	0f 2e       	mov	r0, r31
    4670:	f7 ef       	ldi	r31, 0xF7	; 247
    4672:	ef 2e       	mov	r14, r31
    4674:	fc e2       	ldi	r31, 0x2C	; 44
    4676:	ff 2e       	mov	r15, r31
    4678:	f0 2d       	mov	r31, r0
    467a:	02 e0       	ldi	r16, 0x02	; 2
    467c:	20 e0       	ldi	r18, 0x00	; 0
    467e:	30 e0       	ldi	r19, 0x00	; 0
    4680:	48 ec       	ldi	r20, 0xC8	; 200
    4682:	50 e0       	ldi	r21, 0x00	; 0
    4684:	6d e0       	ldi	r22, 0x0D	; 13
    4686:	70 e2       	ldi	r23, 0x20	; 32
    4688:	85 ef       	ldi	r24, 0xF5	; 245
    468a:	98 e2       	ldi	r25, 0x28	; 40
    468c:	0e 94 2a 12 	call	0x2454	; 0x2454 <xTaskCreate>
    4690:	0f 2e       	mov	r0, r31
    4692:	f1 ef       	ldi	r31, 0xF1	; 241
    4694:	ef 2e       	mov	r14, r31
    4696:	fc e2       	ldi	r31, 0x2C	; 44
    4698:	ff 2e       	mov	r15, r31
    469a:	f0 2d       	mov	r31, r0
    469c:	02 e0       	ldi	r16, 0x02	; 2
    469e:	20 e0       	ldi	r18, 0x00	; 0
    46a0:	30 e0       	ldi	r19, 0x00	; 0
    46a2:	42 ed       	ldi	r20, 0xD2	; 210
    46a4:	50 e0       	ldi	r21, 0x00	; 0
    46a6:	68 e1       	ldi	r22, 0x18	; 24
    46a8:	70 e2       	ldi	r23, 0x20	; 32
    46aa:	89 e3       	ldi	r24, 0x39	; 57
    46ac:	96 e2       	ldi	r25, 0x26	; 38
    46ae:	0e 94 2a 12 	call	0x2454	; 0x2454 <xTaskCreate>
    46b2:	0f 2e       	mov	r0, r31
    46b4:	fb ef       	ldi	r31, 0xFB	; 251
    46b6:	ef 2e       	mov	r14, r31
    46b8:	fc e2       	ldi	r31, 0x2C	; 44
    46ba:	ff 2e       	mov	r15, r31
    46bc:	f0 2d       	mov	r31, r0
    46be:	01 e0       	ldi	r16, 0x01	; 1
    46c0:	20 e0       	ldi	r18, 0x00	; 0
    46c2:	30 e0       	ldi	r19, 0x00	; 0
    46c4:	42 ed       	ldi	r20, 0xD2	; 210
    46c6:	50 e0       	ldi	r21, 0x00	; 0
    46c8:	63 e2       	ldi	r22, 0x23	; 35
    46ca:	70 e2       	ldi	r23, 0x20	; 32
    46cc:	85 ea       	ldi	r24, 0xA5	; 165
    46ce:	93 e2       	ldi	r25, 0x23	; 35
    46d0:	0e 94 2a 12 	call	0x2454	; 0x2454 <xTaskCreate>
    46d4:	0f 2e       	mov	r0, r31
    46d6:	f9 ef       	ldi	r31, 0xF9	; 249
    46d8:	ef 2e       	mov	r14, r31
    46da:	fc e2       	ldi	r31, 0x2C	; 44
    46dc:	ff 2e       	mov	r15, r31
    46de:	f0 2d       	mov	r31, r0
    46e0:	01 e0       	ldi	r16, 0x01	; 1
    46e2:	20 e0       	ldi	r18, 0x00	; 0
    46e4:	30 e0       	ldi	r19, 0x00	; 0
    46e6:	48 ec       	ldi	r20, 0xC8	; 200
    46e8:	50 e0       	ldi	r21, 0x00	; 0
    46ea:	6b e2       	ldi	r22, 0x2B	; 43
    46ec:	70 e2       	ldi	r23, 0x20	; 32
    46ee:	8d ed       	ldi	r24, 0xDD	; 221
    46f0:	94 e2       	ldi	r25, 0x24	; 36
    46f2:	0e 94 2a 12 	call	0x2454	; 0x2454 <xTaskCreate>
    46f6:	0e 94 9d 04 	call	0x93a	; 0x93a <xEventGroupCreate>
    46fa:	80 93 f3 2c 	sts	0x2CF3, r24	; 0x802cf3 <xKommunikation>
    46fe:	90 93 f4 2c 	sts	0x2CF4, r25	; 0x802cf4 <xKommunikation+0x1>
    4702:	0e 94 9d 04 	call	0x93a	; 0x93a <xEventGroupCreate>
    4706:	80 93 f5 2c 	sts	0x2CF5, r24	; 0x802cf5 <xTimeKom>
    470a:	90 93 f6 2c 	sts	0x2CF6, r25	; 0x802cf6 <xTimeKom+0x1>
    470e:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4712:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4716:	40 e0       	ldi	r20, 0x00	; 0
    4718:	51 e0       	ldi	r21, 0x01	; 1
    471a:	60 e0       	ldi	r22, 0x00	; 0
    471c:	70 e0       	ldi	r23, 0x00	; 0
    471e:	0e 94 43 06 	call	0xc86	; 0xc86 <xEventGroupSetBits>
    4722:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4726:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    472a:	40 e0       	ldi	r20, 0x00	; 0
    472c:	58 e0       	ldi	r21, 0x08	; 8
    472e:	60 e0       	ldi	r22, 0x00	; 0
    4730:	70 e0       	ldi	r23, 0x00	; 0
    4732:	0e 94 43 06 	call	0xc86	; 0xc86 <xEventGroupSetBits>
    4736:	0e 94 2b 14 	call	0x2856	; 0x2856 <vTaskStartScheduler>
    473a:	80 e0       	ldi	r24, 0x00	; 0
    473c:	90 e0       	ldi	r25, 0x00	; 0
    473e:	df 91       	pop	r29
    4740:	cf 91       	pop	r28
    4742:	0f 91       	pop	r16
    4744:	ff 90       	pop	r15
    4746:	ef 90       	pop	r14
    4748:	08 95       	ret

0000474a <vLeibniz>:
    474a:	cf 92       	push	r12
    474c:	df 92       	push	r13
    474e:	ef 92       	push	r14
    4750:	ff 92       	push	r15
    4752:	0f 93       	push	r16
    4754:	cf 93       	push	r28
    4756:	df 93       	push	r29
    4758:	cd b7       	in	r28, 0x3d	; 61
    475a:	de b7       	in	r29, 0x3e	; 62
    475c:	2a 97       	sbiw	r28, 0x0a	; 10
    475e:	cd bf       	out	0x3d, r28	; 61
    4760:	de bf       	out	0x3e, r29	; 62
    4762:	89 87       	std	Y+9, r24	; 0x09
    4764:	9a 87       	std	Y+10, r25	; 0x0a
    4766:	80 e0       	ldi	r24, 0x00	; 0
    4768:	90 e0       	ldi	r25, 0x00	; 0
    476a:	a0 e8       	ldi	r26, 0x80	; 128
    476c:	bf e3       	ldi	r27, 0x3F	; 63
    476e:	89 83       	std	Y+1, r24	; 0x01
    4770:	9a 83       	std	Y+2, r25	; 0x02
    4772:	ab 83       	std	Y+3, r26	; 0x03
    4774:	bc 83       	std	Y+4, r27	; 0x04
    4776:	80 e0       	ldi	r24, 0x00	; 0
    4778:	90 e0       	ldi	r25, 0x00	; 0
    477a:	a0 e4       	ldi	r26, 0x40	; 64
    477c:	b0 e4       	ldi	r27, 0x40	; 64
    477e:	8d 83       	std	Y+5, r24	; 0x05
    4780:	9e 83       	std	Y+6, r25	; 0x06
    4782:	af 83       	std	Y+7, r26	; 0x07
    4784:	b8 87       	std	Y+8, r27	; 0x08
    4786:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    478a:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    478e:	40 e0       	ldi	r20, 0x00	; 0
    4790:	50 e0       	ldi	r21, 0x00	; 0
    4792:	ba 01       	movw	r22, r20
    4794:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xEventGroupClearBits>
    4798:	dc 01       	movw	r26, r24
    479a:	cb 01       	movw	r24, r22
    479c:	88 27       	eor	r24, r24
    479e:	92 70       	andi	r25, 0x02	; 2
    47a0:	aa 27       	eor	r26, r26
    47a2:	bb 27       	eor	r27, r27
    47a4:	89 2b       	or	r24, r25
    47a6:	8a 2b       	or	r24, r26
    47a8:	8b 2b       	or	r24, r27
    47aa:	09 f4       	brne	.+2      	; 0x47ae <vLeibniz+0x64>
    47ac:	55 c0       	rjmp	.+170    	; 0x4858 <vLeibniz+0x10e>
    47ae:	2d 81       	ldd	r18, Y+5	; 0x05
    47b0:	3e 81       	ldd	r19, Y+6	; 0x06
    47b2:	4f 81       	ldd	r20, Y+7	; 0x07
    47b4:	58 85       	ldd	r21, Y+8	; 0x08
    47b6:	60 e0       	ldi	r22, 0x00	; 0
    47b8:	70 e0       	ldi	r23, 0x00	; 0
    47ba:	80 e8       	ldi	r24, 0x80	; 128
    47bc:	9f e3       	ldi	r25, 0x3F	; 63
    47be:	0e 94 57 33 	call	0x66ae	; 0x66ae <__divsf3>
    47c2:	dc 01       	movw	r26, r24
    47c4:	cb 01       	movw	r24, r22
    47c6:	9c 01       	movw	r18, r24
    47c8:	ad 01       	movw	r20, r26
    47ca:	69 81       	ldd	r22, Y+1	; 0x01
    47cc:	7a 81       	ldd	r23, Y+2	; 0x02
    47ce:	8b 81       	ldd	r24, Y+3	; 0x03
    47d0:	9c 81       	ldd	r25, Y+4	; 0x04
    47d2:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__subsf3>
    47d6:	dc 01       	movw	r26, r24
    47d8:	cb 01       	movw	r24, r22
    47da:	89 83       	std	Y+1, r24	; 0x01
    47dc:	9a 83       	std	Y+2, r25	; 0x02
    47de:	ab 83       	std	Y+3, r26	; 0x03
    47e0:	bc 83       	std	Y+4, r27	; 0x04
    47e2:	20 e0       	ldi	r18, 0x00	; 0
    47e4:	30 e0       	ldi	r19, 0x00	; 0
    47e6:	40 e0       	ldi	r20, 0x00	; 0
    47e8:	50 e4       	ldi	r21, 0x40	; 64
    47ea:	6d 81       	ldd	r22, Y+5	; 0x05
    47ec:	7e 81       	ldd	r23, Y+6	; 0x06
    47ee:	8f 81       	ldd	r24, Y+7	; 0x07
    47f0:	98 85       	ldd	r25, Y+8	; 0x08
    47f2:	0e 94 e6 32 	call	0x65cc	; 0x65cc <__addsf3>
    47f6:	dc 01       	movw	r26, r24
    47f8:	cb 01       	movw	r24, r22
    47fa:	8d 83       	std	Y+5, r24	; 0x05
    47fc:	9e 83       	std	Y+6, r25	; 0x06
    47fe:	af 83       	std	Y+7, r26	; 0x07
    4800:	b8 87       	std	Y+8, r27	; 0x08
    4802:	2d 81       	ldd	r18, Y+5	; 0x05
    4804:	3e 81       	ldd	r19, Y+6	; 0x06
    4806:	4f 81       	ldd	r20, Y+7	; 0x07
    4808:	58 85       	ldd	r21, Y+8	; 0x08
    480a:	60 e0       	ldi	r22, 0x00	; 0
    480c:	70 e0       	ldi	r23, 0x00	; 0
    480e:	80 e8       	ldi	r24, 0x80	; 128
    4810:	9f e3       	ldi	r25, 0x3F	; 63
    4812:	0e 94 57 33 	call	0x66ae	; 0x66ae <__divsf3>
    4816:	dc 01       	movw	r26, r24
    4818:	cb 01       	movw	r24, r22
    481a:	9c 01       	movw	r18, r24
    481c:	ad 01       	movw	r20, r26
    481e:	69 81       	ldd	r22, Y+1	; 0x01
    4820:	7a 81       	ldd	r23, Y+2	; 0x02
    4822:	8b 81       	ldd	r24, Y+3	; 0x03
    4824:	9c 81       	ldd	r25, Y+4	; 0x04
    4826:	0e 94 e6 32 	call	0x65cc	; 0x65cc <__addsf3>
    482a:	dc 01       	movw	r26, r24
    482c:	cb 01       	movw	r24, r22
    482e:	89 83       	std	Y+1, r24	; 0x01
    4830:	9a 83       	std	Y+2, r25	; 0x02
    4832:	ab 83       	std	Y+3, r26	; 0x03
    4834:	bc 83       	std	Y+4, r27	; 0x04
    4836:	20 e0       	ldi	r18, 0x00	; 0
    4838:	30 e0       	ldi	r19, 0x00	; 0
    483a:	40 e0       	ldi	r20, 0x00	; 0
    483c:	50 e4       	ldi	r21, 0x40	; 64
    483e:	6d 81       	ldd	r22, Y+5	; 0x05
    4840:	7e 81       	ldd	r23, Y+6	; 0x06
    4842:	8f 81       	ldd	r24, Y+7	; 0x07
    4844:	98 85       	ldd	r25, Y+8	; 0x08
    4846:	0e 94 e6 32 	call	0x65cc	; 0x65cc <__addsf3>
    484a:	dc 01       	movw	r26, r24
    484c:	cb 01       	movw	r24, r22
    484e:	8d 83       	std	Y+5, r24	; 0x05
    4850:	9e 83       	std	Y+6, r25	; 0x06
    4852:	af 83       	std	Y+7, r26	; 0x07
    4854:	b8 87       	std	Y+8, r27	; 0x08
    4856:	46 c0       	rjmp	.+140    	; 0x48e4 <vLeibniz+0x19a>
    4858:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    485c:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4860:	40 e0       	ldi	r20, 0x00	; 0
    4862:	50 e0       	ldi	r21, 0x00	; 0
    4864:	ba 01       	movw	r22, r20
    4866:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xEventGroupClearBits>
    486a:	dc 01       	movw	r26, r24
    486c:	cb 01       	movw	r24, r22
    486e:	88 27       	eor	r24, r24
    4870:	91 70       	andi	r25, 0x01	; 1
    4872:	aa 27       	eor	r26, r26
    4874:	bb 27       	eor	r27, r27
    4876:	89 2b       	or	r24, r25
    4878:	8a 2b       	or	r24, r26
    487a:	8b 2b       	or	r24, r27
    487c:	99 f1       	breq	.+102    	; 0x48e4 <vLeibniz+0x19a>
    487e:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4882:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4886:	40 e0       	ldi	r20, 0x00	; 0
    4888:	50 e0       	ldi	r21, 0x00	; 0
    488a:	ba 01       	movw	r22, r20
    488c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xEventGroupClearBits>
    4890:	dc 01       	movw	r26, r24
    4892:	cb 01       	movw	r24, r22
    4894:	88 27       	eor	r24, r24
    4896:	94 70       	andi	r25, 0x04	; 4
    4898:	aa 27       	eor	r26, r26
    489a:	bb 27       	eor	r27, r27
    489c:	89 2b       	or	r24, r25
    489e:	8a 2b       	or	r24, r26
    48a0:	8b 2b       	or	r24, r27
    48a2:	d1 f0       	breq	.+52     	; 0x48d8 <vLeibniz+0x18e>
    48a4:	80 e0       	ldi	r24, 0x00	; 0
    48a6:	90 e0       	ldi	r25, 0x00	; 0
    48a8:	a0 e8       	ldi	r26, 0x80	; 128
    48aa:	bf e3       	ldi	r27, 0x3F	; 63
    48ac:	89 83       	std	Y+1, r24	; 0x01
    48ae:	9a 83       	std	Y+2, r25	; 0x02
    48b0:	ab 83       	std	Y+3, r26	; 0x03
    48b2:	bc 83       	std	Y+4, r27	; 0x04
    48b4:	80 e0       	ldi	r24, 0x00	; 0
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	a0 e4       	ldi	r26, 0x40	; 64
    48ba:	b0 e4       	ldi	r27, 0x40	; 64
    48bc:	8d 83       	std	Y+5, r24	; 0x05
    48be:	9e 83       	std	Y+6, r25	; 0x06
    48c0:	af 83       	std	Y+7, r26	; 0x07
    48c2:	b8 87       	std	Y+8, r27	; 0x08
    48c4:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    48c8:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    48cc:	40 e0       	ldi	r20, 0x00	; 0
    48ce:	54 e0       	ldi	r21, 0x04	; 4
    48d0:	60 e0       	ldi	r22, 0x00	; 0
    48d2:	70 e0       	ldi	r23, 0x00	; 0
    48d4:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xEventGroupClearBits>
    48d8:	64 e1       	ldi	r22, 0x14	; 20
    48da:	70 e0       	ldi	r23, 0x00	; 0
    48dc:	80 e0       	ldi	r24, 0x00	; 0
    48de:	90 e0       	ldi	r25, 0x00	; 0
    48e0:	0e 94 fd 13 	call	0x27fa	; 0x27fa <vTaskDelay>
    48e4:	20 e0       	ldi	r18, 0x00	; 0
    48e6:	30 e5       	ldi	r19, 0x50	; 80
    48e8:	43 ec       	ldi	r20, 0xC3	; 195
    48ea:	57 e4       	ldi	r21, 0x47	; 71
    48ec:	69 81       	ldd	r22, Y+1	; 0x01
    48ee:	7a 81       	ldd	r23, Y+2	; 0x02
    48f0:	8b 81       	ldd	r24, Y+3	; 0x03
    48f2:	9c 81       	ldd	r25, Y+4	; 0x04
    48f4:	0e 94 b6 34 	call	0x696c	; 0x696c <__mulsf3>
    48f8:	dc 01       	movw	r26, r24
    48fa:	cb 01       	movw	r24, r22
    48fc:	bc 01       	movw	r22, r24
    48fe:	cd 01       	movw	r24, r26
    4900:	0e 94 d0 33 	call	0x67a0	; 0x67a0 <__fixunssfsi>
    4904:	dc 01       	movw	r26, r24
    4906:	cb 01       	movw	r24, r22
    4908:	8b 3c       	cpi	r24, 0xCB	; 203
    490a:	92 43       	sbci	r25, 0x32	; 50
    490c:	a1 40       	sbci	r26, 0x01	; 1
    490e:	b1 05       	cpc	r27, r1
    4910:	21 f4       	brne	.+8      	; 0x491a <vLeibniz+0x1d0>
    4912:	80 e4       	ldi	r24, 0x40	; 64
    4914:	98 e0       	ldi	r25, 0x08	; 8
    4916:	fc 01       	movw	r30, r24
    4918:	10 82       	st	Z, r1
    491a:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    491e:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4922:	40 e0       	ldi	r20, 0x00	; 0
    4924:	50 e0       	ldi	r21, 0x00	; 0
    4926:	ba 01       	movw	r22, r20
    4928:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xEventGroupClearBits>
    492c:	dc 01       	movw	r26, r24
    492e:	cb 01       	movw	r24, r22
    4930:	81 70       	andi	r24, 0x01	; 1
    4932:	99 27       	eor	r25, r25
    4934:	aa 27       	eor	r26, r26
    4936:	bb 27       	eor	r27, r27
    4938:	89 2b       	or	r24, r25
    493a:	8a 2b       	or	r24, r26
    493c:	8b 2b       	or	r24, r27
    493e:	09 f4       	brne	.+2      	; 0x4942 <vLeibniz+0x1f8>
    4940:	22 cf       	rjmp	.-444    	; 0x4786 <vLeibniz+0x3c>
    4942:	20 e0       	ldi	r18, 0x00	; 0
    4944:	30 e0       	ldi	r19, 0x00	; 0
    4946:	40 e8       	ldi	r20, 0x80	; 128
    4948:	50 e4       	ldi	r21, 0x40	; 64
    494a:	69 81       	ldd	r22, Y+1	; 0x01
    494c:	7a 81       	ldd	r23, Y+2	; 0x02
    494e:	8b 81       	ldd	r24, Y+3	; 0x03
    4950:	9c 81       	ldd	r25, Y+4	; 0x04
    4952:	0e 94 b6 34 	call	0x696c	; 0x696c <__mulsf3>
    4956:	dc 01       	movw	r26, r24
    4958:	cb 01       	movw	r24, r22
    495a:	80 93 b8 2c 	sts	0x2CB8, r24	; 0x802cb8 <Pi>
    495e:	90 93 b9 2c 	sts	0x2CB9, r25	; 0x802cb9 <Pi+0x1>
    4962:	a0 93 ba 2c 	sts	0x2CBA, r26	; 0x802cba <Pi+0x2>
    4966:	b0 93 bb 2c 	sts	0x2CBB, r27	; 0x802cbb <Pi+0x3>
    496a:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    496e:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4972:	42 e0       	ldi	r20, 0x02	; 2
    4974:	50 e0       	ldi	r21, 0x00	; 0
    4976:	60 e0       	ldi	r22, 0x00	; 0
    4978:	70 e0       	ldi	r23, 0x00	; 0
    497a:	0e 94 43 06 	call	0xc86	; 0xc86 <xEventGroupSetBits>
    497e:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4982:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4986:	0f 2e       	mov	r0, r31
    4988:	f5 e0       	ldi	r31, 0x05	; 5
    498a:	cf 2e       	mov	r12, r31
    498c:	d1 2c       	mov	r13, r1
    498e:	e1 2c       	mov	r14, r1
    4990:	f1 2c       	mov	r15, r1
    4992:	f0 2d       	mov	r31, r0
    4994:	01 e0       	ldi	r16, 0x01	; 1
    4996:	21 e0       	ldi	r18, 0x01	; 1
    4998:	44 e0       	ldi	r20, 0x04	; 4
    499a:	50 e0       	ldi	r21, 0x00	; 0
    499c:	60 e0       	ldi	r22, 0x00	; 0
    499e:	70 e0       	ldi	r23, 0x00	; 0
    49a0:	0e 94 c0 04 	call	0x980	; 0x980 <xEventGroupWaitBits>
    49a4:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    49a8:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    49ac:	42 e0       	ldi	r20, 0x02	; 2
    49ae:	50 e0       	ldi	r21, 0x00	; 0
    49b0:	60 e0       	ldi	r22, 0x00	; 0
    49b2:	70 e0       	ldi	r23, 0x00	; 0
    49b4:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xEventGroupClearBits>
    49b8:	e6 ce       	rjmp	.-564    	; 0x4786 <vLeibniz+0x3c>

000049ba <vKellalur>:
    49ba:	cf 92       	push	r12
    49bc:	df 92       	push	r13
    49be:	ef 92       	push	r14
    49c0:	ff 92       	push	r15
    49c2:	0f 93       	push	r16
    49c4:	cf 93       	push	r28
    49c6:	df 93       	push	r29
    49c8:	cd b7       	in	r28, 0x3d	; 61
    49ca:	de b7       	in	r29, 0x3e	; 62
    49cc:	2a 97       	sbiw	r28, 0x0a	; 10
    49ce:	cd bf       	out	0x3d, r28	; 61
    49d0:	de bf       	out	0x3e, r29	; 62
    49d2:	89 87       	std	Y+9, r24	; 0x09
    49d4:	9a 87       	std	Y+10, r25	; 0x0a
    49d6:	80 e0       	ldi	r24, 0x00	; 0
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	a0 e4       	ldi	r26, 0x40	; 64
    49dc:	b0 e4       	ldi	r27, 0x40	; 64
    49de:	89 83       	std	Y+1, r24	; 0x01
    49e0:	9a 83       	std	Y+2, r25	; 0x02
    49e2:	ab 83       	std	Y+3, r26	; 0x03
    49e4:	bc 83       	std	Y+4, r27	; 0x04
    49e6:	80 e0       	ldi	r24, 0x00	; 0
    49e8:	90 e0       	ldi	r25, 0x00	; 0
    49ea:	a0 e4       	ldi	r26, 0x40	; 64
    49ec:	b0 e4       	ldi	r27, 0x40	; 64
    49ee:	8d 83       	std	Y+5, r24	; 0x05
    49f0:	9e 83       	std	Y+6, r25	; 0x06
    49f2:	af 83       	std	Y+7, r26	; 0x07
    49f4:	b8 87       	std	Y+8, r27	; 0x08
    49f6:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    49fa:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    49fe:	40 e0       	ldi	r20, 0x00	; 0
    4a00:	50 e0       	ldi	r21, 0x00	; 0
    4a02:	ba 01       	movw	r22, r20
    4a04:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xEventGroupClearBits>
    4a08:	dc 01       	movw	r26, r24
    4a0a:	cb 01       	movw	r24, r22
    4a0c:	88 27       	eor	r24, r24
    4a0e:	90 71       	andi	r25, 0x10	; 16
    4a10:	aa 27       	eor	r26, r26
    4a12:	bb 27       	eor	r27, r27
    4a14:	89 2b       	or	r24, r25
    4a16:	8a 2b       	or	r24, r26
    4a18:	8b 2b       	or	r24, r27
    4a1a:	09 f4       	brne	.+2      	; 0x4a1e <vKellalur+0x64>
    4a1c:	81 c0       	rjmp	.+258    	; 0x4b20 <vKellalur+0x166>
    4a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    4a20:	9e 81       	ldd	r25, Y+6	; 0x06
    4a22:	af 81       	ldd	r26, Y+7	; 0x07
    4a24:	b8 85       	ldd	r27, Y+8	; 0x08
    4a26:	20 e0       	ldi	r18, 0x00	; 0
    4a28:	30 e0       	ldi	r19, 0x00	; 0
    4a2a:	40 e4       	ldi	r20, 0x40	; 64
    4a2c:	50 e4       	ldi	r21, 0x40	; 64
    4a2e:	bc 01       	movw	r22, r24
    4a30:	cd 01       	movw	r24, r26
    4a32:	0e 94 23 35 	call	0x6a46	; 0x6a46 <pow>
    4a36:	dc 01       	movw	r26, r24
    4a38:	cb 01       	movw	r24, r22
    4a3a:	2d 81       	ldd	r18, Y+5	; 0x05
    4a3c:	3e 81       	ldd	r19, Y+6	; 0x06
    4a3e:	4f 81       	ldd	r20, Y+7	; 0x07
    4a40:	58 85       	ldd	r21, Y+8	; 0x08
    4a42:	bc 01       	movw	r22, r24
    4a44:	cd 01       	movw	r24, r26
    4a46:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__subsf3>
    4a4a:	dc 01       	movw	r26, r24
    4a4c:	cb 01       	movw	r24, r22
    4a4e:	9c 01       	movw	r18, r24
    4a50:	ad 01       	movw	r20, r26
    4a52:	60 e0       	ldi	r22, 0x00	; 0
    4a54:	70 e0       	ldi	r23, 0x00	; 0
    4a56:	80 e8       	ldi	r24, 0x80	; 128
    4a58:	90 e4       	ldi	r25, 0x40	; 64
    4a5a:	0e 94 57 33 	call	0x66ae	; 0x66ae <__divsf3>
    4a5e:	dc 01       	movw	r26, r24
    4a60:	cb 01       	movw	r24, r22
    4a62:	9c 01       	movw	r18, r24
    4a64:	ad 01       	movw	r20, r26
    4a66:	69 81       	ldd	r22, Y+1	; 0x01
    4a68:	7a 81       	ldd	r23, Y+2	; 0x02
    4a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    4a6e:	0e 94 e6 32 	call	0x65cc	; 0x65cc <__addsf3>
    4a72:	dc 01       	movw	r26, r24
    4a74:	cb 01       	movw	r24, r22
    4a76:	89 83       	std	Y+1, r24	; 0x01
    4a78:	9a 83       	std	Y+2, r25	; 0x02
    4a7a:	ab 83       	std	Y+3, r26	; 0x03
    4a7c:	bc 83       	std	Y+4, r27	; 0x04
    4a7e:	20 e0       	ldi	r18, 0x00	; 0
    4a80:	30 e0       	ldi	r19, 0x00	; 0
    4a82:	40 e0       	ldi	r20, 0x00	; 0
    4a84:	50 e4       	ldi	r21, 0x40	; 64
    4a86:	6d 81       	ldd	r22, Y+5	; 0x05
    4a88:	7e 81       	ldd	r23, Y+6	; 0x06
    4a8a:	8f 81       	ldd	r24, Y+7	; 0x07
    4a8c:	98 85       	ldd	r25, Y+8	; 0x08
    4a8e:	0e 94 e6 32 	call	0x65cc	; 0x65cc <__addsf3>
    4a92:	dc 01       	movw	r26, r24
    4a94:	cb 01       	movw	r24, r22
    4a96:	8d 83       	std	Y+5, r24	; 0x05
    4a98:	9e 83       	std	Y+6, r25	; 0x06
    4a9a:	af 83       	std	Y+7, r26	; 0x07
    4a9c:	b8 87       	std	Y+8, r27	; 0x08
    4a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    4aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    4aa2:	af 81       	ldd	r26, Y+7	; 0x07
    4aa4:	b8 85       	ldd	r27, Y+8	; 0x08
    4aa6:	20 e0       	ldi	r18, 0x00	; 0
    4aa8:	30 e0       	ldi	r19, 0x00	; 0
    4aaa:	40 e4       	ldi	r20, 0x40	; 64
    4aac:	50 e4       	ldi	r21, 0x40	; 64
    4aae:	bc 01       	movw	r22, r24
    4ab0:	cd 01       	movw	r24, r26
    4ab2:	0e 94 23 35 	call	0x6a46	; 0x6a46 <pow>
    4ab6:	dc 01       	movw	r26, r24
    4ab8:	cb 01       	movw	r24, r22
    4aba:	2d 81       	ldd	r18, Y+5	; 0x05
    4abc:	3e 81       	ldd	r19, Y+6	; 0x06
    4abe:	4f 81       	ldd	r20, Y+7	; 0x07
    4ac0:	58 85       	ldd	r21, Y+8	; 0x08
    4ac2:	bc 01       	movw	r22, r24
    4ac4:	cd 01       	movw	r24, r26
    4ac6:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__subsf3>
    4aca:	dc 01       	movw	r26, r24
    4acc:	cb 01       	movw	r24, r22
    4ace:	9c 01       	movw	r18, r24
    4ad0:	ad 01       	movw	r20, r26
    4ad2:	60 e0       	ldi	r22, 0x00	; 0
    4ad4:	70 e0       	ldi	r23, 0x00	; 0
    4ad6:	80 e8       	ldi	r24, 0x80	; 128
    4ad8:	90 e4       	ldi	r25, 0x40	; 64
    4ada:	0e 94 57 33 	call	0x66ae	; 0x66ae <__divsf3>
    4ade:	dc 01       	movw	r26, r24
    4ae0:	cb 01       	movw	r24, r22
    4ae2:	9c 01       	movw	r18, r24
    4ae4:	ad 01       	movw	r20, r26
    4ae6:	69 81       	ldd	r22, Y+1	; 0x01
    4ae8:	7a 81       	ldd	r23, Y+2	; 0x02
    4aea:	8b 81       	ldd	r24, Y+3	; 0x03
    4aec:	9c 81       	ldd	r25, Y+4	; 0x04
    4aee:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__subsf3>
    4af2:	dc 01       	movw	r26, r24
    4af4:	cb 01       	movw	r24, r22
    4af6:	89 83       	std	Y+1, r24	; 0x01
    4af8:	9a 83       	std	Y+2, r25	; 0x02
    4afa:	ab 83       	std	Y+3, r26	; 0x03
    4afc:	bc 83       	std	Y+4, r27	; 0x04
    4afe:	20 e0       	ldi	r18, 0x00	; 0
    4b00:	30 e0       	ldi	r19, 0x00	; 0
    4b02:	40 e0       	ldi	r20, 0x00	; 0
    4b04:	50 e4       	ldi	r21, 0x40	; 64
    4b06:	6d 81       	ldd	r22, Y+5	; 0x05
    4b08:	7e 81       	ldd	r23, Y+6	; 0x06
    4b0a:	8f 81       	ldd	r24, Y+7	; 0x07
    4b0c:	98 85       	ldd	r25, Y+8	; 0x08
    4b0e:	0e 94 e6 32 	call	0x65cc	; 0x65cc <__addsf3>
    4b12:	dc 01       	movw	r26, r24
    4b14:	cb 01       	movw	r24, r22
    4b16:	8d 83       	std	Y+5, r24	; 0x05
    4b18:	9e 83       	std	Y+6, r25	; 0x06
    4b1a:	af 83       	std	Y+7, r26	; 0x07
    4b1c:	b8 87       	std	Y+8, r27	; 0x08
    4b1e:	46 c0       	rjmp	.+140    	; 0x4bac <vKellalur+0x1f2>
    4b20:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4b24:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4b28:	40 e0       	ldi	r20, 0x00	; 0
    4b2a:	50 e0       	ldi	r21, 0x00	; 0
    4b2c:	ba 01       	movw	r22, r20
    4b2e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xEventGroupClearBits>
    4b32:	dc 01       	movw	r26, r24
    4b34:	cb 01       	movw	r24, r22
    4b36:	88 27       	eor	r24, r24
    4b38:	98 70       	andi	r25, 0x08	; 8
    4b3a:	aa 27       	eor	r26, r26
    4b3c:	bb 27       	eor	r27, r27
    4b3e:	89 2b       	or	r24, r25
    4b40:	8a 2b       	or	r24, r26
    4b42:	8b 2b       	or	r24, r27
    4b44:	99 f1       	breq	.+102    	; 0x4bac <vKellalur+0x1f2>
    4b46:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4b4a:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4b4e:	40 e0       	ldi	r20, 0x00	; 0
    4b50:	50 e0       	ldi	r21, 0x00	; 0
    4b52:	ba 01       	movw	r22, r20
    4b54:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xEventGroupClearBits>
    4b58:	dc 01       	movw	r26, r24
    4b5a:	cb 01       	movw	r24, r22
    4b5c:	88 27       	eor	r24, r24
    4b5e:	90 72       	andi	r25, 0x20	; 32
    4b60:	aa 27       	eor	r26, r26
    4b62:	bb 27       	eor	r27, r27
    4b64:	89 2b       	or	r24, r25
    4b66:	8a 2b       	or	r24, r26
    4b68:	8b 2b       	or	r24, r27
    4b6a:	d1 f0       	breq	.+52     	; 0x4ba0 <vKellalur+0x1e6>
    4b6c:	80 e0       	ldi	r24, 0x00	; 0
    4b6e:	90 e0       	ldi	r25, 0x00	; 0
    4b70:	a0 e4       	ldi	r26, 0x40	; 64
    4b72:	b0 e4       	ldi	r27, 0x40	; 64
    4b74:	89 83       	std	Y+1, r24	; 0x01
    4b76:	9a 83       	std	Y+2, r25	; 0x02
    4b78:	ab 83       	std	Y+3, r26	; 0x03
    4b7a:	bc 83       	std	Y+4, r27	; 0x04
    4b7c:	80 e0       	ldi	r24, 0x00	; 0
    4b7e:	90 e0       	ldi	r25, 0x00	; 0
    4b80:	a0 e4       	ldi	r26, 0x40	; 64
    4b82:	b0 e4       	ldi	r27, 0x40	; 64
    4b84:	8d 83       	std	Y+5, r24	; 0x05
    4b86:	9e 83       	std	Y+6, r25	; 0x06
    4b88:	af 83       	std	Y+7, r26	; 0x07
    4b8a:	b8 87       	std	Y+8, r27	; 0x08
    4b8c:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4b90:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4b94:	40 e0       	ldi	r20, 0x00	; 0
    4b96:	50 e2       	ldi	r21, 0x20	; 32
    4b98:	60 e0       	ldi	r22, 0x00	; 0
    4b9a:	70 e0       	ldi	r23, 0x00	; 0
    4b9c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xEventGroupClearBits>
    4ba0:	64 e1       	ldi	r22, 0x14	; 20
    4ba2:	70 e0       	ldi	r23, 0x00	; 0
    4ba4:	80 e0       	ldi	r24, 0x00	; 0
    4ba6:	90 e0       	ldi	r25, 0x00	; 0
    4ba8:	0e 94 fd 13 	call	0x27fa	; 0x27fa <vTaskDelay>
    4bac:	20 e0       	ldi	r18, 0x00	; 0
    4bae:	30 e5       	ldi	r19, 0x50	; 80
    4bb0:	43 ec       	ldi	r20, 0xC3	; 195
    4bb2:	57 e4       	ldi	r21, 0x47	; 71
    4bb4:	69 81       	ldd	r22, Y+1	; 0x01
    4bb6:	7a 81       	ldd	r23, Y+2	; 0x02
    4bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    4bba:	9c 81       	ldd	r25, Y+4	; 0x04
    4bbc:	0e 94 b6 34 	call	0x696c	; 0x696c <__mulsf3>
    4bc0:	dc 01       	movw	r26, r24
    4bc2:	cb 01       	movw	r24, r22
    4bc4:	bc 01       	movw	r22, r24
    4bc6:	cd 01       	movw	r24, r26
    4bc8:	0e 94 d0 33 	call	0x67a0	; 0x67a0 <__fixunssfsi>
    4bcc:	dc 01       	movw	r26, r24
    4bce:	cb 01       	movw	r24, r22
    4bd0:	8f 32       	cpi	r24, 0x2F	; 47
    4bd2:	9b 4c       	sbci	r25, 0xCB	; 203
    4bd4:	a4 40       	sbci	r26, 0x04	; 4
    4bd6:	b1 05       	cpc	r27, r1
    4bd8:	21 f4       	brne	.+8      	; 0x4be2 <vKellalur+0x228>
    4bda:	80 e4       	ldi	r24, 0x40	; 64
    4bdc:	98 e0       	ldi	r25, 0x08	; 8
    4bde:	fc 01       	movw	r30, r24
    4be0:	10 82       	st	Z, r1
    4be2:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4be6:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4bea:	40 e0       	ldi	r20, 0x00	; 0
    4bec:	50 e0       	ldi	r21, 0x00	; 0
    4bee:	ba 01       	movw	r22, r20
    4bf0:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xEventGroupClearBits>
    4bf4:	dc 01       	movw	r26, r24
    4bf6:	cb 01       	movw	r24, r22
    4bf8:	88 70       	andi	r24, 0x08	; 8
    4bfa:	99 27       	eor	r25, r25
    4bfc:	aa 27       	eor	r26, r26
    4bfe:	bb 27       	eor	r27, r27
    4c00:	89 2b       	or	r24, r25
    4c02:	8a 2b       	or	r24, r26
    4c04:	8b 2b       	or	r24, r27
    4c06:	09 f4       	brne	.+2      	; 0x4c0a <vKellalur+0x250>
    4c08:	f6 ce       	rjmp	.-532    	; 0x49f6 <vKellalur+0x3c>
    4c0a:	89 81       	ldd	r24, Y+1	; 0x01
    4c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c0e:	ab 81       	ldd	r26, Y+3	; 0x03
    4c10:	bc 81       	ldd	r27, Y+4	; 0x04
    4c12:	80 93 bc 2c 	sts	0x2CBC, r24	; 0x802cbc <Pi_2>
    4c16:	90 93 bd 2c 	sts	0x2CBD, r25	; 0x802cbd <Pi_2+0x1>
    4c1a:	a0 93 be 2c 	sts	0x2CBE, r26	; 0x802cbe <Pi_2+0x2>
    4c1e:	b0 93 bf 2c 	sts	0x2CBF, r27	; 0x802cbf <Pi_2+0x3>
    4c22:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4c26:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4c2a:	40 e1       	ldi	r20, 0x10	; 16
    4c2c:	50 e0       	ldi	r21, 0x00	; 0
    4c2e:	60 e0       	ldi	r22, 0x00	; 0
    4c30:	70 e0       	ldi	r23, 0x00	; 0
    4c32:	0e 94 43 06 	call	0xc86	; 0xc86 <xEventGroupSetBits>
    4c36:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4c3a:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4c3e:	0f 2e       	mov	r0, r31
    4c40:	f5 e0       	ldi	r31, 0x05	; 5
    4c42:	cf 2e       	mov	r12, r31
    4c44:	d1 2c       	mov	r13, r1
    4c46:	e1 2c       	mov	r14, r1
    4c48:	f1 2c       	mov	r15, r1
    4c4a:	f0 2d       	mov	r31, r0
    4c4c:	01 e0       	ldi	r16, 0x01	; 1
    4c4e:	21 e0       	ldi	r18, 0x01	; 1
    4c50:	40 e2       	ldi	r20, 0x20	; 32
    4c52:	50 e0       	ldi	r21, 0x00	; 0
    4c54:	60 e0       	ldi	r22, 0x00	; 0
    4c56:	70 e0       	ldi	r23, 0x00	; 0
    4c58:	0e 94 c0 04 	call	0x980	; 0x980 <xEventGroupWaitBits>
    4c5c:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4c60:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4c64:	40 e1       	ldi	r20, 0x10	; 16
    4c66:	50 e0       	ldi	r21, 0x00	; 0
    4c68:	60 e0       	ldi	r22, 0x00	; 0
    4c6a:	70 e0       	ldi	r23, 0x00	; 0
    4c6c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xEventGroupClearBits>
    4c70:	c2 ce       	rjmp	.-636    	; 0x49f6 <vKellalur+0x3c>

00004c72 <vSteuerTask>:
    4c72:	cf 92       	push	r12
    4c74:	df 92       	push	r13
    4c76:	ef 92       	push	r14
    4c78:	ff 92       	push	r15
    4c7a:	0f 93       	push	r16
    4c7c:	1f 93       	push	r17
    4c7e:	cf 93       	push	r28
    4c80:	df 93       	push	r29
    4c82:	cd b7       	in	r28, 0x3d	; 61
    4c84:	de b7       	in	r29, 0x3e	; 62
    4c86:	e2 97       	sbiw	r28, 0x32	; 50
    4c88:	cd bf       	out	0x3d, r28	; 61
    4c8a:	de bf       	out	0x3e, r29	; 62
    4c8c:	89 ab       	std	Y+49, r24	; 0x31
    4c8e:	9a ab       	std	Y+50, r25	; 0x32
    4c90:	81 e0       	ldi	r24, 0x01	; 1
    4c92:	89 83       	std	Y+1, r24	; 0x01
    4c94:	1b 82       	std	Y+3, r1	; 0x03
    4c96:	1c 82       	std	Y+4, r1	; 0x04
    4c98:	1d 82       	std	Y+5, r1	; 0x05
    4c9a:	1e 82       	std	Y+6, r1	; 0x06
    4c9c:	1a 82       	std	Y+2, r1	; 0x02
    4c9e:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <vDisplayClear>
    4ca2:	89 81       	ldd	r24, Y+1	; 0x01
    4ca4:	81 30       	cpi	r24, 0x01	; 1
    4ca6:	09 f0       	breq	.+2      	; 0x4caa <vSteuerTask+0x38>
    4ca8:	70 c0       	rjmp	.+224    	; 0x4d8a <vSteuerTask+0x118>
    4caa:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4cae:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4cb2:	41 e0       	ldi	r20, 0x01	; 1
    4cb4:	50 e0       	ldi	r21, 0x00	; 0
    4cb6:	60 e0       	ldi	r22, 0x00	; 0
    4cb8:	70 e0       	ldi	r23, 0x00	; 0
    4cba:	0e 94 43 06 	call	0xc86	; 0xc86 <xEventGroupSetBits>
    4cbe:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4cc2:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4cc6:	0f 2e       	mov	r0, r31
    4cc8:	f5 e0       	ldi	r31, 0x05	; 5
    4cca:	cf 2e       	mov	r12, r31
    4ccc:	d1 2c       	mov	r13, r1
    4cce:	e1 2c       	mov	r14, r1
    4cd0:	f1 2c       	mov	r15, r1
    4cd2:	f0 2d       	mov	r31, r0
    4cd4:	01 e0       	ldi	r16, 0x01	; 1
    4cd6:	21 e0       	ldi	r18, 0x01	; 1
    4cd8:	42 e0       	ldi	r20, 0x02	; 2
    4cda:	50 e0       	ldi	r21, 0x00	; 0
    4cdc:	60 e0       	ldi	r22, 0x00	; 0
    4cde:	70 e0       	ldi	r23, 0x00	; 0
    4ce0:	0e 94 c0 04 	call	0x980	; 0x980 <xEventGroupWaitBits>
    4ce4:	80 91 b8 2c 	lds	r24, 0x2CB8	; 0x802cb8 <Pi>
    4ce8:	90 91 b9 2c 	lds	r25, 0x2CB9	; 0x802cb9 <Pi+0x1>
    4cec:	a0 91 ba 2c 	lds	r26, 0x2CBA	; 0x802cba <Pi+0x2>
    4cf0:	b0 91 bb 2c 	lds	r27, 0x2CBB	; 0x802cbb <Pi+0x3>
    4cf4:	8f 83       	std	Y+7, r24	; 0x07
    4cf6:	98 87       	std	Y+8, r25	; 0x08
    4cf8:	a9 87       	std	Y+9, r26	; 0x09
    4cfa:	ba 87       	std	Y+10, r27	; 0x0a
    4cfc:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4d00:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4d04:	44 e0       	ldi	r20, 0x04	; 4
    4d06:	50 e0       	ldi	r21, 0x00	; 0
    4d08:	60 e0       	ldi	r22, 0x00	; 0
    4d0a:	70 e0       	ldi	r23, 0x00	; 0
    4d0c:	0e 94 43 06 	call	0xc86	; 0xc86 <xEventGroupSetBits>
    4d10:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4d14:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4d18:	41 e0       	ldi	r20, 0x01	; 1
    4d1a:	50 e0       	ldi	r21, 0x00	; 0
    4d1c:	60 e0       	ldi	r22, 0x00	; 0
    4d1e:	70 e0       	ldi	r23, 0x00	; 0
    4d20:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xEventGroupClearBits>
    4d24:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d26:	8f 93       	push	r24
    4d28:	89 85       	ldd	r24, Y+9	; 0x09
    4d2a:	8f 93       	push	r24
    4d2c:	88 85       	ldd	r24, Y+8	; 0x08
    4d2e:	8f 93       	push	r24
    4d30:	8f 81       	ldd	r24, Y+7	; 0x07
    4d32:	8f 93       	push	r24
    4d34:	88 e3       	ldi	r24, 0x38	; 56
    4d36:	90 e2       	ldi	r25, 0x20	; 32
    4d38:	89 2f       	mov	r24, r25
    4d3a:	8f 93       	push	r24
    4d3c:	88 e3       	ldi	r24, 0x38	; 56
    4d3e:	90 e2       	ldi	r25, 0x20	; 32
    4d40:	8f 93       	push	r24
    4d42:	ce 01       	movw	r24, r28
    4d44:	43 96       	adiw	r24, 0x13	; 19
    4d46:	29 2f       	mov	r18, r25
    4d48:	2f 93       	push	r18
    4d4a:	8f 93       	push	r24
    4d4c:	0e 94 c3 3b 	call	0x7786	; 0x7786 <sprintf>
    4d50:	8d b7       	in	r24, 0x3d	; 61
    4d52:	9e b7       	in	r25, 0x3e	; 62
    4d54:	08 96       	adiw	r24, 0x08	; 8
    4d56:	cd bf       	out	0x3d, r28	; 61
    4d58:	de bf       	out	0x3e, r29	; 62
    4d5a:	ce 01       	movw	r24, r28
    4d5c:	43 96       	adiw	r24, 0x13	; 19
    4d5e:	29 2f       	mov	r18, r25
    4d60:	2f 93       	push	r18
    4d62:	8f 93       	push	r24
    4d64:	8b e3       	ldi	r24, 0x3B	; 59
    4d66:	90 e2       	ldi	r25, 0x20	; 32
    4d68:	89 2f       	mov	r24, r25
    4d6a:	8f 93       	push	r24
    4d6c:	8b e3       	ldi	r24, 0x3B	; 59
    4d6e:	90 e2       	ldi	r25, 0x20	; 32
    4d70:	8f 93       	push	r24
    4d72:	1f 92       	push	r1
    4d74:	1f 92       	push	r1
    4d76:	1f 92       	push	r1
    4d78:	1f 92       	push	r1
    4d7a:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <vDisplayWriteStringAtPos>
    4d7e:	ed b7       	in	r30, 0x3d	; 61
    4d80:	fe b7       	in	r31, 0x3e	; 62
    4d82:	38 96       	adiw	r30, 0x08	; 8
    4d84:	cd bf       	out	0x3d, r28	; 61
    4d86:	de bf       	out	0x3e, r29	; 62
    4d88:	74 c0       	rjmp	.+232    	; 0x4e72 <vSteuerTask+0x200>
    4d8a:	89 81       	ldd	r24, Y+1	; 0x01
    4d8c:	82 30       	cpi	r24, 0x02	; 2
    4d8e:	09 f0       	breq	.+2      	; 0x4d92 <vSteuerTask+0x120>
    4d90:	70 c0       	rjmp	.+224    	; 0x4e72 <vSteuerTask+0x200>
    4d92:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4d96:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4d9a:	48 e0       	ldi	r20, 0x08	; 8
    4d9c:	50 e0       	ldi	r21, 0x00	; 0
    4d9e:	60 e0       	ldi	r22, 0x00	; 0
    4da0:	70 e0       	ldi	r23, 0x00	; 0
    4da2:	0e 94 43 06 	call	0xc86	; 0xc86 <xEventGroupSetBits>
    4da6:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4daa:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4dae:	0f 2e       	mov	r0, r31
    4db0:	f5 e0       	ldi	r31, 0x05	; 5
    4db2:	cf 2e       	mov	r12, r31
    4db4:	d1 2c       	mov	r13, r1
    4db6:	e1 2c       	mov	r14, r1
    4db8:	f1 2c       	mov	r15, r1
    4dba:	f0 2d       	mov	r31, r0
    4dbc:	01 e0       	ldi	r16, 0x01	; 1
    4dbe:	21 e0       	ldi	r18, 0x01	; 1
    4dc0:	40 e1       	ldi	r20, 0x10	; 16
    4dc2:	50 e0       	ldi	r21, 0x00	; 0
    4dc4:	60 e0       	ldi	r22, 0x00	; 0
    4dc6:	70 e0       	ldi	r23, 0x00	; 0
    4dc8:	0e 94 c0 04 	call	0x980	; 0x980 <xEventGroupWaitBits>
    4dcc:	80 91 bc 2c 	lds	r24, 0x2CBC	; 0x802cbc <Pi_2>
    4dd0:	90 91 bd 2c 	lds	r25, 0x2CBD	; 0x802cbd <Pi_2+0x1>
    4dd4:	a0 91 be 2c 	lds	r26, 0x2CBE	; 0x802cbe <Pi_2+0x2>
    4dd8:	b0 91 bf 2c 	lds	r27, 0x2CBF	; 0x802cbf <Pi_2+0x3>
    4ddc:	8b 87       	std	Y+11, r24	; 0x0b
    4dde:	9c 87       	std	Y+12, r25	; 0x0c
    4de0:	ad 87       	std	Y+13, r26	; 0x0d
    4de2:	be 87       	std	Y+14, r27	; 0x0e
    4de4:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4de8:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4dec:	40 e2       	ldi	r20, 0x20	; 32
    4dee:	50 e0       	ldi	r21, 0x00	; 0
    4df0:	60 e0       	ldi	r22, 0x00	; 0
    4df2:	70 e0       	ldi	r23, 0x00	; 0
    4df4:	0e 94 43 06 	call	0xc86	; 0xc86 <xEventGroupSetBits>
    4df8:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4dfc:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4e00:	48 e0       	ldi	r20, 0x08	; 8
    4e02:	50 e0       	ldi	r21, 0x00	; 0
    4e04:	60 e0       	ldi	r22, 0x00	; 0
    4e06:	70 e0       	ldi	r23, 0x00	; 0
    4e08:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xEventGroupClearBits>
    4e0c:	8e 85       	ldd	r24, Y+14	; 0x0e
    4e0e:	8f 93       	push	r24
    4e10:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e12:	8f 93       	push	r24
    4e14:	8c 85       	ldd	r24, Y+12	; 0x0c
    4e16:	8f 93       	push	r24
    4e18:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e1a:	8f 93       	push	r24
    4e1c:	88 e3       	ldi	r24, 0x38	; 56
    4e1e:	90 e2       	ldi	r25, 0x20	; 32
    4e20:	89 2f       	mov	r24, r25
    4e22:	8f 93       	push	r24
    4e24:	88 e3       	ldi	r24, 0x38	; 56
    4e26:	90 e2       	ldi	r25, 0x20	; 32
    4e28:	8f 93       	push	r24
    4e2a:	ce 01       	movw	r24, r28
    4e2c:	4d 96       	adiw	r24, 0x1d	; 29
    4e2e:	29 2f       	mov	r18, r25
    4e30:	2f 93       	push	r18
    4e32:	8f 93       	push	r24
    4e34:	0e 94 c3 3b 	call	0x7786	; 0x7786 <sprintf>
    4e38:	8d b7       	in	r24, 0x3d	; 61
    4e3a:	9e b7       	in	r25, 0x3e	; 62
    4e3c:	08 96       	adiw	r24, 0x08	; 8
    4e3e:	cd bf       	out	0x3d, r28	; 61
    4e40:	de bf       	out	0x3e, r29	; 62
    4e42:	ce 01       	movw	r24, r28
    4e44:	4d 96       	adiw	r24, 0x1d	; 29
    4e46:	29 2f       	mov	r18, r25
    4e48:	2f 93       	push	r18
    4e4a:	8f 93       	push	r24
    4e4c:	81 e4       	ldi	r24, 0x41	; 65
    4e4e:	90 e2       	ldi	r25, 0x20	; 32
    4e50:	89 2f       	mov	r24, r25
    4e52:	8f 93       	push	r24
    4e54:	81 e4       	ldi	r24, 0x41	; 65
    4e56:	90 e2       	ldi	r25, 0x20	; 32
    4e58:	8f 93       	push	r24
    4e5a:	1f 92       	push	r1
    4e5c:	1f 92       	push	r1
    4e5e:	1f 92       	push	r1
    4e60:	81 e0       	ldi	r24, 0x01	; 1
    4e62:	8f 93       	push	r24
    4e64:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <vDisplayWriteStringAtPos>
    4e68:	ed b7       	in	r30, 0x3d	; 61
    4e6a:	fe b7       	in	r31, 0x3e	; 62
    4e6c:	38 96       	adiw	r30, 0x08	; 8
    4e6e:	cd bf       	out	0x3d, r28	; 61
    4e70:	de bf       	out	0x3e, r29	; 62
    4e72:	ce 01       	movw	r24, r28
    4e74:	0f 96       	adiw	r24, 0x0f	; 15
    4e76:	c1 2c       	mov	r12, r1
    4e78:	d1 2c       	mov	r13, r1
    4e7a:	76 01       	movw	r14, r12
    4e7c:	8c 01       	movw	r16, r24
    4e7e:	2f ef       	ldi	r18, 0xFF	; 255
    4e80:	3f ef       	ldi	r19, 0xFF	; 255
    4e82:	4f ef       	ldi	r20, 0xFF	; 255
    4e84:	5f e0       	ldi	r21, 0x0F	; 15
    4e86:	60 e0       	ldi	r22, 0x00	; 0
    4e88:	70 e0       	ldi	r23, 0x00	; 0
    4e8a:	cb 01       	movw	r24, r22
    4e8c:	0e 94 99 1a 	call	0x3532	; 0x3532 <xTaskNotifyWait>
    4e90:	8a 81       	ldd	r24, Y+2	; 0x02
    4e92:	88 2f       	mov	r24, r24
    4e94:	90 e0       	ldi	r25, 0x00	; 0
    4e96:	81 30       	cpi	r24, 0x01	; 1
    4e98:	91 05       	cpc	r25, r1
    4e9a:	09 f4       	brne	.+2      	; 0x4e9e <vSteuerTask+0x22c>
    4e9c:	88 c0       	rjmp	.+272    	; 0x4fae <vSteuerTask+0x33c>
    4e9e:	82 30       	cpi	r24, 0x02	; 2
    4ea0:	91 05       	cpc	r25, r1
    4ea2:	1c f4       	brge	.+6      	; 0x4eaa <vSteuerTask+0x238>
    4ea4:	89 2b       	or	r24, r25
    4ea6:	49 f0       	breq	.+18     	; 0x4eba <vSteuerTask+0x248>
    4ea8:	45 c1       	rjmp	.+650    	; 0x5134 <vSteuerTask+0x4c2>
    4eaa:	82 30       	cpi	r24, 0x02	; 2
    4eac:	91 05       	cpc	r25, r1
    4eae:	09 f4       	brne	.+2      	; 0x4eb2 <vSteuerTask+0x240>
    4eb0:	b3 c0       	rjmp	.+358    	; 0x5018 <vSteuerTask+0x3a6>
    4eb2:	03 97       	sbiw	r24, 0x03	; 3
    4eb4:	09 f4       	brne	.+2      	; 0x4eb8 <vSteuerTask+0x246>
    4eb6:	fd c0       	rjmp	.+506    	; 0x50b2 <vSteuerTask+0x440>
    4eb8:	3d c1       	rjmp	.+634    	; 0x5134 <vSteuerTask+0x4c2>
    4eba:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ebc:	98 89       	ldd	r25, Y+16	; 0x10
    4ebe:	a9 89       	ldd	r26, Y+17	; 0x11
    4ec0:	ba 89       	ldd	r27, Y+18	; 0x12
    4ec2:	82 70       	andi	r24, 0x02	; 2
    4ec4:	99 27       	eor	r25, r25
    4ec6:	aa 27       	eor	r26, r26
    4ec8:	bb 27       	eor	r27, r27
    4eca:	89 2b       	or	r24, r25
    4ecc:	8a 2b       	or	r24, r26
    4ece:	8b 2b       	or	r24, r27
    4ed0:	11 f0       	breq	.+4      	; 0x4ed6 <vSteuerTask+0x264>
    4ed2:	81 e0       	ldi	r24, 0x01	; 1
    4ed4:	8a 83       	std	Y+2, r24	; 0x02
    4ed6:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ed8:	98 89       	ldd	r25, Y+16	; 0x10
    4eda:	a9 89       	ldd	r26, Y+17	; 0x11
    4edc:	ba 89       	ldd	r27, Y+18	; 0x12
    4ede:	84 70       	andi	r24, 0x04	; 4
    4ee0:	99 27       	eor	r25, r25
    4ee2:	aa 27       	eor	r26, r26
    4ee4:	bb 27       	eor	r27, r27
    4ee6:	89 2b       	or	r24, r25
    4ee8:	8a 2b       	or	r24, r26
    4eea:	8b 2b       	or	r24, r27
    4eec:	11 f0       	breq	.+4      	; 0x4ef2 <vSteuerTask+0x280>
    4eee:	82 e0       	ldi	r24, 0x02	; 2
    4ef0:	8a 83       	std	Y+2, r24	; 0x02
    4ef2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ef4:	98 89       	ldd	r25, Y+16	; 0x10
    4ef6:	a9 89       	ldd	r26, Y+17	; 0x11
    4ef8:	ba 89       	ldd	r27, Y+18	; 0x12
    4efa:	88 70       	andi	r24, 0x08	; 8
    4efc:	99 27       	eor	r25, r25
    4efe:	aa 27       	eor	r26, r26
    4f00:	bb 27       	eor	r27, r27
    4f02:	89 2b       	or	r24, r25
    4f04:	8a 2b       	or	r24, r26
    4f06:	8b 2b       	or	r24, r27
    4f08:	11 f0       	breq	.+4      	; 0x4f0e <vSteuerTask+0x29c>
    4f0a:	83 e0       	ldi	r24, 0x03	; 3
    4f0c:	8a 83       	std	Y+2, r24	; 0x02
    4f0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f10:	98 89       	ldd	r25, Y+16	; 0x10
    4f12:	a9 89       	ldd	r26, Y+17	; 0x11
    4f14:	ba 89       	ldd	r27, Y+18	; 0x12
    4f16:	81 70       	andi	r24, 0x01	; 1
    4f18:	99 27       	eor	r25, r25
    4f1a:	aa 27       	eor	r26, r26
    4f1c:	bb 27       	eor	r27, r27
    4f1e:	89 2b       	or	r24, r25
    4f20:	8a 2b       	or	r24, r26
    4f22:	8b 2b       	or	r24, r27
    4f24:	09 f4       	brne	.+2      	; 0x4f28 <vSteuerTask+0x2b6>
    4f26:	05 c1       	rjmp	.+522    	; 0x5132 <vSteuerTask+0x4c0>
    4f28:	89 81       	ldd	r24, Y+1	; 0x01
    4f2a:	81 30       	cpi	r24, 0x01	; 1
    4f2c:	f1 f4       	brne	.+60     	; 0x4f6a <vSteuerTask+0x2f8>
    4f2e:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4f32:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4f36:	40 e0       	ldi	r20, 0x00	; 0
    4f38:	51 e0       	ldi	r21, 0x01	; 1
    4f3a:	60 e0       	ldi	r22, 0x00	; 0
    4f3c:	70 e0       	ldi	r23, 0x00	; 0
    4f3e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xEventGroupClearBits>
    4f42:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4f46:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4f4a:	40 e0       	ldi	r20, 0x00	; 0
    4f4c:	52 e0       	ldi	r21, 0x02	; 2
    4f4e:	60 e0       	ldi	r22, 0x00	; 0
    4f50:	70 e0       	ldi	r23, 0x00	; 0
    4f52:	0e 94 43 06 	call	0xc86	; 0xc86 <xEventGroupSetBits>
    4f56:	80 e4       	ldi	r24, 0x40	; 64
    4f58:	98 e0       	ldi	r25, 0x08	; 8
    4f5a:	20 e4       	ldi	r18, 0x40	; 64
    4f5c:	38 e0       	ldi	r19, 0x08	; 8
    4f5e:	f9 01       	movw	r30, r18
    4f60:	20 81       	ld	r18, Z
    4f62:	24 60       	ori	r18, 0x04	; 4
    4f64:	fc 01       	movw	r30, r24
    4f66:	20 83       	st	Z, r18
    4f68:	e4 c0       	rjmp	.+456    	; 0x5132 <vSteuerTask+0x4c0>
    4f6a:	89 81       	ldd	r24, Y+1	; 0x01
    4f6c:	82 30       	cpi	r24, 0x02	; 2
    4f6e:	09 f0       	breq	.+2      	; 0x4f72 <vSteuerTask+0x300>
    4f70:	e0 c0       	rjmp	.+448    	; 0x5132 <vSteuerTask+0x4c0>
    4f72:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4f76:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4f7a:	40 e0       	ldi	r20, 0x00	; 0
    4f7c:	58 e0       	ldi	r21, 0x08	; 8
    4f7e:	60 e0       	ldi	r22, 0x00	; 0
    4f80:	70 e0       	ldi	r23, 0x00	; 0
    4f82:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xEventGroupClearBits>
    4f86:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4f8a:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4f8e:	40 e0       	ldi	r20, 0x00	; 0
    4f90:	50 e1       	ldi	r21, 0x10	; 16
    4f92:	60 e0       	ldi	r22, 0x00	; 0
    4f94:	70 e0       	ldi	r23, 0x00	; 0
    4f96:	0e 94 43 06 	call	0xc86	; 0xc86 <xEventGroupSetBits>
    4f9a:	80 e4       	ldi	r24, 0x40	; 64
    4f9c:	98 e0       	ldi	r25, 0x08	; 8
    4f9e:	20 e4       	ldi	r18, 0x40	; 64
    4fa0:	38 e0       	ldi	r19, 0x08	; 8
    4fa2:	f9 01       	movw	r30, r18
    4fa4:	20 81       	ld	r18, Z
    4fa6:	24 60       	ori	r18, 0x04	; 4
    4fa8:	fc 01       	movw	r30, r24
    4faa:	20 83       	st	Z, r18
    4fac:	c2 c0       	rjmp	.+388    	; 0x5132 <vSteuerTask+0x4c0>
    4fae:	80 e4       	ldi	r24, 0x40	; 64
    4fb0:	98 e0       	ldi	r25, 0x08	; 8
    4fb2:	fc 01       	movw	r30, r24
    4fb4:	10 82       	st	Z, r1
    4fb6:	89 81       	ldd	r24, Y+1	; 0x01
    4fb8:	81 30       	cpi	r24, 0x01	; 1
    4fba:	a9 f4       	brne	.+42     	; 0x4fe6 <vSteuerTask+0x374>
    4fbc:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4fc0:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4fc4:	40 e0       	ldi	r20, 0x00	; 0
    4fc6:	51 e0       	ldi	r21, 0x01	; 1
    4fc8:	60 e0       	ldi	r22, 0x00	; 0
    4fca:	70 e0       	ldi	r23, 0x00	; 0
    4fcc:	0e 94 43 06 	call	0xc86	; 0xc86 <xEventGroupSetBits>
    4fd0:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4fd4:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4fd8:	40 e0       	ldi	r20, 0x00	; 0
    4fda:	52 e0       	ldi	r21, 0x02	; 2
    4fdc:	60 e0       	ldi	r22, 0x00	; 0
    4fde:	70 e0       	ldi	r23, 0x00	; 0
    4fe0:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xEventGroupClearBits>
    4fe4:	17 c0       	rjmp	.+46     	; 0x5014 <vSteuerTask+0x3a2>
    4fe6:	89 81       	ldd	r24, Y+1	; 0x01
    4fe8:	82 30       	cpi	r24, 0x02	; 2
    4fea:	a1 f4       	brne	.+40     	; 0x5014 <vSteuerTask+0x3a2>
    4fec:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    4ff0:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    4ff4:	40 e0       	ldi	r20, 0x00	; 0
    4ff6:	58 e0       	ldi	r21, 0x08	; 8
    4ff8:	60 e0       	ldi	r22, 0x00	; 0
    4ffa:	70 e0       	ldi	r23, 0x00	; 0
    4ffc:	0e 94 43 06 	call	0xc86	; 0xc86 <xEventGroupSetBits>
    5000:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    5004:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    5008:	40 e0       	ldi	r20, 0x00	; 0
    500a:	50 e1       	ldi	r21, 0x10	; 16
    500c:	60 e0       	ldi	r22, 0x00	; 0
    500e:	70 e0       	ldi	r23, 0x00	; 0
    5010:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xEventGroupClearBits>
    5014:	1a 82       	std	Y+2, r1	; 0x02
    5016:	8e c0       	rjmp	.+284    	; 0x5134 <vSteuerTask+0x4c2>
    5018:	80 91 f5 2c 	lds	r24, 0x2CF5	; 0x802cf5 <xTimeKom>
    501c:	90 91 f6 2c 	lds	r25, 0x2CF6	; 0x802cf6 <xTimeKom+0x1>
    5020:	48 e0       	ldi	r20, 0x08	; 8
    5022:	50 e0       	ldi	r21, 0x00	; 0
    5024:	60 e0       	ldi	r22, 0x00	; 0
    5026:	70 e0       	ldi	r23, 0x00	; 0
    5028:	0e 94 43 06 	call	0xc86	; 0xc86 <xEventGroupSetBits>
    502c:	89 81       	ldd	r24, Y+1	; 0x01
    502e:	81 30       	cpi	r24, 0x01	; 1
    5030:	f1 f4       	brne	.+60     	; 0x506e <vSteuerTask+0x3fc>
    5032:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    5036:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    503a:	40 e0       	ldi	r20, 0x00	; 0
    503c:	50 e0       	ldi	r21, 0x00	; 0
    503e:	ba 01       	movw	r22, r20
    5040:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xEventGroupClearBits>
    5044:	dc 01       	movw	r26, r24
    5046:	cb 01       	movw	r24, r22
    5048:	88 27       	eor	r24, r24
    504a:	91 70       	andi	r25, 0x01	; 1
    504c:	aa 27       	eor	r26, r26
    504e:	bb 27       	eor	r27, r27
    5050:	89 2b       	or	r24, r25
    5052:	8a 2b       	or	r24, r26
    5054:	8b 2b       	or	r24, r27
    5056:	59 f1       	breq	.+86     	; 0x50ae <vSteuerTask+0x43c>
    5058:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    505c:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    5060:	40 e0       	ldi	r20, 0x00	; 0
    5062:	54 e0       	ldi	r21, 0x04	; 4
    5064:	60 e0       	ldi	r22, 0x00	; 0
    5066:	70 e0       	ldi	r23, 0x00	; 0
    5068:	0e 94 43 06 	call	0xc86	; 0xc86 <xEventGroupSetBits>
    506c:	20 c0       	rjmp	.+64     	; 0x50ae <vSteuerTask+0x43c>
    506e:	89 81       	ldd	r24, Y+1	; 0x01
    5070:	82 30       	cpi	r24, 0x02	; 2
    5072:	e9 f4       	brne	.+58     	; 0x50ae <vSteuerTask+0x43c>
    5074:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    5078:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    507c:	40 e0       	ldi	r20, 0x00	; 0
    507e:	50 e0       	ldi	r21, 0x00	; 0
    5080:	ba 01       	movw	r22, r20
    5082:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xEventGroupClearBits>
    5086:	dc 01       	movw	r26, r24
    5088:	cb 01       	movw	r24, r22
    508a:	88 27       	eor	r24, r24
    508c:	98 70       	andi	r25, 0x08	; 8
    508e:	aa 27       	eor	r26, r26
    5090:	bb 27       	eor	r27, r27
    5092:	89 2b       	or	r24, r25
    5094:	8a 2b       	or	r24, r26
    5096:	8b 2b       	or	r24, r27
    5098:	51 f0       	breq	.+20     	; 0x50ae <vSteuerTask+0x43c>
    509a:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    509e:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    50a2:	40 e0       	ldi	r20, 0x00	; 0
    50a4:	50 e2       	ldi	r21, 0x20	; 32
    50a6:	60 e0       	ldi	r22, 0x00	; 0
    50a8:	70 e0       	ldi	r23, 0x00	; 0
    50aa:	0e 94 43 06 	call	0xc86	; 0xc86 <xEventGroupSetBits>
    50ae:	1a 82       	std	Y+2, r1	; 0x02
    50b0:	41 c0       	rjmp	.+130    	; 0x5134 <vSteuerTask+0x4c2>
    50b2:	80 e4       	ldi	r24, 0x40	; 64
    50b4:	98 e0       	ldi	r25, 0x08	; 8
    50b6:	fc 01       	movw	r30, r24
    50b8:	10 82       	st	Z, r1
    50ba:	80 91 f5 2c 	lds	r24, 0x2CF5	; 0x802cf5 <xTimeKom>
    50be:	90 91 f6 2c 	lds	r25, 0x2CF6	; 0x802cf6 <xTimeKom+0x1>
    50c2:	48 e0       	ldi	r20, 0x08	; 8
    50c4:	50 e0       	ldi	r21, 0x00	; 0
    50c6:	60 e0       	ldi	r22, 0x00	; 0
    50c8:	70 e0       	ldi	r23, 0x00	; 0
    50ca:	0e 94 43 06 	call	0xc86	; 0xc86 <xEventGroupSetBits>
    50ce:	89 81       	ldd	r24, Y+1	; 0x01
    50d0:	81 30       	cpi	r24, 0x01	; 1
    50d2:	b9 f4       	brne	.+46     	; 0x5102 <vSteuerTask+0x490>
    50d4:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    50d8:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    50dc:	40 e0       	ldi	r20, 0x00	; 0
    50de:	51 e0       	ldi	r21, 0x01	; 1
    50e0:	60 e0       	ldi	r22, 0x00	; 0
    50e2:	70 e0       	ldi	r23, 0x00	; 0
    50e4:	0e 94 43 06 	call	0xc86	; 0xc86 <xEventGroupSetBits>
    50e8:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    50ec:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    50f0:	40 e0       	ldi	r20, 0x00	; 0
    50f2:	52 e0       	ldi	r21, 0x02	; 2
    50f4:	60 e0       	ldi	r22, 0x00	; 0
    50f6:	70 e0       	ldi	r23, 0x00	; 0
    50f8:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xEventGroupClearBits>
    50fc:	82 e0       	ldi	r24, 0x02	; 2
    50fe:	89 83       	std	Y+1, r24	; 0x01
    5100:	16 c0       	rjmp	.+44     	; 0x512e <vSteuerTask+0x4bc>
    5102:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    5106:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    510a:	40 e0       	ldi	r20, 0x00	; 0
    510c:	58 e0       	ldi	r21, 0x08	; 8
    510e:	60 e0       	ldi	r22, 0x00	; 0
    5110:	70 e0       	ldi	r23, 0x00	; 0
    5112:	0e 94 43 06 	call	0xc86	; 0xc86 <xEventGroupSetBits>
    5116:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <xKommunikation>
    511a:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <xKommunikation+0x1>
    511e:	40 e0       	ldi	r20, 0x00	; 0
    5120:	50 e1       	ldi	r21, 0x10	; 16
    5122:	60 e0       	ldi	r22, 0x00	; 0
    5124:	70 e0       	ldi	r23, 0x00	; 0
    5126:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xEventGroupClearBits>
    512a:	81 e0       	ldi	r24, 0x01	; 1
    512c:	89 83       	std	Y+1, r24	; 0x01
    512e:	1a 82       	std	Y+2, r1	; 0x02
    5130:	01 c0       	rjmp	.+2      	; 0x5134 <vSteuerTask+0x4c2>
    5132:	00 00       	nop
    5134:	64 ef       	ldi	r22, 0xF4	; 244
    5136:	71 e0       	ldi	r23, 0x01	; 1
    5138:	80 e0       	ldi	r24, 0x00	; 0
    513a:	90 e0       	ldi	r25, 0x00	; 0
    513c:	0e 94 fd 13 	call	0x27fa	; 0x27fa <vTaskDelay>
    5140:	ae cd       	rjmp	.-1188   	; 0x4c9e <vSteuerTask+0x2c>

00005142 <__vector_20>:
    5142:	1f 92       	push	r1
    5144:	0f 92       	push	r0
    5146:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    514a:	0f 92       	push	r0
    514c:	11 24       	eor	r1, r1
    514e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5152:	0f 92       	push	r0
    5154:	ef 92       	push	r14
    5156:	ff 92       	push	r15
    5158:	0f 93       	push	r16
    515a:	1f 93       	push	r17
    515c:	2f 93       	push	r18
    515e:	3f 93       	push	r19
    5160:	4f 93       	push	r20
    5162:	5f 93       	push	r21
    5164:	6f 93       	push	r22
    5166:	7f 93       	push	r23
    5168:	8f 93       	push	r24
    516a:	9f 93       	push	r25
    516c:	af 93       	push	r26
    516e:	bf 93       	push	r27
    5170:	ef 93       	push	r30
    5172:	ff 93       	push	r31
    5174:	cf 93       	push	r28
    5176:	df 93       	push	r29
    5178:	1f 92       	push	r1
    517a:	cd b7       	in	r28, 0x3d	; 61
    517c:	de b7       	in	r29, 0x3e	; 62
    517e:	19 82       	std	Y+1, r1	; 0x01
    5180:	80 91 c0 2c 	lds	r24, 0x2CC0	; 0x802cc0 <IR_counter>
    5184:	90 91 c1 2c 	lds	r25, 0x2CC1	; 0x802cc1 <IR_counter+0x1>
    5188:	a0 91 c2 2c 	lds	r26, 0x2CC2	; 0x802cc2 <IR_counter+0x2>
    518c:	b0 91 c3 2c 	lds	r27, 0x2CC3	; 0x802cc3 <IR_counter+0x3>
    5190:	e0 91 fd 2c 	lds	r30, 0x2CFD	; 0x802cfd <xGetTime>
    5194:	f0 91 fe 2c 	lds	r31, 0x2CFE	; 0x802cfe <xGetTime+0x1>
    5198:	9e 01       	movw	r18, r28
    519a:	2f 5f       	subi	r18, 0xFF	; 255
    519c:	3f 4f       	sbci	r19, 0xFF	; 255
    519e:	79 01       	movw	r14, r18
    51a0:	00 e0       	ldi	r16, 0x00	; 0
    51a2:	10 e0       	ldi	r17, 0x00	; 0
    51a4:	22 e0       	ldi	r18, 0x02	; 2
    51a6:	ac 01       	movw	r20, r24
    51a8:	bd 01       	movw	r22, r26
    51aa:	cf 01       	movw	r24, r30
    51ac:	0e 94 2b 1c 	call	0x3856	; 0x3856 <xTaskGenericNotifyFromISR>
    51b0:	00 00       	nop
    51b2:	0f 90       	pop	r0
    51b4:	df 91       	pop	r29
    51b6:	cf 91       	pop	r28
    51b8:	ff 91       	pop	r31
    51ba:	ef 91       	pop	r30
    51bc:	bf 91       	pop	r27
    51be:	af 91       	pop	r26
    51c0:	9f 91       	pop	r25
    51c2:	8f 91       	pop	r24
    51c4:	7f 91       	pop	r23
    51c6:	6f 91       	pop	r22
    51c8:	5f 91       	pop	r21
    51ca:	4f 91       	pop	r20
    51cc:	3f 91       	pop	r19
    51ce:	2f 91       	pop	r18
    51d0:	1f 91       	pop	r17
    51d2:	0f 91       	pop	r16
    51d4:	ff 90       	pop	r15
    51d6:	ef 90       	pop	r14
    51d8:	0f 90       	pop	r0
    51da:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    51de:	0f 90       	pop	r0
    51e0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    51e4:	0f 90       	pop	r0
    51e6:	1f 90       	pop	r1
    51e8:	18 95       	reti

000051ea <vButtonTask>:
}

void vButtonTask(void *pvParameters) {
    51ea:	0f 93       	push	r16
    51ec:	1f 93       	push	r17
    51ee:	cf 93       	push	r28
    51f0:	df 93       	push	r29
    51f2:	1f 92       	push	r1
    51f4:	1f 92       	push	r1
    51f6:	cd b7       	in	r28, 0x3d	; 61
    51f8:	de b7       	in	r29, 0x3e	; 62
    51fa:	89 83       	std	Y+1, r24	; 0x01
    51fc:	9a 83       	std	Y+2, r25	; 0x02
    initButtons();
    51fe:	0e 94 0e 02 	call	0x41c	; 0x41c <initButtons>

    for(;;) {
        updateButtons();
    5202:	0e 94 2a 02 	call	0x454	; 0x454 <updateButtons>
        
        if(getButtonPress(BUTTON1) == SHORT_PRESSED) {
    5206:	80 e0       	ldi	r24, 0x00	; 0
    5208:	0e 94 1c 03 	call	0x638	; 0x638 <getButtonPress>
    520c:	81 30       	cpi	r24, 0x01	; 1
    520e:	69 f4       	brne	.+26     	; 0x522a <vButtonTask+0x40>
            
            xTaskNotify(xSteuerTask,BUTTON1SHORTPRESSEDMASK,eSetValueWithOverwrite);
    5210:	80 91 f1 2c 	lds	r24, 0x2CF1	; 0x802cf1 <xSteuerTask>
    5214:	90 91 f2 2c 	lds	r25, 0x2CF2	; 0x802cf2 <xSteuerTask+0x1>
    5218:	00 e0       	ldi	r16, 0x00	; 0
    521a:	10 e0       	ldi	r17, 0x00	; 0
    521c:	23 e0       	ldi	r18, 0x03	; 3
    521e:	41 e0       	ldi	r20, 0x01	; 1
    5220:	50 e0       	ldi	r21, 0x00	; 0
    5222:	60 e0       	ldi	r22, 0x00	; 0
    5224:	70 e0       	ldi	r23, 0x00	; 0
    5226:	0e 94 4f 1b 	call	0x369e	; 0x369e <xTaskGenericNotify>
            
            
        }
        if(getButtonPress(BUTTON2) == SHORT_PRESSED) {
    522a:	81 e0       	ldi	r24, 0x01	; 1
    522c:	0e 94 1c 03 	call	0x638	; 0x638 <getButtonPress>
    5230:	81 30       	cpi	r24, 0x01	; 1
    5232:	69 f4       	brne	.+26     	; 0x524e <vButtonTask+0x64>
            
            xTaskNotify(xSteuerTask,BUTTON2SHORTPRESSEDMASK,eSetValueWithOverwrite);
    5234:	80 91 f1 2c 	lds	r24, 0x2CF1	; 0x802cf1 <xSteuerTask>
    5238:	90 91 f2 2c 	lds	r25, 0x2CF2	; 0x802cf2 <xSteuerTask+0x1>
    523c:	00 e0       	ldi	r16, 0x00	; 0
    523e:	10 e0       	ldi	r17, 0x00	; 0
    5240:	23 e0       	ldi	r18, 0x03	; 3
    5242:	42 e0       	ldi	r20, 0x02	; 2
    5244:	50 e0       	ldi	r21, 0x00	; 0
    5246:	60 e0       	ldi	r22, 0x00	; 0
    5248:	70 e0       	ldi	r23, 0x00	; 0
    524a:	0e 94 4f 1b 	call	0x369e	; 0x369e <xTaskGenericNotify>
        }
        if(getButtonPress(BUTTON3) == SHORT_PRESSED) {
    524e:	82 e0       	ldi	r24, 0x02	; 2
    5250:	0e 94 1c 03 	call	0x638	; 0x638 <getButtonPress>
    5254:	81 30       	cpi	r24, 0x01	; 1
    5256:	69 f4       	brne	.+26     	; 0x5272 <vButtonTask+0x88>
            
            xTaskNotify(xSteuerTask,BUTTON3SHORTPRESSEDMASK,eSetValueWithOverwrite);
    5258:	80 91 f1 2c 	lds	r24, 0x2CF1	; 0x802cf1 <xSteuerTask>
    525c:	90 91 f2 2c 	lds	r25, 0x2CF2	; 0x802cf2 <xSteuerTask+0x1>
    5260:	00 e0       	ldi	r16, 0x00	; 0
    5262:	10 e0       	ldi	r17, 0x00	; 0
    5264:	23 e0       	ldi	r18, 0x03	; 3
    5266:	44 e0       	ldi	r20, 0x04	; 4
    5268:	50 e0       	ldi	r21, 0x00	; 0
    526a:	60 e0       	ldi	r22, 0x00	; 0
    526c:	70 e0       	ldi	r23, 0x00	; 0
    526e:	0e 94 4f 1b 	call	0x369e	; 0x369e <xTaskGenericNotify>
            
        }
        if(getButtonPress(BUTTON4) == SHORT_PRESSED) {
    5272:	83 e0       	ldi	r24, 0x03	; 3
    5274:	0e 94 1c 03 	call	0x638	; 0x638 <getButtonPress>
    5278:	81 30       	cpi	r24, 0x01	; 1
    527a:	69 f4       	brne	.+26     	; 0x5296 <vButtonTask+0xac>
            
            xTaskNotify(xSteuerTask,BUTTON4SHORTPRESSEDMASK,eSetValueWithOverwrite);
    527c:	80 91 f1 2c 	lds	r24, 0x2CF1	; 0x802cf1 <xSteuerTask>
    5280:	90 91 f2 2c 	lds	r25, 0x2CF2	; 0x802cf2 <xSteuerTask+0x1>
    5284:	00 e0       	ldi	r16, 0x00	; 0
    5286:	10 e0       	ldi	r17, 0x00	; 0
    5288:	23 e0       	ldi	r18, 0x03	; 3
    528a:	48 e0       	ldi	r20, 0x08	; 8
    528c:	50 e0       	ldi	r21, 0x00	; 0
    528e:	60 e0       	ldi	r22, 0x00	; 0
    5290:	70 e0       	ldi	r23, 0x00	; 0
    5292:	0e 94 4f 1b 	call	0x369e	; 0x369e <xTaskGenericNotify>
            
        }
        if(getButtonPress(BUTTON1) == LONG_PRESSED) {
    5296:	80 e0       	ldi	r24, 0x00	; 0
    5298:	0e 94 1c 03 	call	0x638	; 0x638 <getButtonPress>
    529c:	88 23       	and	r24, r24
    529e:	69 f4       	brne	.+26     	; 0x52ba <vButtonTask+0xd0>
            
            xTaskNotify(xSteuerTask,BUTTON1LONGPRESSEDMASK,eSetValueWithOverwrite);
    52a0:	80 91 f1 2c 	lds	r24, 0x2CF1	; 0x802cf1 <xSteuerTask>
    52a4:	90 91 f2 2c 	lds	r25, 0x2CF2	; 0x802cf2 <xSteuerTask+0x1>
    52a8:	00 e0       	ldi	r16, 0x00	; 0
    52aa:	10 e0       	ldi	r17, 0x00	; 0
    52ac:	23 e0       	ldi	r18, 0x03	; 3
    52ae:	40 e1       	ldi	r20, 0x10	; 16
    52b0:	50 e0       	ldi	r21, 0x00	; 0
    52b2:	60 e0       	ldi	r22, 0x00	; 0
    52b4:	70 e0       	ldi	r23, 0x00	; 0
    52b6:	0e 94 4f 1b 	call	0x369e	; 0x369e <xTaskGenericNotify>
            
        }
        if(getButtonPress(BUTTON2) == LONG_PRESSED) {
    52ba:	81 e0       	ldi	r24, 0x01	; 1
    52bc:	0e 94 1c 03 	call	0x638	; 0x638 <getButtonPress>
    52c0:	88 23       	and	r24, r24
    52c2:	69 f4       	brne	.+26     	; 0x52de <vButtonTask+0xf4>
            
            xTaskNotify(xSteuerTask,BUTTON2LONGPRESSEDMASK,eSetValueWithOverwrite);
    52c4:	80 91 f1 2c 	lds	r24, 0x2CF1	; 0x802cf1 <xSteuerTask>
    52c8:	90 91 f2 2c 	lds	r25, 0x2CF2	; 0x802cf2 <xSteuerTask+0x1>
    52cc:	00 e0       	ldi	r16, 0x00	; 0
    52ce:	10 e0       	ldi	r17, 0x00	; 0
    52d0:	23 e0       	ldi	r18, 0x03	; 3
    52d2:	40 e2       	ldi	r20, 0x20	; 32
    52d4:	50 e0       	ldi	r21, 0x00	; 0
    52d6:	60 e0       	ldi	r22, 0x00	; 0
    52d8:	70 e0       	ldi	r23, 0x00	; 0
    52da:	0e 94 4f 1b 	call	0x369e	; 0x369e <xTaskGenericNotify>
            
        }
        if(getButtonPress(BUTTON3) == LONG_PRESSED) {
    52de:	82 e0       	ldi	r24, 0x02	; 2
    52e0:	0e 94 1c 03 	call	0x638	; 0x638 <getButtonPress>
    52e4:	88 23       	and	r24, r24
    52e6:	69 f4       	brne	.+26     	; 0x5302 <vButtonTask+0x118>
            
            xTaskNotify(xSteuerTask,BUTTON3LONGPRESSEDMASK,eSetValueWithOverwrite);
    52e8:	80 91 f1 2c 	lds	r24, 0x2CF1	; 0x802cf1 <xSteuerTask>
    52ec:	90 91 f2 2c 	lds	r25, 0x2CF2	; 0x802cf2 <xSteuerTask+0x1>
    52f0:	00 e0       	ldi	r16, 0x00	; 0
    52f2:	10 e0       	ldi	r17, 0x00	; 0
    52f4:	23 e0       	ldi	r18, 0x03	; 3
    52f6:	40 e4       	ldi	r20, 0x40	; 64
    52f8:	50 e0       	ldi	r21, 0x00	; 0
    52fa:	60 e0       	ldi	r22, 0x00	; 0
    52fc:	70 e0       	ldi	r23, 0x00	; 0
    52fe:	0e 94 4f 1b 	call	0x369e	; 0x369e <xTaskGenericNotify>
            
        }
        if(getButtonPress(BUTTON4) == LONG_PRESSED) {
    5302:	83 e0       	ldi	r24, 0x03	; 3
    5304:	0e 94 1c 03 	call	0x638	; 0x638 <getButtonPress>
    5308:	88 23       	and	r24, r24
    530a:	69 f4       	brne	.+26     	; 0x5326 <vButtonTask+0x13c>
            
            xTaskNotify(xSteuerTask,BUTTON4LONGPRESSEDMASK,eSetValueWithOverwrite);
    530c:	80 91 f1 2c 	lds	r24, 0x2CF1	; 0x802cf1 <xSteuerTask>
    5310:	90 91 f2 2c 	lds	r25, 0x2CF2	; 0x802cf2 <xSteuerTask+0x1>
    5314:	00 e0       	ldi	r16, 0x00	; 0
    5316:	10 e0       	ldi	r17, 0x00	; 0
    5318:	23 e0       	ldi	r18, 0x03	; 3
    531a:	40 e8       	ldi	r20, 0x80	; 128
    531c:	50 e0       	ldi	r21, 0x00	; 0
    531e:	60 e0       	ldi	r22, 0x00	; 0
    5320:	70 e0       	ldi	r23, 0x00	; 0
    5322:	0e 94 4f 1b 	call	0x369e	; 0x369e <xTaskGenericNotify>
            
        }
        vTaskDelay((1000/BUTTON_UPDATE_FREQUENCY_HZ)/portTICK_RATE_MS);
    5326:	6a e0       	ldi	r22, 0x0A	; 10
    5328:	70 e0       	ldi	r23, 0x00	; 0
    532a:	80 e0       	ldi	r24, 0x00	; 0
    532c:	90 e0       	ldi	r25, 0x00	; 0
    532e:	0e 94 fd 13 	call	0x27fa	; 0x27fa <vTaskDelay>
    }
    5332:	67 cf       	rjmp	.-306    	; 0x5202 <vButtonTask+0x18>

00005334 <__vector_108>:
	 command(0x02);
 }
 void _displayClear() {
	 command(0x01);
	 delayUS(2000);
 }
    5334:	1f 92       	push	r1
    5336:	0f 92       	push	r0
    5338:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    533c:	0f 92       	push	r0
    533e:	11 24       	eor	r1, r1
    5340:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    5344:	0f 92       	push	r0
    5346:	2f 93       	push	r18
    5348:	3f 93       	push	r19
    534a:	4f 93       	push	r20
    534c:	5f 93       	push	r21
    534e:	6f 93       	push	r22
    5350:	7f 93       	push	r23
    5352:	8f 93       	push	r24
    5354:	9f 93       	push	r25
    5356:	af 93       	push	r26
    5358:	bf 93       	push	r27
    535a:	ef 93       	push	r30
    535c:	ff 93       	push	r31
    535e:	cf 93       	push	r28
    5360:	df 93       	push	r29
    5362:	1f 92       	push	r1
    5364:	cd b7       	in	r28, 0x3d	; 61
    5366:	de b7       	in	r29, 0x3e	; 62
    5368:	19 82       	std	Y+1, r1	; 0x01
    536a:	80 91 01 2d 	lds	r24, 0x2D01	; 0x802d01 <egDisplayTiming>
    536e:	90 91 02 2d 	lds	r25, 0x2D02	; 0x802d02 <egDisplayTiming+0x1>
    5372:	9e 01       	movw	r18, r28
    5374:	2f 5f       	subi	r18, 0xFF	; 255
    5376:	3f 4f       	sbci	r19, 0xFF	; 255
    5378:	41 e0       	ldi	r20, 0x01	; 1
    537a:	50 e0       	ldi	r21, 0x00	; 0
    537c:	60 e0       	ldi	r22, 0x00	; 0
    537e:	70 e0       	ldi	r23, 0x00	; 0
    5380:	0e 94 b0 07 	call	0xf60	; 0xf60 <xEventGroupSetBitsFromISR>
    5384:	60 e0       	ldi	r22, 0x00	; 0
    5386:	80 e0       	ldi	r24, 0x00	; 0
    5388:	9b e0       	ldi	r25, 0x0B	; 11
    538a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <TC0_ConfigClockSource>
    538e:	80 e0       	ldi	r24, 0x00	; 0
    5390:	9b e0       	ldi	r25, 0x0B	; 11
    5392:	fc 01       	movw	r30, r24
    5394:	16 82       	std	Z+6, r1	; 0x06
    5396:	00 00       	nop
    5398:	0f 90       	pop	r0
    539a:	df 91       	pop	r29
    539c:	cf 91       	pop	r28
    539e:	ff 91       	pop	r31
    53a0:	ef 91       	pop	r30
    53a2:	bf 91       	pop	r27
    53a4:	af 91       	pop	r26
    53a6:	9f 91       	pop	r25
    53a8:	8f 91       	pop	r24
    53aa:	7f 91       	pop	r23
    53ac:	6f 91       	pop	r22
    53ae:	5f 91       	pop	r21
    53b0:	4f 91       	pop	r20
    53b2:	3f 91       	pop	r19
    53b4:	2f 91       	pop	r18
    53b6:	0f 90       	pop	r0
    53b8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    53bc:	0f 90       	pop	r0
    53be:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    53c2:	0f 90       	pop	r0
    53c4:	1f 90       	pop	r1
    53c6:	18 95       	reti

000053c8 <delayUS>:
    53c8:	cf 92       	push	r12
    53ca:	df 92       	push	r13
    53cc:	ef 92       	push	r14
    53ce:	ff 92       	push	r15
    53d0:	0f 93       	push	r16
    53d2:	cf 93       	push	r28
    53d4:	df 93       	push	r29
    53d6:	00 d0       	rcall	.+0      	; 0x53d8 <delayUS+0x10>
    53d8:	1f 92       	push	r1
    53da:	cd b7       	in	r28, 0x3d	; 61
    53dc:	de b7       	in	r29, 0x3e	; 62
    53de:	69 83       	std	Y+1, r22	; 0x01
    53e0:	7a 83       	std	Y+2, r23	; 0x02
    53e2:	8b 83       	std	Y+3, r24	; 0x03
    53e4:	9c 83       	std	Y+4, r25	; 0x04
    53e6:	89 81       	ldd	r24, Y+1	; 0x01
    53e8:	9a 81       	ldd	r25, Y+2	; 0x02
    53ea:	ab 81       	ldd	r26, Y+3	; 0x03
    53ec:	bc 81       	ldd	r27, Y+4	; 0x04
    53ee:	02 97       	sbiw	r24, 0x02	; 2
    53f0:	a1 05       	cpc	r26, r1
    53f2:	b1 05       	cpc	r27, r1
    53f4:	40 f4       	brcc	.+16     	; 0x5406 <delayUS+0x3e>
    53f6:	82 e0       	ldi	r24, 0x02	; 2
    53f8:	90 e0       	ldi	r25, 0x00	; 0
    53fa:	a0 e0       	ldi	r26, 0x00	; 0
    53fc:	b0 e0       	ldi	r27, 0x00	; 0
    53fe:	89 83       	std	Y+1, r24	; 0x01
    5400:	9a 83       	std	Y+2, r25	; 0x02
    5402:	ab 83       	std	Y+3, r26	; 0x03
    5404:	bc 83       	std	Y+4, r27	; 0x04
    5406:	80 e0       	ldi	r24, 0x00	; 0
    5408:	9b e0       	ldi	r25, 0x0B	; 11
    540a:	21 e0       	ldi	r18, 0x01	; 1
    540c:	fc 01       	movw	r30, r24
    540e:	26 83       	std	Z+6, r18	; 0x06
    5410:	80 e0       	ldi	r24, 0x00	; 0
    5412:	9b e0       	ldi	r25, 0x0B	; 11
    5414:	fc 01       	movw	r30, r24
    5416:	10 a2       	std	Z+32, r1	; 0x20
    5418:	11 a2       	std	Z+33, r1	; 0x21
    541a:	60 e0       	ldi	r22, 0x00	; 0
    541c:	80 e0       	ldi	r24, 0x00	; 0
    541e:	9b e0       	ldi	r25, 0x0B	; 11
    5420:	0e 94 1b 04 	call	0x836	; 0x836 <TC0_ConfigWGM>
    5424:	89 81       	ldd	r24, Y+1	; 0x01
    5426:	9a 81       	ldd	r25, Y+2	; 0x02
    5428:	ab 81       	ldd	r26, Y+3	; 0x03
    542a:	bc 81       	ldd	r27, Y+4	; 0x04
    542c:	8e 3f       	cpi	r24, 0xFE	; 254
    542e:	9f 4f       	sbci	r25, 0xFF	; 255
    5430:	a1 05       	cpc	r26, r1
    5432:	b1 05       	cpc	r27, r1
    5434:	98 f4       	brcc	.+38     	; 0x545c <delayUS+0x94>
    5436:	20 e0       	ldi	r18, 0x00	; 0
    5438:	3b e0       	ldi	r19, 0x0B	; 11
    543a:	89 81       	ldd	r24, Y+1	; 0x01
    543c:	9a 81       	ldd	r25, Y+2	; 0x02
    543e:	ab 81       	ldd	r26, Y+3	; 0x03
    5440:	bc 81       	ldd	r27, Y+4	; 0x04
    5442:	b6 95       	lsr	r27
    5444:	a7 95       	ror	r26
    5446:	97 95       	ror	r25
    5448:	87 95       	ror	r24
    544a:	f9 01       	movw	r30, r18
    544c:	86 a3       	std	Z+38, r24	; 0x26
    544e:	97 a3       	std	Z+39, r25	; 0x27
    5450:	65 e0       	ldi	r22, 0x05	; 5
    5452:	80 e0       	ldi	r24, 0x00	; 0
    5454:	9b e0       	ldi	r25, 0x0B	; 11
    5456:	0e 94 ff 03 	call	0x7fe	; 0x7fe <TC0_ConfigClockSource>
    545a:	1f c0       	rjmp	.+62     	; 0x549a <delayUS+0xd2>
    545c:	89 81       	ldd	r24, Y+1	; 0x01
    545e:	9a 81       	ldd	r25, Y+2	; 0x02
    5460:	ab 81       	ldd	r26, Y+3	; 0x03
    5462:	bc 81       	ldd	r27, Y+4	; 0x04
    5464:	80 34       	cpi	r24, 0x40	; 64
    5466:	92 44       	sbci	r25, 0x42	; 66
    5468:	af 40       	sbci	r26, 0x0F	; 15
    546a:	b1 05       	cpc	r27, r1
    546c:	b0 f4       	brcc	.+44     	; 0x549a <delayUS+0xd2>
    546e:	20 e0       	ldi	r18, 0x00	; 0
    5470:	3b e0       	ldi	r19, 0x0B	; 11
    5472:	89 81       	ldd	r24, Y+1	; 0x01
    5474:	9a 81       	ldd	r25, Y+2	; 0x02
    5476:	ab 81       	ldd	r26, Y+3	; 0x03
    5478:	bc 81       	ldd	r27, Y+4	; 0x04
    547a:	68 94       	set
    547c:	14 f8       	bld	r1, 4
    547e:	b6 95       	lsr	r27
    5480:	a7 95       	ror	r26
    5482:	97 95       	ror	r25
    5484:	87 95       	ror	r24
    5486:	16 94       	lsr	r1
    5488:	d1 f7       	brne	.-12     	; 0x547e <delayUS+0xb6>
    548a:	f9 01       	movw	r30, r18
    548c:	86 a3       	std	Z+38, r24	; 0x26
    548e:	97 a3       	std	Z+39, r25	; 0x27
    5490:	67 e0       	ldi	r22, 0x07	; 7
    5492:	80 e0       	ldi	r24, 0x00	; 0
    5494:	9b e0       	ldi	r25, 0x0B	; 11
    5496:	0e 94 ff 03 	call	0x7fe	; 0x7fe <TC0_ConfigClockSource>
    549a:	80 91 01 2d 	lds	r24, 0x2D01	; 0x802d01 <egDisplayTiming>
    549e:	90 91 02 2d 	lds	r25, 0x2D02	; 0x802d02 <egDisplayTiming+0x1>
    54a2:	0f 2e       	mov	r0, r31
    54a4:	f4 ef       	ldi	r31, 0xF4	; 244
    54a6:	cf 2e       	mov	r12, r31
    54a8:	dd 24       	eor	r13, r13
    54aa:	d3 94       	inc	r13
    54ac:	e1 2c       	mov	r14, r1
    54ae:	f1 2c       	mov	r15, r1
    54b0:	f0 2d       	mov	r31, r0
    54b2:	00 e0       	ldi	r16, 0x00	; 0
    54b4:	21 e0       	ldi	r18, 0x01	; 1
    54b6:	41 e0       	ldi	r20, 0x01	; 1
    54b8:	50 e0       	ldi	r21, 0x00	; 0
    54ba:	60 e0       	ldi	r22, 0x00	; 0
    54bc:	70 e0       	ldi	r23, 0x00	; 0
    54be:	0e 94 c0 04 	call	0x980	; 0x980 <xEventGroupWaitBits>
    54c2:	00 00       	nop
    54c4:	24 96       	adiw	r28, 0x04	; 4
    54c6:	cd bf       	out	0x3d, r28	; 61
    54c8:	de bf       	out	0x3e, r29	; 62
    54ca:	df 91       	pop	r29
    54cc:	cf 91       	pop	r28
    54ce:	0f 91       	pop	r16
    54d0:	ff 90       	pop	r15
    54d2:	ef 90       	pop	r14
    54d4:	df 90       	pop	r13
    54d6:	cf 90       	pop	r12
    54d8:	08 95       	ret

000054da <setPort>:
    54da:	cf 93       	push	r28
    54dc:	df 93       	push	r29
    54de:	1f 92       	push	r1
    54e0:	cd b7       	in	r28, 0x3d	; 61
    54e2:	de b7       	in	r29, 0x3e	; 62
    54e4:	89 83       	std	Y+1, r24	; 0x01
    54e6:	89 81       	ldd	r24, Y+1	; 0x01
    54e8:	8f 70       	andi	r24, 0x0F	; 15
    54ea:	89 83       	std	Y+1, r24	; 0x01
    54ec:	89 81       	ldd	r24, Y+1	; 0x01
    54ee:	82 95       	swap	r24
    54f0:	80 7f       	andi	r24, 0xF0	; 240
    54f2:	89 83       	std	Y+1, r24	; 0x01
    54f4:	80 e0       	ldi	r24, 0x00	; 0
    54f6:	96 e0       	ldi	r25, 0x06	; 6
    54f8:	20 e0       	ldi	r18, 0x00	; 0
    54fa:	36 e0       	ldi	r19, 0x06	; 6
    54fc:	f9 01       	movw	r30, r18
    54fe:	34 81       	ldd	r19, Z+4	; 0x04
    5500:	29 81       	ldd	r18, Y+1	; 0x01
    5502:	2f 60       	ori	r18, 0x0F	; 15
    5504:	23 23       	and	r18, r19
    5506:	fc 01       	movw	r30, r24
    5508:	24 83       	std	Z+4, r18	; 0x04
    550a:	80 e0       	ldi	r24, 0x00	; 0
    550c:	96 e0       	ldi	r25, 0x06	; 6
    550e:	20 e0       	ldi	r18, 0x00	; 0
    5510:	36 e0       	ldi	r19, 0x06	; 6
    5512:	f9 01       	movw	r30, r18
    5514:	34 81       	ldd	r19, Z+4	; 0x04
    5516:	29 81       	ldd	r18, Y+1	; 0x01
    5518:	23 2b       	or	r18, r19
    551a:	fc 01       	movw	r30, r24
    551c:	24 83       	std	Z+4, r18	; 0x04
    551e:	00 00       	nop
    5520:	0f 90       	pop	r0
    5522:	df 91       	pop	r29
    5524:	cf 91       	pop	r28
    5526:	08 95       	ret

00005528 <setRS>:
    5528:	cf 93       	push	r28
    552a:	df 93       	push	r29
    552c:	1f 92       	push	r1
    552e:	cd b7       	in	r28, 0x3d	; 61
    5530:	de b7       	in	r29, 0x3e	; 62
    5532:	89 83       	std	Y+1, r24	; 0x01
    5534:	89 81       	ldd	r24, Y+1	; 0x01
    5536:	88 23       	and	r24, r24
    5538:	31 f0       	breq	.+12     	; 0x5546 <setRS+0x1e>
    553a:	80 e6       	ldi	r24, 0x60	; 96
    553c:	96 e0       	ldi	r25, 0x06	; 6
    553e:	21 e0       	ldi	r18, 0x01	; 1
    5540:	fc 01       	movw	r30, r24
    5542:	25 83       	std	Z+5, r18	; 0x05
    5544:	05 c0       	rjmp	.+10     	; 0x5550 <setRS+0x28>
    5546:	80 e6       	ldi	r24, 0x60	; 96
    5548:	96 e0       	ldi	r25, 0x06	; 6
    554a:	21 e0       	ldi	r18, 0x01	; 1
    554c:	fc 01       	movw	r30, r24
    554e:	26 83       	std	Z+6, r18	; 0x06
    5550:	00 00       	nop
    5552:	0f 90       	pop	r0
    5554:	df 91       	pop	r29
    5556:	cf 91       	pop	r28
    5558:	08 95       	ret

0000555a <setRW>:
    555a:	cf 93       	push	r28
    555c:	df 93       	push	r29
    555e:	1f 92       	push	r1
    5560:	cd b7       	in	r28, 0x3d	; 61
    5562:	de b7       	in	r29, 0x3e	; 62
    5564:	89 83       	std	Y+1, r24	; 0x01
    5566:	89 81       	ldd	r24, Y+1	; 0x01
    5568:	88 23       	and	r24, r24
    556a:	31 f0       	breq	.+12     	; 0x5578 <setRW+0x1e>
    556c:	80 e6       	ldi	r24, 0x60	; 96
    556e:	96 e0       	ldi	r25, 0x06	; 6
    5570:	22 e0       	ldi	r18, 0x02	; 2
    5572:	fc 01       	movw	r30, r24
    5574:	25 83       	std	Z+5, r18	; 0x05
    5576:	05 c0       	rjmp	.+10     	; 0x5582 <setRW+0x28>
    5578:	80 e6       	ldi	r24, 0x60	; 96
    557a:	96 e0       	ldi	r25, 0x06	; 6
    557c:	22 e0       	ldi	r18, 0x02	; 2
    557e:	fc 01       	movw	r30, r24
    5580:	26 83       	std	Z+6, r18	; 0x06
    5582:	00 00       	nop
    5584:	0f 90       	pop	r0
    5586:	df 91       	pop	r29
    5588:	cf 91       	pop	r28
    558a:	08 95       	ret

0000558c <setE>:
    558c:	cf 93       	push	r28
    558e:	df 93       	push	r29
    5590:	1f 92       	push	r1
    5592:	cd b7       	in	r28, 0x3d	; 61
    5594:	de b7       	in	r29, 0x3e	; 62
    5596:	89 83       	std	Y+1, r24	; 0x01
    5598:	89 81       	ldd	r24, Y+1	; 0x01
    559a:	88 23       	and	r24, r24
    559c:	31 f0       	breq	.+12     	; 0x55aa <setE+0x1e>
    559e:	80 e6       	ldi	r24, 0x60	; 96
    55a0:	96 e0       	ldi	r25, 0x06	; 6
    55a2:	24 e0       	ldi	r18, 0x04	; 4
    55a4:	fc 01       	movw	r30, r24
    55a6:	25 83       	std	Z+5, r18	; 0x05
    55a8:	05 c0       	rjmp	.+10     	; 0x55b4 <setE+0x28>
    55aa:	80 e6       	ldi	r24, 0x60	; 96
    55ac:	96 e0       	ldi	r25, 0x06	; 6
    55ae:	24 e0       	ldi	r18, 0x04	; 4
    55b0:	fc 01       	movw	r30, r24
    55b2:	26 83       	std	Z+6, r18	; 0x06
    55b4:	00 00       	nop
    55b6:	0f 90       	pop	r0
    55b8:	df 91       	pop	r29
    55ba:	cf 91       	pop	r28
    55bc:	08 95       	ret

000055be <Nybble>:
    55be:	cf 93       	push	r28
    55c0:	df 93       	push	r29
    55c2:	cd b7       	in	r28, 0x3d	; 61
    55c4:	de b7       	in	r29, 0x3e	; 62
    55c6:	81 e0       	ldi	r24, 0x01	; 1
    55c8:	0e 94 c6 2a 	call	0x558c	; 0x558c <setE>
    55cc:	61 e0       	ldi	r22, 0x01	; 1
    55ce:	70 e0       	ldi	r23, 0x00	; 0
    55d0:	80 e0       	ldi	r24, 0x00	; 0
    55d2:	90 e0       	ldi	r25, 0x00	; 0
    55d4:	0e 94 e4 29 	call	0x53c8	; 0x53c8 <delayUS>
    55d8:	80 e0       	ldi	r24, 0x00	; 0
    55da:	0e 94 c6 2a 	call	0x558c	; 0x558c <setE>
    55de:	00 00       	nop
    55e0:	df 91       	pop	r29
    55e2:	cf 91       	pop	r28
    55e4:	08 95       	ret

000055e6 <command>:
    55e6:	cf 93       	push	r28
    55e8:	df 93       	push	r29
    55ea:	1f 92       	push	r1
    55ec:	cd b7       	in	r28, 0x3d	; 61
    55ee:	de b7       	in	r29, 0x3e	; 62
    55f0:	89 83       	std	Y+1, r24	; 0x01
    55f2:	89 81       	ldd	r24, Y+1	; 0x01
    55f4:	82 95       	swap	r24
    55f6:	8f 70       	andi	r24, 0x0F	; 15
    55f8:	0e 94 6d 2a 	call	0x54da	; 0x54da <setPort>
    55fc:	80 e0       	ldi	r24, 0x00	; 0
    55fe:	0e 94 94 2a 	call	0x5528	; 0x5528 <setRS>
    5602:	80 e0       	ldi	r24, 0x00	; 0
    5604:	0e 94 ad 2a 	call	0x555a	; 0x555a <setRW>
    5608:	0e 94 df 2a 	call	0x55be	; 0x55be <Nybble>
    560c:	89 81       	ldd	r24, Y+1	; 0x01
    560e:	8f 70       	andi	r24, 0x0F	; 15
    5610:	0e 94 6d 2a 	call	0x54da	; 0x54da <setPort>
    5614:	0e 94 df 2a 	call	0x55be	; 0x55be <Nybble>
    5618:	00 00       	nop
    561a:	0f 90       	pop	r0
    561c:	df 91       	pop	r29
    561e:	cf 91       	pop	r28
    5620:	08 95       	ret

00005622 <write>:
    5622:	cf 93       	push	r28
    5624:	df 93       	push	r29
    5626:	1f 92       	push	r1
    5628:	cd b7       	in	r28, 0x3d	; 61
    562a:	de b7       	in	r29, 0x3e	; 62
    562c:	89 83       	std	Y+1, r24	; 0x01
    562e:	89 81       	ldd	r24, Y+1	; 0x01
    5630:	82 95       	swap	r24
    5632:	8f 70       	andi	r24, 0x0F	; 15
    5634:	0e 94 6d 2a 	call	0x54da	; 0x54da <setPort>
    5638:	81 e0       	ldi	r24, 0x01	; 1
    563a:	0e 94 94 2a 	call	0x5528	; 0x5528 <setRS>
    563e:	80 e0       	ldi	r24, 0x00	; 0
    5640:	0e 94 ad 2a 	call	0x555a	; 0x555a <setRW>
    5644:	0e 94 df 2a 	call	0x55be	; 0x55be <Nybble>
    5648:	89 81       	ldd	r24, Y+1	; 0x01
    564a:	8f 70       	andi	r24, 0x0F	; 15
    564c:	0e 94 6d 2a 	call	0x54da	; 0x54da <setPort>
    5650:	0e 94 df 2a 	call	0x55be	; 0x55be <Nybble>
    5654:	00 00       	nop
    5656:	0f 90       	pop	r0
    5658:	df 91       	pop	r29
    565a:	cf 91       	pop	r28
    565c:	08 95       	ret

0000565e <vInitDisplay>:
 
 void vInitDisplay() {
    565e:	ef 92       	push	r14
    5660:	ff 92       	push	r15
    5662:	0f 93       	push	r16
    5664:	cf 93       	push	r28
    5666:	df 93       	push	r29
    5668:	cd b7       	in	r28, 0x3d	; 61
    566a:	de b7       	in	r29, 0x3e	; 62
	PORTA.DIRSET = PIN4_bm;
    566c:	80 e0       	ldi	r24, 0x00	; 0
    566e:	96 e0       	ldi	r25, 0x06	; 6
    5670:	20 e1       	ldi	r18, 0x10	; 16
    5672:	fc 01       	movw	r30, r24
    5674:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN5_bm;
    5676:	80 e0       	ldi	r24, 0x00	; 0
    5678:	96 e0       	ldi	r25, 0x06	; 6
    567a:	20 e2       	ldi	r18, 0x20	; 32
    567c:	fc 01       	movw	r30, r24
    567e:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN6_bm;
    5680:	80 e0       	ldi	r24, 0x00	; 0
    5682:	96 e0       	ldi	r25, 0x06	; 6
    5684:	20 e4       	ldi	r18, 0x40	; 64
    5686:	fc 01       	movw	r30, r24
    5688:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN7_bm;
    568a:	80 e0       	ldi	r24, 0x00	; 0
    568c:	96 e0       	ldi	r25, 0x06	; 6
    568e:	20 e8       	ldi	r18, 0x80	; 128
    5690:	fc 01       	movw	r30, r24
    5692:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN0_bm;
    5694:	80 e6       	ldi	r24, 0x60	; 96
    5696:	96 e0       	ldi	r25, 0x06	; 6
    5698:	21 e0       	ldi	r18, 0x01	; 1
    569a:	fc 01       	movw	r30, r24
    569c:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN1_bm;
    569e:	80 e6       	ldi	r24, 0x60	; 96
    56a0:	96 e0       	ldi	r25, 0x06	; 6
    56a2:	22 e0       	ldi	r18, 0x02	; 2
    56a4:	fc 01       	movw	r30, r24
    56a6:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN2_bm;
    56a8:	80 e6       	ldi	r24, 0x60	; 96
    56aa:	96 e0       	ldi	r25, 0x06	; 6
    56ac:	24 e0       	ldi	r18, 0x04	; 4
    56ae:	fc 01       	movw	r30, r24
    56b0:	21 83       	std	Z+1, r18	; 0x01
	PORTA.OUT &= 0x0F;
    56b2:	80 e0       	ldi	r24, 0x00	; 0
    56b4:	96 e0       	ldi	r25, 0x06	; 6
    56b6:	20 e0       	ldi	r18, 0x00	; 0
    56b8:	36 e0       	ldi	r19, 0x06	; 6
    56ba:	f9 01       	movw	r30, r18
    56bc:	24 81       	ldd	r18, Z+4	; 0x04
    56be:	2f 70       	andi	r18, 0x0F	; 15
    56c0:	fc 01       	movw	r30, r24
    56c2:	24 83       	std	Z+4, r18	; 0x04
	PORTD.OUT &= 0xF8;
    56c4:	80 e6       	ldi	r24, 0x60	; 96
    56c6:	96 e0       	ldi	r25, 0x06	; 6
    56c8:	20 e6       	ldi	r18, 0x60	; 96
    56ca:	36 e0       	ldi	r19, 0x06	; 6
    56cc:	f9 01       	movw	r30, r18
    56ce:	24 81       	ldd	r18, Z+4	; 0x04
    56d0:	28 7f       	andi	r18, 0xF8	; 248
    56d2:	fc 01       	movw	r30, r24
    56d4:	24 83       	std	Z+4, r18	; 0x04

	if((displayLineQueue = xQueueCreate(DISPLAY_QUEUE_DEPTH, sizeof(displayLine_t))) == NULL)
    56d6:	40 e0       	ldi	r20, 0x00	; 0
    56d8:	66 e1       	ldi	r22, 0x16	; 22
    56da:	88 e0       	ldi	r24, 0x08	; 8
    56dc:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <xQueueGenericCreate>
    56e0:	80 93 ff 2c 	sts	0x2CFF, r24	; 0x802cff <displayLineQueue>
    56e4:	90 93 00 2d 	sts	0x2D00, r25	; 0x802d00 <displayLineQueue+0x1>
	{
		//error(ERR_QUEUE_CREATE_HANDLE_NULL);
	}
	
	egDisplayTiming = xEventGroupCreate();
    56e8:	0e 94 9d 04 	call	0x93a	; 0x93a <xEventGroupCreate>
    56ec:	80 93 01 2d 	sts	0x2D01, r24	; 0x802d01 <egDisplayTiming>
    56f0:	90 93 02 2d 	sts	0x2D02, r25	; 0x802d02 <egDisplayTiming+0x1>
	

	xTaskCreate(vDisplayUpdateTask, (const char*) "dispUpdate", configMINIMAL_STACK_SIZE+150, NULL, 1, NULL);	
    56f4:	e1 2c       	mov	r14, r1
    56f6:	f1 2c       	mov	r15, r1
    56f8:	01 e0       	ldi	r16, 0x01	; 1
    56fa:	20 e0       	ldi	r18, 0x00	; 0
    56fc:	30 e0       	ldi	r19, 0x00	; 0
    56fe:	4e e5       	ldi	r20, 0x5E	; 94
    5700:	51 e0       	ldi	r21, 0x01	; 1
    5702:	69 e4       	ldi	r22, 0x49	; 73
    5704:	70 e2       	ldi	r23, 0x20	; 32
    5706:	8d e2       	ldi	r24, 0x2D	; 45
    5708:	9c e2       	ldi	r25, 0x2C	; 44
    570a:	0e 94 2a 12 	call	0x2454	; 0x2454 <xTaskCreate>
 }
    570e:	00 00       	nop
    5710:	df 91       	pop	r29
    5712:	cf 91       	pop	r28
    5714:	0f 91       	pop	r16
    5716:	ff 90       	pop	r15
    5718:	ef 90       	pop	r14
    571a:	08 95       	ret

0000571c <_displaySetPos>:
 
 void _displaySetPos(int line, int pos) {
    571c:	cf 93       	push	r28
    571e:	df 93       	push	r29
    5720:	00 d0       	rcall	.+0      	; 0x5722 <_displaySetPos+0x6>
    5722:	1f 92       	push	r1
    5724:	cd b7       	in	r28, 0x3d	; 61
    5726:	de b7       	in	r29, 0x3e	; 62
    5728:	89 83       	std	Y+1, r24	; 0x01
    572a:	9a 83       	std	Y+2, r25	; 0x02
    572c:	6b 83       	std	Y+3, r22	; 0x03
    572e:	7c 83       	std	Y+4, r23	; 0x04
	 switch(line) {
    5730:	89 81       	ldd	r24, Y+1	; 0x01
    5732:	9a 81       	ldd	r25, Y+2	; 0x02
    5734:	81 30       	cpi	r24, 0x01	; 1
    5736:	91 05       	cpc	r25, r1
    5738:	89 f0       	breq	.+34     	; 0x575c <_displaySetPos+0x40>
    573a:	82 30       	cpi	r24, 0x02	; 2
    573c:	91 05       	cpc	r25, r1
    573e:	1c f4       	brge	.+6      	; 0x5746 <_displaySetPos+0x2a>
    5740:	89 2b       	or	r24, r25
    5742:	39 f0       	breq	.+14     	; 0x5752 <_displaySetPos+0x36>
    5744:	1a c0       	rjmp	.+52     	; 0x577a <_displaySetPos+0x5e>
    5746:	82 30       	cpi	r24, 0x02	; 2
    5748:	91 05       	cpc	r25, r1
    574a:	69 f0       	breq	.+26     	; 0x5766 <_displaySetPos+0x4a>
    574c:	03 97       	sbiw	r24, 0x03	; 3
    574e:	81 f0       	breq	.+32     	; 0x5770 <_displaySetPos+0x54>
    5750:	14 c0       	rjmp	.+40     	; 0x577a <_displaySetPos+0x5e>
		 case 0:
		 command(0x80 + 0x00 + pos);
    5752:	8b 81       	ldd	r24, Y+3	; 0x03
    5754:	80 58       	subi	r24, 0x80	; 128
    5756:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <command>
		 break;
    575a:	0f c0       	rjmp	.+30     	; 0x577a <_displaySetPos+0x5e>
		 case 1:
		 command(0x80 + 0x40 + pos);
    575c:	8b 81       	ldd	r24, Y+3	; 0x03
    575e:	80 54       	subi	r24, 0x40	; 64
    5760:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <command>
		 break;
    5764:	0a c0       	rjmp	.+20     	; 0x577a <_displaySetPos+0x5e>
		 case 2:
		 command(0x80 + 0x14 + pos);
    5766:	8b 81       	ldd	r24, Y+3	; 0x03
    5768:	8c 56       	subi	r24, 0x6C	; 108
    576a:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <command>
		 break;
    576e:	05 c0       	rjmp	.+10     	; 0x577a <_displaySetPos+0x5e>
		 case 3:
		 command(0x80 + 0x54 + pos);
    5770:	8b 81       	ldd	r24, Y+3	; 0x03
    5772:	8c 52       	subi	r24, 0x2C	; 44
    5774:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <command>
		 break;
    5778:	00 00       	nop
	 }
	 delayUS(39);
    577a:	67 e2       	ldi	r22, 0x27	; 39
    577c:	70 e0       	ldi	r23, 0x00	; 0
    577e:	80 e0       	ldi	r24, 0x00	; 0
    5780:	90 e0       	ldi	r25, 0x00	; 0
    5782:	0e 94 e4 29 	call	0x53c8	; 0x53c8 <delayUS>
 }
    5786:	00 00       	nop
    5788:	24 96       	adiw	r28, 0x04	; 4
    578a:	cd bf       	out	0x3d, r28	; 61
    578c:	de bf       	out	0x3e, r29	; 62
    578e:	df 91       	pop	r29
    5790:	cf 91       	pop	r28
    5792:	08 95       	ret

00005794 <_displayWriteChar>:

 void _displayWriteChar(char c) {
    5794:	cf 93       	push	r28
    5796:	df 93       	push	r29
    5798:	1f 92       	push	r1
    579a:	cd b7       	in	r28, 0x3d	; 61
    579c:	de b7       	in	r29, 0x3e	; 62
    579e:	89 83       	std	Y+1, r24	; 0x01
	 write(c);
    57a0:	89 81       	ldd	r24, Y+1	; 0x01
    57a2:	0e 94 11 2b 	call	0x5622	; 0x5622 <write>
	 delayUS(43);
    57a6:	6b e2       	ldi	r22, 0x2B	; 43
    57a8:	70 e0       	ldi	r23, 0x00	; 0
    57aa:	80 e0       	ldi	r24, 0x00	; 0
    57ac:	90 e0       	ldi	r25, 0x00	; 0
    57ae:	0e 94 e4 29 	call	0x53c8	; 0x53c8 <delayUS>
 }
    57b2:	00 00       	nop
    57b4:	0f 90       	pop	r0
    57b6:	df 91       	pop	r29
    57b8:	cf 91       	pop	r28
    57ba:	08 95       	ret

000057bc <_displayWriteString>:
 
 void _displayWriteString(char* s) {
    57bc:	cf 93       	push	r28
    57be:	df 93       	push	r29
    57c0:	00 d0       	rcall	.+0      	; 0x57c2 <_displayWriteString+0x6>
    57c2:	1f 92       	push	r1
    57c4:	cd b7       	in	r28, 0x3d	; 61
    57c6:	de b7       	in	r29, 0x3e	; 62
    57c8:	8b 83       	std	Y+3, r24	; 0x03
    57ca:	9c 83       	std	Y+4, r25	; 0x04
	 for(int i = 0; i < 20; i++) {
    57cc:	19 82       	std	Y+1, r1	; 0x01
    57ce:	1a 82       	std	Y+2, r1	; 0x02
    57d0:	19 c0       	rjmp	.+50     	; 0x5804 <_displayWriteString+0x48>
		 if(s[i] == '\0') {
    57d2:	89 81       	ldd	r24, Y+1	; 0x01
    57d4:	9a 81       	ldd	r25, Y+2	; 0x02
    57d6:	2b 81       	ldd	r18, Y+3	; 0x03
    57d8:	3c 81       	ldd	r19, Y+4	; 0x04
    57da:	82 0f       	add	r24, r18
    57dc:	93 1f       	adc	r25, r19
    57de:	fc 01       	movw	r30, r24
    57e0:	80 81       	ld	r24, Z
    57e2:	88 23       	and	r24, r24
    57e4:	a1 f0       	breq	.+40     	; 0x580e <_displayWriteString+0x52>
			 break;
		 }
		 _displayWriteChar(s[i]);
    57e6:	89 81       	ldd	r24, Y+1	; 0x01
    57e8:	9a 81       	ldd	r25, Y+2	; 0x02
    57ea:	2b 81       	ldd	r18, Y+3	; 0x03
    57ec:	3c 81       	ldd	r19, Y+4	; 0x04
    57ee:	82 0f       	add	r24, r18
    57f0:	93 1f       	adc	r25, r19
    57f2:	fc 01       	movw	r30, r24
    57f4:	80 81       	ld	r24, Z
    57f6:	0e 94 ca 2b 	call	0x5794	; 0x5794 <_displayWriteChar>
	 write(c);
	 delayUS(43);
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
    57fa:	89 81       	ldd	r24, Y+1	; 0x01
    57fc:	9a 81       	ldd	r25, Y+2	; 0x02
    57fe:	01 96       	adiw	r24, 0x01	; 1
    5800:	89 83       	std	Y+1, r24	; 0x01
    5802:	9a 83       	std	Y+2, r25	; 0x02
    5804:	89 81       	ldd	r24, Y+1	; 0x01
    5806:	9a 81       	ldd	r25, Y+2	; 0x02
    5808:	44 97       	sbiw	r24, 0x14	; 20
    580a:	1c f3       	brlt	.-58     	; 0x57d2 <_displayWriteString+0x16>
		 if(s[i] == '\0') {
			 break;
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    580c:	01 c0       	rjmp	.+2      	; 0x5810 <_displayWriteString+0x54>
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
		 if(s[i] == '\0') {
			 break;
    580e:	00 00       	nop
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    5810:	00 00       	nop
    5812:	24 96       	adiw	r28, 0x04	; 4
    5814:	cd bf       	out	0x3d, r28	; 61
    5816:	de bf       	out	0x3e, r29	; 62
    5818:	df 91       	pop	r29
    581a:	cf 91       	pop	r28
    581c:	08 95       	ret

0000581e <_displayWriteStringAtPos>:

 void _displayWriteStringAtPos(int line, int pos, char* s) {
    581e:	cf 93       	push	r28
    5820:	df 93       	push	r29
    5822:	00 d0       	rcall	.+0      	; 0x5824 <_displayWriteStringAtPos+0x6>
    5824:	00 d0       	rcall	.+0      	; 0x5826 <_displayWriteStringAtPos+0x8>
    5826:	cd b7       	in	r28, 0x3d	; 61
    5828:	de b7       	in	r29, 0x3e	; 62
    582a:	89 83       	std	Y+1, r24	; 0x01
    582c:	9a 83       	std	Y+2, r25	; 0x02
    582e:	6b 83       	std	Y+3, r22	; 0x03
    5830:	7c 83       	std	Y+4, r23	; 0x04
    5832:	4d 83       	std	Y+5, r20	; 0x05
    5834:	5e 83       	std	Y+6, r21	; 0x06
	 _displaySetPos(line, pos);
    5836:	2b 81       	ldd	r18, Y+3	; 0x03
    5838:	3c 81       	ldd	r19, Y+4	; 0x04
    583a:	89 81       	ldd	r24, Y+1	; 0x01
    583c:	9a 81       	ldd	r25, Y+2	; 0x02
    583e:	b9 01       	movw	r22, r18
    5840:	0e 94 8e 2b 	call	0x571c	; 0x571c <_displaySetPos>
	 _displayWriteString(s);
    5844:	8d 81       	ldd	r24, Y+5	; 0x05
    5846:	9e 81       	ldd	r25, Y+6	; 0x06
    5848:	0e 94 de 2b 	call	0x57bc	; 0x57bc <_displayWriteString>
 }
    584c:	00 00       	nop
    584e:	26 96       	adiw	r28, 0x06	; 6
    5850:	cd bf       	out	0x3d, r28	; 61
    5852:	de bf       	out	0x3e, r29	; 62
    5854:	df 91       	pop	r29
    5856:	cf 91       	pop	r28
    5858:	08 95       	ret

0000585a <vDisplayUpdateTask>:

 void vDisplayUpdateTask(void *pvParameters) {
    585a:	cf 93       	push	r28
    585c:	df 93       	push	r29
    585e:	cd b7       	in	r28, 0x3d	; 61
    5860:	de b7       	in	r29, 0x3e	; 62
    5862:	c0 57       	subi	r28, 0x70	; 112
    5864:	d1 09       	sbc	r29, r1
    5866:	cd bf       	out	0x3d, r28	; 61
    5868:	de bf       	out	0x3e, r29	; 62
    586a:	9e 01       	movw	r18, r28
    586c:	21 59       	subi	r18, 0x91	; 145
    586e:	3f 4f       	sbci	r19, 0xFF	; 255
    5870:	f9 01       	movw	r30, r18
    5872:	80 83       	st	Z, r24
    5874:	91 83       	std	Z+1, r25	; 0x01
	 int i = 0;
    5876:	19 82       	std	Y+1, r1	; 0x01
    5878:	1a 82       	std	Y+2, r1	; 0x02
	 int j = 0;
    587a:	1b 82       	std	Y+3, r1	; 0x03
    587c:	1c 82       	std	Y+4, r1	; 0x04
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    587e:	1d 82       	std	Y+5, r1	; 0x05
    5880:	1e 82       	std	Y+6, r1	; 0x06
    5882:	26 c0       	rjmp	.+76     	; 0x58d0 <vDisplayUpdateTask+0x76>
		for(int j = 0; j < 20; j ++) {
    5884:	1f 82       	std	Y+7, r1	; 0x07
    5886:	18 86       	std	Y+8, r1	; 0x08
    5888:	1a c0       	rjmp	.+52     	; 0x58be <vDisplayUpdateTask+0x64>
			displayLines[i][j] = 0x20;
    588a:	2d 81       	ldd	r18, Y+5	; 0x05
    588c:	3e 81       	ldd	r19, Y+6	; 0x06
    588e:	44 e1       	ldi	r20, 0x14	; 20
    5890:	42 9f       	mul	r20, r18
    5892:	c0 01       	movw	r24, r0
    5894:	43 9f       	mul	r20, r19
    5896:	90 0d       	add	r25, r0
    5898:	11 24       	eor	r1, r1
    589a:	9e 01       	movw	r18, r28
    589c:	2f 5f       	subi	r18, 0xFF	; 255
    589e:	3f 4f       	sbci	r19, 0xFF	; 255
    58a0:	28 0f       	add	r18, r24
    58a2:	39 1f       	adc	r19, r25
    58a4:	8f 81       	ldd	r24, Y+7	; 0x07
    58a6:	98 85       	ldd	r25, Y+8	; 0x08
    58a8:	82 0f       	add	r24, r18
    58aa:	93 1f       	adc	r25, r19
    58ac:	08 96       	adiw	r24, 0x08	; 8
    58ae:	20 e2       	ldi	r18, 0x20	; 32
    58b0:	fc 01       	movw	r30, r24
    58b2:	20 83       	st	Z, r18
 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
    58b4:	8f 81       	ldd	r24, Y+7	; 0x07
    58b6:	98 85       	ldd	r25, Y+8	; 0x08
    58b8:	01 96       	adiw	r24, 0x01	; 1
    58ba:	8f 83       	std	Y+7, r24	; 0x07
    58bc:	98 87       	std	Y+8, r25	; 0x08
    58be:	8f 81       	ldd	r24, Y+7	; 0x07
    58c0:	98 85       	ldd	r25, Y+8	; 0x08
    58c2:	44 97       	sbiw	r24, 0x14	; 20
    58c4:	14 f3       	brlt	.-60     	; 0x588a <vDisplayUpdateTask+0x30>

 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    58c6:	8d 81       	ldd	r24, Y+5	; 0x05
    58c8:	9e 81       	ldd	r25, Y+6	; 0x06
    58ca:	01 96       	adiw	r24, 0x01	; 1
    58cc:	8d 83       	std	Y+5, r24	; 0x05
    58ce:	9e 83       	std	Y+6, r25	; 0x06
    58d0:	8d 81       	ldd	r24, Y+5	; 0x05
    58d2:	9e 81       	ldd	r25, Y+6	; 0x06
    58d4:	04 97       	sbiw	r24, 0x04	; 4
    58d6:	b4 f2       	brlt	.-84     	; 0x5884 <vDisplayUpdateTask+0x2a>
			displayLines[i][j] = 0x20;
		}
	 }
	 displayLine_t newLine;

	 delayUS(40000);
    58d8:	60 e4       	ldi	r22, 0x40	; 64
    58da:	7c e9       	ldi	r23, 0x9C	; 156
    58dc:	80 e0       	ldi	r24, 0x00	; 0
    58de:	90 e0       	ldi	r25, 0x00	; 0
    58e0:	0e 94 e4 29 	call	0x53c8	; 0x53c8 <delayUS>
	 setPort(0x03);
    58e4:	83 e0       	ldi	r24, 0x03	; 3
    58e6:	0e 94 6d 2a 	call	0x54da	; 0x54da <setPort>
	 delayUS(5000);
    58ea:	68 e8       	ldi	r22, 0x88	; 136
    58ec:	73 e1       	ldi	r23, 0x13	; 19
    58ee:	80 e0       	ldi	r24, 0x00	; 0
    58f0:	90 e0       	ldi	r25, 0x00	; 0
    58f2:	0e 94 e4 29 	call	0x53c8	; 0x53c8 <delayUS>
	 Nybble();
    58f6:	0e 94 df 2a 	call	0x55be	; 0x55be <Nybble>
	 delayUS(160);
    58fa:	60 ea       	ldi	r22, 0xA0	; 160
    58fc:	70 e0       	ldi	r23, 0x00	; 0
    58fe:	80 e0       	ldi	r24, 0x00	; 0
    5900:	90 e0       	ldi	r25, 0x00	; 0
    5902:	0e 94 e4 29 	call	0x53c8	; 0x53c8 <delayUS>
	 Nybble();
    5906:	0e 94 df 2a 	call	0x55be	; 0x55be <Nybble>
	 delayUS(160);
    590a:	60 ea       	ldi	r22, 0xA0	; 160
    590c:	70 e0       	ldi	r23, 0x00	; 0
    590e:	80 e0       	ldi	r24, 0x00	; 0
    5910:	90 e0       	ldi	r25, 0x00	; 0
    5912:	0e 94 e4 29 	call	0x53c8	; 0x53c8 <delayUS>
	 Nybble();
    5916:	0e 94 df 2a 	call	0x55be	; 0x55be <Nybble>
	 delayUS(160);
    591a:	60 ea       	ldi	r22, 0xA0	; 160
    591c:	70 e0       	ldi	r23, 0x00	; 0
    591e:	80 e0       	ldi	r24, 0x00	; 0
    5920:	90 e0       	ldi	r25, 0x00	; 0
    5922:	0e 94 e4 29 	call	0x53c8	; 0x53c8 <delayUS>
	 setPort(0x02);
    5926:	82 e0       	ldi	r24, 0x02	; 2
    5928:	0e 94 6d 2a 	call	0x54da	; 0x54da <setPort>
	 Nybble();
    592c:	0e 94 df 2a 	call	0x55be	; 0x55be <Nybble>
	 command(0x28);
    5930:	88 e2       	ldi	r24, 0x28	; 40
    5932:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <command>
	 command(0x10);
    5936:	80 e1       	ldi	r24, 0x10	; 16
    5938:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <command>
	 command(0x0C); //Cursor and Blinking off
    593c:	8c e0       	ldi	r24, 0x0C	; 12
    593e:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <command>
	 command(0x06);
    5942:	86 e0       	ldi	r24, 0x06	; 6
    5944:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <command>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
    5948:	68 ec       	ldi	r22, 0xC8	; 200
    594a:	70 e0       	ldi	r23, 0x00	; 0
    594c:	80 e0       	ldi	r24, 0x00	; 0
    594e:	90 e0       	ldi	r25, 0x00	; 0
    5950:	0e 94 fd 13 	call	0x27fa	; 0x27fa <vTaskDelay>
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
    5954:	80 91 01 2d 	lds	r24, 0x2D01	; 0x802d01 <egDisplayTiming>
    5958:	90 91 02 2d 	lds	r25, 0x2D02	; 0x802d02 <egDisplayTiming+0x1>
    595c:	40 e0       	ldi	r20, 0x00	; 0
    595e:	50 e0       	ldi	r21, 0x00	; 0
    5960:	ba 01       	movw	r22, r20
    5962:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xEventGroupClearBits>
    5966:	dc 01       	movw	r26, r24
    5968:	cb 01       	movw	r24, r22
    596a:	89 2b       	or	r24, r25
    596c:	8a 2b       	or	r24, r26
    596e:	8b 2b       	or	r24, r27
    5970:	09 f4       	brne	.+2      	; 0x5974 <vDisplayUpdateTask+0x11a>
    5972:	96 c0       	rjmp	.+300    	; 0x5aa0 <vDisplayUpdateTask+0x246>
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    5974:	80 91 01 2d 	lds	r24, 0x2D01	; 0x802d01 <egDisplayTiming>
    5978:	90 91 02 2d 	lds	r25, 0x2D02	; 0x802d02 <egDisplayTiming+0x1>
    597c:	42 e0       	ldi	r20, 0x02	; 2
    597e:	50 e0       	ldi	r21, 0x00	; 0
    5980:	60 e0       	ldi	r22, 0x00	; 0
    5982:	70 e0       	ldi	r23, 0x00	; 0
    5984:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xEventGroupClearBits>
			for(i = 0; i < 4;i++) {
    5988:	19 82       	std	Y+1, r1	; 0x01
    598a:	1a 82       	std	Y+2, r1	; 0x02
    598c:	26 c0       	rjmp	.+76     	; 0x59da <vDisplayUpdateTask+0x180>
				for(j = 0; j < 20; j ++) {
    598e:	1b 82       	std	Y+3, r1	; 0x03
    5990:	1c 82       	std	Y+4, r1	; 0x04
    5992:	1a c0       	rjmp	.+52     	; 0x59c8 <vDisplayUpdateTask+0x16e>
					displayLines[i][j] = 0x20;
    5994:	29 81       	ldd	r18, Y+1	; 0x01
    5996:	3a 81       	ldd	r19, Y+2	; 0x02
    5998:	44 e1       	ldi	r20, 0x14	; 20
    599a:	42 9f       	mul	r20, r18
    599c:	c0 01       	movw	r24, r0
    599e:	43 9f       	mul	r20, r19
    59a0:	90 0d       	add	r25, r0
    59a2:	11 24       	eor	r1, r1
    59a4:	9e 01       	movw	r18, r28
    59a6:	2f 5f       	subi	r18, 0xFF	; 255
    59a8:	3f 4f       	sbci	r19, 0xFF	; 255
    59aa:	28 0f       	add	r18, r24
    59ac:	39 1f       	adc	r19, r25
    59ae:	8b 81       	ldd	r24, Y+3	; 0x03
    59b0:	9c 81       	ldd	r25, Y+4	; 0x04
    59b2:	82 0f       	add	r24, r18
    59b4:	93 1f       	adc	r25, r19
    59b6:	08 96       	adiw	r24, 0x08	; 8
    59b8:	20 e2       	ldi	r18, 0x20	; 32
    59ba:	fc 01       	movw	r30, r24
    59bc:	20 83       	st	Z, r18
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
    59be:	8b 81       	ldd	r24, Y+3	; 0x03
    59c0:	9c 81       	ldd	r25, Y+4	; 0x04
    59c2:	01 96       	adiw	r24, 0x01	; 1
    59c4:	8b 83       	std	Y+3, r24	; 0x03
    59c6:	9c 83       	std	Y+4, r25	; 0x04
    59c8:	8b 81       	ldd	r24, Y+3	; 0x03
    59ca:	9c 81       	ldd	r25, Y+4	; 0x04
    59cc:	44 97       	sbiw	r24, 0x14	; 20
    59ce:	14 f3       	brlt	.-60     	; 0x5994 <vDisplayUpdateTask+0x13a>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
    59d0:	89 81       	ldd	r24, Y+1	; 0x01
    59d2:	9a 81       	ldd	r25, Y+2	; 0x02
    59d4:	01 96       	adiw	r24, 0x01	; 1
    59d6:	89 83       	std	Y+1, r24	; 0x01
    59d8:	9a 83       	std	Y+2, r25	; 0x02
    59da:	89 81       	ldd	r24, Y+1	; 0x01
    59dc:	9a 81       	ldd	r25, Y+2	; 0x02
    59de:	04 97       	sbiw	r24, 0x04	; 4
    59e0:	b4 f2       	brlt	.-84     	; 0x598e <vDisplayUpdateTask+0x134>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    59e2:	5e c0       	rjmp	.+188    	; 0x5aa0 <vDisplayUpdateTask+0x246>
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    59e4:	80 91 ff 2c 	lds	r24, 0x2CFF	; 0x802cff <displayLineQueue>
    59e8:	90 91 00 2d 	lds	r25, 0x2D00	; 0x802d00 <displayLineQueue+0x1>
    59ec:	be 01       	movw	r22, r28
    59ee:	67 5a       	subi	r22, 0xA7	; 167
    59f0:	7f 4f       	sbci	r23, 0xFF	; 255
    59f2:	2f ef       	ldi	r18, 0xFF	; 255
    59f4:	3f ef       	ldi	r19, 0xFF	; 255
    59f6:	a9 01       	movw	r20, r18
    59f8:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <xQueueReceive>
    59fc:	88 23       	and	r24, r24
    59fe:	09 f4       	brne	.+2      	; 0x5a02 <vDisplayUpdateTask+0x1a8>
    5a00:	4f c0       	rjmp	.+158    	; 0x5aa0 <vDisplayUpdateTask+0x246>
				i=0;			
    5a02:	19 82       	std	Y+1, r1	; 0x01
    5a04:	1a 82       	std	Y+2, r1	; 0x02
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    5a06:	32 c0       	rjmp	.+100    	; 0x5a6c <vDisplayUpdateTask+0x212>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
    5a08:	ce 01       	movw	r24, r28
    5a0a:	87 5a       	subi	r24, 0xA7	; 167
    5a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    5a0e:	fc 01       	movw	r30, r24
    5a10:	80 81       	ld	r24, Z
    5a12:	48 2f       	mov	r20, r24
    5a14:	50 e0       	ldi	r21, 0x00	; 0
    5a16:	ce 01       	movw	r24, r28
    5a18:	87 5a       	subi	r24, 0xA7	; 167
    5a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a1c:	fc 01       	movw	r30, r24
    5a1e:	81 81       	ldd	r24, Z+1	; 0x01
    5a20:	28 2f       	mov	r18, r24
    5a22:	30 e0       	ldi	r19, 0x00	; 0
    5a24:	89 81       	ldd	r24, Y+1	; 0x01
    5a26:	9a 81       	ldd	r25, Y+2	; 0x02
    5a28:	82 0f       	add	r24, r18
    5a2a:	93 1f       	adc	r25, r19
    5a2c:	be 01       	movw	r22, r28
    5a2e:	67 5a       	subi	r22, 0xA7	; 167
    5a30:	7f 4f       	sbci	r23, 0xFF	; 255
    5a32:	29 81       	ldd	r18, Y+1	; 0x01
    5a34:	3a 81       	ldd	r19, Y+2	; 0x02
    5a36:	26 0f       	add	r18, r22
    5a38:	37 1f       	adc	r19, r23
    5a3a:	2e 5f       	subi	r18, 0xFE	; 254
    5a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    5a3e:	f9 01       	movw	r30, r18
    5a40:	60 81       	ld	r22, Z
    5a42:	74 e1       	ldi	r23, 0x14	; 20
    5a44:	74 9f       	mul	r23, r20
    5a46:	90 01       	movw	r18, r0
    5a48:	75 9f       	mul	r23, r21
    5a4a:	30 0d       	add	r19, r0
    5a4c:	11 24       	eor	r1, r1
    5a4e:	ae 01       	movw	r20, r28
    5a50:	4f 5f       	subi	r20, 0xFF	; 255
    5a52:	5f 4f       	sbci	r21, 0xFF	; 255
    5a54:	24 0f       	add	r18, r20
    5a56:	35 1f       	adc	r19, r21
    5a58:	82 0f       	add	r24, r18
    5a5a:	93 1f       	adc	r25, r19
    5a5c:	08 96       	adiw	r24, 0x08	; 8
    5a5e:	fc 01       	movw	r30, r24
    5a60:	60 83       	st	Z, r22
					i++;
    5a62:	89 81       	ldd	r24, Y+1	; 0x01
    5a64:	9a 81       	ldd	r25, Y+2	; 0x02
    5a66:	01 96       	adiw	r24, 0x01	; 1
    5a68:	89 83       	std	Y+1, r24	; 0x01
    5a6a:	9a 83       	std	Y+2, r25	; 0x02
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    5a6c:	ce 01       	movw	r24, r28
    5a6e:	87 5a       	subi	r24, 0xA7	; 167
    5a70:	9f 4f       	sbci	r25, 0xFF	; 255
    5a72:	fc 01       	movw	r30, r24
    5a74:	81 81       	ldd	r24, Z+1	; 0x01
    5a76:	28 2f       	mov	r18, r24
    5a78:	30 e0       	ldi	r19, 0x00	; 0
    5a7a:	89 81       	ldd	r24, Y+1	; 0x01
    5a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    5a7e:	82 0f       	add	r24, r18
    5a80:	93 1f       	adc	r25, r19
    5a82:	44 97       	sbiw	r24, 0x14	; 20
    5a84:	6c f4       	brge	.+26     	; 0x5aa0 <vDisplayUpdateTask+0x246>
    5a86:	9e 01       	movw	r18, r28
    5a88:	27 5a       	subi	r18, 0xA7	; 167
    5a8a:	3f 4f       	sbci	r19, 0xFF	; 255
    5a8c:	89 81       	ldd	r24, Y+1	; 0x01
    5a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    5a90:	82 0f       	add	r24, r18
    5a92:	93 1f       	adc	r25, r19
    5a94:	02 96       	adiw	r24, 0x02	; 2
    5a96:	fc 01       	movw	r30, r24
    5a98:	80 81       	ld	r24, Z
    5a9a:	88 23       	and	r24, r24
    5a9c:	09 f0       	breq	.+2      	; 0x5aa0 <vDisplayUpdateTask+0x246>
    5a9e:	b4 cf       	rjmp	.-152    	; 0x5a08 <vDisplayUpdateTask+0x1ae>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    5aa0:	80 91 ff 2c 	lds	r24, 0x2CFF	; 0x802cff <displayLineQueue>
    5aa4:	90 91 00 2d 	lds	r25, 0x2D00	; 0x802d00 <displayLineQueue+0x1>
    5aa8:	0e 94 10 10 	call	0x2020	; 0x2020 <uxQueueMessagesWaiting>
    5aac:	88 23       	and	r24, r24
    5aae:	09 f0       	breq	.+2      	; 0x5ab2 <vDisplayUpdateTask+0x258>
    5ab0:	99 cf       	rjmp	.-206    	; 0x59e4 <vDisplayUpdateTask+0x18a>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    5ab2:	19 82       	std	Y+1, r1	; 0x01
    5ab4:	1a 82       	std	Y+2, r1	; 0x02
    5ab6:	19 c0       	rjmp	.+50     	; 0x5aea <vDisplayUpdateTask+0x290>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
    5ab8:	9e 01       	movw	r18, r28
    5aba:	27 5f       	subi	r18, 0xF7	; 247
    5abc:	3f 4f       	sbci	r19, 0xFF	; 255
    5abe:	49 81       	ldd	r20, Y+1	; 0x01
    5ac0:	5a 81       	ldd	r21, Y+2	; 0x02
    5ac2:	64 e1       	ldi	r22, 0x14	; 20
    5ac4:	64 9f       	mul	r22, r20
    5ac6:	c0 01       	movw	r24, r0
    5ac8:	65 9f       	mul	r22, r21
    5aca:	90 0d       	add	r25, r0
    5acc:	11 24       	eor	r1, r1
    5ace:	28 0f       	add	r18, r24
    5ad0:	39 1f       	adc	r19, r25
    5ad2:	89 81       	ldd	r24, Y+1	; 0x01
    5ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ad6:	a9 01       	movw	r20, r18
    5ad8:	60 e0       	ldi	r22, 0x00	; 0
    5ada:	70 e0       	ldi	r23, 0x00	; 0
    5adc:	0e 94 0f 2c 	call	0x581e	; 0x581e <_displayWriteStringAtPos>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    5ae0:	89 81       	ldd	r24, Y+1	; 0x01
    5ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    5ae4:	01 96       	adiw	r24, 0x01	; 1
    5ae6:	89 83       	std	Y+1, r24	; 0x01
    5ae8:	9a 83       	std	Y+2, r25	; 0x02
    5aea:	89 81       	ldd	r24, Y+1	; 0x01
    5aec:	9a 81       	ldd	r25, Y+2	; 0x02
    5aee:	04 97       	sbiw	r24, 0x04	; 4
    5af0:	1c f3       	brlt	.-58     	; 0x5ab8 <vDisplayUpdateTask+0x25e>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
		 }
	 }
    5af2:	2a cf       	rjmp	.-428    	; 0x5948 <vDisplayUpdateTask+0xee>

00005af4 <vDisplayClear>:
 }
 

void vDisplayClear() {
    5af4:	cf 93       	push	r28
    5af6:	df 93       	push	r29
    5af8:	cd b7       	in	r28, 0x3d	; 61
    5afa:	de b7       	in	r29, 0x3e	; 62
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    5afc:	80 91 01 2d 	lds	r24, 0x2D01	; 0x802d01 <egDisplayTiming>
    5b00:	90 91 02 2d 	lds	r25, 0x2D02	; 0x802d02 <egDisplayTiming+0x1>
    5b04:	42 e0       	ldi	r20, 0x02	; 2
    5b06:	50 e0       	ldi	r21, 0x00	; 0
    5b08:	60 e0       	ldi	r22, 0x00	; 0
    5b0a:	70 e0       	ldi	r23, 0x00	; 0
    5b0c:	0e 94 43 06 	call	0xc86	; 0xc86 <xEventGroupSetBits>
}
    5b10:	00 00       	nop
    5b12:	df 91       	pop	r29
    5b14:	cf 91       	pop	r28
    5b16:	08 95       	ret

00005b18 <vDisplayWriteStringAtPos>:

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    5b18:	cf 93       	push	r28
    5b1a:	df 93       	push	r29
    5b1c:	1f 92       	push	r1
    5b1e:	1f 92       	push	r1
    5b20:	cd b7       	in	r28, 0x3d	; 61
    5b22:	de b7       	in	r29, 0x3e	; 62
	va_list arg;	
	va_start(arg, fmt);
    5b24:	ce 01       	movw	r24, r28
    5b26:	0e 96       	adiw	r24, 0x0e	; 14
    5b28:	89 83       	std	Y+1, r24	; 0x01
    5b2a:	9a 83       	std	Y+2, r25	; 0x02
	display_vprintf(line, pos, fmt, arg);
    5b2c:	29 81       	ldd	r18, Y+1	; 0x01
    5b2e:	3a 81       	ldd	r19, Y+2	; 0x02
    5b30:	4c 85       	ldd	r20, Y+12	; 0x0c
    5b32:	5d 85       	ldd	r21, Y+13	; 0x0d
    5b34:	6a 85       	ldd	r22, Y+10	; 0x0a
    5b36:	7b 85       	ldd	r23, Y+11	; 0x0b
    5b38:	88 85       	ldd	r24, Y+8	; 0x08
    5b3a:	99 85       	ldd	r25, Y+9	; 0x09
    5b3c:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <display_vprintf>
	va_end(arg);	
}
    5b40:	00 00       	nop
    5b42:	0f 90       	pop	r0
    5b44:	0f 90       	pop	r0
    5b46:	df 91       	pop	r29
    5b48:	cf 91       	pop	r28
    5b4a:	08 95       	ret

00005b4c <display_vprintf>:
 
static int display_vprintf(int line, int pos, char const *fmt, va_list arg) {
    5b4c:	0f 93       	push	r16
    5b4e:	cf 93       	push	r28
    5b50:	df 93       	push	r29
    5b52:	cd b7       	in	r28, 0x3d	; 61
    5b54:	de b7       	in	r29, 0x3e	; 62
    5b56:	ec 97       	sbiw	r28, 0x3c	; 60
    5b58:	cd bf       	out	0x3d, r28	; 61
    5b5a:	de bf       	out	0x3e, r29	; 62
    5b5c:	8d ab       	std	Y+53, r24	; 0x35
    5b5e:	9e ab       	std	Y+54, r25	; 0x36
    5b60:	6f ab       	std	Y+55, r22	; 0x37
    5b62:	78 af       	std	Y+56, r23	; 0x38
    5b64:	49 af       	std	Y+57, r20	; 0x39
    5b66:	5a af       	std	Y+58, r21	; 0x3a
    5b68:	2b af       	std	Y+59, r18	; 0x3b
    5b6a:	3c af       	std	Y+60, r19	; 0x3c
	int int_temp;
	char char_temp;
	char *string_temp;
	double double_temp;
	char ch;
	int length = 0;
    5b6c:	19 82       	std	Y+1, r1	; 0x01
    5b6e:	1a 82       	std	Y+2, r1	; 0x02

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    5b70:	1b 82       	std	Y+3, r1	; 0x03
    5b72:	1c 82       	std	Y+4, r1	; 0x04
    5b74:	0b c0       	rjmp	.+22     	; 0x5b8c <display_vprintf+0x40>
		buffer[i] = 0x00;
    5b76:	8b 81       	ldd	r24, Y+3	; 0x03
    5b78:	9c 81       	ldd	r25, Y+4	; 0x04
    5b7a:	8c 53       	subi	r24, 0x3C	; 60
    5b7c:	93 4d       	sbci	r25, 0xD3	; 211
    5b7e:	fc 01       	movw	r30, r24
    5b80:	10 82       	st	Z, r1
	char ch;
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    5b82:	8b 81       	ldd	r24, Y+3	; 0x03
    5b84:	9c 81       	ldd	r25, Y+4	; 0x04
    5b86:	01 96       	adiw	r24, 0x01	; 1
    5b88:	8b 83       	std	Y+3, r24	; 0x03
    5b8a:	9c 83       	std	Y+4, r25	; 0x04
    5b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    5b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    5b90:	44 97       	sbiw	r24, 0x14	; 20
    5b92:	8c f3       	brlt	.-30     	; 0x5b76 <display_vprintf+0x2a>
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    5b94:	1d 82       	std	Y+5, r1	; 0x05
    5b96:	1e 82       	std	Y+6, r1	; 0x06
    5b98:	0b c0       	rjmp	.+22     	; 0x5bb0 <display_vprintf+0x64>
		str[i] = 0x00;
    5b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    5b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    5b9e:	88 52       	subi	r24, 0x28	; 40
    5ba0:	93 4d       	sbci	r25, 0xD3	; 211
    5ba2:	fc 01       	movw	r30, r24
    5ba4:	10 82       	st	Z, r1
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    5ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    5ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    5baa:	01 96       	adiw	r24, 0x01	; 1
    5bac:	8d 83       	std	Y+5, r24	; 0x05
    5bae:	9e 83       	std	Y+6, r25	; 0x06
    5bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    5bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    5bb4:	44 97       	sbiw	r24, 0x14	; 20
    5bb6:	8c f3       	brlt	.-30     	; 0x5b9a <display_vprintf+0x4e>
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    5bb8:	be c1       	rjmp	.+892    	; 0x5f36 <display_vprintf+0x3ea>
		if ( '%' == ch ) {
    5bba:	8d 89       	ldd	r24, Y+21	; 0x15
    5bbc:	85 32       	cpi	r24, 0x25	; 37
    5bbe:	09 f0       	breq	.+2      	; 0x5bc2 <display_vprintf+0x76>
    5bc0:	a0 c1       	rjmp	.+832    	; 0x5f02 <display_vprintf+0x3b6>
			switch (ch = *fmt++) {
    5bc2:	89 ad       	ldd	r24, Y+57	; 0x39
    5bc4:	9a ad       	ldd	r25, Y+58	; 0x3a
    5bc6:	9c 01       	movw	r18, r24
    5bc8:	2f 5f       	subi	r18, 0xFF	; 255
    5bca:	3f 4f       	sbci	r19, 0xFF	; 255
    5bcc:	29 af       	std	Y+57, r18	; 0x39
    5bce:	3a af       	std	Y+58, r19	; 0x3a
    5bd0:	fc 01       	movw	r30, r24
    5bd2:	80 81       	ld	r24, Z
    5bd4:	8d 8b       	std	Y+21, r24	; 0x15
    5bd6:	8d 89       	ldd	r24, Y+21	; 0x15
    5bd8:	88 2f       	mov	r24, r24
    5bda:	90 e0       	ldi	r25, 0x00	; 0
    5bdc:	85 36       	cpi	r24, 0x65	; 101
    5bde:	91 05       	cpc	r25, r1
    5be0:	09 f4       	brne	.+2      	; 0x5be4 <display_vprintf+0x98>
    5be2:	46 c1       	rjmp	.+652    	; 0x5e70 <display_vprintf+0x324>
    5be4:	86 36       	cpi	r24, 0x66	; 102
    5be6:	91 05       	cpc	r25, r1
    5be8:	54 f4       	brge	.+20     	; 0x5bfe <display_vprintf+0xb2>
    5bea:	83 36       	cpi	r24, 0x63	; 99
    5bec:	91 05       	cpc	r25, r1
    5bee:	01 f1       	breq	.+64     	; 0x5c30 <display_vprintf+0xe4>
    5bf0:	84 36       	cpi	r24, 0x64	; 100
    5bf2:	91 05       	cpc	r25, r1
    5bf4:	0c f0       	brlt	.+2      	; 0x5bf8 <display_vprintf+0xac>
    5bf6:	70 c0       	rjmp	.+224    	; 0x5cd8 <display_vprintf+0x18c>
    5bf8:	85 97       	sbiw	r24, 0x25	; 37
    5bfa:	69 f0       	breq	.+26     	; 0x5c16 <display_vprintf+0xca>
    5bfc:	9c c1       	rjmp	.+824    	; 0x5f36 <display_vprintf+0x3ea>
    5bfe:	83 37       	cpi	r24, 0x73	; 115
    5c00:	91 05       	cpc	r25, r1
    5c02:	71 f1       	breq	.+92     	; 0x5c60 <display_vprintf+0x114>
    5c04:	88 37       	cpi	r24, 0x78	; 120
    5c06:	91 05       	cpc	r25, r1
    5c08:	09 f4       	brne	.+2      	; 0x5c0c <display_vprintf+0xc0>
    5c0a:	a8 c0       	rjmp	.+336    	; 0x5d5c <display_vprintf+0x210>
    5c0c:	86 36       	cpi	r24, 0x66	; 102
    5c0e:	91 05       	cpc	r25, r1
    5c10:	09 f4       	brne	.+2      	; 0x5c14 <display_vprintf+0xc8>
    5c12:	e6 c0       	rjmp	.+460    	; 0x5de0 <display_vprintf+0x294>
    5c14:	90 c1       	rjmp	.+800    	; 0x5f36 <display_vprintf+0x3ea>
				/* %% - print out a single %    */
				case '%':
				str[length] = '%';
    5c16:	89 81       	ldd	r24, Y+1	; 0x01
    5c18:	9a 81       	ldd	r25, Y+2	; 0x02
    5c1a:	88 52       	subi	r24, 0x28	; 40
    5c1c:	93 4d       	sbci	r25, 0xD3	; 211
    5c1e:	25 e2       	ldi	r18, 0x25	; 37
    5c20:	fc 01       	movw	r30, r24
    5c22:	20 83       	st	Z, r18
				length++;
    5c24:	89 81       	ldd	r24, Y+1	; 0x01
    5c26:	9a 81       	ldd	r25, Y+2	; 0x02
    5c28:	01 96       	adiw	r24, 0x01	; 1
    5c2a:	89 83       	std	Y+1, r24	; 0x01
    5c2c:	9a 83       	std	Y+2, r25	; 0x02
				break;
    5c2e:	83 c1       	rjmp	.+774    	; 0x5f36 <display_vprintf+0x3ea>

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
    5c30:	8b ad       	ldd	r24, Y+59	; 0x3b
    5c32:	9c ad       	ldd	r25, Y+60	; 0x3c
    5c34:	9c 01       	movw	r18, r24
    5c36:	2e 5f       	subi	r18, 0xFE	; 254
    5c38:	3f 4f       	sbci	r19, 0xFF	; 255
    5c3a:	2b af       	std	Y+59, r18	; 0x3b
    5c3c:	3c af       	std	Y+60, r19	; 0x3c
    5c3e:	fc 01       	movw	r30, r24
    5c40:	80 81       	ld	r24, Z
    5c42:	91 81       	ldd	r25, Z+1	; 0x01
    5c44:	8e 8b       	std	Y+22, r24	; 0x16
				str[length] = char_temp;
    5c46:	89 81       	ldd	r24, Y+1	; 0x01
    5c48:	9a 81       	ldd	r25, Y+2	; 0x02
    5c4a:	88 52       	subi	r24, 0x28	; 40
    5c4c:	93 4d       	sbci	r25, 0xD3	; 211
    5c4e:	2e 89       	ldd	r18, Y+22	; 0x16
    5c50:	fc 01       	movw	r30, r24
    5c52:	20 83       	st	Z, r18
				length++;
    5c54:	89 81       	ldd	r24, Y+1	; 0x01
    5c56:	9a 81       	ldd	r25, Y+2	; 0x02
    5c58:	01 96       	adiw	r24, 0x01	; 1
    5c5a:	89 83       	std	Y+1, r24	; 0x01
    5c5c:	9a 83       	std	Y+2, r25	; 0x02
				break;
    5c5e:	6b c1       	rjmp	.+726    	; 0x5f36 <display_vprintf+0x3ea>

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    5c60:	8b ad       	ldd	r24, Y+59	; 0x3b
    5c62:	9c ad       	ldd	r25, Y+60	; 0x3c
    5c64:	9c 01       	movw	r18, r24
    5c66:	2e 5f       	subi	r18, 0xFE	; 254
    5c68:	3f 4f       	sbci	r19, 0xFF	; 255
    5c6a:	2b af       	std	Y+59, r18	; 0x3b
    5c6c:	3c af       	std	Y+60, r19	; 0x3c
    5c6e:	fc 01       	movw	r30, r24
    5c70:	80 81       	ld	r24, Z
    5c72:	91 81       	ldd	r25, Z+1	; 0x01
    5c74:	8f 8b       	std	Y+23, r24	; 0x17
    5c76:	98 8f       	std	Y+24, r25	; 0x18
				for(int i = 0; i < strlen(string_temp);i++) {
    5c78:	1f 82       	std	Y+7, r1	; 0x07
    5c7a:	18 86       	std	Y+8, r1	; 0x08
    5c7c:	17 c0       	rjmp	.+46     	; 0x5cac <display_vprintf+0x160>
					str[length+i] = string_temp[i];
    5c7e:	29 81       	ldd	r18, Y+1	; 0x01
    5c80:	3a 81       	ldd	r19, Y+2	; 0x02
    5c82:	8f 81       	ldd	r24, Y+7	; 0x07
    5c84:	98 85       	ldd	r25, Y+8	; 0x08
    5c86:	82 0f       	add	r24, r18
    5c88:	93 1f       	adc	r25, r19
    5c8a:	2f 81       	ldd	r18, Y+7	; 0x07
    5c8c:	38 85       	ldd	r19, Y+8	; 0x08
    5c8e:	4f 89       	ldd	r20, Y+23	; 0x17
    5c90:	58 8d       	ldd	r21, Y+24	; 0x18
    5c92:	24 0f       	add	r18, r20
    5c94:	35 1f       	adc	r19, r21
    5c96:	f9 01       	movw	r30, r18
    5c98:	20 81       	ld	r18, Z
    5c9a:	88 52       	subi	r24, 0x28	; 40
    5c9c:	93 4d       	sbci	r25, 0xD3	; 211
    5c9e:	fc 01       	movw	r30, r24
    5ca0:	20 83       	st	Z, r18
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
				for(int i = 0; i < strlen(string_temp);i++) {
    5ca2:	8f 81       	ldd	r24, Y+7	; 0x07
    5ca4:	98 85       	ldd	r25, Y+8	; 0x08
    5ca6:	01 96       	adiw	r24, 0x01	; 1
    5ca8:	8f 83       	std	Y+7, r24	; 0x07
    5caa:	98 87       	std	Y+8, r25	; 0x08
    5cac:	8f 89       	ldd	r24, Y+23	; 0x17
    5cae:	98 8d       	ldd	r25, Y+24	; 0x18
    5cb0:	0e 94 43 3b 	call	0x7686	; 0x7686 <strlen>
    5cb4:	9c 01       	movw	r18, r24
    5cb6:	8f 81       	ldd	r24, Y+7	; 0x07
    5cb8:	98 85       	ldd	r25, Y+8	; 0x08
    5cba:	82 17       	cp	r24, r18
    5cbc:	93 07       	cpc	r25, r19
    5cbe:	f8 f2       	brcs	.-66     	; 0x5c7e <display_vprintf+0x132>
					str[length+i] = string_temp[i];
				}
				length += strlen(string_temp);
    5cc0:	8f 89       	ldd	r24, Y+23	; 0x17
    5cc2:	98 8d       	ldd	r25, Y+24	; 0x18
    5cc4:	0e 94 43 3b 	call	0x7686	; 0x7686 <strlen>
    5cc8:	9c 01       	movw	r18, r24
    5cca:	89 81       	ldd	r24, Y+1	; 0x01
    5ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    5cce:	82 0f       	add	r24, r18
    5cd0:	93 1f       	adc	r25, r19
    5cd2:	89 83       	std	Y+1, r24	; 0x01
    5cd4:	9a 83       	std	Y+2, r25	; 0x02
				break;
    5cd6:	2f c1       	rjmp	.+606    	; 0x5f36 <display_vprintf+0x3ea>

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    5cd8:	8b ad       	ldd	r24, Y+59	; 0x3b
    5cda:	9c ad       	ldd	r25, Y+60	; 0x3c
    5cdc:	9c 01       	movw	r18, r24
    5cde:	2e 5f       	subi	r18, 0xFE	; 254
    5ce0:	3f 4f       	sbci	r19, 0xFF	; 255
    5ce2:	2b af       	std	Y+59, r18	; 0x3b
    5ce4:	3c af       	std	Y+60, r19	; 0x3c
    5ce6:	fc 01       	movw	r30, r24
    5ce8:	80 81       	ld	r24, Z
    5cea:	91 81       	ldd	r25, Z+1	; 0x01
    5cec:	89 8f       	std	Y+25, r24	; 0x19
    5cee:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 10);
    5cf0:	89 8d       	ldd	r24, Y+25	; 0x19
    5cf2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5cf4:	4a e0       	ldi	r20, 0x0A	; 10
    5cf6:	50 e0       	ldi	r21, 0x00	; 0
    5cf8:	64 ec       	ldi	r22, 0xC4	; 196
    5cfa:	7c e2       	ldi	r23, 0x2C	; 44
    5cfc:	0e 94 57 3b 	call	0x76ae	; 0x76ae <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    5d00:	19 86       	std	Y+9, r1	; 0x09
    5d02:	1a 86       	std	Y+10, r1	; 0x0a
    5d04:	15 c0       	rjmp	.+42     	; 0x5d30 <display_vprintf+0x1e4>
					str[length+i] = buffer[i];
    5d06:	29 81       	ldd	r18, Y+1	; 0x01
    5d08:	3a 81       	ldd	r19, Y+2	; 0x02
    5d0a:	89 85       	ldd	r24, Y+9	; 0x09
    5d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d0e:	82 0f       	add	r24, r18
    5d10:	93 1f       	adc	r25, r19
    5d12:	29 85       	ldd	r18, Y+9	; 0x09
    5d14:	3a 85       	ldd	r19, Y+10	; 0x0a
    5d16:	2c 53       	subi	r18, 0x3C	; 60
    5d18:	33 4d       	sbci	r19, 0xD3	; 211
    5d1a:	f9 01       	movw	r30, r18
    5d1c:	20 81       	ld	r18, Z
    5d1e:	88 52       	subi	r24, 0x28	; 40
    5d20:	93 4d       	sbci	r25, 0xD3	; 211
    5d22:	fc 01       	movw	r30, r24
    5d24:	20 83       	st	Z, r18

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    5d26:	89 85       	ldd	r24, Y+9	; 0x09
    5d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d2a:	01 96       	adiw	r24, 0x01	; 1
    5d2c:	89 87       	std	Y+9, r24	; 0x09
    5d2e:	9a 87       	std	Y+10, r25	; 0x0a
    5d30:	84 ec       	ldi	r24, 0xC4	; 196
    5d32:	9c e2       	ldi	r25, 0x2C	; 44
    5d34:	0e 94 43 3b 	call	0x7686	; 0x7686 <strlen>
    5d38:	9c 01       	movw	r18, r24
    5d3a:	89 85       	ldd	r24, Y+9	; 0x09
    5d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d3e:	82 17       	cp	r24, r18
    5d40:	93 07       	cpc	r25, r19
    5d42:	08 f3       	brcs	.-62     	; 0x5d06 <display_vprintf+0x1ba>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    5d44:	84 ec       	ldi	r24, 0xC4	; 196
    5d46:	9c e2       	ldi	r25, 0x2C	; 44
    5d48:	0e 94 43 3b 	call	0x7686	; 0x7686 <strlen>
    5d4c:	9c 01       	movw	r18, r24
    5d4e:	89 81       	ldd	r24, Y+1	; 0x01
    5d50:	9a 81       	ldd	r25, Y+2	; 0x02
    5d52:	82 0f       	add	r24, r18
    5d54:	93 1f       	adc	r25, r19
    5d56:	89 83       	std	Y+1, r24	; 0x01
    5d58:	9a 83       	std	Y+2, r25	; 0x02
				break;
    5d5a:	ed c0       	rjmp	.+474    	; 0x5f36 <display_vprintf+0x3ea>

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    5d5c:	8b ad       	ldd	r24, Y+59	; 0x3b
    5d5e:	9c ad       	ldd	r25, Y+60	; 0x3c
    5d60:	9c 01       	movw	r18, r24
    5d62:	2e 5f       	subi	r18, 0xFE	; 254
    5d64:	3f 4f       	sbci	r19, 0xFF	; 255
    5d66:	2b af       	std	Y+59, r18	; 0x3b
    5d68:	3c af       	std	Y+60, r19	; 0x3c
    5d6a:	fc 01       	movw	r30, r24
    5d6c:	80 81       	ld	r24, Z
    5d6e:	91 81       	ldd	r25, Z+1	; 0x01
    5d70:	89 8f       	std	Y+25, r24	; 0x19
    5d72:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 16);
    5d74:	89 8d       	ldd	r24, Y+25	; 0x19
    5d76:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5d78:	40 e1       	ldi	r20, 0x10	; 16
    5d7a:	50 e0       	ldi	r21, 0x00	; 0
    5d7c:	64 ec       	ldi	r22, 0xC4	; 196
    5d7e:	7c e2       	ldi	r23, 0x2C	; 44
    5d80:	0e 94 57 3b 	call	0x76ae	; 0x76ae <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    5d84:	1b 86       	std	Y+11, r1	; 0x0b
    5d86:	1c 86       	std	Y+12, r1	; 0x0c
    5d88:	15 c0       	rjmp	.+42     	; 0x5db4 <display_vprintf+0x268>
					str[length+i] = buffer[i];
    5d8a:	29 81       	ldd	r18, Y+1	; 0x01
    5d8c:	3a 81       	ldd	r19, Y+2	; 0x02
    5d8e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d90:	9c 85       	ldd	r25, Y+12	; 0x0c
    5d92:	82 0f       	add	r24, r18
    5d94:	93 1f       	adc	r25, r19
    5d96:	2b 85       	ldd	r18, Y+11	; 0x0b
    5d98:	3c 85       	ldd	r19, Y+12	; 0x0c
    5d9a:	2c 53       	subi	r18, 0x3C	; 60
    5d9c:	33 4d       	sbci	r19, 0xD3	; 211
    5d9e:	f9 01       	movw	r30, r18
    5da0:	20 81       	ld	r18, Z
    5da2:	88 52       	subi	r24, 0x28	; 40
    5da4:	93 4d       	sbci	r25, 0xD3	; 211
    5da6:	fc 01       	movw	r30, r24
    5da8:	20 83       	st	Z, r18

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    5daa:	8b 85       	ldd	r24, Y+11	; 0x0b
    5dac:	9c 85       	ldd	r25, Y+12	; 0x0c
    5dae:	01 96       	adiw	r24, 0x01	; 1
    5db0:	8b 87       	std	Y+11, r24	; 0x0b
    5db2:	9c 87       	std	Y+12, r25	; 0x0c
    5db4:	84 ec       	ldi	r24, 0xC4	; 196
    5db6:	9c e2       	ldi	r25, 0x2C	; 44
    5db8:	0e 94 43 3b 	call	0x7686	; 0x7686 <strlen>
    5dbc:	9c 01       	movw	r18, r24
    5dbe:	8b 85       	ldd	r24, Y+11	; 0x0b
    5dc0:	9c 85       	ldd	r25, Y+12	; 0x0c
    5dc2:	82 17       	cp	r24, r18
    5dc4:	93 07       	cpc	r25, r19
    5dc6:	08 f3       	brcs	.-62     	; 0x5d8a <display_vprintf+0x23e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    5dc8:	84 ec       	ldi	r24, 0xC4	; 196
    5dca:	9c e2       	ldi	r25, 0x2C	; 44
    5dcc:	0e 94 43 3b 	call	0x7686	; 0x7686 <strlen>
    5dd0:	9c 01       	movw	r18, r24
    5dd2:	89 81       	ldd	r24, Y+1	; 0x01
    5dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    5dd6:	82 0f       	add	r24, r18
    5dd8:	93 1f       	adc	r25, r19
    5dda:	89 83       	std	Y+1, r24	; 0x01
    5ddc:	9a 83       	std	Y+2, r25	; 0x02
				break;
    5dde:	ab c0       	rjmp	.+342    	; 0x5f36 <display_vprintf+0x3ea>

				case 'f':
				double_temp = va_arg(arg, double);
    5de0:	8b ad       	ldd	r24, Y+59	; 0x3b
    5de2:	9c ad       	ldd	r25, Y+60	; 0x3c
    5de4:	9c 01       	movw	r18, r24
    5de6:	2c 5f       	subi	r18, 0xFC	; 252
    5de8:	3f 4f       	sbci	r19, 0xFF	; 255
    5dea:	2b af       	std	Y+59, r18	; 0x3b
    5dec:	3c af       	std	Y+60, r19	; 0x3c
    5dee:	fc 01       	movw	r30, r24
    5df0:	80 81       	ld	r24, Z
    5df2:	91 81       	ldd	r25, Z+1	; 0x01
    5df4:	a2 81       	ldd	r26, Z+2	; 0x02
    5df6:	b3 81       	ldd	r27, Z+3	; 0x03
    5df8:	8b 8f       	std	Y+27, r24	; 0x1b
    5dfa:	9c 8f       	std	Y+28, r25	; 0x1c
    5dfc:	ad 8f       	std	Y+29, r26	; 0x1d
    5dfe:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_fixed(buffer, double_temp);
    5e00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5e02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5e04:	ad 8d       	ldd	r26, Y+29	; 0x1d
    5e06:	be 8d       	ldd	r27, Y+30	; 0x1e
    5e08:	ac 01       	movw	r20, r24
    5e0a:	bd 01       	movw	r22, r26
    5e0c:	84 ec       	ldi	r24, 0xC4	; 196
    5e0e:	9c e2       	ldi	r25, 0x2C	; 44
    5e10:	0e 94 75 30 	call	0x60ea	; 0x60ea <ftoa_fixed>
				for(int i = 0; i < strlen(buffer);i++) {
    5e14:	1d 86       	std	Y+13, r1	; 0x0d
    5e16:	1e 86       	std	Y+14, r1	; 0x0e
    5e18:	15 c0       	rjmp	.+42     	; 0x5e44 <display_vprintf+0x2f8>
					str[length+i] = buffer[i];
    5e1a:	29 81       	ldd	r18, Y+1	; 0x01
    5e1c:	3a 81       	ldd	r19, Y+2	; 0x02
    5e1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e20:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e22:	82 0f       	add	r24, r18
    5e24:	93 1f       	adc	r25, r19
    5e26:	2d 85       	ldd	r18, Y+13	; 0x0d
    5e28:	3e 85       	ldd	r19, Y+14	; 0x0e
    5e2a:	2c 53       	subi	r18, 0x3C	; 60
    5e2c:	33 4d       	sbci	r19, 0xD3	; 211
    5e2e:	f9 01       	movw	r30, r18
    5e30:	20 81       	ld	r18, Z
    5e32:	88 52       	subi	r24, 0x28	; 40
    5e34:	93 4d       	sbci	r25, 0xD3	; 211
    5e36:	fc 01       	movw	r30, r24
    5e38:	20 83       	st	Z, r18
				break;

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    5e3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e3e:	01 96       	adiw	r24, 0x01	; 1
    5e40:	8d 87       	std	Y+13, r24	; 0x0d
    5e42:	9e 87       	std	Y+14, r25	; 0x0e
    5e44:	84 ec       	ldi	r24, 0xC4	; 196
    5e46:	9c e2       	ldi	r25, 0x2C	; 44
    5e48:	0e 94 43 3b 	call	0x7686	; 0x7686 <strlen>
    5e4c:	9c 01       	movw	r18, r24
    5e4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e50:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e52:	82 17       	cp	r24, r18
    5e54:	93 07       	cpc	r25, r19
    5e56:	08 f3       	brcs	.-62     	; 0x5e1a <display_vprintf+0x2ce>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    5e58:	84 ec       	ldi	r24, 0xC4	; 196
    5e5a:	9c e2       	ldi	r25, 0x2C	; 44
    5e5c:	0e 94 43 3b 	call	0x7686	; 0x7686 <strlen>
    5e60:	9c 01       	movw	r18, r24
    5e62:	89 81       	ldd	r24, Y+1	; 0x01
    5e64:	9a 81       	ldd	r25, Y+2	; 0x02
    5e66:	82 0f       	add	r24, r18
    5e68:	93 1f       	adc	r25, r19
    5e6a:	89 83       	std	Y+1, r24	; 0x01
    5e6c:	9a 83       	std	Y+2, r25	; 0x02
				break;
    5e6e:	63 c0       	rjmp	.+198    	; 0x5f36 <display_vprintf+0x3ea>

				case 'e':
				double_temp = va_arg(arg, double);
    5e70:	8b ad       	ldd	r24, Y+59	; 0x3b
    5e72:	9c ad       	ldd	r25, Y+60	; 0x3c
    5e74:	9c 01       	movw	r18, r24
    5e76:	2c 5f       	subi	r18, 0xFC	; 252
    5e78:	3f 4f       	sbci	r19, 0xFF	; 255
    5e7a:	2b af       	std	Y+59, r18	; 0x3b
    5e7c:	3c af       	std	Y+60, r19	; 0x3c
    5e7e:	fc 01       	movw	r30, r24
    5e80:	80 81       	ld	r24, Z
    5e82:	91 81       	ldd	r25, Z+1	; 0x01
    5e84:	a2 81       	ldd	r26, Z+2	; 0x02
    5e86:	b3 81       	ldd	r27, Z+3	; 0x03
    5e88:	8b 8f       	std	Y+27, r24	; 0x1b
    5e8a:	9c 8f       	std	Y+28, r25	; 0x1c
    5e8c:	ad 8f       	std	Y+29, r26	; 0x1d
    5e8e:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_sci(buffer, double_temp);
    5e90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5e92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5e94:	ad 8d       	ldd	r26, Y+29	; 0x1d
    5e96:	be 8d       	ldd	r27, Y+30	; 0x1e
    5e98:	ac 01       	movw	r20, r24
    5e9a:	bd 01       	movw	r22, r26
    5e9c:	84 ec       	ldi	r24, 0xC4	; 196
    5e9e:	9c e2       	ldi	r25, 0x2C	; 44
    5ea0:	0e 94 c4 31 	call	0x6388	; 0x6388 <ftoa_sci>
				for(int i = 0; i < strlen(buffer);i++) {
    5ea4:	1f 86       	std	Y+15, r1	; 0x0f
    5ea6:	18 8a       	std	Y+16, r1	; 0x10
    5ea8:	15 c0       	rjmp	.+42     	; 0x5ed4 <display_vprintf+0x388>
					str[length+i] = buffer[i];
    5eaa:	29 81       	ldd	r18, Y+1	; 0x01
    5eac:	3a 81       	ldd	r19, Y+2	; 0x02
    5eae:	8f 85       	ldd	r24, Y+15	; 0x0f
    5eb0:	98 89       	ldd	r25, Y+16	; 0x10
    5eb2:	82 0f       	add	r24, r18
    5eb4:	93 1f       	adc	r25, r19
    5eb6:	2f 85       	ldd	r18, Y+15	; 0x0f
    5eb8:	38 89       	ldd	r19, Y+16	; 0x10
    5eba:	2c 53       	subi	r18, 0x3C	; 60
    5ebc:	33 4d       	sbci	r19, 0xD3	; 211
    5ebe:	f9 01       	movw	r30, r18
    5ec0:	20 81       	ld	r18, Z
    5ec2:	88 52       	subi	r24, 0x28	; 40
    5ec4:	93 4d       	sbci	r25, 0xD3	; 211
    5ec6:	fc 01       	movw	r30, r24
    5ec8:	20 83       	st	Z, r18
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    5eca:	8f 85       	ldd	r24, Y+15	; 0x0f
    5ecc:	98 89       	ldd	r25, Y+16	; 0x10
    5ece:	01 96       	adiw	r24, 0x01	; 1
    5ed0:	8f 87       	std	Y+15, r24	; 0x0f
    5ed2:	98 8b       	std	Y+16, r25	; 0x10
    5ed4:	84 ec       	ldi	r24, 0xC4	; 196
    5ed6:	9c e2       	ldi	r25, 0x2C	; 44
    5ed8:	0e 94 43 3b 	call	0x7686	; 0x7686 <strlen>
    5edc:	9c 01       	movw	r18, r24
    5ede:	8f 85       	ldd	r24, Y+15	; 0x0f
    5ee0:	98 89       	ldd	r25, Y+16	; 0x10
    5ee2:	82 17       	cp	r24, r18
    5ee4:	93 07       	cpc	r25, r19
    5ee6:	08 f3       	brcs	.-62     	; 0x5eaa <display_vprintf+0x35e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    5ee8:	84 ec       	ldi	r24, 0xC4	; 196
    5eea:	9c e2       	ldi	r25, 0x2C	; 44
    5eec:	0e 94 43 3b 	call	0x7686	; 0x7686 <strlen>
    5ef0:	9c 01       	movw	r18, r24
    5ef2:	89 81       	ldd	r24, Y+1	; 0x01
    5ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ef6:	82 0f       	add	r24, r18
    5ef8:	93 1f       	adc	r25, r19
    5efa:	89 83       	std	Y+1, r24	; 0x01
    5efc:	9a 83       	std	Y+2, r25	; 0x02
				break;
    5efe:	00 00       	nop
    5f00:	1a c0       	rjmp	.+52     	; 0x5f36 <display_vprintf+0x3ea>
			}
		}
		else {
			str[length] = ch;
    5f02:	89 81       	ldd	r24, Y+1	; 0x01
    5f04:	9a 81       	ldd	r25, Y+2	; 0x02
    5f06:	88 52       	subi	r24, 0x28	; 40
    5f08:	93 4d       	sbci	r25, 0xD3	; 211
    5f0a:	2d 89       	ldd	r18, Y+21	; 0x15
    5f0c:	fc 01       	movw	r30, r24
    5f0e:	20 83       	st	Z, r18
			if(str[length] == '\n') {
    5f10:	89 81       	ldd	r24, Y+1	; 0x01
    5f12:	9a 81       	ldd	r25, Y+2	; 0x02
    5f14:	88 52       	subi	r24, 0x28	; 40
    5f16:	93 4d       	sbci	r25, 0xD3	; 211
    5f18:	fc 01       	movw	r30, r24
    5f1a:	80 81       	ld	r24, Z
    5f1c:	8a 30       	cpi	r24, 0x0A	; 10
    5f1e:	31 f4       	brne	.+12     	; 0x5f2c <display_vprintf+0x3e0>
				str[length] = '\0';				
    5f20:	89 81       	ldd	r24, Y+1	; 0x01
    5f22:	9a 81       	ldd	r25, Y+2	; 0x02
    5f24:	88 52       	subi	r24, 0x28	; 40
    5f26:	93 4d       	sbci	r25, 0xD3	; 211
    5f28:	fc 01       	movw	r30, r24
    5f2a:	10 82       	st	Z, r1
			}
			length++;
    5f2c:	89 81       	ldd	r24, Y+1	; 0x01
    5f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    5f30:	01 96       	adiw	r24, 0x01	; 1
    5f32:	89 83       	std	Y+1, r24	; 0x01
    5f34:	9a 83       	std	Y+2, r25	; 0x02
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    5f36:	89 ad       	ldd	r24, Y+57	; 0x39
    5f38:	9a ad       	ldd	r25, Y+58	; 0x3a
    5f3a:	9c 01       	movw	r18, r24
    5f3c:	2f 5f       	subi	r18, 0xFF	; 255
    5f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    5f40:	29 af       	std	Y+57, r18	; 0x39
    5f42:	3a af       	std	Y+58, r19	; 0x3a
    5f44:	fc 01       	movw	r30, r24
    5f46:	80 81       	ld	r24, Z
    5f48:	8d 8b       	std	Y+21, r24	; 0x15
    5f4a:	8d 89       	ldd	r24, Y+21	; 0x15
    5f4c:	88 23       	and	r24, r24
    5f4e:	09 f0       	breq	.+2      	; 0x5f52 <display_vprintf+0x406>
    5f50:	34 ce       	rjmp	.-920    	; 0x5bba <display_vprintf+0x6e>
				str[length] = '\0';				
			}
			length++;
		}
	}
	if(length + pos >= 20) {
    5f52:	29 81       	ldd	r18, Y+1	; 0x01
    5f54:	3a 81       	ldd	r19, Y+2	; 0x02
    5f56:	8f a9       	ldd	r24, Y+55	; 0x37
    5f58:	98 ad       	ldd	r25, Y+56	; 0x38
    5f5a:	82 0f       	add	r24, r18
    5f5c:	93 1f       	adc	r25, r19
    5f5e:	44 97       	sbiw	r24, 0x14	; 20
    5f60:	54 f0       	brlt	.+20     	; 0x5f76 <display_vprintf+0x42a>
		length = 20-pos;
    5f62:	24 e1       	ldi	r18, 0x14	; 20
    5f64:	30 e0       	ldi	r19, 0x00	; 0
    5f66:	8f a9       	ldd	r24, Y+55	; 0x37
    5f68:	98 ad       	ldd	r25, Y+56	; 0x38
    5f6a:	a9 01       	movw	r20, r18
    5f6c:	48 1b       	sub	r20, r24
    5f6e:	59 0b       	sbc	r21, r25
    5f70:	ca 01       	movw	r24, r20
    5f72:	89 83       	std	Y+1, r24	; 0x01
    5f74:	9a 83       	std	Y+2, r25	; 0x02
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    5f76:	19 8a       	std	Y+17, r1	; 0x11
    5f78:	1a 8a       	std	Y+18, r1	; 0x12
    5f7a:	0e c0       	rjmp	.+28     	; 0x5f98 <display_vprintf+0x44c>
		newLine.displayBuffer[i] = 0x00;
    5f7c:	9e 01       	movw	r18, r28
    5f7e:	2f 5d       	subi	r18, 0xDF	; 223
    5f80:	3f 4f       	sbci	r19, 0xFF	; 255
    5f82:	89 89       	ldd	r24, Y+17	; 0x11
    5f84:	9a 89       	ldd	r25, Y+18	; 0x12
    5f86:	82 0f       	add	r24, r18
    5f88:	93 1f       	adc	r25, r19
    5f8a:	fc 01       	movw	r30, r24
    5f8c:	10 82       	st	Z, r1
	}
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    5f8e:	89 89       	ldd	r24, Y+17	; 0x11
    5f90:	9a 89       	ldd	r25, Y+18	; 0x12
    5f92:	01 96       	adiw	r24, 0x01	; 1
    5f94:	89 8b       	std	Y+17, r24	; 0x11
    5f96:	9a 8b       	std	Y+18, r25	; 0x12
    5f98:	89 89       	ldd	r24, Y+17	; 0x11
    5f9a:	9a 89       	ldd	r25, Y+18	; 0x12
    5f9c:	44 97       	sbiw	r24, 0x14	; 20
    5f9e:	74 f3       	brlt	.-36     	; 0x5f7c <display_vprintf+0x430>
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
    5fa0:	8d a9       	ldd	r24, Y+53	; 0x35
    5fa2:	8f 8f       	std	Y+31, r24	; 0x1f
	newLine.displayPos = pos;
    5fa4:	8f a9       	ldd	r24, Y+55	; 0x37
    5fa6:	88 a3       	std	Y+32, r24	; 0x20
	for(int i = 0; i < length;i++) {
    5fa8:	1b 8a       	std	Y+19, r1	; 0x13
    5faa:	1c 8a       	std	Y+20, r1	; 0x14
    5fac:	14 c0       	rjmp	.+40     	; 0x5fd6 <display_vprintf+0x48a>
		newLine.displayBuffer[i] = str[i];
    5fae:	8b 89       	ldd	r24, Y+19	; 0x13
    5fb0:	9c 89       	ldd	r25, Y+20	; 0x14
    5fb2:	88 52       	subi	r24, 0x28	; 40
    5fb4:	93 4d       	sbci	r25, 0xD3	; 211
    5fb6:	fc 01       	movw	r30, r24
    5fb8:	40 81       	ld	r20, Z
    5fba:	9e 01       	movw	r18, r28
    5fbc:	2f 5d       	subi	r18, 0xDF	; 223
    5fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    5fc0:	8b 89       	ldd	r24, Y+19	; 0x13
    5fc2:	9c 89       	ldd	r25, Y+20	; 0x14
    5fc4:	82 0f       	add	r24, r18
    5fc6:	93 1f       	adc	r25, r19
    5fc8:	fc 01       	movw	r30, r24
    5fca:	40 83       	st	Z, r20
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
	newLine.displayPos = pos;
	for(int i = 0; i < length;i++) {
    5fcc:	8b 89       	ldd	r24, Y+19	; 0x13
    5fce:	9c 89       	ldd	r25, Y+20	; 0x14
    5fd0:	01 96       	adiw	r24, 0x01	; 1
    5fd2:	8b 8b       	std	Y+19, r24	; 0x13
    5fd4:	9c 8b       	std	Y+20, r25	; 0x14
    5fd6:	2b 89       	ldd	r18, Y+19	; 0x13
    5fd8:	3c 89       	ldd	r19, Y+20	; 0x14
    5fda:	89 81       	ldd	r24, Y+1	; 0x01
    5fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    5fde:	28 17       	cp	r18, r24
    5fe0:	39 07       	cpc	r19, r25
    5fe2:	2c f3       	brlt	.-54     	; 0x5fae <display_vprintf+0x462>
		newLine.displayBuffer[i] = str[i];
	}	
	xQueueSend(displayLineQueue, (void *) &newLine, portMAX_DELAY);
    5fe4:	80 91 ff 2c 	lds	r24, 0x2CFF	; 0x802cff <displayLineQueue>
    5fe8:	90 91 00 2d 	lds	r25, 0x2D00	; 0x802d00 <displayLineQueue+0x1>
    5fec:	be 01       	movw	r22, r28
    5fee:	61 5e       	subi	r22, 0xE1	; 225
    5ff0:	7f 4f       	sbci	r23, 0xFF	; 255
    5ff2:	00 e0       	ldi	r16, 0x00	; 0
    5ff4:	2f ef       	ldi	r18, 0xFF	; 255
    5ff6:	3f ef       	ldi	r19, 0xFF	; 255
    5ff8:	a9 01       	movw	r20, r18
    5ffa:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <xQueueGenericSend>
	
	
	return length;
    5ffe:	89 81       	ldd	r24, Y+1	; 0x01
    6000:	9a 81       	ldd	r25, Y+2	; 0x02
}
    6002:	ec 96       	adiw	r28, 0x3c	; 60
    6004:	cd bf       	out	0x3d, r28	; 61
    6006:	de bf       	out	0x3e, r29	; 62
    6008:	df 91       	pop	r29
    600a:	cf 91       	pop	r28
    600c:	0f 91       	pop	r16
    600e:	08 95       	ret

00006010 <normalize>:

static int normalize(double *val) {
    6010:	cf 93       	push	r28
    6012:	df 93       	push	r29
    6014:	cd b7       	in	r28, 0x3d	; 61
    6016:	de b7       	in	r29, 0x3e	; 62
    6018:	28 97       	sbiw	r28, 0x08	; 8
    601a:	cd bf       	out	0x3d, r28	; 61
    601c:	de bf       	out	0x3e, r29	; 62
    601e:	8f 83       	std	Y+7, r24	; 0x07
    6020:	98 87       	std	Y+8, r25	; 0x08
    int exponent = 0;
    6022:	19 82       	std	Y+1, r1	; 0x01
    6024:	1a 82       	std	Y+2, r1	; 0x02
    double value = *val;
    6026:	8f 81       	ldd	r24, Y+7	; 0x07
    6028:	98 85       	ldd	r25, Y+8	; 0x08
    602a:	fc 01       	movw	r30, r24
    602c:	80 81       	ld	r24, Z
    602e:	91 81       	ldd	r25, Z+1	; 0x01
    6030:	a2 81       	ldd	r26, Z+2	; 0x02
    6032:	b3 81       	ldd	r27, Z+3	; 0x03
    6034:	8b 83       	std	Y+3, r24	; 0x03
    6036:	9c 83       	std	Y+4, r25	; 0x04
    6038:	ad 83       	std	Y+5, r26	; 0x05
    603a:	be 83       	std	Y+6, r27	; 0x06

    while (value >= 1.0) {
    603c:	15 c0       	rjmp	.+42     	; 0x6068 <normalize+0x58>
        value /= 10.0;
    603e:	20 e0       	ldi	r18, 0x00	; 0
    6040:	30 e0       	ldi	r19, 0x00	; 0
    6042:	40 e2       	ldi	r20, 0x20	; 32
    6044:	51 e4       	ldi	r21, 0x41	; 65
    6046:	6b 81       	ldd	r22, Y+3	; 0x03
    6048:	7c 81       	ldd	r23, Y+4	; 0x04
    604a:	8d 81       	ldd	r24, Y+5	; 0x05
    604c:	9e 81       	ldd	r25, Y+6	; 0x06
    604e:	0e 94 57 33 	call	0x66ae	; 0x66ae <__divsf3>
    6052:	dc 01       	movw	r26, r24
    6054:	cb 01       	movw	r24, r22
    6056:	8b 83       	std	Y+3, r24	; 0x03
    6058:	9c 83       	std	Y+4, r25	; 0x04
    605a:	ad 83       	std	Y+5, r26	; 0x05
    605c:	be 83       	std	Y+6, r27	; 0x06
        ++exponent;
    605e:	89 81       	ldd	r24, Y+1	; 0x01
    6060:	9a 81       	ldd	r25, Y+2	; 0x02
    6062:	01 96       	adiw	r24, 0x01	; 1
    6064:	89 83       	std	Y+1, r24	; 0x01
    6066:	9a 83       	std	Y+2, r25	; 0x02

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    6068:	20 e0       	ldi	r18, 0x00	; 0
    606a:	30 e0       	ldi	r19, 0x00	; 0
    606c:	40 e8       	ldi	r20, 0x80	; 128
    606e:	5f e3       	ldi	r21, 0x3F	; 63
    6070:	6b 81       	ldd	r22, Y+3	; 0x03
    6072:	7c 81       	ldd	r23, Y+4	; 0x04
    6074:	8d 81       	ldd	r24, Y+5	; 0x05
    6076:	9e 81       	ldd	r25, Y+6	; 0x06
    6078:	0e 94 b1 34 	call	0x6962	; 0x6962 <__gesf2>
    607c:	88 23       	and	r24, r24
    607e:	fc f6       	brge	.-66     	; 0x603e <normalize+0x2e>
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    6080:	15 c0       	rjmp	.+42     	; 0x60ac <normalize+0x9c>
        value *= 10.0;
    6082:	20 e0       	ldi	r18, 0x00	; 0
    6084:	30 e0       	ldi	r19, 0x00	; 0
    6086:	40 e2       	ldi	r20, 0x20	; 32
    6088:	51 e4       	ldi	r21, 0x41	; 65
    608a:	6b 81       	ldd	r22, Y+3	; 0x03
    608c:	7c 81       	ldd	r23, Y+4	; 0x04
    608e:	8d 81       	ldd	r24, Y+5	; 0x05
    6090:	9e 81       	ldd	r25, Y+6	; 0x06
    6092:	0e 94 b6 34 	call	0x696c	; 0x696c <__mulsf3>
    6096:	dc 01       	movw	r26, r24
    6098:	cb 01       	movw	r24, r22
    609a:	8b 83       	std	Y+3, r24	; 0x03
    609c:	9c 83       	std	Y+4, r25	; 0x04
    609e:	ad 83       	std	Y+5, r26	; 0x05
    60a0:	be 83       	std	Y+6, r27	; 0x06
        --exponent;
    60a2:	89 81       	ldd	r24, Y+1	; 0x01
    60a4:	9a 81       	ldd	r25, Y+2	; 0x02
    60a6:	01 97       	sbiw	r24, 0x01	; 1
    60a8:	89 83       	std	Y+1, r24	; 0x01
    60aa:	9a 83       	std	Y+2, r25	; 0x02
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    60ac:	2d ec       	ldi	r18, 0xCD	; 205
    60ae:	3c ec       	ldi	r19, 0xCC	; 204
    60b0:	4c ec       	ldi	r20, 0xCC	; 204
    60b2:	5d e3       	ldi	r21, 0x3D	; 61
    60b4:	6b 81       	ldd	r22, Y+3	; 0x03
    60b6:	7c 81       	ldd	r23, Y+4	; 0x04
    60b8:	8d 81       	ldd	r24, Y+5	; 0x05
    60ba:	9e 81       	ldd	r25, Y+6	; 0x06
    60bc:	0e 94 52 33 	call	0x66a4	; 0x66a4 <__cmpsf2>
    60c0:	88 23       	and	r24, r24
    60c2:	fc f2       	brlt	.-66     	; 0x6082 <normalize+0x72>
        value *= 10.0;
        --exponent;
    }
    *val = value;
    60c4:	2f 81       	ldd	r18, Y+7	; 0x07
    60c6:	38 85       	ldd	r19, Y+8	; 0x08
    60c8:	8b 81       	ldd	r24, Y+3	; 0x03
    60ca:	9c 81       	ldd	r25, Y+4	; 0x04
    60cc:	ad 81       	ldd	r26, Y+5	; 0x05
    60ce:	be 81       	ldd	r27, Y+6	; 0x06
    60d0:	f9 01       	movw	r30, r18
    60d2:	80 83       	st	Z, r24
    60d4:	91 83       	std	Z+1, r25	; 0x01
    60d6:	a2 83       	std	Z+2, r26	; 0x02
    60d8:	b3 83       	std	Z+3, r27	; 0x03
    return exponent;
    60da:	89 81       	ldd	r24, Y+1	; 0x01
    60dc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    60de:	28 96       	adiw	r28, 0x08	; 8
    60e0:	cd bf       	out	0x3d, r28	; 61
    60e2:	de bf       	out	0x3e, r29	; 62
    60e4:	df 91       	pop	r29
    60e6:	cf 91       	pop	r28
    60e8:	08 95       	ret

000060ea <ftoa_fixed>:

static void ftoa_fixed(char *buffer, double value) {  
    60ea:	cf 92       	push	r12
    60ec:	df 92       	push	r13
    60ee:	ef 92       	push	r14
    60f0:	ff 92       	push	r15
    60f2:	cf 93       	push	r28
    60f4:	df 93       	push	r29
    60f6:	cd b7       	in	r28, 0x3d	; 61
    60f8:	de b7       	in	r29, 0x3e	; 62
    60fa:	2e 97       	sbiw	r28, 0x0e	; 14
    60fc:	cd bf       	out	0x3d, r28	; 61
    60fe:	de bf       	out	0x3e, r29	; 62
    6100:	89 87       	std	Y+9, r24	; 0x09
    6102:	9a 87       	std	Y+10, r25	; 0x0a
    6104:	4b 87       	std	Y+11, r20	; 0x0b
    6106:	5c 87       	std	Y+12, r21	; 0x0c
    6108:	6d 87       	std	Y+13, r22	; 0x0d
    610a:	7e 87       	std	Y+14, r23	; 0x0e
     * The largest value we expect is an IEEE 754 double precision real, with maximum magnitude of approximately
     * e+308. The C standard requires an implementation to allow a single conversion to produce up to 512 
     * characters, so that's what we really expect as the buffer size.     
     */

    int exponent = 0;
    610c:	19 82       	std	Y+1, r1	; 0x01
    610e:	1a 82       	std	Y+2, r1	; 0x02
    int places = 0;
    6110:	1b 82       	std	Y+3, r1	; 0x03
    6112:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    6114:	8b 85       	ldd	r24, Y+11	; 0x0b
    6116:	9c 85       	ldd	r25, Y+12	; 0x0c
    6118:	ad 85       	ldd	r26, Y+13	; 0x0d
    611a:	be 85       	ldd	r27, Y+14	; 0x0e
    611c:	20 e0       	ldi	r18, 0x00	; 0
    611e:	30 e0       	ldi	r19, 0x00	; 0
    6120:	a9 01       	movw	r20, r18
    6122:	bc 01       	movw	r22, r24
    6124:	cd 01       	movw	r24, r26
    6126:	0e 94 52 33 	call	0x66a4	; 0x66a4 <__cmpsf2>
    612a:	88 23       	and	r24, r24
    612c:	59 f4       	brne	.+22     	; 0x6144 <ftoa_fixed+0x5a>
        buffer[0] = '0';
    612e:	89 85       	ldd	r24, Y+9	; 0x09
    6130:	9a 85       	ldd	r25, Y+10	; 0x0a
    6132:	20 e3       	ldi	r18, 0x30	; 48
    6134:	fc 01       	movw	r30, r24
    6136:	20 83       	st	Z, r18
        buffer[1] = '\0';
    6138:	89 85       	ldd	r24, Y+9	; 0x09
    613a:	9a 85       	ldd	r25, Y+10	; 0x0a
    613c:	01 96       	adiw	r24, 0x01	; 1
    613e:	fc 01       	movw	r30, r24
    6140:	10 82       	st	Z, r1
        return;
    6142:	18 c1       	rjmp	.+560    	; 0x6374 <ftoa_fixed+0x28a>
    }         

    if (value < 0.0) {
    6144:	8b 85       	ldd	r24, Y+11	; 0x0b
    6146:	9c 85       	ldd	r25, Y+12	; 0x0c
    6148:	ad 85       	ldd	r26, Y+13	; 0x0d
    614a:	be 85       	ldd	r27, Y+14	; 0x0e
    614c:	20 e0       	ldi	r18, 0x00	; 0
    614e:	30 e0       	ldi	r19, 0x00	; 0
    6150:	a9 01       	movw	r20, r18
    6152:	bc 01       	movw	r22, r24
    6154:	cd 01       	movw	r24, r26
    6156:	0e 94 52 33 	call	0x66a4	; 0x66a4 <__cmpsf2>
    615a:	88 23       	and	r24, r24
    615c:	9c f4       	brge	.+38     	; 0x6184 <ftoa_fixed+0x9a>
        *buffer++ = '-';
    615e:	89 85       	ldd	r24, Y+9	; 0x09
    6160:	9a 85       	ldd	r25, Y+10	; 0x0a
    6162:	9c 01       	movw	r18, r24
    6164:	2f 5f       	subi	r18, 0xFF	; 255
    6166:	3f 4f       	sbci	r19, 0xFF	; 255
    6168:	29 87       	std	Y+9, r18	; 0x09
    616a:	3a 87       	std	Y+10, r19	; 0x0a
    616c:	2d e2       	ldi	r18, 0x2D	; 45
    616e:	fc 01       	movw	r30, r24
    6170:	20 83       	st	Z, r18
        value = -value;
    6172:	8b 85       	ldd	r24, Y+11	; 0x0b
    6174:	9c 85       	ldd	r25, Y+12	; 0x0c
    6176:	ad 85       	ldd	r26, Y+13	; 0x0d
    6178:	be 85       	ldd	r27, Y+14	; 0x0e
    617a:	b0 58       	subi	r27, 0x80	; 128
    617c:	8b 87       	std	Y+11, r24	; 0x0b
    617e:	9c 87       	std	Y+12, r25	; 0x0c
    6180:	ad 87       	std	Y+13, r26	; 0x0d
    6182:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    6184:	ce 01       	movw	r24, r28
    6186:	0b 96       	adiw	r24, 0x0b	; 11
    6188:	0e 94 08 30 	call	0x6010	; 0x6010 <normalize>
    618c:	89 83       	std	Y+1, r24	; 0x01
    618e:	9a 83       	std	Y+2, r25	; 0x02

    while (exponent > 0) {
    6190:	53 c0       	rjmp	.+166    	; 0x6238 <ftoa_fixed+0x14e>
        int digit = value * 10;
    6192:	8b 85       	ldd	r24, Y+11	; 0x0b
    6194:	9c 85       	ldd	r25, Y+12	; 0x0c
    6196:	ad 85       	ldd	r26, Y+13	; 0x0d
    6198:	be 85       	ldd	r27, Y+14	; 0x0e
    619a:	20 e0       	ldi	r18, 0x00	; 0
    619c:	30 e0       	ldi	r19, 0x00	; 0
    619e:	40 e2       	ldi	r20, 0x20	; 32
    61a0:	51 e4       	ldi	r21, 0x41	; 65
    61a2:	bc 01       	movw	r22, r24
    61a4:	cd 01       	movw	r24, r26
    61a6:	0e 94 b6 34 	call	0x696c	; 0x696c <__mulsf3>
    61aa:	dc 01       	movw	r26, r24
    61ac:	cb 01       	movw	r24, r22
    61ae:	bc 01       	movw	r22, r24
    61b0:	cd 01       	movw	r24, r26
    61b2:	0e 94 c9 33 	call	0x6792	; 0x6792 <__fixsfsi>
    61b6:	dc 01       	movw	r26, r24
    61b8:	cb 01       	movw	r24, r22
    61ba:	8d 83       	std	Y+5, r24	; 0x05
    61bc:	9e 83       	std	Y+6, r25	; 0x06
        *buffer++ = digit + '0';
    61be:	89 85       	ldd	r24, Y+9	; 0x09
    61c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    61c2:	9c 01       	movw	r18, r24
    61c4:	2f 5f       	subi	r18, 0xFF	; 255
    61c6:	3f 4f       	sbci	r19, 0xFF	; 255
    61c8:	29 87       	std	Y+9, r18	; 0x09
    61ca:	3a 87       	std	Y+10, r19	; 0x0a
    61cc:	2d 81       	ldd	r18, Y+5	; 0x05
    61ce:	20 5d       	subi	r18, 0xD0	; 208
    61d0:	fc 01       	movw	r30, r24
    61d2:	20 83       	st	Z, r18
        value = value * 10 - digit;
    61d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    61d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    61d8:	ad 85       	ldd	r26, Y+13	; 0x0d
    61da:	be 85       	ldd	r27, Y+14	; 0x0e
    61dc:	20 e0       	ldi	r18, 0x00	; 0
    61de:	30 e0       	ldi	r19, 0x00	; 0
    61e0:	40 e2       	ldi	r20, 0x20	; 32
    61e2:	51 e4       	ldi	r21, 0x41	; 65
    61e4:	bc 01       	movw	r22, r24
    61e6:	cd 01       	movw	r24, r26
    61e8:	0e 94 b6 34 	call	0x696c	; 0x696c <__mulsf3>
    61ec:	dc 01       	movw	r26, r24
    61ee:	cb 01       	movw	r24, r22
    61f0:	6c 01       	movw	r12, r24
    61f2:	7d 01       	movw	r14, r26
    61f4:	8d 81       	ldd	r24, Y+5	; 0x05
    61f6:	9e 81       	ldd	r25, Y+6	; 0x06
    61f8:	09 2e       	mov	r0, r25
    61fa:	00 0c       	add	r0, r0
    61fc:	aa 0b       	sbc	r26, r26
    61fe:	bb 0b       	sbc	r27, r27
    6200:	bc 01       	movw	r22, r24
    6202:	cd 01       	movw	r24, r26
    6204:	0e 94 01 34 	call	0x6802	; 0x6802 <__floatsisf>
    6208:	dc 01       	movw	r26, r24
    620a:	cb 01       	movw	r24, r22
    620c:	9c 01       	movw	r18, r24
    620e:	ad 01       	movw	r20, r26
    6210:	c7 01       	movw	r24, r14
    6212:	b6 01       	movw	r22, r12
    6214:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__subsf3>
    6218:	dc 01       	movw	r26, r24
    621a:	cb 01       	movw	r24, r22
    621c:	8b 87       	std	Y+11, r24	; 0x0b
    621e:	9c 87       	std	Y+12, r25	; 0x0c
    6220:	ad 87       	std	Y+13, r26	; 0x0d
    6222:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    6224:	8b 81       	ldd	r24, Y+3	; 0x03
    6226:	9c 81       	ldd	r25, Y+4	; 0x04
    6228:	01 96       	adiw	r24, 0x01	; 1
    622a:	8b 83       	std	Y+3, r24	; 0x03
    622c:	9c 83       	std	Y+4, r25	; 0x04
        --exponent;
    622e:	89 81       	ldd	r24, Y+1	; 0x01
    6230:	9a 81       	ldd	r25, Y+2	; 0x02
    6232:	01 97       	sbiw	r24, 0x01	; 1
    6234:	89 83       	std	Y+1, r24	; 0x01
    6236:	9a 83       	std	Y+2, r25	; 0x02
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    6238:	89 81       	ldd	r24, Y+1	; 0x01
    623a:	9a 81       	ldd	r25, Y+2	; 0x02
    623c:	18 16       	cp	r1, r24
    623e:	19 06       	cpc	r1, r25
    6240:	0c f4       	brge	.+2      	; 0x6244 <ftoa_fixed+0x15a>
    6242:	a7 cf       	rjmp	.-178    	; 0x6192 <ftoa_fixed+0xa8>
        value = value * 10 - digit;
        ++places;
        --exponent;
    }

    if (places == 0)
    6244:	8b 81       	ldd	r24, Y+3	; 0x03
    6246:	9c 81       	ldd	r25, Y+4	; 0x04
    6248:	89 2b       	or	r24, r25
    624a:	51 f4       	brne	.+20     	; 0x6260 <ftoa_fixed+0x176>
        *buffer++ = '0';
    624c:	89 85       	ldd	r24, Y+9	; 0x09
    624e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6250:	9c 01       	movw	r18, r24
    6252:	2f 5f       	subi	r18, 0xFF	; 255
    6254:	3f 4f       	sbci	r19, 0xFF	; 255
    6256:	29 87       	std	Y+9, r18	; 0x09
    6258:	3a 87       	std	Y+10, r19	; 0x0a
    625a:	20 e3       	ldi	r18, 0x30	; 48
    625c:	fc 01       	movw	r30, r24
    625e:	20 83       	st	Z, r18

    *buffer++ = '.';
    6260:	89 85       	ldd	r24, Y+9	; 0x09
    6262:	9a 85       	ldd	r25, Y+10	; 0x0a
    6264:	9c 01       	movw	r18, r24
    6266:	2f 5f       	subi	r18, 0xFF	; 255
    6268:	3f 4f       	sbci	r19, 0xFF	; 255
    626a:	29 87       	std	Y+9, r18	; 0x09
    626c:	3a 87       	std	Y+10, r19	; 0x0a
    626e:	2e e2       	ldi	r18, 0x2E	; 46
    6270:	fc 01       	movw	r30, r24
    6272:	20 83       	st	Z, r18

    while (exponent < 0 && places < width) {
    6274:	14 c0       	rjmp	.+40     	; 0x629e <ftoa_fixed+0x1b4>
        *buffer++ = '0';
    6276:	89 85       	ldd	r24, Y+9	; 0x09
    6278:	9a 85       	ldd	r25, Y+10	; 0x0a
    627a:	9c 01       	movw	r18, r24
    627c:	2f 5f       	subi	r18, 0xFF	; 255
    627e:	3f 4f       	sbci	r19, 0xFF	; 255
    6280:	29 87       	std	Y+9, r18	; 0x09
    6282:	3a 87       	std	Y+10, r19	; 0x0a
    6284:	20 e3       	ldi	r18, 0x30	; 48
    6286:	fc 01       	movw	r30, r24
    6288:	20 83       	st	Z, r18
        --exponent;
    628a:	89 81       	ldd	r24, Y+1	; 0x01
    628c:	9a 81       	ldd	r25, Y+2	; 0x02
    628e:	01 97       	sbiw	r24, 0x01	; 1
    6290:	89 83       	std	Y+1, r24	; 0x01
    6292:	9a 83       	std	Y+2, r25	; 0x02
        ++places;
    6294:	8b 81       	ldd	r24, Y+3	; 0x03
    6296:	9c 81       	ldd	r25, Y+4	; 0x04
    6298:	01 96       	adiw	r24, 0x01	; 1
    629a:	8b 83       	std	Y+3, r24	; 0x03
    629c:	9c 83       	std	Y+4, r25	; 0x04
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    629e:	89 81       	ldd	r24, Y+1	; 0x01
    62a0:	9a 81       	ldd	r25, Y+2	; 0x02
    62a2:	99 23       	and	r25, r25
    62a4:	0c f0       	brlt	.+2      	; 0x62a8 <ftoa_fixed+0x1be>
    62a6:	58 c0       	rjmp	.+176    	; 0x6358 <ftoa_fixed+0x26e>
    62a8:	80 91 54 20 	lds	r24, 0x2054	; 0x802054 <width.5062>
    62ac:	90 91 55 20 	lds	r25, 0x2055	; 0x802055 <width.5062+0x1>
    62b0:	2b 81       	ldd	r18, Y+3	; 0x03
    62b2:	3c 81       	ldd	r19, Y+4	; 0x04
    62b4:	28 17       	cp	r18, r24
    62b6:	39 07       	cpc	r19, r25
    62b8:	f4 f2       	brlt	.-68     	; 0x6276 <ftoa_fixed+0x18c>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    62ba:	4e c0       	rjmp	.+156    	; 0x6358 <ftoa_fixed+0x26e>
        int digit = value * 10.0;
    62bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    62be:	9c 85       	ldd	r25, Y+12	; 0x0c
    62c0:	ad 85       	ldd	r26, Y+13	; 0x0d
    62c2:	be 85       	ldd	r27, Y+14	; 0x0e
    62c4:	20 e0       	ldi	r18, 0x00	; 0
    62c6:	30 e0       	ldi	r19, 0x00	; 0
    62c8:	40 e2       	ldi	r20, 0x20	; 32
    62ca:	51 e4       	ldi	r21, 0x41	; 65
    62cc:	bc 01       	movw	r22, r24
    62ce:	cd 01       	movw	r24, r26
    62d0:	0e 94 b6 34 	call	0x696c	; 0x696c <__mulsf3>
    62d4:	dc 01       	movw	r26, r24
    62d6:	cb 01       	movw	r24, r22
    62d8:	bc 01       	movw	r22, r24
    62da:	cd 01       	movw	r24, r26
    62dc:	0e 94 c9 33 	call	0x6792	; 0x6792 <__fixsfsi>
    62e0:	dc 01       	movw	r26, r24
    62e2:	cb 01       	movw	r24, r22
    62e4:	8f 83       	std	Y+7, r24	; 0x07
    62e6:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    62e8:	89 85       	ldd	r24, Y+9	; 0x09
    62ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    62ec:	9c 01       	movw	r18, r24
    62ee:	2f 5f       	subi	r18, 0xFF	; 255
    62f0:	3f 4f       	sbci	r19, 0xFF	; 255
    62f2:	29 87       	std	Y+9, r18	; 0x09
    62f4:	3a 87       	std	Y+10, r19	; 0x0a
    62f6:	2f 81       	ldd	r18, Y+7	; 0x07
    62f8:	20 5d       	subi	r18, 0xD0	; 208
    62fa:	fc 01       	movw	r30, r24
    62fc:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    62fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    6300:	9c 85       	ldd	r25, Y+12	; 0x0c
    6302:	ad 85       	ldd	r26, Y+13	; 0x0d
    6304:	be 85       	ldd	r27, Y+14	; 0x0e
    6306:	20 e0       	ldi	r18, 0x00	; 0
    6308:	30 e0       	ldi	r19, 0x00	; 0
    630a:	40 e2       	ldi	r20, 0x20	; 32
    630c:	51 e4       	ldi	r21, 0x41	; 65
    630e:	bc 01       	movw	r22, r24
    6310:	cd 01       	movw	r24, r26
    6312:	0e 94 b6 34 	call	0x696c	; 0x696c <__mulsf3>
    6316:	dc 01       	movw	r26, r24
    6318:	cb 01       	movw	r24, r22
    631a:	6c 01       	movw	r12, r24
    631c:	7d 01       	movw	r14, r26
    631e:	8f 81       	ldd	r24, Y+7	; 0x07
    6320:	98 85       	ldd	r25, Y+8	; 0x08
    6322:	09 2e       	mov	r0, r25
    6324:	00 0c       	add	r0, r0
    6326:	aa 0b       	sbc	r26, r26
    6328:	bb 0b       	sbc	r27, r27
    632a:	bc 01       	movw	r22, r24
    632c:	cd 01       	movw	r24, r26
    632e:	0e 94 01 34 	call	0x6802	; 0x6802 <__floatsisf>
    6332:	dc 01       	movw	r26, r24
    6334:	cb 01       	movw	r24, r22
    6336:	9c 01       	movw	r18, r24
    6338:	ad 01       	movw	r20, r26
    633a:	c7 01       	movw	r24, r14
    633c:	b6 01       	movw	r22, r12
    633e:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__subsf3>
    6342:	dc 01       	movw	r26, r24
    6344:	cb 01       	movw	r24, r22
    6346:	8b 87       	std	Y+11, r24	; 0x0b
    6348:	9c 87       	std	Y+12, r25	; 0x0c
    634a:	ad 87       	std	Y+13, r26	; 0x0d
    634c:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    634e:	8b 81       	ldd	r24, Y+3	; 0x03
    6350:	9c 81       	ldd	r25, Y+4	; 0x04
    6352:	01 96       	adiw	r24, 0x01	; 1
    6354:	8b 83       	std	Y+3, r24	; 0x03
    6356:	9c 83       	std	Y+4, r25	; 0x04
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    6358:	80 91 54 20 	lds	r24, 0x2054	; 0x802054 <width.5062>
    635c:	90 91 55 20 	lds	r25, 0x2055	; 0x802055 <width.5062+0x1>
    6360:	2b 81       	ldd	r18, Y+3	; 0x03
    6362:	3c 81       	ldd	r19, Y+4	; 0x04
    6364:	28 17       	cp	r18, r24
    6366:	39 07       	cpc	r19, r25
    6368:	0c f4       	brge	.+2      	; 0x636c <ftoa_fixed+0x282>
    636a:	a8 cf       	rjmp	.-176    	; 0x62bc <ftoa_fixed+0x1d2>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
        ++places;
    }
    *buffer = '\0';
    636c:	89 85       	ldd	r24, Y+9	; 0x09
    636e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6370:	fc 01       	movw	r30, r24
    6372:	10 82       	st	Z, r1
}
    6374:	2e 96       	adiw	r28, 0x0e	; 14
    6376:	cd bf       	out	0x3d, r28	; 61
    6378:	de bf       	out	0x3e, r29	; 62
    637a:	df 91       	pop	r29
    637c:	cf 91       	pop	r28
    637e:	ff 90       	pop	r15
    6380:	ef 90       	pop	r14
    6382:	df 90       	pop	r13
    6384:	cf 90       	pop	r12
    6386:	08 95       	ret

00006388 <ftoa_sci>:

void ftoa_sci(char *buffer, double value) {
    6388:	cf 92       	push	r12
    638a:	df 92       	push	r13
    638c:	ef 92       	push	r14
    638e:	ff 92       	push	r15
    6390:	cf 93       	push	r28
    6392:	df 93       	push	r29
    6394:	cd b7       	in	r28, 0x3d	; 61
    6396:	de b7       	in	r29, 0x3e	; 62
    6398:	2e 97       	sbiw	r28, 0x0e	; 14
    639a:	cd bf       	out	0x3d, r28	; 61
    639c:	de bf       	out	0x3e, r29	; 62
    639e:	89 87       	std	Y+9, r24	; 0x09
    63a0:	9a 87       	std	Y+10, r25	; 0x0a
    63a2:	4b 87       	std	Y+11, r20	; 0x0b
    63a4:	5c 87       	std	Y+12, r21	; 0x0c
    63a6:	6d 87       	std	Y+13, r22	; 0x0d
    63a8:	7e 87       	std	Y+14, r23	; 0x0e
    int exponent = 0;    
    63aa:	1b 82       	std	Y+3, r1	; 0x03
    63ac:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    63ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    63b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    63b2:	ad 85       	ldd	r26, Y+13	; 0x0d
    63b4:	be 85       	ldd	r27, Y+14	; 0x0e
    63b6:	20 e0       	ldi	r18, 0x00	; 0
    63b8:	30 e0       	ldi	r19, 0x00	; 0
    63ba:	a9 01       	movw	r20, r18
    63bc:	bc 01       	movw	r22, r24
    63be:	cd 01       	movw	r24, r26
    63c0:	0e 94 52 33 	call	0x66a4	; 0x66a4 <__cmpsf2>
    63c4:	88 23       	and	r24, r24
    63c6:	59 f4       	brne	.+22     	; 0x63de <ftoa_sci+0x56>
        buffer[0] = '0';
    63c8:	89 85       	ldd	r24, Y+9	; 0x09
    63ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    63cc:	20 e3       	ldi	r18, 0x30	; 48
    63ce:	fc 01       	movw	r30, r24
    63d0:	20 83       	st	Z, r18
        buffer[1] = '\0';
    63d2:	89 85       	ldd	r24, Y+9	; 0x09
    63d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    63d6:	01 96       	adiw	r24, 0x01	; 1
    63d8:	fc 01       	movw	r30, r24
    63da:	10 82       	st	Z, r1
        return;
    63dc:	ec c0       	rjmp	.+472    	; 0x65b6 <ftoa_sci+0x22e>
    }

    if (value < 0.0) {
    63de:	8b 85       	ldd	r24, Y+11	; 0x0b
    63e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    63e2:	ad 85       	ldd	r26, Y+13	; 0x0d
    63e4:	be 85       	ldd	r27, Y+14	; 0x0e
    63e6:	20 e0       	ldi	r18, 0x00	; 0
    63e8:	30 e0       	ldi	r19, 0x00	; 0
    63ea:	a9 01       	movw	r20, r18
    63ec:	bc 01       	movw	r22, r24
    63ee:	cd 01       	movw	r24, r26
    63f0:	0e 94 52 33 	call	0x66a4	; 0x66a4 <__cmpsf2>
    63f4:	88 23       	and	r24, r24
    63f6:	9c f4       	brge	.+38     	; 0x641e <ftoa_sci+0x96>
        *buffer++ = '-';
    63f8:	89 85       	ldd	r24, Y+9	; 0x09
    63fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    63fc:	9c 01       	movw	r18, r24
    63fe:	2f 5f       	subi	r18, 0xFF	; 255
    6400:	3f 4f       	sbci	r19, 0xFF	; 255
    6402:	29 87       	std	Y+9, r18	; 0x09
    6404:	3a 87       	std	Y+10, r19	; 0x0a
    6406:	2d e2       	ldi	r18, 0x2D	; 45
    6408:	fc 01       	movw	r30, r24
    640a:	20 83       	st	Z, r18
        value = -value;
    640c:	8b 85       	ldd	r24, Y+11	; 0x0b
    640e:	9c 85       	ldd	r25, Y+12	; 0x0c
    6410:	ad 85       	ldd	r26, Y+13	; 0x0d
    6412:	be 85       	ldd	r27, Y+14	; 0x0e
    6414:	b0 58       	subi	r27, 0x80	; 128
    6416:	8b 87       	std	Y+11, r24	; 0x0b
    6418:	9c 87       	std	Y+12, r25	; 0x0c
    641a:	ad 87       	std	Y+13, r26	; 0x0d
    641c:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    641e:	ce 01       	movw	r24, r28
    6420:	0b 96       	adiw	r24, 0x0b	; 11
    6422:	0e 94 08 30 	call	0x6010	; 0x6010 <normalize>
    6426:	8b 83       	std	Y+3, r24	; 0x03
    6428:	9c 83       	std	Y+4, r25	; 0x04

    int digit = value * 10.0;
    642a:	8b 85       	ldd	r24, Y+11	; 0x0b
    642c:	9c 85       	ldd	r25, Y+12	; 0x0c
    642e:	ad 85       	ldd	r26, Y+13	; 0x0d
    6430:	be 85       	ldd	r27, Y+14	; 0x0e
    6432:	20 e0       	ldi	r18, 0x00	; 0
    6434:	30 e0       	ldi	r19, 0x00	; 0
    6436:	40 e2       	ldi	r20, 0x20	; 32
    6438:	51 e4       	ldi	r21, 0x41	; 65
    643a:	bc 01       	movw	r22, r24
    643c:	cd 01       	movw	r24, r26
    643e:	0e 94 b6 34 	call	0x696c	; 0x696c <__mulsf3>
    6442:	dc 01       	movw	r26, r24
    6444:	cb 01       	movw	r24, r22
    6446:	bc 01       	movw	r22, r24
    6448:	cd 01       	movw	r24, r26
    644a:	0e 94 c9 33 	call	0x6792	; 0x6792 <__fixsfsi>
    644e:	dc 01       	movw	r26, r24
    6450:	cb 01       	movw	r24, r22
    6452:	8d 83       	std	Y+5, r24	; 0x05
    6454:	9e 83       	std	Y+6, r25	; 0x06
    *buffer++ = digit + '0';
    6456:	89 85       	ldd	r24, Y+9	; 0x09
    6458:	9a 85       	ldd	r25, Y+10	; 0x0a
    645a:	9c 01       	movw	r18, r24
    645c:	2f 5f       	subi	r18, 0xFF	; 255
    645e:	3f 4f       	sbci	r19, 0xFF	; 255
    6460:	29 87       	std	Y+9, r18	; 0x09
    6462:	3a 87       	std	Y+10, r19	; 0x0a
    6464:	2d 81       	ldd	r18, Y+5	; 0x05
    6466:	20 5d       	subi	r18, 0xD0	; 208
    6468:	fc 01       	movw	r30, r24
    646a:	20 83       	st	Z, r18
    value = value * 10.0 - digit;
    646c:	8b 85       	ldd	r24, Y+11	; 0x0b
    646e:	9c 85       	ldd	r25, Y+12	; 0x0c
    6470:	ad 85       	ldd	r26, Y+13	; 0x0d
    6472:	be 85       	ldd	r27, Y+14	; 0x0e
    6474:	20 e0       	ldi	r18, 0x00	; 0
    6476:	30 e0       	ldi	r19, 0x00	; 0
    6478:	40 e2       	ldi	r20, 0x20	; 32
    647a:	51 e4       	ldi	r21, 0x41	; 65
    647c:	bc 01       	movw	r22, r24
    647e:	cd 01       	movw	r24, r26
    6480:	0e 94 b6 34 	call	0x696c	; 0x696c <__mulsf3>
    6484:	dc 01       	movw	r26, r24
    6486:	cb 01       	movw	r24, r22
    6488:	6c 01       	movw	r12, r24
    648a:	7d 01       	movw	r14, r26
    648c:	8d 81       	ldd	r24, Y+5	; 0x05
    648e:	9e 81       	ldd	r25, Y+6	; 0x06
    6490:	09 2e       	mov	r0, r25
    6492:	00 0c       	add	r0, r0
    6494:	aa 0b       	sbc	r26, r26
    6496:	bb 0b       	sbc	r27, r27
    6498:	bc 01       	movw	r22, r24
    649a:	cd 01       	movw	r24, r26
    649c:	0e 94 01 34 	call	0x6802	; 0x6802 <__floatsisf>
    64a0:	dc 01       	movw	r26, r24
    64a2:	cb 01       	movw	r24, r22
    64a4:	9c 01       	movw	r18, r24
    64a6:	ad 01       	movw	r20, r26
    64a8:	c7 01       	movw	r24, r14
    64aa:	b6 01       	movw	r22, r12
    64ac:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__subsf3>
    64b0:	dc 01       	movw	r26, r24
    64b2:	cb 01       	movw	r24, r22
    64b4:	8b 87       	std	Y+11, r24	; 0x0b
    64b6:	9c 87       	std	Y+12, r25	; 0x0c
    64b8:	ad 87       	std	Y+13, r26	; 0x0d
    64ba:	be 87       	std	Y+14, r27	; 0x0e
    --exponent;
    64bc:	8b 81       	ldd	r24, Y+3	; 0x03
    64be:	9c 81       	ldd	r25, Y+4	; 0x04
    64c0:	01 97       	sbiw	r24, 0x01	; 1
    64c2:	8b 83       	std	Y+3, r24	; 0x03
    64c4:	9c 83       	std	Y+4, r25	; 0x04

    *buffer++ = '.';
    64c6:	89 85       	ldd	r24, Y+9	; 0x09
    64c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    64ca:	9c 01       	movw	r18, r24
    64cc:	2f 5f       	subi	r18, 0xFF	; 255
    64ce:	3f 4f       	sbci	r19, 0xFF	; 255
    64d0:	29 87       	std	Y+9, r18	; 0x09
    64d2:	3a 87       	std	Y+10, r19	; 0x0a
    64d4:	2e e2       	ldi	r18, 0x2E	; 46
    64d6:	fc 01       	movw	r30, r24
    64d8:	20 83       	st	Z, r18

    for (int i = 0; i < width; i++) {
    64da:	19 82       	std	Y+1, r1	; 0x01
    64dc:	1a 82       	std	Y+2, r1	; 0x02
    64de:	4e c0       	rjmp	.+156    	; 0x657c <ftoa_sci+0x1f4>
        int digit = value * 10.0;
    64e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    64e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    64e4:	ad 85       	ldd	r26, Y+13	; 0x0d
    64e6:	be 85       	ldd	r27, Y+14	; 0x0e
    64e8:	20 e0       	ldi	r18, 0x00	; 0
    64ea:	30 e0       	ldi	r19, 0x00	; 0
    64ec:	40 e2       	ldi	r20, 0x20	; 32
    64ee:	51 e4       	ldi	r21, 0x41	; 65
    64f0:	bc 01       	movw	r22, r24
    64f2:	cd 01       	movw	r24, r26
    64f4:	0e 94 b6 34 	call	0x696c	; 0x696c <__mulsf3>
    64f8:	dc 01       	movw	r26, r24
    64fa:	cb 01       	movw	r24, r22
    64fc:	bc 01       	movw	r22, r24
    64fe:	cd 01       	movw	r24, r26
    6500:	0e 94 c9 33 	call	0x6792	; 0x6792 <__fixsfsi>
    6504:	dc 01       	movw	r26, r24
    6506:	cb 01       	movw	r24, r22
    6508:	8f 83       	std	Y+7, r24	; 0x07
    650a:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    650c:	89 85       	ldd	r24, Y+9	; 0x09
    650e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6510:	9c 01       	movw	r18, r24
    6512:	2f 5f       	subi	r18, 0xFF	; 255
    6514:	3f 4f       	sbci	r19, 0xFF	; 255
    6516:	29 87       	std	Y+9, r18	; 0x09
    6518:	3a 87       	std	Y+10, r19	; 0x0a
    651a:	2f 81       	ldd	r18, Y+7	; 0x07
    651c:	20 5d       	subi	r18, 0xD0	; 208
    651e:	fc 01       	movw	r30, r24
    6520:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    6522:	8b 85       	ldd	r24, Y+11	; 0x0b
    6524:	9c 85       	ldd	r25, Y+12	; 0x0c
    6526:	ad 85       	ldd	r26, Y+13	; 0x0d
    6528:	be 85       	ldd	r27, Y+14	; 0x0e
    652a:	20 e0       	ldi	r18, 0x00	; 0
    652c:	30 e0       	ldi	r19, 0x00	; 0
    652e:	40 e2       	ldi	r20, 0x20	; 32
    6530:	51 e4       	ldi	r21, 0x41	; 65
    6532:	bc 01       	movw	r22, r24
    6534:	cd 01       	movw	r24, r26
    6536:	0e 94 b6 34 	call	0x696c	; 0x696c <__mulsf3>
    653a:	dc 01       	movw	r26, r24
    653c:	cb 01       	movw	r24, r22
    653e:	6c 01       	movw	r12, r24
    6540:	7d 01       	movw	r14, r26
    6542:	8f 81       	ldd	r24, Y+7	; 0x07
    6544:	98 85       	ldd	r25, Y+8	; 0x08
    6546:	09 2e       	mov	r0, r25
    6548:	00 0c       	add	r0, r0
    654a:	aa 0b       	sbc	r26, r26
    654c:	bb 0b       	sbc	r27, r27
    654e:	bc 01       	movw	r22, r24
    6550:	cd 01       	movw	r24, r26
    6552:	0e 94 01 34 	call	0x6802	; 0x6802 <__floatsisf>
    6556:	dc 01       	movw	r26, r24
    6558:	cb 01       	movw	r24, r22
    655a:	9c 01       	movw	r18, r24
    655c:	ad 01       	movw	r20, r26
    655e:	c7 01       	movw	r24, r14
    6560:	b6 01       	movw	r22, r12
    6562:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__subsf3>
    6566:	dc 01       	movw	r26, r24
    6568:	cb 01       	movw	r24, r22
    656a:	8b 87       	std	Y+11, r24	; 0x0b
    656c:	9c 87       	std	Y+12, r25	; 0x0c
    656e:	ad 87       	std	Y+13, r26	; 0x0d
    6570:	be 87       	std	Y+14, r27	; 0x0e
    value = value * 10.0 - digit;
    --exponent;

    *buffer++ = '.';

    for (int i = 0; i < width; i++) {
    6572:	89 81       	ldd	r24, Y+1	; 0x01
    6574:	9a 81       	ldd	r25, Y+2	; 0x02
    6576:	01 96       	adiw	r24, 0x01	; 1
    6578:	89 83       	std	Y+1, r24	; 0x01
    657a:	9a 83       	std	Y+2, r25	; 0x02
    657c:	80 91 56 20 	lds	r24, 0x2056	; 0x802056 <width.5079>
    6580:	90 91 57 20 	lds	r25, 0x2057	; 0x802057 <width.5079+0x1>
    6584:	29 81       	ldd	r18, Y+1	; 0x01
    6586:	3a 81       	ldd	r19, Y+2	; 0x02
    6588:	28 17       	cp	r18, r24
    658a:	39 07       	cpc	r19, r25
    658c:	0c f4       	brge	.+2      	; 0x6590 <ftoa_sci+0x208>
    658e:	a8 cf       	rjmp	.-176    	; 0x64e0 <ftoa_sci+0x158>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
    }

    *buffer++ = 'e';
    6590:	89 85       	ldd	r24, Y+9	; 0x09
    6592:	9a 85       	ldd	r25, Y+10	; 0x0a
    6594:	9c 01       	movw	r18, r24
    6596:	2f 5f       	subi	r18, 0xFF	; 255
    6598:	3f 4f       	sbci	r19, 0xFF	; 255
    659a:	29 87       	std	Y+9, r18	; 0x09
    659c:	3a 87       	std	Y+10, r19	; 0x0a
    659e:	25 e6       	ldi	r18, 0x65	; 101
    65a0:	fc 01       	movw	r30, r24
    65a2:	20 83       	st	Z, r18
    itoa(exponent, buffer, 10);
    65a4:	29 85       	ldd	r18, Y+9	; 0x09
    65a6:	3a 85       	ldd	r19, Y+10	; 0x0a
    65a8:	8b 81       	ldd	r24, Y+3	; 0x03
    65aa:	9c 81       	ldd	r25, Y+4	; 0x04
    65ac:	4a e0       	ldi	r20, 0x0A	; 10
    65ae:	50 e0       	ldi	r21, 0x00	; 0
    65b0:	b9 01       	movw	r22, r18
    65b2:	0e 94 57 3b 	call	0x76ae	; 0x76ae <itoa>
}
    65b6:	2e 96       	adiw	r28, 0x0e	; 14
    65b8:	cd bf       	out	0x3d, r28	; 61
    65ba:	de bf       	out	0x3e, r29	; 62
    65bc:	df 91       	pop	r29
    65be:	cf 91       	pop	r28
    65c0:	ff 90       	pop	r15
    65c2:	ef 90       	pop	r14
    65c4:	df 90       	pop	r13
    65c6:	cf 90       	pop	r12
    65c8:	08 95       	ret

000065ca <__subsf3>:
    65ca:	50 58       	subi	r21, 0x80	; 128

000065cc <__addsf3>:
    65cc:	bb 27       	eor	r27, r27
    65ce:	aa 27       	eor	r26, r26
    65d0:	0e 94 fd 32 	call	0x65fa	; 0x65fa <__addsf3x>
    65d4:	0c 94 77 34 	jmp	0x68ee	; 0x68ee <__fp_round>
    65d8:	0e 94 69 34 	call	0x68d2	; 0x68d2 <__fp_pscA>
    65dc:	38 f0       	brcs	.+14     	; 0x65ec <__addsf3+0x20>
    65de:	0e 94 70 34 	call	0x68e0	; 0x68e0 <__fp_pscB>
    65e2:	20 f0       	brcs	.+8      	; 0x65ec <__addsf3+0x20>
    65e4:	39 f4       	brne	.+14     	; 0x65f4 <__addsf3+0x28>
    65e6:	9f 3f       	cpi	r25, 0xFF	; 255
    65e8:	19 f4       	brne	.+6      	; 0x65f0 <__addsf3+0x24>
    65ea:	26 f4       	brtc	.+8      	; 0x65f4 <__addsf3+0x28>
    65ec:	0c 94 66 34 	jmp	0x68cc	; 0x68cc <__fp_nan>
    65f0:	0e f4       	brtc	.+2      	; 0x65f4 <__addsf3+0x28>
    65f2:	e0 95       	com	r30
    65f4:	e7 fb       	bst	r30, 7
    65f6:	0c 94 60 34 	jmp	0x68c0	; 0x68c0 <__fp_inf>

000065fa <__addsf3x>:
    65fa:	e9 2f       	mov	r30, r25
    65fc:	0e 94 88 34 	call	0x6910	; 0x6910 <__fp_split3>
    6600:	58 f3       	brcs	.-42     	; 0x65d8 <__addsf3+0xc>
    6602:	ba 17       	cp	r27, r26
    6604:	62 07       	cpc	r22, r18
    6606:	73 07       	cpc	r23, r19
    6608:	84 07       	cpc	r24, r20
    660a:	95 07       	cpc	r25, r21
    660c:	20 f0       	brcs	.+8      	; 0x6616 <__addsf3x+0x1c>
    660e:	79 f4       	brne	.+30     	; 0x662e <__addsf3x+0x34>
    6610:	a6 f5       	brtc	.+104    	; 0x667a <__addsf3x+0x80>
    6612:	0c 94 aa 34 	jmp	0x6954	; 0x6954 <__fp_zero>
    6616:	0e f4       	brtc	.+2      	; 0x661a <__addsf3x+0x20>
    6618:	e0 95       	com	r30
    661a:	0b 2e       	mov	r0, r27
    661c:	ba 2f       	mov	r27, r26
    661e:	a0 2d       	mov	r26, r0
    6620:	0b 01       	movw	r0, r22
    6622:	b9 01       	movw	r22, r18
    6624:	90 01       	movw	r18, r0
    6626:	0c 01       	movw	r0, r24
    6628:	ca 01       	movw	r24, r20
    662a:	a0 01       	movw	r20, r0
    662c:	11 24       	eor	r1, r1
    662e:	ff 27       	eor	r31, r31
    6630:	59 1b       	sub	r21, r25
    6632:	99 f0       	breq	.+38     	; 0x665a <__addsf3x+0x60>
    6634:	59 3f       	cpi	r21, 0xF9	; 249
    6636:	50 f4       	brcc	.+20     	; 0x664c <__addsf3x+0x52>
    6638:	50 3e       	cpi	r21, 0xE0	; 224
    663a:	68 f1       	brcs	.+90     	; 0x6696 <__addsf3x+0x9c>
    663c:	1a 16       	cp	r1, r26
    663e:	f0 40       	sbci	r31, 0x00	; 0
    6640:	a2 2f       	mov	r26, r18
    6642:	23 2f       	mov	r18, r19
    6644:	34 2f       	mov	r19, r20
    6646:	44 27       	eor	r20, r20
    6648:	58 5f       	subi	r21, 0xF8	; 248
    664a:	f3 cf       	rjmp	.-26     	; 0x6632 <__addsf3x+0x38>
    664c:	46 95       	lsr	r20
    664e:	37 95       	ror	r19
    6650:	27 95       	ror	r18
    6652:	a7 95       	ror	r26
    6654:	f0 40       	sbci	r31, 0x00	; 0
    6656:	53 95       	inc	r21
    6658:	c9 f7       	brne	.-14     	; 0x664c <__addsf3x+0x52>
    665a:	7e f4       	brtc	.+30     	; 0x667a <__addsf3x+0x80>
    665c:	1f 16       	cp	r1, r31
    665e:	ba 0b       	sbc	r27, r26
    6660:	62 0b       	sbc	r22, r18
    6662:	73 0b       	sbc	r23, r19
    6664:	84 0b       	sbc	r24, r20
    6666:	ba f0       	brmi	.+46     	; 0x6696 <__addsf3x+0x9c>
    6668:	91 50       	subi	r25, 0x01	; 1
    666a:	a1 f0       	breq	.+40     	; 0x6694 <__addsf3x+0x9a>
    666c:	ff 0f       	add	r31, r31
    666e:	bb 1f       	adc	r27, r27
    6670:	66 1f       	adc	r22, r22
    6672:	77 1f       	adc	r23, r23
    6674:	88 1f       	adc	r24, r24
    6676:	c2 f7       	brpl	.-16     	; 0x6668 <__addsf3x+0x6e>
    6678:	0e c0       	rjmp	.+28     	; 0x6696 <__addsf3x+0x9c>
    667a:	ba 0f       	add	r27, r26
    667c:	62 1f       	adc	r22, r18
    667e:	73 1f       	adc	r23, r19
    6680:	84 1f       	adc	r24, r20
    6682:	48 f4       	brcc	.+18     	; 0x6696 <__addsf3x+0x9c>
    6684:	87 95       	ror	r24
    6686:	77 95       	ror	r23
    6688:	67 95       	ror	r22
    668a:	b7 95       	ror	r27
    668c:	f7 95       	ror	r31
    668e:	9e 3f       	cpi	r25, 0xFE	; 254
    6690:	08 f0       	brcs	.+2      	; 0x6694 <__addsf3x+0x9a>
    6692:	b0 cf       	rjmp	.-160    	; 0x65f4 <__addsf3+0x28>
    6694:	93 95       	inc	r25
    6696:	88 0f       	add	r24, r24
    6698:	08 f0       	brcs	.+2      	; 0x669c <__addsf3x+0xa2>
    669a:	99 27       	eor	r25, r25
    669c:	ee 0f       	add	r30, r30
    669e:	97 95       	ror	r25
    66a0:	87 95       	ror	r24
    66a2:	08 95       	ret

000066a4 <__cmpsf2>:
    66a4:	0e 94 3c 34 	call	0x6878	; 0x6878 <__fp_cmp>
    66a8:	08 f4       	brcc	.+2      	; 0x66ac <__cmpsf2+0x8>
    66aa:	81 e0       	ldi	r24, 0x01	; 1
    66ac:	08 95       	ret

000066ae <__divsf3>:
    66ae:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <__divsf3x>
    66b2:	0c 94 77 34 	jmp	0x68ee	; 0x68ee <__fp_round>
    66b6:	0e 94 70 34 	call	0x68e0	; 0x68e0 <__fp_pscB>
    66ba:	58 f0       	brcs	.+22     	; 0x66d2 <__divsf3+0x24>
    66bc:	0e 94 69 34 	call	0x68d2	; 0x68d2 <__fp_pscA>
    66c0:	40 f0       	brcs	.+16     	; 0x66d2 <__divsf3+0x24>
    66c2:	29 f4       	brne	.+10     	; 0x66ce <__divsf3+0x20>
    66c4:	5f 3f       	cpi	r21, 0xFF	; 255
    66c6:	29 f0       	breq	.+10     	; 0x66d2 <__divsf3+0x24>
    66c8:	0c 94 60 34 	jmp	0x68c0	; 0x68c0 <__fp_inf>
    66cc:	51 11       	cpse	r21, r1
    66ce:	0c 94 ab 34 	jmp	0x6956	; 0x6956 <__fp_szero>
    66d2:	0c 94 66 34 	jmp	0x68cc	; 0x68cc <__fp_nan>

000066d6 <__divsf3x>:
    66d6:	0e 94 88 34 	call	0x6910	; 0x6910 <__fp_split3>
    66da:	68 f3       	brcs	.-38     	; 0x66b6 <__divsf3+0x8>

000066dc <__divsf3_pse>:
    66dc:	99 23       	and	r25, r25
    66de:	b1 f3       	breq	.-20     	; 0x66cc <__divsf3+0x1e>
    66e0:	55 23       	and	r21, r21
    66e2:	91 f3       	breq	.-28     	; 0x66c8 <__divsf3+0x1a>
    66e4:	95 1b       	sub	r25, r21
    66e6:	55 0b       	sbc	r21, r21
    66e8:	bb 27       	eor	r27, r27
    66ea:	aa 27       	eor	r26, r26
    66ec:	62 17       	cp	r22, r18
    66ee:	73 07       	cpc	r23, r19
    66f0:	84 07       	cpc	r24, r20
    66f2:	38 f0       	brcs	.+14     	; 0x6702 <__divsf3_pse+0x26>
    66f4:	9f 5f       	subi	r25, 0xFF	; 255
    66f6:	5f 4f       	sbci	r21, 0xFF	; 255
    66f8:	22 0f       	add	r18, r18
    66fa:	33 1f       	adc	r19, r19
    66fc:	44 1f       	adc	r20, r20
    66fe:	aa 1f       	adc	r26, r26
    6700:	a9 f3       	breq	.-22     	; 0x66ec <__divsf3_pse+0x10>
    6702:	35 d0       	rcall	.+106    	; 0x676e <__divsf3_pse+0x92>
    6704:	0e 2e       	mov	r0, r30
    6706:	3a f0       	brmi	.+14     	; 0x6716 <__divsf3_pse+0x3a>
    6708:	e0 e8       	ldi	r30, 0x80	; 128
    670a:	32 d0       	rcall	.+100    	; 0x6770 <__divsf3_pse+0x94>
    670c:	91 50       	subi	r25, 0x01	; 1
    670e:	50 40       	sbci	r21, 0x00	; 0
    6710:	e6 95       	lsr	r30
    6712:	00 1c       	adc	r0, r0
    6714:	ca f7       	brpl	.-14     	; 0x6708 <__divsf3_pse+0x2c>
    6716:	2b d0       	rcall	.+86     	; 0x676e <__divsf3_pse+0x92>
    6718:	fe 2f       	mov	r31, r30
    671a:	29 d0       	rcall	.+82     	; 0x676e <__divsf3_pse+0x92>
    671c:	66 0f       	add	r22, r22
    671e:	77 1f       	adc	r23, r23
    6720:	88 1f       	adc	r24, r24
    6722:	bb 1f       	adc	r27, r27
    6724:	26 17       	cp	r18, r22
    6726:	37 07       	cpc	r19, r23
    6728:	48 07       	cpc	r20, r24
    672a:	ab 07       	cpc	r26, r27
    672c:	b0 e8       	ldi	r27, 0x80	; 128
    672e:	09 f0       	breq	.+2      	; 0x6732 <__divsf3_pse+0x56>
    6730:	bb 0b       	sbc	r27, r27
    6732:	80 2d       	mov	r24, r0
    6734:	bf 01       	movw	r22, r30
    6736:	ff 27       	eor	r31, r31
    6738:	93 58       	subi	r25, 0x83	; 131
    673a:	5f 4f       	sbci	r21, 0xFF	; 255
    673c:	3a f0       	brmi	.+14     	; 0x674c <__divsf3_pse+0x70>
    673e:	9e 3f       	cpi	r25, 0xFE	; 254
    6740:	51 05       	cpc	r21, r1
    6742:	78 f0       	brcs	.+30     	; 0x6762 <__divsf3_pse+0x86>
    6744:	0c 94 60 34 	jmp	0x68c0	; 0x68c0 <__fp_inf>
    6748:	0c 94 ab 34 	jmp	0x6956	; 0x6956 <__fp_szero>
    674c:	5f 3f       	cpi	r21, 0xFF	; 255
    674e:	e4 f3       	brlt	.-8      	; 0x6748 <__divsf3_pse+0x6c>
    6750:	98 3e       	cpi	r25, 0xE8	; 232
    6752:	d4 f3       	brlt	.-12     	; 0x6748 <__divsf3_pse+0x6c>
    6754:	86 95       	lsr	r24
    6756:	77 95       	ror	r23
    6758:	67 95       	ror	r22
    675a:	b7 95       	ror	r27
    675c:	f7 95       	ror	r31
    675e:	9f 5f       	subi	r25, 0xFF	; 255
    6760:	c9 f7       	brne	.-14     	; 0x6754 <__divsf3_pse+0x78>
    6762:	88 0f       	add	r24, r24
    6764:	91 1d       	adc	r25, r1
    6766:	96 95       	lsr	r25
    6768:	87 95       	ror	r24
    676a:	97 f9       	bld	r25, 7
    676c:	08 95       	ret
    676e:	e1 e0       	ldi	r30, 0x01	; 1
    6770:	66 0f       	add	r22, r22
    6772:	77 1f       	adc	r23, r23
    6774:	88 1f       	adc	r24, r24
    6776:	bb 1f       	adc	r27, r27
    6778:	62 17       	cp	r22, r18
    677a:	73 07       	cpc	r23, r19
    677c:	84 07       	cpc	r24, r20
    677e:	ba 07       	cpc	r27, r26
    6780:	20 f0       	brcs	.+8      	; 0x678a <__divsf3_pse+0xae>
    6782:	62 1b       	sub	r22, r18
    6784:	73 0b       	sbc	r23, r19
    6786:	84 0b       	sbc	r24, r20
    6788:	ba 0b       	sbc	r27, r26
    678a:	ee 1f       	adc	r30, r30
    678c:	88 f7       	brcc	.-30     	; 0x6770 <__divsf3_pse+0x94>
    678e:	e0 95       	com	r30
    6790:	08 95       	ret

00006792 <__fixsfsi>:
    6792:	0e 94 d0 33 	call	0x67a0	; 0x67a0 <__fixunssfsi>
    6796:	68 94       	set
    6798:	b1 11       	cpse	r27, r1
    679a:	0c 94 ab 34 	jmp	0x6956	; 0x6956 <__fp_szero>
    679e:	08 95       	ret

000067a0 <__fixunssfsi>:
    67a0:	0e 94 90 34 	call	0x6920	; 0x6920 <__fp_splitA>
    67a4:	88 f0       	brcs	.+34     	; 0x67c8 <__fixunssfsi+0x28>
    67a6:	9f 57       	subi	r25, 0x7F	; 127
    67a8:	98 f0       	brcs	.+38     	; 0x67d0 <__fixunssfsi+0x30>
    67aa:	b9 2f       	mov	r27, r25
    67ac:	99 27       	eor	r25, r25
    67ae:	b7 51       	subi	r27, 0x17	; 23
    67b0:	b0 f0       	brcs	.+44     	; 0x67de <__fixunssfsi+0x3e>
    67b2:	e1 f0       	breq	.+56     	; 0x67ec <__fixunssfsi+0x4c>
    67b4:	66 0f       	add	r22, r22
    67b6:	77 1f       	adc	r23, r23
    67b8:	88 1f       	adc	r24, r24
    67ba:	99 1f       	adc	r25, r25
    67bc:	1a f0       	brmi	.+6      	; 0x67c4 <__fixunssfsi+0x24>
    67be:	ba 95       	dec	r27
    67c0:	c9 f7       	brne	.-14     	; 0x67b4 <__fixunssfsi+0x14>
    67c2:	14 c0       	rjmp	.+40     	; 0x67ec <__fixunssfsi+0x4c>
    67c4:	b1 30       	cpi	r27, 0x01	; 1
    67c6:	91 f0       	breq	.+36     	; 0x67ec <__fixunssfsi+0x4c>
    67c8:	0e 94 aa 34 	call	0x6954	; 0x6954 <__fp_zero>
    67cc:	b1 e0       	ldi	r27, 0x01	; 1
    67ce:	08 95       	ret
    67d0:	0c 94 aa 34 	jmp	0x6954	; 0x6954 <__fp_zero>
    67d4:	67 2f       	mov	r22, r23
    67d6:	78 2f       	mov	r23, r24
    67d8:	88 27       	eor	r24, r24
    67da:	b8 5f       	subi	r27, 0xF8	; 248
    67dc:	39 f0       	breq	.+14     	; 0x67ec <__fixunssfsi+0x4c>
    67de:	b9 3f       	cpi	r27, 0xF9	; 249
    67e0:	cc f3       	brlt	.-14     	; 0x67d4 <__fixunssfsi+0x34>
    67e2:	86 95       	lsr	r24
    67e4:	77 95       	ror	r23
    67e6:	67 95       	ror	r22
    67e8:	b3 95       	inc	r27
    67ea:	d9 f7       	brne	.-10     	; 0x67e2 <__fixunssfsi+0x42>
    67ec:	3e f4       	brtc	.+14     	; 0x67fc <__fixunssfsi+0x5c>
    67ee:	90 95       	com	r25
    67f0:	80 95       	com	r24
    67f2:	70 95       	com	r23
    67f4:	61 95       	neg	r22
    67f6:	7f 4f       	sbci	r23, 0xFF	; 255
    67f8:	8f 4f       	sbci	r24, 0xFF	; 255
    67fa:	9f 4f       	sbci	r25, 0xFF	; 255
    67fc:	08 95       	ret

000067fe <__floatunsisf>:
    67fe:	e8 94       	clt
    6800:	09 c0       	rjmp	.+18     	; 0x6814 <__floatsisf+0x12>

00006802 <__floatsisf>:
    6802:	97 fb       	bst	r25, 7
    6804:	3e f4       	brtc	.+14     	; 0x6814 <__floatsisf+0x12>
    6806:	90 95       	com	r25
    6808:	80 95       	com	r24
    680a:	70 95       	com	r23
    680c:	61 95       	neg	r22
    680e:	7f 4f       	sbci	r23, 0xFF	; 255
    6810:	8f 4f       	sbci	r24, 0xFF	; 255
    6812:	9f 4f       	sbci	r25, 0xFF	; 255
    6814:	99 23       	and	r25, r25
    6816:	a9 f0       	breq	.+42     	; 0x6842 <__floatsisf+0x40>
    6818:	f9 2f       	mov	r31, r25
    681a:	96 e9       	ldi	r25, 0x96	; 150
    681c:	bb 27       	eor	r27, r27
    681e:	93 95       	inc	r25
    6820:	f6 95       	lsr	r31
    6822:	87 95       	ror	r24
    6824:	77 95       	ror	r23
    6826:	67 95       	ror	r22
    6828:	b7 95       	ror	r27
    682a:	f1 11       	cpse	r31, r1
    682c:	f8 cf       	rjmp	.-16     	; 0x681e <__floatsisf+0x1c>
    682e:	fa f4       	brpl	.+62     	; 0x686e <__floatsisf+0x6c>
    6830:	bb 0f       	add	r27, r27
    6832:	11 f4       	brne	.+4      	; 0x6838 <__floatsisf+0x36>
    6834:	60 ff       	sbrs	r22, 0
    6836:	1b c0       	rjmp	.+54     	; 0x686e <__floatsisf+0x6c>
    6838:	6f 5f       	subi	r22, 0xFF	; 255
    683a:	7f 4f       	sbci	r23, 0xFF	; 255
    683c:	8f 4f       	sbci	r24, 0xFF	; 255
    683e:	9f 4f       	sbci	r25, 0xFF	; 255
    6840:	16 c0       	rjmp	.+44     	; 0x686e <__floatsisf+0x6c>
    6842:	88 23       	and	r24, r24
    6844:	11 f0       	breq	.+4      	; 0x684a <__floatsisf+0x48>
    6846:	96 e9       	ldi	r25, 0x96	; 150
    6848:	11 c0       	rjmp	.+34     	; 0x686c <__floatsisf+0x6a>
    684a:	77 23       	and	r23, r23
    684c:	21 f0       	breq	.+8      	; 0x6856 <__floatsisf+0x54>
    684e:	9e e8       	ldi	r25, 0x8E	; 142
    6850:	87 2f       	mov	r24, r23
    6852:	76 2f       	mov	r23, r22
    6854:	05 c0       	rjmp	.+10     	; 0x6860 <__floatsisf+0x5e>
    6856:	66 23       	and	r22, r22
    6858:	71 f0       	breq	.+28     	; 0x6876 <__floatsisf+0x74>
    685a:	96 e8       	ldi	r25, 0x86	; 134
    685c:	86 2f       	mov	r24, r22
    685e:	70 e0       	ldi	r23, 0x00	; 0
    6860:	60 e0       	ldi	r22, 0x00	; 0
    6862:	2a f0       	brmi	.+10     	; 0x686e <__floatsisf+0x6c>
    6864:	9a 95       	dec	r25
    6866:	66 0f       	add	r22, r22
    6868:	77 1f       	adc	r23, r23
    686a:	88 1f       	adc	r24, r24
    686c:	da f7       	brpl	.-10     	; 0x6864 <__floatsisf+0x62>
    686e:	88 0f       	add	r24, r24
    6870:	96 95       	lsr	r25
    6872:	87 95       	ror	r24
    6874:	97 f9       	bld	r25, 7
    6876:	08 95       	ret

00006878 <__fp_cmp>:
    6878:	99 0f       	add	r25, r25
    687a:	00 08       	sbc	r0, r0
    687c:	55 0f       	add	r21, r21
    687e:	aa 0b       	sbc	r26, r26
    6880:	e0 e8       	ldi	r30, 0x80	; 128
    6882:	fe ef       	ldi	r31, 0xFE	; 254
    6884:	16 16       	cp	r1, r22
    6886:	17 06       	cpc	r1, r23
    6888:	e8 07       	cpc	r30, r24
    688a:	f9 07       	cpc	r31, r25
    688c:	c0 f0       	brcs	.+48     	; 0x68be <__fp_cmp+0x46>
    688e:	12 16       	cp	r1, r18
    6890:	13 06       	cpc	r1, r19
    6892:	e4 07       	cpc	r30, r20
    6894:	f5 07       	cpc	r31, r21
    6896:	98 f0       	brcs	.+38     	; 0x68be <__fp_cmp+0x46>
    6898:	62 1b       	sub	r22, r18
    689a:	73 0b       	sbc	r23, r19
    689c:	84 0b       	sbc	r24, r20
    689e:	95 0b       	sbc	r25, r21
    68a0:	39 f4       	brne	.+14     	; 0x68b0 <__fp_cmp+0x38>
    68a2:	0a 26       	eor	r0, r26
    68a4:	61 f0       	breq	.+24     	; 0x68be <__fp_cmp+0x46>
    68a6:	23 2b       	or	r18, r19
    68a8:	24 2b       	or	r18, r20
    68aa:	25 2b       	or	r18, r21
    68ac:	21 f4       	brne	.+8      	; 0x68b6 <__fp_cmp+0x3e>
    68ae:	08 95       	ret
    68b0:	0a 26       	eor	r0, r26
    68b2:	09 f4       	brne	.+2      	; 0x68b6 <__fp_cmp+0x3e>
    68b4:	a1 40       	sbci	r26, 0x01	; 1
    68b6:	a6 95       	lsr	r26
    68b8:	8f ef       	ldi	r24, 0xFF	; 255
    68ba:	81 1d       	adc	r24, r1
    68bc:	81 1d       	adc	r24, r1
    68be:	08 95       	ret

000068c0 <__fp_inf>:
    68c0:	97 f9       	bld	r25, 7
    68c2:	9f 67       	ori	r25, 0x7F	; 127
    68c4:	80 e8       	ldi	r24, 0x80	; 128
    68c6:	70 e0       	ldi	r23, 0x00	; 0
    68c8:	60 e0       	ldi	r22, 0x00	; 0
    68ca:	08 95       	ret

000068cc <__fp_nan>:
    68cc:	9f ef       	ldi	r25, 0xFF	; 255
    68ce:	80 ec       	ldi	r24, 0xC0	; 192
    68d0:	08 95       	ret

000068d2 <__fp_pscA>:
    68d2:	00 24       	eor	r0, r0
    68d4:	0a 94       	dec	r0
    68d6:	16 16       	cp	r1, r22
    68d8:	17 06       	cpc	r1, r23
    68da:	18 06       	cpc	r1, r24
    68dc:	09 06       	cpc	r0, r25
    68de:	08 95       	ret

000068e0 <__fp_pscB>:
    68e0:	00 24       	eor	r0, r0
    68e2:	0a 94       	dec	r0
    68e4:	12 16       	cp	r1, r18
    68e6:	13 06       	cpc	r1, r19
    68e8:	14 06       	cpc	r1, r20
    68ea:	05 06       	cpc	r0, r21
    68ec:	08 95       	ret

000068ee <__fp_round>:
    68ee:	09 2e       	mov	r0, r25
    68f0:	03 94       	inc	r0
    68f2:	00 0c       	add	r0, r0
    68f4:	11 f4       	brne	.+4      	; 0x68fa <__fp_round+0xc>
    68f6:	88 23       	and	r24, r24
    68f8:	52 f0       	brmi	.+20     	; 0x690e <__fp_round+0x20>
    68fa:	bb 0f       	add	r27, r27
    68fc:	40 f4       	brcc	.+16     	; 0x690e <__fp_round+0x20>
    68fe:	bf 2b       	or	r27, r31
    6900:	11 f4       	brne	.+4      	; 0x6906 <__fp_round+0x18>
    6902:	60 ff       	sbrs	r22, 0
    6904:	04 c0       	rjmp	.+8      	; 0x690e <__fp_round+0x20>
    6906:	6f 5f       	subi	r22, 0xFF	; 255
    6908:	7f 4f       	sbci	r23, 0xFF	; 255
    690a:	8f 4f       	sbci	r24, 0xFF	; 255
    690c:	9f 4f       	sbci	r25, 0xFF	; 255
    690e:	08 95       	ret

00006910 <__fp_split3>:
    6910:	57 fd       	sbrc	r21, 7
    6912:	90 58       	subi	r25, 0x80	; 128
    6914:	44 0f       	add	r20, r20
    6916:	55 1f       	adc	r21, r21
    6918:	59 f0       	breq	.+22     	; 0x6930 <__fp_splitA+0x10>
    691a:	5f 3f       	cpi	r21, 0xFF	; 255
    691c:	71 f0       	breq	.+28     	; 0x693a <__fp_splitA+0x1a>
    691e:	47 95       	ror	r20

00006920 <__fp_splitA>:
    6920:	88 0f       	add	r24, r24
    6922:	97 fb       	bst	r25, 7
    6924:	99 1f       	adc	r25, r25
    6926:	61 f0       	breq	.+24     	; 0x6940 <__fp_splitA+0x20>
    6928:	9f 3f       	cpi	r25, 0xFF	; 255
    692a:	79 f0       	breq	.+30     	; 0x694a <__fp_splitA+0x2a>
    692c:	87 95       	ror	r24
    692e:	08 95       	ret
    6930:	12 16       	cp	r1, r18
    6932:	13 06       	cpc	r1, r19
    6934:	14 06       	cpc	r1, r20
    6936:	55 1f       	adc	r21, r21
    6938:	f2 cf       	rjmp	.-28     	; 0x691e <__fp_split3+0xe>
    693a:	46 95       	lsr	r20
    693c:	f1 df       	rcall	.-30     	; 0x6920 <__fp_splitA>
    693e:	08 c0       	rjmp	.+16     	; 0x6950 <__fp_splitA+0x30>
    6940:	16 16       	cp	r1, r22
    6942:	17 06       	cpc	r1, r23
    6944:	18 06       	cpc	r1, r24
    6946:	99 1f       	adc	r25, r25
    6948:	f1 cf       	rjmp	.-30     	; 0x692c <__fp_splitA+0xc>
    694a:	86 95       	lsr	r24
    694c:	71 05       	cpc	r23, r1
    694e:	61 05       	cpc	r22, r1
    6950:	08 94       	sec
    6952:	08 95       	ret

00006954 <__fp_zero>:
    6954:	e8 94       	clt

00006956 <__fp_szero>:
    6956:	bb 27       	eor	r27, r27
    6958:	66 27       	eor	r22, r22
    695a:	77 27       	eor	r23, r23
    695c:	cb 01       	movw	r24, r22
    695e:	97 f9       	bld	r25, 7
    6960:	08 95       	ret

00006962 <__gesf2>:
    6962:	0e 94 3c 34 	call	0x6878	; 0x6878 <__fp_cmp>
    6966:	08 f4       	brcc	.+2      	; 0x696a <__gesf2+0x8>
    6968:	8f ef       	ldi	r24, 0xFF	; 255
    696a:	08 95       	ret

0000696c <__mulsf3>:
    696c:	0e 94 c9 34 	call	0x6992	; 0x6992 <__mulsf3x>
    6970:	0c 94 77 34 	jmp	0x68ee	; 0x68ee <__fp_round>
    6974:	0e 94 69 34 	call	0x68d2	; 0x68d2 <__fp_pscA>
    6978:	38 f0       	brcs	.+14     	; 0x6988 <__mulsf3+0x1c>
    697a:	0e 94 70 34 	call	0x68e0	; 0x68e0 <__fp_pscB>
    697e:	20 f0       	brcs	.+8      	; 0x6988 <__mulsf3+0x1c>
    6980:	95 23       	and	r25, r21
    6982:	11 f0       	breq	.+4      	; 0x6988 <__mulsf3+0x1c>
    6984:	0c 94 60 34 	jmp	0x68c0	; 0x68c0 <__fp_inf>
    6988:	0c 94 66 34 	jmp	0x68cc	; 0x68cc <__fp_nan>
    698c:	11 24       	eor	r1, r1
    698e:	0c 94 ab 34 	jmp	0x6956	; 0x6956 <__fp_szero>

00006992 <__mulsf3x>:
    6992:	0e 94 88 34 	call	0x6910	; 0x6910 <__fp_split3>
    6996:	70 f3       	brcs	.-36     	; 0x6974 <__mulsf3+0x8>

00006998 <__mulsf3_pse>:
    6998:	95 9f       	mul	r25, r21
    699a:	c1 f3       	breq	.-16     	; 0x698c <__mulsf3+0x20>
    699c:	95 0f       	add	r25, r21
    699e:	50 e0       	ldi	r21, 0x00	; 0
    69a0:	55 1f       	adc	r21, r21
    69a2:	62 9f       	mul	r22, r18
    69a4:	f0 01       	movw	r30, r0
    69a6:	72 9f       	mul	r23, r18
    69a8:	bb 27       	eor	r27, r27
    69aa:	f0 0d       	add	r31, r0
    69ac:	b1 1d       	adc	r27, r1
    69ae:	63 9f       	mul	r22, r19
    69b0:	aa 27       	eor	r26, r26
    69b2:	f0 0d       	add	r31, r0
    69b4:	b1 1d       	adc	r27, r1
    69b6:	aa 1f       	adc	r26, r26
    69b8:	64 9f       	mul	r22, r20
    69ba:	66 27       	eor	r22, r22
    69bc:	b0 0d       	add	r27, r0
    69be:	a1 1d       	adc	r26, r1
    69c0:	66 1f       	adc	r22, r22
    69c2:	82 9f       	mul	r24, r18
    69c4:	22 27       	eor	r18, r18
    69c6:	b0 0d       	add	r27, r0
    69c8:	a1 1d       	adc	r26, r1
    69ca:	62 1f       	adc	r22, r18
    69cc:	73 9f       	mul	r23, r19
    69ce:	b0 0d       	add	r27, r0
    69d0:	a1 1d       	adc	r26, r1
    69d2:	62 1f       	adc	r22, r18
    69d4:	83 9f       	mul	r24, r19
    69d6:	a0 0d       	add	r26, r0
    69d8:	61 1d       	adc	r22, r1
    69da:	22 1f       	adc	r18, r18
    69dc:	74 9f       	mul	r23, r20
    69de:	33 27       	eor	r19, r19
    69e0:	a0 0d       	add	r26, r0
    69e2:	61 1d       	adc	r22, r1
    69e4:	23 1f       	adc	r18, r19
    69e6:	84 9f       	mul	r24, r20
    69e8:	60 0d       	add	r22, r0
    69ea:	21 1d       	adc	r18, r1
    69ec:	82 2f       	mov	r24, r18
    69ee:	76 2f       	mov	r23, r22
    69f0:	6a 2f       	mov	r22, r26
    69f2:	11 24       	eor	r1, r1
    69f4:	9f 57       	subi	r25, 0x7F	; 127
    69f6:	50 40       	sbci	r21, 0x00	; 0
    69f8:	9a f0       	brmi	.+38     	; 0x6a20 <__mulsf3_pse+0x88>
    69fa:	f1 f0       	breq	.+60     	; 0x6a38 <__mulsf3_pse+0xa0>
    69fc:	88 23       	and	r24, r24
    69fe:	4a f0       	brmi	.+18     	; 0x6a12 <__mulsf3_pse+0x7a>
    6a00:	ee 0f       	add	r30, r30
    6a02:	ff 1f       	adc	r31, r31
    6a04:	bb 1f       	adc	r27, r27
    6a06:	66 1f       	adc	r22, r22
    6a08:	77 1f       	adc	r23, r23
    6a0a:	88 1f       	adc	r24, r24
    6a0c:	91 50       	subi	r25, 0x01	; 1
    6a0e:	50 40       	sbci	r21, 0x00	; 0
    6a10:	a9 f7       	brne	.-22     	; 0x69fc <__mulsf3_pse+0x64>
    6a12:	9e 3f       	cpi	r25, 0xFE	; 254
    6a14:	51 05       	cpc	r21, r1
    6a16:	80 f0       	brcs	.+32     	; 0x6a38 <__mulsf3_pse+0xa0>
    6a18:	0c 94 60 34 	jmp	0x68c0	; 0x68c0 <__fp_inf>
    6a1c:	0c 94 ab 34 	jmp	0x6956	; 0x6956 <__fp_szero>
    6a20:	5f 3f       	cpi	r21, 0xFF	; 255
    6a22:	e4 f3       	brlt	.-8      	; 0x6a1c <__mulsf3_pse+0x84>
    6a24:	98 3e       	cpi	r25, 0xE8	; 232
    6a26:	d4 f3       	brlt	.-12     	; 0x6a1c <__mulsf3_pse+0x84>
    6a28:	86 95       	lsr	r24
    6a2a:	77 95       	ror	r23
    6a2c:	67 95       	ror	r22
    6a2e:	b7 95       	ror	r27
    6a30:	f7 95       	ror	r31
    6a32:	e7 95       	ror	r30
    6a34:	9f 5f       	subi	r25, 0xFF	; 255
    6a36:	c1 f7       	brne	.-16     	; 0x6a28 <__mulsf3_pse+0x90>
    6a38:	fe 2b       	or	r31, r30
    6a3a:	88 0f       	add	r24, r24
    6a3c:	91 1d       	adc	r25, r1
    6a3e:	96 95       	lsr	r25
    6a40:	87 95       	ror	r24
    6a42:	97 f9       	bld	r25, 7
    6a44:	08 95       	ret

00006a46 <pow>:
    6a46:	fa 01       	movw	r30, r20
    6a48:	ee 0f       	add	r30, r30
    6a4a:	ff 1f       	adc	r31, r31
    6a4c:	30 96       	adiw	r30, 0x00	; 0
    6a4e:	21 05       	cpc	r18, r1
    6a50:	31 05       	cpc	r19, r1
    6a52:	a1 f1       	breq	.+104    	; 0x6abc <pow+0x76>
    6a54:	61 15       	cp	r22, r1
    6a56:	71 05       	cpc	r23, r1
    6a58:	61 f4       	brne	.+24     	; 0x6a72 <pow+0x2c>
    6a5a:	80 38       	cpi	r24, 0x80	; 128
    6a5c:	bf e3       	ldi	r27, 0x3F	; 63
    6a5e:	9b 07       	cpc	r25, r27
    6a60:	49 f1       	breq	.+82     	; 0x6ab4 <pow+0x6e>
    6a62:	68 94       	set
    6a64:	90 38       	cpi	r25, 0x80	; 128
    6a66:	81 05       	cpc	r24, r1
    6a68:	61 f0       	breq	.+24     	; 0x6a82 <pow+0x3c>
    6a6a:	80 38       	cpi	r24, 0x80	; 128
    6a6c:	bf ef       	ldi	r27, 0xFF	; 255
    6a6e:	9b 07       	cpc	r25, r27
    6a70:	41 f0       	breq	.+16     	; 0x6a82 <pow+0x3c>
    6a72:	99 23       	and	r25, r25
    6a74:	4a f5       	brpl	.+82     	; 0x6ac8 <pow+0x82>
    6a76:	ff 3f       	cpi	r31, 0xFF	; 255
    6a78:	e1 05       	cpc	r30, r1
    6a7a:	31 05       	cpc	r19, r1
    6a7c:	21 05       	cpc	r18, r1
    6a7e:	19 f1       	breq	.+70     	; 0x6ac6 <pow+0x80>
    6a80:	e8 94       	clt
    6a82:	08 94       	sec
    6a84:	e7 95       	ror	r30
    6a86:	d9 01       	movw	r26, r18
    6a88:	aa 23       	and	r26, r26
    6a8a:	29 f4       	brne	.+10     	; 0x6a96 <pow+0x50>
    6a8c:	ab 2f       	mov	r26, r27
    6a8e:	be 2f       	mov	r27, r30
    6a90:	f8 5f       	subi	r31, 0xF8	; 248
    6a92:	d0 f3       	brcs	.-12     	; 0x6a88 <pow+0x42>
    6a94:	10 c0       	rjmp	.+32     	; 0x6ab6 <pow+0x70>
    6a96:	ff 5f       	subi	r31, 0xFF	; 255
    6a98:	70 f4       	brcc	.+28     	; 0x6ab6 <pow+0x70>
    6a9a:	a6 95       	lsr	r26
    6a9c:	e0 f7       	brcc	.-8      	; 0x6a96 <pow+0x50>
    6a9e:	f7 39       	cpi	r31, 0x97	; 151
    6aa0:	50 f0       	brcs	.+20     	; 0x6ab6 <pow+0x70>
    6aa2:	19 f0       	breq	.+6      	; 0x6aaa <pow+0x64>
    6aa4:	ff 3a       	cpi	r31, 0xAF	; 175
    6aa6:	38 f4       	brcc	.+14     	; 0x6ab6 <pow+0x70>
    6aa8:	9f 77       	andi	r25, 0x7F	; 127
    6aaa:	9f 93       	push	r25
    6aac:	0d d0       	rcall	.+26     	; 0x6ac8 <pow+0x82>
    6aae:	0f 90       	pop	r0
    6ab0:	07 fc       	sbrc	r0, 7
    6ab2:	90 58       	subi	r25, 0x80	; 128
    6ab4:	08 95       	ret
    6ab6:	46 f0       	brts	.+16     	; 0x6ac8 <pow+0x82>
    6ab8:	0c 94 66 34 	jmp	0x68cc	; 0x68cc <__fp_nan>
    6abc:	60 e0       	ldi	r22, 0x00	; 0
    6abe:	70 e0       	ldi	r23, 0x00	; 0
    6ac0:	80 e8       	ldi	r24, 0x80	; 128
    6ac2:	9f e3       	ldi	r25, 0x3F	; 63
    6ac4:	08 95       	ret
    6ac6:	4f e7       	ldi	r20, 0x7F	; 127
    6ac8:	9f 77       	andi	r25, 0x7F	; 127
    6aca:	5f 93       	push	r21
    6acc:	4f 93       	push	r20
    6ace:	3f 93       	push	r19
    6ad0:	2f 93       	push	r18
    6ad2:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <log>
    6ad6:	2f 91       	pop	r18
    6ad8:	3f 91       	pop	r19
    6ada:	4f 91       	pop	r20
    6adc:	5f 91       	pop	r21
    6ade:	0e 94 b6 34 	call	0x696c	; 0x696c <__mulsf3>
    6ae2:	0c 94 7b 35 	jmp	0x6af6	; 0x6af6 <exp>
    6ae6:	29 f4       	brne	.+10     	; 0x6af2 <pow+0xac>
    6ae8:	16 f0       	brts	.+4      	; 0x6aee <pow+0xa8>
    6aea:	0c 94 60 34 	jmp	0x68c0	; 0x68c0 <__fp_inf>
    6aee:	0c 94 aa 34 	jmp	0x6954	; 0x6954 <__fp_zero>
    6af2:	0c 94 66 34 	jmp	0x68cc	; 0x68cc <__fp_nan>

00006af6 <exp>:
    6af6:	0e 94 90 34 	call	0x6920	; 0x6920 <__fp_splitA>
    6afa:	a8 f3       	brcs	.-22     	; 0x6ae6 <pow+0xa0>
    6afc:	96 38       	cpi	r25, 0x86	; 134
    6afe:	a0 f7       	brcc	.-24     	; 0x6ae8 <pow+0xa2>
    6b00:	07 f8       	bld	r0, 7
    6b02:	0f 92       	push	r0
    6b04:	e8 94       	clt
    6b06:	2b e3       	ldi	r18, 0x3B	; 59
    6b08:	3a ea       	ldi	r19, 0xAA	; 170
    6b0a:	48 eb       	ldi	r20, 0xB8	; 184
    6b0c:	5f e7       	ldi	r21, 0x7F	; 127
    6b0e:	0e 94 cc 34 	call	0x6998	; 0x6998 <__mulsf3_pse>
    6b12:	0f 92       	push	r0
    6b14:	0f 92       	push	r0
    6b16:	0f 92       	push	r0
    6b18:	4d b7       	in	r20, 0x3d	; 61
    6b1a:	5e b7       	in	r21, 0x3e	; 62
    6b1c:	0f 92       	push	r0
    6b1e:	0e 94 66 36 	call	0x6ccc	; 0x6ccc <modf>
    6b22:	e0 e1       	ldi	r30, 0x10	; 16
    6b24:	f2 e0       	ldi	r31, 0x02	; 2
    6b26:	0e 94 ad 35 	call	0x6b5a	; 0x6b5a <__fp_powser>
    6b2a:	4f 91       	pop	r20
    6b2c:	5f 91       	pop	r21
    6b2e:	ef 91       	pop	r30
    6b30:	ff 91       	pop	r31
    6b32:	e5 95       	asr	r30
    6b34:	ee 1f       	adc	r30, r30
    6b36:	ff 1f       	adc	r31, r31
    6b38:	49 f0       	breq	.+18     	; 0x6b4c <exp+0x56>
    6b3a:	fe 57       	subi	r31, 0x7E	; 126
    6b3c:	e0 68       	ori	r30, 0x80	; 128
    6b3e:	44 27       	eor	r20, r20
    6b40:	ee 0f       	add	r30, r30
    6b42:	44 1f       	adc	r20, r20
    6b44:	fa 95       	dec	r31
    6b46:	e1 f7       	brne	.-8      	; 0x6b40 <exp+0x4a>
    6b48:	41 95       	neg	r20
    6b4a:	55 0b       	sbc	r21, r21
    6b4c:	0e 94 e0 35 	call	0x6bc0	; 0x6bc0 <ldexp>
    6b50:	0f 90       	pop	r0
    6b52:	07 fe       	sbrs	r0, 7
    6b54:	0c 94 d4 35 	jmp	0x6ba8	; 0x6ba8 <inverse>
    6b58:	08 95       	ret

00006b5a <__fp_powser>:
    6b5a:	df 93       	push	r29
    6b5c:	cf 93       	push	r28
    6b5e:	1f 93       	push	r17
    6b60:	0f 93       	push	r16
    6b62:	ff 92       	push	r15
    6b64:	ef 92       	push	r14
    6b66:	df 92       	push	r13
    6b68:	7b 01       	movw	r14, r22
    6b6a:	8c 01       	movw	r16, r24
    6b6c:	68 94       	set
    6b6e:	06 c0       	rjmp	.+12     	; 0x6b7c <__fp_powser+0x22>
    6b70:	da 2e       	mov	r13, r26
    6b72:	ef 01       	movw	r28, r30
    6b74:	0e 94 c9 34 	call	0x6992	; 0x6992 <__mulsf3x>
    6b78:	fe 01       	movw	r30, r28
    6b7a:	e8 94       	clt
    6b7c:	a5 91       	lpm	r26, Z+
    6b7e:	25 91       	lpm	r18, Z+
    6b80:	35 91       	lpm	r19, Z+
    6b82:	45 91       	lpm	r20, Z+
    6b84:	55 91       	lpm	r21, Z+
    6b86:	a6 f3       	brts	.-24     	; 0x6b70 <__fp_powser+0x16>
    6b88:	ef 01       	movw	r28, r30
    6b8a:	0e 94 fd 32 	call	0x65fa	; 0x65fa <__addsf3x>
    6b8e:	fe 01       	movw	r30, r28
    6b90:	97 01       	movw	r18, r14
    6b92:	a8 01       	movw	r20, r16
    6b94:	da 94       	dec	r13
    6b96:	69 f7       	brne	.-38     	; 0x6b72 <__fp_powser+0x18>
    6b98:	df 90       	pop	r13
    6b9a:	ef 90       	pop	r14
    6b9c:	ff 90       	pop	r15
    6b9e:	0f 91       	pop	r16
    6ba0:	1f 91       	pop	r17
    6ba2:	cf 91       	pop	r28
    6ba4:	df 91       	pop	r29
    6ba6:	08 95       	ret

00006ba8 <inverse>:
    6ba8:	9b 01       	movw	r18, r22
    6baa:	ac 01       	movw	r20, r24
    6bac:	60 e0       	ldi	r22, 0x00	; 0
    6bae:	70 e0       	ldi	r23, 0x00	; 0
    6bb0:	80 e8       	ldi	r24, 0x80	; 128
    6bb2:	9f e3       	ldi	r25, 0x3F	; 63
    6bb4:	0c 94 57 33 	jmp	0x66ae	; 0x66ae <__divsf3>
    6bb8:	0c 94 60 34 	jmp	0x68c0	; 0x68c0 <__fp_inf>
    6bbc:	0c 94 9a 36 	jmp	0x6d34	; 0x6d34 <__fp_mpack>

00006bc0 <ldexp>:
    6bc0:	0e 94 90 34 	call	0x6920	; 0x6920 <__fp_splitA>
    6bc4:	d8 f3       	brcs	.-10     	; 0x6bbc <inverse+0x14>
    6bc6:	99 23       	and	r25, r25
    6bc8:	c9 f3       	breq	.-14     	; 0x6bbc <inverse+0x14>
    6bca:	94 0f       	add	r25, r20
    6bcc:	51 1d       	adc	r21, r1
    6bce:	a3 f3       	brvs	.-24     	; 0x6bb8 <inverse+0x10>
    6bd0:	91 50       	subi	r25, 0x01	; 1
    6bd2:	50 40       	sbci	r21, 0x00	; 0
    6bd4:	94 f0       	brlt	.+36     	; 0x6bfa <ldexp+0x3a>
    6bd6:	59 f0       	breq	.+22     	; 0x6bee <ldexp+0x2e>
    6bd8:	88 23       	and	r24, r24
    6bda:	32 f0       	brmi	.+12     	; 0x6be8 <ldexp+0x28>
    6bdc:	66 0f       	add	r22, r22
    6bde:	77 1f       	adc	r23, r23
    6be0:	88 1f       	adc	r24, r24
    6be2:	91 50       	subi	r25, 0x01	; 1
    6be4:	50 40       	sbci	r21, 0x00	; 0
    6be6:	c1 f7       	brne	.-16     	; 0x6bd8 <ldexp+0x18>
    6be8:	9e 3f       	cpi	r25, 0xFE	; 254
    6bea:	51 05       	cpc	r21, r1
    6bec:	2c f7       	brge	.-54     	; 0x6bb8 <inverse+0x10>
    6bee:	88 0f       	add	r24, r24
    6bf0:	91 1d       	adc	r25, r1
    6bf2:	96 95       	lsr	r25
    6bf4:	87 95       	ror	r24
    6bf6:	97 f9       	bld	r25, 7
    6bf8:	08 95       	ret
    6bfa:	5f 3f       	cpi	r21, 0xFF	; 255
    6bfc:	ac f0       	brlt	.+42     	; 0x6c28 <ldexp+0x68>
    6bfe:	98 3e       	cpi	r25, 0xE8	; 232
    6c00:	9c f0       	brlt	.+38     	; 0x6c28 <ldexp+0x68>
    6c02:	bb 27       	eor	r27, r27
    6c04:	86 95       	lsr	r24
    6c06:	77 95       	ror	r23
    6c08:	67 95       	ror	r22
    6c0a:	b7 95       	ror	r27
    6c0c:	08 f4       	brcc	.+2      	; 0x6c10 <ldexp+0x50>
    6c0e:	b1 60       	ori	r27, 0x01	; 1
    6c10:	93 95       	inc	r25
    6c12:	c1 f7       	brne	.-16     	; 0x6c04 <ldexp+0x44>
    6c14:	bb 0f       	add	r27, r27
    6c16:	58 f7       	brcc	.-42     	; 0x6bee <ldexp+0x2e>
    6c18:	11 f4       	brne	.+4      	; 0x6c1e <ldexp+0x5e>
    6c1a:	60 ff       	sbrs	r22, 0
    6c1c:	e8 cf       	rjmp	.-48     	; 0x6bee <ldexp+0x2e>
    6c1e:	6f 5f       	subi	r22, 0xFF	; 255
    6c20:	7f 4f       	sbci	r23, 0xFF	; 255
    6c22:	8f 4f       	sbci	r24, 0xFF	; 255
    6c24:	9f 4f       	sbci	r25, 0xFF	; 255
    6c26:	e3 cf       	rjmp	.-58     	; 0x6bee <ldexp+0x2e>
    6c28:	0c 94 ab 34 	jmp	0x6956	; 0x6956 <__fp_szero>
    6c2c:	16 f0       	brts	.+4      	; 0x6c32 <ldexp+0x72>
    6c2e:	0c 94 9a 36 	jmp	0x6d34	; 0x6d34 <__fp_mpack>
    6c32:	0c 94 66 34 	jmp	0x68cc	; 0x68cc <__fp_nan>
    6c36:	68 94       	set
    6c38:	0c 94 60 34 	jmp	0x68c0	; 0x68c0 <__fp_inf>

00006c3c <log>:
    6c3c:	0e 94 90 34 	call	0x6920	; 0x6920 <__fp_splitA>
    6c40:	a8 f3       	brcs	.-22     	; 0x6c2c <ldexp+0x6c>
    6c42:	99 23       	and	r25, r25
    6c44:	c1 f3       	breq	.-16     	; 0x6c36 <ldexp+0x76>
    6c46:	ae f3       	brts	.-22     	; 0x6c32 <ldexp+0x72>
    6c48:	df 93       	push	r29
    6c4a:	cf 93       	push	r28
    6c4c:	1f 93       	push	r17
    6c4e:	0f 93       	push	r16
    6c50:	ff 92       	push	r15
    6c52:	c9 2f       	mov	r28, r25
    6c54:	dd 27       	eor	r29, r29
    6c56:	88 23       	and	r24, r24
    6c58:	2a f0       	brmi	.+10     	; 0x6c64 <log+0x28>
    6c5a:	21 97       	sbiw	r28, 0x01	; 1
    6c5c:	66 0f       	add	r22, r22
    6c5e:	77 1f       	adc	r23, r23
    6c60:	88 1f       	adc	r24, r24
    6c62:	da f7       	brpl	.-10     	; 0x6c5a <log+0x1e>
    6c64:	20 e0       	ldi	r18, 0x00	; 0
    6c66:	30 e0       	ldi	r19, 0x00	; 0
    6c68:	40 e8       	ldi	r20, 0x80	; 128
    6c6a:	5f eb       	ldi	r21, 0xBF	; 191
    6c6c:	9f e3       	ldi	r25, 0x3F	; 63
    6c6e:	88 39       	cpi	r24, 0x98	; 152
    6c70:	20 f0       	brcs	.+8      	; 0x6c7a <log+0x3e>
    6c72:	80 3e       	cpi	r24, 0xE0	; 224
    6c74:	38 f0       	brcs	.+14     	; 0x6c84 <log+0x48>
    6c76:	21 96       	adiw	r28, 0x01	; 1
    6c78:	8f 77       	andi	r24, 0x7F	; 127
    6c7a:	0e 94 e6 32 	call	0x65cc	; 0x65cc <__addsf3>
    6c7e:	e8 e3       	ldi	r30, 0x38	; 56
    6c80:	f2 e0       	ldi	r31, 0x02	; 2
    6c82:	04 c0       	rjmp	.+8      	; 0x6c8c <log+0x50>
    6c84:	0e 94 e6 32 	call	0x65cc	; 0x65cc <__addsf3>
    6c88:	e5 e6       	ldi	r30, 0x65	; 101
    6c8a:	f2 e0       	ldi	r31, 0x02	; 2
    6c8c:	0e 94 ad 35 	call	0x6b5a	; 0x6b5a <__fp_powser>
    6c90:	8b 01       	movw	r16, r22
    6c92:	be 01       	movw	r22, r28
    6c94:	ec 01       	movw	r28, r24
    6c96:	fb 2e       	mov	r15, r27
    6c98:	6f 57       	subi	r22, 0x7F	; 127
    6c9a:	71 09       	sbc	r23, r1
    6c9c:	75 95       	asr	r23
    6c9e:	77 1f       	adc	r23, r23
    6ca0:	88 0b       	sbc	r24, r24
    6ca2:	99 0b       	sbc	r25, r25
    6ca4:	0e 94 01 34 	call	0x6802	; 0x6802 <__floatsisf>
    6ca8:	28 e1       	ldi	r18, 0x18	; 24
    6caa:	32 e7       	ldi	r19, 0x72	; 114
    6cac:	41 e3       	ldi	r20, 0x31	; 49
    6cae:	5f e3       	ldi	r21, 0x3F	; 63
    6cb0:	0e 94 c9 34 	call	0x6992	; 0x6992 <__mulsf3x>
    6cb4:	af 2d       	mov	r26, r15
    6cb6:	98 01       	movw	r18, r16
    6cb8:	ae 01       	movw	r20, r28
    6cba:	ff 90       	pop	r15
    6cbc:	0f 91       	pop	r16
    6cbe:	1f 91       	pop	r17
    6cc0:	cf 91       	pop	r28
    6cc2:	df 91       	pop	r29
    6cc4:	0e 94 fd 32 	call	0x65fa	; 0x65fa <__addsf3x>
    6cc8:	0c 94 77 34 	jmp	0x68ee	; 0x68ee <__fp_round>

00006ccc <modf>:
    6ccc:	fa 01       	movw	r30, r20
    6cce:	dc 01       	movw	r26, r24
    6cd0:	aa 0f       	add	r26, r26
    6cd2:	bb 1f       	adc	r27, r27
    6cd4:	9b 01       	movw	r18, r22
    6cd6:	ac 01       	movw	r20, r24
    6cd8:	bf 57       	subi	r27, 0x7F	; 127
    6cda:	28 f4       	brcc	.+10     	; 0x6ce6 <modf+0x1a>
    6cdc:	22 27       	eor	r18, r18
    6cde:	33 27       	eor	r19, r19
    6ce0:	44 27       	eor	r20, r20
    6ce2:	50 78       	andi	r21, 0x80	; 128
    6ce4:	20 c0       	rjmp	.+64     	; 0x6d26 <modf+0x5a>
    6ce6:	b7 51       	subi	r27, 0x17	; 23
    6ce8:	90 f4       	brcc	.+36     	; 0x6d0e <modf+0x42>
    6cea:	ab 2f       	mov	r26, r27
    6cec:	00 24       	eor	r0, r0
    6cee:	46 95       	lsr	r20
    6cf0:	37 95       	ror	r19
    6cf2:	27 95       	ror	r18
    6cf4:	01 1c       	adc	r0, r1
    6cf6:	a3 95       	inc	r26
    6cf8:	d2 f3       	brmi	.-12     	; 0x6cee <modf+0x22>
    6cfa:	00 20       	and	r0, r0
    6cfc:	71 f0       	breq	.+28     	; 0x6d1a <modf+0x4e>
    6cfe:	22 0f       	add	r18, r18
    6d00:	33 1f       	adc	r19, r19
    6d02:	44 1f       	adc	r20, r20
    6d04:	b3 95       	inc	r27
    6d06:	da f3       	brmi	.-10     	; 0x6cfe <modf+0x32>
    6d08:	0e d0       	rcall	.+28     	; 0x6d26 <modf+0x5a>
    6d0a:	0c 94 e5 32 	jmp	0x65ca	; 0x65ca <__subsf3>
    6d0e:	61 30       	cpi	r22, 0x01	; 1
    6d10:	71 05       	cpc	r23, r1
    6d12:	a0 e8       	ldi	r26, 0x80	; 128
    6d14:	8a 07       	cpc	r24, r26
    6d16:	b9 46       	sbci	r27, 0x69	; 105
    6d18:	30 f4       	brcc	.+12     	; 0x6d26 <modf+0x5a>
    6d1a:	9b 01       	movw	r18, r22
    6d1c:	ac 01       	movw	r20, r24
    6d1e:	66 27       	eor	r22, r22
    6d20:	77 27       	eor	r23, r23
    6d22:	88 27       	eor	r24, r24
    6d24:	90 78       	andi	r25, 0x80	; 128
    6d26:	30 96       	adiw	r30, 0x00	; 0
    6d28:	21 f0       	breq	.+8      	; 0x6d32 <modf+0x66>
    6d2a:	20 83       	st	Z, r18
    6d2c:	31 83       	std	Z+1, r19	; 0x01
    6d2e:	42 83       	std	Z+2, r20	; 0x02
    6d30:	53 83       	std	Z+3, r21	; 0x03
    6d32:	08 95       	ret

00006d34 <__fp_mpack>:
    6d34:	9f 3f       	cpi	r25, 0xFF	; 255
    6d36:	31 f0       	breq	.+12     	; 0x6d44 <__fp_mpack_finite+0xc>

00006d38 <__fp_mpack_finite>:
    6d38:	91 50       	subi	r25, 0x01	; 1
    6d3a:	20 f4       	brcc	.+8      	; 0x6d44 <__fp_mpack_finite+0xc>
    6d3c:	87 95       	ror	r24
    6d3e:	77 95       	ror	r23
    6d40:	67 95       	ror	r22
    6d42:	b7 95       	ror	r27
    6d44:	88 0f       	add	r24, r24
    6d46:	91 1d       	adc	r25, r1
    6d48:	96 95       	lsr	r25
    6d4a:	87 95       	ror	r24
    6d4c:	97 f9       	bld	r25, 7
    6d4e:	08 95       	ret

00006d50 <vfprintf>:
    6d50:	2f 92       	push	r2
    6d52:	3f 92       	push	r3
    6d54:	4f 92       	push	r4
    6d56:	5f 92       	push	r5
    6d58:	6f 92       	push	r6
    6d5a:	7f 92       	push	r7
    6d5c:	8f 92       	push	r8
    6d5e:	9f 92       	push	r9
    6d60:	af 92       	push	r10
    6d62:	bf 92       	push	r11
    6d64:	cf 92       	push	r12
    6d66:	df 92       	push	r13
    6d68:	ef 92       	push	r14
    6d6a:	ff 92       	push	r15
    6d6c:	0f 93       	push	r16
    6d6e:	1f 93       	push	r17
    6d70:	cf 93       	push	r28
    6d72:	df 93       	push	r29
    6d74:	cd b7       	in	r28, 0x3d	; 61
    6d76:	de b7       	in	r29, 0x3e	; 62
    6d78:	60 97       	sbiw	r28, 0x10	; 16
    6d7a:	cd bf       	out	0x3d, r28	; 61
    6d7c:	de bf       	out	0x3e, r29	; 62
    6d7e:	7c 01       	movw	r14, r24
    6d80:	1b 01       	movw	r2, r22
    6d82:	6a 01       	movw	r12, r20
    6d84:	fc 01       	movw	r30, r24
    6d86:	16 82       	std	Z+6, r1	; 0x06
    6d88:	17 82       	std	Z+7, r1	; 0x07
    6d8a:	83 81       	ldd	r24, Z+3	; 0x03
    6d8c:	81 ff       	sbrs	r24, 1
    6d8e:	44 c3       	rjmp	.+1672   	; 0x7418 <vfprintf+0x6c8>
    6d90:	9e 01       	movw	r18, r28
    6d92:	2f 5f       	subi	r18, 0xFF	; 255
    6d94:	3f 4f       	sbci	r19, 0xFF	; 255
    6d96:	39 01       	movw	r6, r18
    6d98:	f7 01       	movw	r30, r14
    6d9a:	93 81       	ldd	r25, Z+3	; 0x03
    6d9c:	f1 01       	movw	r30, r2
    6d9e:	93 fd       	sbrc	r25, 3
    6da0:	85 91       	lpm	r24, Z+
    6da2:	93 ff       	sbrs	r25, 3
    6da4:	81 91       	ld	r24, Z+
    6da6:	1f 01       	movw	r2, r30
    6da8:	88 23       	and	r24, r24
    6daa:	09 f4       	brne	.+2      	; 0x6dae <vfprintf+0x5e>
    6dac:	31 c3       	rjmp	.+1634   	; 0x7410 <vfprintf+0x6c0>
    6dae:	85 32       	cpi	r24, 0x25	; 37
    6db0:	39 f4       	brne	.+14     	; 0x6dc0 <vfprintf+0x70>
    6db2:	93 fd       	sbrc	r25, 3
    6db4:	85 91       	lpm	r24, Z+
    6db6:	93 ff       	sbrs	r25, 3
    6db8:	81 91       	ld	r24, Z+
    6dba:	1f 01       	movw	r2, r30
    6dbc:	85 32       	cpi	r24, 0x25	; 37
    6dbe:	39 f4       	brne	.+14     	; 0x6dce <vfprintf+0x7e>
    6dc0:	b7 01       	movw	r22, r14
    6dc2:	90 e0       	ldi	r25, 0x00	; 0
    6dc4:	0e 94 87 3b 	call	0x770e	; 0x770e <fputc>
    6dc8:	56 01       	movw	r10, r12
    6dca:	65 01       	movw	r12, r10
    6dcc:	e5 cf       	rjmp	.-54     	; 0x6d98 <vfprintf+0x48>
    6dce:	10 e0       	ldi	r17, 0x00	; 0
    6dd0:	51 2c       	mov	r5, r1
    6dd2:	91 2c       	mov	r9, r1
    6dd4:	ff e1       	ldi	r31, 0x1F	; 31
    6dd6:	f9 15       	cp	r31, r9
    6dd8:	d8 f0       	brcs	.+54     	; 0x6e10 <vfprintf+0xc0>
    6dda:	8b 32       	cpi	r24, 0x2B	; 43
    6ddc:	79 f0       	breq	.+30     	; 0x6dfc <vfprintf+0xac>
    6dde:	38 f4       	brcc	.+14     	; 0x6dee <vfprintf+0x9e>
    6de0:	80 32       	cpi	r24, 0x20	; 32
    6de2:	79 f0       	breq	.+30     	; 0x6e02 <vfprintf+0xb2>
    6de4:	83 32       	cpi	r24, 0x23	; 35
    6de6:	a1 f4       	brne	.+40     	; 0x6e10 <vfprintf+0xc0>
    6de8:	f9 2d       	mov	r31, r9
    6dea:	f0 61       	ori	r31, 0x10	; 16
    6dec:	2e c0       	rjmp	.+92     	; 0x6e4a <vfprintf+0xfa>
    6dee:	8d 32       	cpi	r24, 0x2D	; 45
    6df0:	61 f0       	breq	.+24     	; 0x6e0a <vfprintf+0xba>
    6df2:	80 33       	cpi	r24, 0x30	; 48
    6df4:	69 f4       	brne	.+26     	; 0x6e10 <vfprintf+0xc0>
    6df6:	29 2d       	mov	r18, r9
    6df8:	21 60       	ori	r18, 0x01	; 1
    6dfa:	2d c0       	rjmp	.+90     	; 0x6e56 <vfprintf+0x106>
    6dfc:	39 2d       	mov	r19, r9
    6dfe:	32 60       	ori	r19, 0x02	; 2
    6e00:	93 2e       	mov	r9, r19
    6e02:	89 2d       	mov	r24, r9
    6e04:	84 60       	ori	r24, 0x04	; 4
    6e06:	98 2e       	mov	r9, r24
    6e08:	2a c0       	rjmp	.+84     	; 0x6e5e <vfprintf+0x10e>
    6e0a:	e9 2d       	mov	r30, r9
    6e0c:	e8 60       	ori	r30, 0x08	; 8
    6e0e:	15 c0       	rjmp	.+42     	; 0x6e3a <vfprintf+0xea>
    6e10:	97 fc       	sbrc	r9, 7
    6e12:	2d c0       	rjmp	.+90     	; 0x6e6e <vfprintf+0x11e>
    6e14:	20 ed       	ldi	r18, 0xD0	; 208
    6e16:	28 0f       	add	r18, r24
    6e18:	2a 30       	cpi	r18, 0x0A	; 10
    6e1a:	88 f4       	brcc	.+34     	; 0x6e3e <vfprintf+0xee>
    6e1c:	96 fe       	sbrs	r9, 6
    6e1e:	06 c0       	rjmp	.+12     	; 0x6e2c <vfprintf+0xdc>
    6e20:	3a e0       	ldi	r19, 0x0A	; 10
    6e22:	13 9f       	mul	r17, r19
    6e24:	20 0d       	add	r18, r0
    6e26:	11 24       	eor	r1, r1
    6e28:	12 2f       	mov	r17, r18
    6e2a:	19 c0       	rjmp	.+50     	; 0x6e5e <vfprintf+0x10e>
    6e2c:	8a e0       	ldi	r24, 0x0A	; 10
    6e2e:	58 9e       	mul	r5, r24
    6e30:	20 0d       	add	r18, r0
    6e32:	11 24       	eor	r1, r1
    6e34:	52 2e       	mov	r5, r18
    6e36:	e9 2d       	mov	r30, r9
    6e38:	e0 62       	ori	r30, 0x20	; 32
    6e3a:	9e 2e       	mov	r9, r30
    6e3c:	10 c0       	rjmp	.+32     	; 0x6e5e <vfprintf+0x10e>
    6e3e:	8e 32       	cpi	r24, 0x2E	; 46
    6e40:	31 f4       	brne	.+12     	; 0x6e4e <vfprintf+0xfe>
    6e42:	96 fc       	sbrc	r9, 6
    6e44:	e5 c2       	rjmp	.+1482   	; 0x7410 <vfprintf+0x6c0>
    6e46:	f9 2d       	mov	r31, r9
    6e48:	f0 64       	ori	r31, 0x40	; 64
    6e4a:	9f 2e       	mov	r9, r31
    6e4c:	08 c0       	rjmp	.+16     	; 0x6e5e <vfprintf+0x10e>
    6e4e:	8c 36       	cpi	r24, 0x6C	; 108
    6e50:	21 f4       	brne	.+8      	; 0x6e5a <vfprintf+0x10a>
    6e52:	29 2d       	mov	r18, r9
    6e54:	20 68       	ori	r18, 0x80	; 128
    6e56:	92 2e       	mov	r9, r18
    6e58:	02 c0       	rjmp	.+4      	; 0x6e5e <vfprintf+0x10e>
    6e5a:	88 36       	cpi	r24, 0x68	; 104
    6e5c:	41 f4       	brne	.+16     	; 0x6e6e <vfprintf+0x11e>
    6e5e:	f1 01       	movw	r30, r2
    6e60:	93 fd       	sbrc	r25, 3
    6e62:	85 91       	lpm	r24, Z+
    6e64:	93 ff       	sbrs	r25, 3
    6e66:	81 91       	ld	r24, Z+
    6e68:	1f 01       	movw	r2, r30
    6e6a:	81 11       	cpse	r24, r1
    6e6c:	b3 cf       	rjmp	.-154    	; 0x6dd4 <vfprintf+0x84>
    6e6e:	9b eb       	ldi	r25, 0xBB	; 187
    6e70:	98 0f       	add	r25, r24
    6e72:	93 30       	cpi	r25, 0x03	; 3
    6e74:	20 f4       	brcc	.+8      	; 0x6e7e <vfprintf+0x12e>
    6e76:	99 2d       	mov	r25, r9
    6e78:	90 61       	ori	r25, 0x10	; 16
    6e7a:	80 5e       	subi	r24, 0xE0	; 224
    6e7c:	07 c0       	rjmp	.+14     	; 0x6e8c <vfprintf+0x13c>
    6e7e:	9b e9       	ldi	r25, 0x9B	; 155
    6e80:	98 0f       	add	r25, r24
    6e82:	93 30       	cpi	r25, 0x03	; 3
    6e84:	08 f0       	brcs	.+2      	; 0x6e88 <vfprintf+0x138>
    6e86:	66 c1       	rjmp	.+716    	; 0x7154 <vfprintf+0x404>
    6e88:	99 2d       	mov	r25, r9
    6e8a:	9f 7e       	andi	r25, 0xEF	; 239
    6e8c:	96 ff       	sbrs	r25, 6
    6e8e:	16 e0       	ldi	r17, 0x06	; 6
    6e90:	9f 73       	andi	r25, 0x3F	; 63
    6e92:	99 2e       	mov	r9, r25
    6e94:	85 36       	cpi	r24, 0x65	; 101
    6e96:	19 f4       	brne	.+6      	; 0x6e9e <vfprintf+0x14e>
    6e98:	90 64       	ori	r25, 0x40	; 64
    6e9a:	99 2e       	mov	r9, r25
    6e9c:	08 c0       	rjmp	.+16     	; 0x6eae <vfprintf+0x15e>
    6e9e:	86 36       	cpi	r24, 0x66	; 102
    6ea0:	21 f4       	brne	.+8      	; 0x6eaa <vfprintf+0x15a>
    6ea2:	39 2f       	mov	r19, r25
    6ea4:	30 68       	ori	r19, 0x80	; 128
    6ea6:	93 2e       	mov	r9, r19
    6ea8:	02 c0       	rjmp	.+4      	; 0x6eae <vfprintf+0x15e>
    6eaa:	11 11       	cpse	r17, r1
    6eac:	11 50       	subi	r17, 0x01	; 1
    6eae:	97 fe       	sbrs	r9, 7
    6eb0:	07 c0       	rjmp	.+14     	; 0x6ec0 <vfprintf+0x170>
    6eb2:	1c 33       	cpi	r17, 0x3C	; 60
    6eb4:	50 f4       	brcc	.+20     	; 0x6eca <vfprintf+0x17a>
    6eb6:	44 24       	eor	r4, r4
    6eb8:	43 94       	inc	r4
    6eba:	41 0e       	add	r4, r17
    6ebc:	27 e0       	ldi	r18, 0x07	; 7
    6ebe:	0b c0       	rjmp	.+22     	; 0x6ed6 <vfprintf+0x186>
    6ec0:	18 30       	cpi	r17, 0x08	; 8
    6ec2:	38 f0       	brcs	.+14     	; 0x6ed2 <vfprintf+0x182>
    6ec4:	27 e0       	ldi	r18, 0x07	; 7
    6ec6:	17 e0       	ldi	r17, 0x07	; 7
    6ec8:	05 c0       	rjmp	.+10     	; 0x6ed4 <vfprintf+0x184>
    6eca:	27 e0       	ldi	r18, 0x07	; 7
    6ecc:	9c e3       	ldi	r25, 0x3C	; 60
    6ece:	49 2e       	mov	r4, r25
    6ed0:	02 c0       	rjmp	.+4      	; 0x6ed6 <vfprintf+0x186>
    6ed2:	21 2f       	mov	r18, r17
    6ed4:	41 2c       	mov	r4, r1
    6ed6:	56 01       	movw	r10, r12
    6ed8:	84 e0       	ldi	r24, 0x04	; 4
    6eda:	a8 0e       	add	r10, r24
    6edc:	b1 1c       	adc	r11, r1
    6ede:	f6 01       	movw	r30, r12
    6ee0:	60 81       	ld	r22, Z
    6ee2:	71 81       	ldd	r23, Z+1	; 0x01
    6ee4:	82 81       	ldd	r24, Z+2	; 0x02
    6ee6:	93 81       	ldd	r25, Z+3	; 0x03
    6ee8:	04 2d       	mov	r16, r4
    6eea:	a3 01       	movw	r20, r6
    6eec:	0e 94 50 3a 	call	0x74a0	; 0x74a0 <__ftoa_engine>
    6ef0:	6c 01       	movw	r12, r24
    6ef2:	f9 81       	ldd	r31, Y+1	; 0x01
    6ef4:	fc 87       	std	Y+12, r31	; 0x0c
    6ef6:	f0 ff       	sbrs	r31, 0
    6ef8:	02 c0       	rjmp	.+4      	; 0x6efe <vfprintf+0x1ae>
    6efa:	f3 ff       	sbrs	r31, 3
    6efc:	06 c0       	rjmp	.+12     	; 0x6f0a <vfprintf+0x1ba>
    6efe:	91 fc       	sbrc	r9, 1
    6f00:	06 c0       	rjmp	.+12     	; 0x6f0e <vfprintf+0x1be>
    6f02:	92 fe       	sbrs	r9, 2
    6f04:	06 c0       	rjmp	.+12     	; 0x6f12 <vfprintf+0x1c2>
    6f06:	00 e2       	ldi	r16, 0x20	; 32
    6f08:	05 c0       	rjmp	.+10     	; 0x6f14 <vfprintf+0x1c4>
    6f0a:	0d e2       	ldi	r16, 0x2D	; 45
    6f0c:	03 c0       	rjmp	.+6      	; 0x6f14 <vfprintf+0x1c4>
    6f0e:	0b e2       	ldi	r16, 0x2B	; 43
    6f10:	01 c0       	rjmp	.+2      	; 0x6f14 <vfprintf+0x1c4>
    6f12:	00 e0       	ldi	r16, 0x00	; 0
    6f14:	8c 85       	ldd	r24, Y+12	; 0x0c
    6f16:	8c 70       	andi	r24, 0x0C	; 12
    6f18:	19 f0       	breq	.+6      	; 0x6f20 <vfprintf+0x1d0>
    6f1a:	01 11       	cpse	r16, r1
    6f1c:	5a c2       	rjmp	.+1204   	; 0x73d2 <vfprintf+0x682>
    6f1e:	9b c2       	rjmp	.+1334   	; 0x7456 <vfprintf+0x706>
    6f20:	97 fe       	sbrs	r9, 7
    6f22:	10 c0       	rjmp	.+32     	; 0x6f44 <vfprintf+0x1f4>
    6f24:	4c 0c       	add	r4, r12
    6f26:	fc 85       	ldd	r31, Y+12	; 0x0c
    6f28:	f4 ff       	sbrs	r31, 4
    6f2a:	04 c0       	rjmp	.+8      	; 0x6f34 <vfprintf+0x1e4>
    6f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    6f2e:	81 33       	cpi	r24, 0x31	; 49
    6f30:	09 f4       	brne	.+2      	; 0x6f34 <vfprintf+0x1e4>
    6f32:	4a 94       	dec	r4
    6f34:	14 14       	cp	r1, r4
    6f36:	74 f5       	brge	.+92     	; 0x6f94 <vfprintf+0x244>
    6f38:	28 e0       	ldi	r18, 0x08	; 8
    6f3a:	24 15       	cp	r18, r4
    6f3c:	78 f5       	brcc	.+94     	; 0x6f9c <vfprintf+0x24c>
    6f3e:	88 e0       	ldi	r24, 0x08	; 8
    6f40:	48 2e       	mov	r4, r24
    6f42:	2c c0       	rjmp	.+88     	; 0x6f9c <vfprintf+0x24c>
    6f44:	96 fc       	sbrc	r9, 6
    6f46:	2a c0       	rjmp	.+84     	; 0x6f9c <vfprintf+0x24c>
    6f48:	81 2f       	mov	r24, r17
    6f4a:	90 e0       	ldi	r25, 0x00	; 0
    6f4c:	8c 15       	cp	r24, r12
    6f4e:	9d 05       	cpc	r25, r13
    6f50:	9c f0       	brlt	.+38     	; 0x6f78 <vfprintf+0x228>
    6f52:	3c ef       	ldi	r19, 0xFC	; 252
    6f54:	c3 16       	cp	r12, r19
    6f56:	3f ef       	ldi	r19, 0xFF	; 255
    6f58:	d3 06       	cpc	r13, r19
    6f5a:	74 f0       	brlt	.+28     	; 0x6f78 <vfprintf+0x228>
    6f5c:	89 2d       	mov	r24, r9
    6f5e:	80 68       	ori	r24, 0x80	; 128
    6f60:	98 2e       	mov	r9, r24
    6f62:	0a c0       	rjmp	.+20     	; 0x6f78 <vfprintf+0x228>
    6f64:	e2 e0       	ldi	r30, 0x02	; 2
    6f66:	f0 e0       	ldi	r31, 0x00	; 0
    6f68:	ec 0f       	add	r30, r28
    6f6a:	fd 1f       	adc	r31, r29
    6f6c:	e1 0f       	add	r30, r17
    6f6e:	f1 1d       	adc	r31, r1
    6f70:	80 81       	ld	r24, Z
    6f72:	80 33       	cpi	r24, 0x30	; 48
    6f74:	19 f4       	brne	.+6      	; 0x6f7c <vfprintf+0x22c>
    6f76:	11 50       	subi	r17, 0x01	; 1
    6f78:	11 11       	cpse	r17, r1
    6f7a:	f4 cf       	rjmp	.-24     	; 0x6f64 <vfprintf+0x214>
    6f7c:	97 fe       	sbrs	r9, 7
    6f7e:	0e c0       	rjmp	.+28     	; 0x6f9c <vfprintf+0x24c>
    6f80:	44 24       	eor	r4, r4
    6f82:	43 94       	inc	r4
    6f84:	41 0e       	add	r4, r17
    6f86:	81 2f       	mov	r24, r17
    6f88:	90 e0       	ldi	r25, 0x00	; 0
    6f8a:	c8 16       	cp	r12, r24
    6f8c:	d9 06       	cpc	r13, r25
    6f8e:	2c f4       	brge	.+10     	; 0x6f9a <vfprintf+0x24a>
    6f90:	1c 19       	sub	r17, r12
    6f92:	04 c0       	rjmp	.+8      	; 0x6f9c <vfprintf+0x24c>
    6f94:	44 24       	eor	r4, r4
    6f96:	43 94       	inc	r4
    6f98:	01 c0       	rjmp	.+2      	; 0x6f9c <vfprintf+0x24c>
    6f9a:	10 e0       	ldi	r17, 0x00	; 0
    6f9c:	97 fe       	sbrs	r9, 7
    6f9e:	06 c0       	rjmp	.+12     	; 0x6fac <vfprintf+0x25c>
    6fa0:	1c 14       	cp	r1, r12
    6fa2:	1d 04       	cpc	r1, r13
    6fa4:	34 f4       	brge	.+12     	; 0x6fb2 <vfprintf+0x262>
    6fa6:	c6 01       	movw	r24, r12
    6fa8:	01 96       	adiw	r24, 0x01	; 1
    6faa:	05 c0       	rjmp	.+10     	; 0x6fb6 <vfprintf+0x266>
    6fac:	85 e0       	ldi	r24, 0x05	; 5
    6fae:	90 e0       	ldi	r25, 0x00	; 0
    6fb0:	02 c0       	rjmp	.+4      	; 0x6fb6 <vfprintf+0x266>
    6fb2:	81 e0       	ldi	r24, 0x01	; 1
    6fb4:	90 e0       	ldi	r25, 0x00	; 0
    6fb6:	01 11       	cpse	r16, r1
    6fb8:	01 96       	adiw	r24, 0x01	; 1
    6fba:	11 23       	and	r17, r17
    6fbc:	31 f0       	breq	.+12     	; 0x6fca <vfprintf+0x27a>
    6fbe:	21 2f       	mov	r18, r17
    6fc0:	30 e0       	ldi	r19, 0x00	; 0
    6fc2:	2f 5f       	subi	r18, 0xFF	; 255
    6fc4:	3f 4f       	sbci	r19, 0xFF	; 255
    6fc6:	82 0f       	add	r24, r18
    6fc8:	93 1f       	adc	r25, r19
    6fca:	25 2d       	mov	r18, r5
    6fcc:	30 e0       	ldi	r19, 0x00	; 0
    6fce:	82 17       	cp	r24, r18
    6fd0:	93 07       	cpc	r25, r19
    6fd2:	14 f4       	brge	.+4      	; 0x6fd8 <vfprintf+0x288>
    6fd4:	58 1a       	sub	r5, r24
    6fd6:	01 c0       	rjmp	.+2      	; 0x6fda <vfprintf+0x28a>
    6fd8:	51 2c       	mov	r5, r1
    6fda:	89 2d       	mov	r24, r9
    6fdc:	89 70       	andi	r24, 0x09	; 9
    6fde:	49 f4       	brne	.+18     	; 0x6ff2 <vfprintf+0x2a2>
    6fe0:	55 20       	and	r5, r5
    6fe2:	39 f0       	breq	.+14     	; 0x6ff2 <vfprintf+0x2a2>
    6fe4:	b7 01       	movw	r22, r14
    6fe6:	80 e2       	ldi	r24, 0x20	; 32
    6fe8:	90 e0       	ldi	r25, 0x00	; 0
    6fea:	0e 94 87 3b 	call	0x770e	; 0x770e <fputc>
    6fee:	5a 94       	dec	r5
    6ff0:	f7 cf       	rjmp	.-18     	; 0x6fe0 <vfprintf+0x290>
    6ff2:	00 23       	and	r16, r16
    6ff4:	29 f0       	breq	.+10     	; 0x7000 <vfprintf+0x2b0>
    6ff6:	b7 01       	movw	r22, r14
    6ff8:	80 2f       	mov	r24, r16
    6ffa:	90 e0       	ldi	r25, 0x00	; 0
    6ffc:	0e 94 87 3b 	call	0x770e	; 0x770e <fputc>
    7000:	93 fc       	sbrc	r9, 3
    7002:	09 c0       	rjmp	.+18     	; 0x7016 <vfprintf+0x2c6>
    7004:	55 20       	and	r5, r5
    7006:	39 f0       	breq	.+14     	; 0x7016 <vfprintf+0x2c6>
    7008:	b7 01       	movw	r22, r14
    700a:	80 e3       	ldi	r24, 0x30	; 48
    700c:	90 e0       	ldi	r25, 0x00	; 0
    700e:	0e 94 87 3b 	call	0x770e	; 0x770e <fputc>
    7012:	5a 94       	dec	r5
    7014:	f7 cf       	rjmp	.-18     	; 0x7004 <vfprintf+0x2b4>
    7016:	97 fe       	sbrs	r9, 7
    7018:	4c c0       	rjmp	.+152    	; 0x70b2 <vfprintf+0x362>
    701a:	46 01       	movw	r8, r12
    701c:	d7 fe       	sbrs	r13, 7
    701e:	02 c0       	rjmp	.+4      	; 0x7024 <vfprintf+0x2d4>
    7020:	81 2c       	mov	r8, r1
    7022:	91 2c       	mov	r9, r1
    7024:	c6 01       	movw	r24, r12
    7026:	88 19       	sub	r24, r8
    7028:	99 09       	sbc	r25, r9
    702a:	f3 01       	movw	r30, r6
    702c:	e8 0f       	add	r30, r24
    702e:	f9 1f       	adc	r31, r25
    7030:	ed 87       	std	Y+13, r30	; 0x0d
    7032:	fe 87       	std	Y+14, r31	; 0x0e
    7034:	96 01       	movw	r18, r12
    7036:	24 19       	sub	r18, r4
    7038:	31 09       	sbc	r19, r1
    703a:	2f 87       	std	Y+15, r18	; 0x0f
    703c:	38 8b       	std	Y+16, r19	; 0x10
    703e:	01 2f       	mov	r16, r17
    7040:	10 e0       	ldi	r17, 0x00	; 0
    7042:	11 95       	neg	r17
    7044:	01 95       	neg	r16
    7046:	11 09       	sbc	r17, r1
    7048:	3f ef       	ldi	r19, 0xFF	; 255
    704a:	83 16       	cp	r8, r19
    704c:	93 06       	cpc	r9, r19
    704e:	29 f4       	brne	.+10     	; 0x705a <vfprintf+0x30a>
    7050:	b7 01       	movw	r22, r14
    7052:	8e e2       	ldi	r24, 0x2E	; 46
    7054:	90 e0       	ldi	r25, 0x00	; 0
    7056:	0e 94 87 3b 	call	0x770e	; 0x770e <fputc>
    705a:	c8 14       	cp	r12, r8
    705c:	d9 04       	cpc	r13, r9
    705e:	4c f0       	brlt	.+18     	; 0x7072 <vfprintf+0x322>
    7060:	8f 85       	ldd	r24, Y+15	; 0x0f
    7062:	98 89       	ldd	r25, Y+16	; 0x10
    7064:	88 15       	cp	r24, r8
    7066:	99 05       	cpc	r25, r9
    7068:	24 f4       	brge	.+8      	; 0x7072 <vfprintf+0x322>
    706a:	ed 85       	ldd	r30, Y+13	; 0x0d
    706c:	fe 85       	ldd	r31, Y+14	; 0x0e
    706e:	81 81       	ldd	r24, Z+1	; 0x01
    7070:	01 c0       	rjmp	.+2      	; 0x7074 <vfprintf+0x324>
    7072:	80 e3       	ldi	r24, 0x30	; 48
    7074:	f1 e0       	ldi	r31, 0x01	; 1
    7076:	8f 1a       	sub	r8, r31
    7078:	91 08       	sbc	r9, r1
    707a:	2d 85       	ldd	r18, Y+13	; 0x0d
    707c:	3e 85       	ldd	r19, Y+14	; 0x0e
    707e:	2f 5f       	subi	r18, 0xFF	; 255
    7080:	3f 4f       	sbci	r19, 0xFF	; 255
    7082:	2d 87       	std	Y+13, r18	; 0x0d
    7084:	3e 87       	std	Y+14, r19	; 0x0e
    7086:	80 16       	cp	r8, r16
    7088:	91 06       	cpc	r9, r17
    708a:	2c f0       	brlt	.+10     	; 0x7096 <vfprintf+0x346>
    708c:	b7 01       	movw	r22, r14
    708e:	90 e0       	ldi	r25, 0x00	; 0
    7090:	0e 94 87 3b 	call	0x770e	; 0x770e <fputc>
    7094:	d9 cf       	rjmp	.-78     	; 0x7048 <vfprintf+0x2f8>
    7096:	c8 14       	cp	r12, r8
    7098:	d9 04       	cpc	r13, r9
    709a:	41 f4       	brne	.+16     	; 0x70ac <vfprintf+0x35c>
    709c:	9a 81       	ldd	r25, Y+2	; 0x02
    709e:	96 33       	cpi	r25, 0x36	; 54
    70a0:	20 f4       	brcc	.+8      	; 0x70aa <vfprintf+0x35a>
    70a2:	95 33       	cpi	r25, 0x35	; 53
    70a4:	19 f4       	brne	.+6      	; 0x70ac <vfprintf+0x35c>
    70a6:	3c 85       	ldd	r19, Y+12	; 0x0c
    70a8:	34 ff       	sbrs	r19, 4
    70aa:	81 e3       	ldi	r24, 0x31	; 49
    70ac:	b7 01       	movw	r22, r14
    70ae:	90 e0       	ldi	r25, 0x00	; 0
    70b0:	4e c0       	rjmp	.+156    	; 0x714e <vfprintf+0x3fe>
    70b2:	8a 81       	ldd	r24, Y+2	; 0x02
    70b4:	81 33       	cpi	r24, 0x31	; 49
    70b6:	19 f0       	breq	.+6      	; 0x70be <vfprintf+0x36e>
    70b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    70ba:	9f 7e       	andi	r25, 0xEF	; 239
    70bc:	9c 87       	std	Y+12, r25	; 0x0c
    70be:	b7 01       	movw	r22, r14
    70c0:	90 e0       	ldi	r25, 0x00	; 0
    70c2:	0e 94 87 3b 	call	0x770e	; 0x770e <fputc>
    70c6:	11 11       	cpse	r17, r1
    70c8:	05 c0       	rjmp	.+10     	; 0x70d4 <vfprintf+0x384>
    70ca:	94 fc       	sbrc	r9, 4
    70cc:	18 c0       	rjmp	.+48     	; 0x70fe <vfprintf+0x3ae>
    70ce:	85 e6       	ldi	r24, 0x65	; 101
    70d0:	90 e0       	ldi	r25, 0x00	; 0
    70d2:	17 c0       	rjmp	.+46     	; 0x7102 <vfprintf+0x3b2>
    70d4:	b7 01       	movw	r22, r14
    70d6:	8e e2       	ldi	r24, 0x2E	; 46
    70d8:	90 e0       	ldi	r25, 0x00	; 0
    70da:	0e 94 87 3b 	call	0x770e	; 0x770e <fputc>
    70de:	1e 5f       	subi	r17, 0xFE	; 254
    70e0:	82 e0       	ldi	r24, 0x02	; 2
    70e2:	01 e0       	ldi	r16, 0x01	; 1
    70e4:	08 0f       	add	r16, r24
    70e6:	f3 01       	movw	r30, r6
    70e8:	e8 0f       	add	r30, r24
    70ea:	f1 1d       	adc	r31, r1
    70ec:	80 81       	ld	r24, Z
    70ee:	b7 01       	movw	r22, r14
    70f0:	90 e0       	ldi	r25, 0x00	; 0
    70f2:	0e 94 87 3b 	call	0x770e	; 0x770e <fputc>
    70f6:	80 2f       	mov	r24, r16
    70f8:	01 13       	cpse	r16, r17
    70fa:	f3 cf       	rjmp	.-26     	; 0x70e2 <vfprintf+0x392>
    70fc:	e6 cf       	rjmp	.-52     	; 0x70ca <vfprintf+0x37a>
    70fe:	85 e4       	ldi	r24, 0x45	; 69
    7100:	90 e0       	ldi	r25, 0x00	; 0
    7102:	b7 01       	movw	r22, r14
    7104:	0e 94 87 3b 	call	0x770e	; 0x770e <fputc>
    7108:	d7 fc       	sbrc	r13, 7
    710a:	06 c0       	rjmp	.+12     	; 0x7118 <vfprintf+0x3c8>
    710c:	c1 14       	cp	r12, r1
    710e:	d1 04       	cpc	r13, r1
    7110:	41 f4       	brne	.+16     	; 0x7122 <vfprintf+0x3d2>
    7112:	ec 85       	ldd	r30, Y+12	; 0x0c
    7114:	e4 ff       	sbrs	r30, 4
    7116:	05 c0       	rjmp	.+10     	; 0x7122 <vfprintf+0x3d2>
    7118:	d1 94       	neg	r13
    711a:	c1 94       	neg	r12
    711c:	d1 08       	sbc	r13, r1
    711e:	8d e2       	ldi	r24, 0x2D	; 45
    7120:	01 c0       	rjmp	.+2      	; 0x7124 <vfprintf+0x3d4>
    7122:	8b e2       	ldi	r24, 0x2B	; 43
    7124:	b7 01       	movw	r22, r14
    7126:	90 e0       	ldi	r25, 0x00	; 0
    7128:	0e 94 87 3b 	call	0x770e	; 0x770e <fputc>
    712c:	80 e3       	ldi	r24, 0x30	; 48
    712e:	2a e0       	ldi	r18, 0x0A	; 10
    7130:	c2 16       	cp	r12, r18
    7132:	d1 04       	cpc	r13, r1
    7134:	2c f0       	brlt	.+10     	; 0x7140 <vfprintf+0x3f0>
    7136:	8f 5f       	subi	r24, 0xFF	; 255
    7138:	fa e0       	ldi	r31, 0x0A	; 10
    713a:	cf 1a       	sub	r12, r31
    713c:	d1 08       	sbc	r13, r1
    713e:	f7 cf       	rjmp	.-18     	; 0x712e <vfprintf+0x3de>
    7140:	b7 01       	movw	r22, r14
    7142:	90 e0       	ldi	r25, 0x00	; 0
    7144:	0e 94 87 3b 	call	0x770e	; 0x770e <fputc>
    7148:	b7 01       	movw	r22, r14
    714a:	c6 01       	movw	r24, r12
    714c:	c0 96       	adiw	r24, 0x30	; 48
    714e:	0e 94 87 3b 	call	0x770e	; 0x770e <fputc>
    7152:	54 c1       	rjmp	.+680    	; 0x73fc <vfprintf+0x6ac>
    7154:	83 36       	cpi	r24, 0x63	; 99
    7156:	31 f0       	breq	.+12     	; 0x7164 <vfprintf+0x414>
    7158:	83 37       	cpi	r24, 0x73	; 115
    715a:	79 f0       	breq	.+30     	; 0x717a <vfprintf+0x42a>
    715c:	83 35       	cpi	r24, 0x53	; 83
    715e:	09 f0       	breq	.+2      	; 0x7162 <vfprintf+0x412>
    7160:	56 c0       	rjmp	.+172    	; 0x720e <vfprintf+0x4be>
    7162:	20 c0       	rjmp	.+64     	; 0x71a4 <vfprintf+0x454>
    7164:	56 01       	movw	r10, r12
    7166:	32 e0       	ldi	r19, 0x02	; 2
    7168:	a3 0e       	add	r10, r19
    716a:	b1 1c       	adc	r11, r1
    716c:	f6 01       	movw	r30, r12
    716e:	80 81       	ld	r24, Z
    7170:	89 83       	std	Y+1, r24	; 0x01
    7172:	01 e0       	ldi	r16, 0x01	; 1
    7174:	10 e0       	ldi	r17, 0x00	; 0
    7176:	63 01       	movw	r12, r6
    7178:	12 c0       	rjmp	.+36     	; 0x719e <vfprintf+0x44e>
    717a:	56 01       	movw	r10, r12
    717c:	f2 e0       	ldi	r31, 0x02	; 2
    717e:	af 0e       	add	r10, r31
    7180:	b1 1c       	adc	r11, r1
    7182:	f6 01       	movw	r30, r12
    7184:	c0 80       	ld	r12, Z
    7186:	d1 80       	ldd	r13, Z+1	; 0x01
    7188:	96 fe       	sbrs	r9, 6
    718a:	03 c0       	rjmp	.+6      	; 0x7192 <vfprintf+0x442>
    718c:	61 2f       	mov	r22, r17
    718e:	70 e0       	ldi	r23, 0x00	; 0
    7190:	02 c0       	rjmp	.+4      	; 0x7196 <vfprintf+0x446>
    7192:	6f ef       	ldi	r22, 0xFF	; 255
    7194:	7f ef       	ldi	r23, 0xFF	; 255
    7196:	c6 01       	movw	r24, r12
    7198:	0e 94 4c 3b 	call	0x7698	; 0x7698 <strnlen>
    719c:	8c 01       	movw	r16, r24
    719e:	f9 2d       	mov	r31, r9
    71a0:	ff 77       	andi	r31, 0x7F	; 127
    71a2:	14 c0       	rjmp	.+40     	; 0x71cc <vfprintf+0x47c>
    71a4:	56 01       	movw	r10, r12
    71a6:	22 e0       	ldi	r18, 0x02	; 2
    71a8:	a2 0e       	add	r10, r18
    71aa:	b1 1c       	adc	r11, r1
    71ac:	f6 01       	movw	r30, r12
    71ae:	c0 80       	ld	r12, Z
    71b0:	d1 80       	ldd	r13, Z+1	; 0x01
    71b2:	96 fe       	sbrs	r9, 6
    71b4:	03 c0       	rjmp	.+6      	; 0x71bc <vfprintf+0x46c>
    71b6:	61 2f       	mov	r22, r17
    71b8:	70 e0       	ldi	r23, 0x00	; 0
    71ba:	02 c0       	rjmp	.+4      	; 0x71c0 <vfprintf+0x470>
    71bc:	6f ef       	ldi	r22, 0xFF	; 255
    71be:	7f ef       	ldi	r23, 0xFF	; 255
    71c0:	c6 01       	movw	r24, r12
    71c2:	0e 94 28 3b 	call	0x7650	; 0x7650 <strnlen_P>
    71c6:	8c 01       	movw	r16, r24
    71c8:	f9 2d       	mov	r31, r9
    71ca:	f0 68       	ori	r31, 0x80	; 128
    71cc:	9f 2e       	mov	r9, r31
    71ce:	f3 fd       	sbrc	r31, 3
    71d0:	1a c0       	rjmp	.+52     	; 0x7206 <vfprintf+0x4b6>
    71d2:	85 2d       	mov	r24, r5
    71d4:	90 e0       	ldi	r25, 0x00	; 0
    71d6:	08 17       	cp	r16, r24
    71d8:	19 07       	cpc	r17, r25
    71da:	a8 f4       	brcc	.+42     	; 0x7206 <vfprintf+0x4b6>
    71dc:	b7 01       	movw	r22, r14
    71de:	80 e2       	ldi	r24, 0x20	; 32
    71e0:	90 e0       	ldi	r25, 0x00	; 0
    71e2:	0e 94 87 3b 	call	0x770e	; 0x770e <fputc>
    71e6:	5a 94       	dec	r5
    71e8:	f4 cf       	rjmp	.-24     	; 0x71d2 <vfprintf+0x482>
    71ea:	f6 01       	movw	r30, r12
    71ec:	97 fc       	sbrc	r9, 7
    71ee:	85 91       	lpm	r24, Z+
    71f0:	97 fe       	sbrs	r9, 7
    71f2:	81 91       	ld	r24, Z+
    71f4:	6f 01       	movw	r12, r30
    71f6:	b7 01       	movw	r22, r14
    71f8:	90 e0       	ldi	r25, 0x00	; 0
    71fa:	0e 94 87 3b 	call	0x770e	; 0x770e <fputc>
    71fe:	51 10       	cpse	r5, r1
    7200:	5a 94       	dec	r5
    7202:	01 50       	subi	r16, 0x01	; 1
    7204:	11 09       	sbc	r17, r1
    7206:	01 15       	cp	r16, r1
    7208:	11 05       	cpc	r17, r1
    720a:	79 f7       	brne	.-34     	; 0x71ea <vfprintf+0x49a>
    720c:	f7 c0       	rjmp	.+494    	; 0x73fc <vfprintf+0x6ac>
    720e:	84 36       	cpi	r24, 0x64	; 100
    7210:	11 f0       	breq	.+4      	; 0x7216 <vfprintf+0x4c6>
    7212:	89 36       	cpi	r24, 0x69	; 105
    7214:	61 f5       	brne	.+88     	; 0x726e <vfprintf+0x51e>
    7216:	56 01       	movw	r10, r12
    7218:	97 fe       	sbrs	r9, 7
    721a:	09 c0       	rjmp	.+18     	; 0x722e <vfprintf+0x4de>
    721c:	24 e0       	ldi	r18, 0x04	; 4
    721e:	a2 0e       	add	r10, r18
    7220:	b1 1c       	adc	r11, r1
    7222:	f6 01       	movw	r30, r12
    7224:	60 81       	ld	r22, Z
    7226:	71 81       	ldd	r23, Z+1	; 0x01
    7228:	82 81       	ldd	r24, Z+2	; 0x02
    722a:	93 81       	ldd	r25, Z+3	; 0x03
    722c:	0a c0       	rjmp	.+20     	; 0x7242 <vfprintf+0x4f2>
    722e:	f2 e0       	ldi	r31, 0x02	; 2
    7230:	af 0e       	add	r10, r31
    7232:	b1 1c       	adc	r11, r1
    7234:	f6 01       	movw	r30, r12
    7236:	60 81       	ld	r22, Z
    7238:	71 81       	ldd	r23, Z+1	; 0x01
    723a:	07 2e       	mov	r0, r23
    723c:	00 0c       	add	r0, r0
    723e:	88 0b       	sbc	r24, r24
    7240:	99 0b       	sbc	r25, r25
    7242:	f9 2d       	mov	r31, r9
    7244:	ff 76       	andi	r31, 0x6F	; 111
    7246:	9f 2e       	mov	r9, r31
    7248:	97 ff       	sbrs	r25, 7
    724a:	09 c0       	rjmp	.+18     	; 0x725e <vfprintf+0x50e>
    724c:	90 95       	com	r25
    724e:	80 95       	com	r24
    7250:	70 95       	com	r23
    7252:	61 95       	neg	r22
    7254:	7f 4f       	sbci	r23, 0xFF	; 255
    7256:	8f 4f       	sbci	r24, 0xFF	; 255
    7258:	9f 4f       	sbci	r25, 0xFF	; 255
    725a:	f0 68       	ori	r31, 0x80	; 128
    725c:	9f 2e       	mov	r9, r31
    725e:	2a e0       	ldi	r18, 0x0A	; 10
    7260:	30 e0       	ldi	r19, 0x00	; 0
    7262:	a3 01       	movw	r20, r6
    7264:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <__ultoa_invert>
    7268:	c8 2e       	mov	r12, r24
    726a:	c6 18       	sub	r12, r6
    726c:	3f c0       	rjmp	.+126    	; 0x72ec <vfprintf+0x59c>
    726e:	09 2d       	mov	r16, r9
    7270:	85 37       	cpi	r24, 0x75	; 117
    7272:	21 f4       	brne	.+8      	; 0x727c <vfprintf+0x52c>
    7274:	0f 7e       	andi	r16, 0xEF	; 239
    7276:	2a e0       	ldi	r18, 0x0A	; 10
    7278:	30 e0       	ldi	r19, 0x00	; 0
    727a:	1d c0       	rjmp	.+58     	; 0x72b6 <vfprintf+0x566>
    727c:	09 7f       	andi	r16, 0xF9	; 249
    727e:	8f 36       	cpi	r24, 0x6F	; 111
    7280:	91 f0       	breq	.+36     	; 0x72a6 <vfprintf+0x556>
    7282:	18 f4       	brcc	.+6      	; 0x728a <vfprintf+0x53a>
    7284:	88 35       	cpi	r24, 0x58	; 88
    7286:	59 f0       	breq	.+22     	; 0x729e <vfprintf+0x54e>
    7288:	c3 c0       	rjmp	.+390    	; 0x7410 <vfprintf+0x6c0>
    728a:	80 37       	cpi	r24, 0x70	; 112
    728c:	19 f0       	breq	.+6      	; 0x7294 <vfprintf+0x544>
    728e:	88 37       	cpi	r24, 0x78	; 120
    7290:	11 f0       	breq	.+4      	; 0x7296 <vfprintf+0x546>
    7292:	be c0       	rjmp	.+380    	; 0x7410 <vfprintf+0x6c0>
    7294:	00 61       	ori	r16, 0x10	; 16
    7296:	04 ff       	sbrs	r16, 4
    7298:	09 c0       	rjmp	.+18     	; 0x72ac <vfprintf+0x55c>
    729a:	04 60       	ori	r16, 0x04	; 4
    729c:	07 c0       	rjmp	.+14     	; 0x72ac <vfprintf+0x55c>
    729e:	94 fe       	sbrs	r9, 4
    72a0:	08 c0       	rjmp	.+16     	; 0x72b2 <vfprintf+0x562>
    72a2:	06 60       	ori	r16, 0x06	; 6
    72a4:	06 c0       	rjmp	.+12     	; 0x72b2 <vfprintf+0x562>
    72a6:	28 e0       	ldi	r18, 0x08	; 8
    72a8:	30 e0       	ldi	r19, 0x00	; 0
    72aa:	05 c0       	rjmp	.+10     	; 0x72b6 <vfprintf+0x566>
    72ac:	20 e1       	ldi	r18, 0x10	; 16
    72ae:	30 e0       	ldi	r19, 0x00	; 0
    72b0:	02 c0       	rjmp	.+4      	; 0x72b6 <vfprintf+0x566>
    72b2:	20 e1       	ldi	r18, 0x10	; 16
    72b4:	32 e0       	ldi	r19, 0x02	; 2
    72b6:	56 01       	movw	r10, r12
    72b8:	07 ff       	sbrs	r16, 7
    72ba:	09 c0       	rjmp	.+18     	; 0x72ce <vfprintf+0x57e>
    72bc:	84 e0       	ldi	r24, 0x04	; 4
    72be:	a8 0e       	add	r10, r24
    72c0:	b1 1c       	adc	r11, r1
    72c2:	f6 01       	movw	r30, r12
    72c4:	60 81       	ld	r22, Z
    72c6:	71 81       	ldd	r23, Z+1	; 0x01
    72c8:	82 81       	ldd	r24, Z+2	; 0x02
    72ca:	93 81       	ldd	r25, Z+3	; 0x03
    72cc:	08 c0       	rjmp	.+16     	; 0x72de <vfprintf+0x58e>
    72ce:	f2 e0       	ldi	r31, 0x02	; 2
    72d0:	af 0e       	add	r10, r31
    72d2:	b1 1c       	adc	r11, r1
    72d4:	f6 01       	movw	r30, r12
    72d6:	60 81       	ld	r22, Z
    72d8:	71 81       	ldd	r23, Z+1	; 0x01
    72da:	80 e0       	ldi	r24, 0x00	; 0
    72dc:	90 e0       	ldi	r25, 0x00	; 0
    72de:	a3 01       	movw	r20, r6
    72e0:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <__ultoa_invert>
    72e4:	c8 2e       	mov	r12, r24
    72e6:	c6 18       	sub	r12, r6
    72e8:	0f 77       	andi	r16, 0x7F	; 127
    72ea:	90 2e       	mov	r9, r16
    72ec:	96 fe       	sbrs	r9, 6
    72ee:	0b c0       	rjmp	.+22     	; 0x7306 <vfprintf+0x5b6>
    72f0:	09 2d       	mov	r16, r9
    72f2:	0e 7f       	andi	r16, 0xFE	; 254
    72f4:	c1 16       	cp	r12, r17
    72f6:	50 f4       	brcc	.+20     	; 0x730c <vfprintf+0x5bc>
    72f8:	94 fe       	sbrs	r9, 4
    72fa:	0a c0       	rjmp	.+20     	; 0x7310 <vfprintf+0x5c0>
    72fc:	92 fc       	sbrc	r9, 2
    72fe:	08 c0       	rjmp	.+16     	; 0x7310 <vfprintf+0x5c0>
    7300:	09 2d       	mov	r16, r9
    7302:	0e 7e       	andi	r16, 0xEE	; 238
    7304:	05 c0       	rjmp	.+10     	; 0x7310 <vfprintf+0x5c0>
    7306:	dc 2c       	mov	r13, r12
    7308:	09 2d       	mov	r16, r9
    730a:	03 c0       	rjmp	.+6      	; 0x7312 <vfprintf+0x5c2>
    730c:	dc 2c       	mov	r13, r12
    730e:	01 c0       	rjmp	.+2      	; 0x7312 <vfprintf+0x5c2>
    7310:	d1 2e       	mov	r13, r17
    7312:	04 ff       	sbrs	r16, 4
    7314:	0d c0       	rjmp	.+26     	; 0x7330 <vfprintf+0x5e0>
    7316:	fe 01       	movw	r30, r28
    7318:	ec 0d       	add	r30, r12
    731a:	f1 1d       	adc	r31, r1
    731c:	80 81       	ld	r24, Z
    731e:	80 33       	cpi	r24, 0x30	; 48
    7320:	11 f4       	brne	.+4      	; 0x7326 <vfprintf+0x5d6>
    7322:	09 7e       	andi	r16, 0xE9	; 233
    7324:	09 c0       	rjmp	.+18     	; 0x7338 <vfprintf+0x5e8>
    7326:	02 ff       	sbrs	r16, 2
    7328:	06 c0       	rjmp	.+12     	; 0x7336 <vfprintf+0x5e6>
    732a:	d3 94       	inc	r13
    732c:	d3 94       	inc	r13
    732e:	04 c0       	rjmp	.+8      	; 0x7338 <vfprintf+0x5e8>
    7330:	80 2f       	mov	r24, r16
    7332:	86 78       	andi	r24, 0x86	; 134
    7334:	09 f0       	breq	.+2      	; 0x7338 <vfprintf+0x5e8>
    7336:	d3 94       	inc	r13
    7338:	03 fd       	sbrc	r16, 3
    733a:	11 c0       	rjmp	.+34     	; 0x735e <vfprintf+0x60e>
    733c:	00 ff       	sbrs	r16, 0
    733e:	06 c0       	rjmp	.+12     	; 0x734c <vfprintf+0x5fc>
    7340:	1c 2d       	mov	r17, r12
    7342:	d5 14       	cp	r13, r5
    7344:	80 f4       	brcc	.+32     	; 0x7366 <vfprintf+0x616>
    7346:	15 0d       	add	r17, r5
    7348:	1d 19       	sub	r17, r13
    734a:	0d c0       	rjmp	.+26     	; 0x7366 <vfprintf+0x616>
    734c:	d5 14       	cp	r13, r5
    734e:	58 f4       	brcc	.+22     	; 0x7366 <vfprintf+0x616>
    7350:	b7 01       	movw	r22, r14
    7352:	80 e2       	ldi	r24, 0x20	; 32
    7354:	90 e0       	ldi	r25, 0x00	; 0
    7356:	0e 94 87 3b 	call	0x770e	; 0x770e <fputc>
    735a:	d3 94       	inc	r13
    735c:	f7 cf       	rjmp	.-18     	; 0x734c <vfprintf+0x5fc>
    735e:	d5 14       	cp	r13, r5
    7360:	10 f4       	brcc	.+4      	; 0x7366 <vfprintf+0x616>
    7362:	5d 18       	sub	r5, r13
    7364:	01 c0       	rjmp	.+2      	; 0x7368 <vfprintf+0x618>
    7366:	51 2c       	mov	r5, r1
    7368:	04 ff       	sbrs	r16, 4
    736a:	10 c0       	rjmp	.+32     	; 0x738c <vfprintf+0x63c>
    736c:	b7 01       	movw	r22, r14
    736e:	80 e3       	ldi	r24, 0x30	; 48
    7370:	90 e0       	ldi	r25, 0x00	; 0
    7372:	0e 94 87 3b 	call	0x770e	; 0x770e <fputc>
    7376:	02 ff       	sbrs	r16, 2
    7378:	17 c0       	rjmp	.+46     	; 0x73a8 <vfprintf+0x658>
    737a:	01 fd       	sbrc	r16, 1
    737c:	03 c0       	rjmp	.+6      	; 0x7384 <vfprintf+0x634>
    737e:	88 e7       	ldi	r24, 0x78	; 120
    7380:	90 e0       	ldi	r25, 0x00	; 0
    7382:	02 c0       	rjmp	.+4      	; 0x7388 <vfprintf+0x638>
    7384:	88 e5       	ldi	r24, 0x58	; 88
    7386:	90 e0       	ldi	r25, 0x00	; 0
    7388:	b7 01       	movw	r22, r14
    738a:	0c c0       	rjmp	.+24     	; 0x73a4 <vfprintf+0x654>
    738c:	80 2f       	mov	r24, r16
    738e:	86 78       	andi	r24, 0x86	; 134
    7390:	59 f0       	breq	.+22     	; 0x73a8 <vfprintf+0x658>
    7392:	01 ff       	sbrs	r16, 1
    7394:	02 c0       	rjmp	.+4      	; 0x739a <vfprintf+0x64a>
    7396:	8b e2       	ldi	r24, 0x2B	; 43
    7398:	01 c0       	rjmp	.+2      	; 0x739c <vfprintf+0x64c>
    739a:	80 e2       	ldi	r24, 0x20	; 32
    739c:	07 fd       	sbrc	r16, 7
    739e:	8d e2       	ldi	r24, 0x2D	; 45
    73a0:	b7 01       	movw	r22, r14
    73a2:	90 e0       	ldi	r25, 0x00	; 0
    73a4:	0e 94 87 3b 	call	0x770e	; 0x770e <fputc>
    73a8:	c1 16       	cp	r12, r17
    73aa:	38 f4       	brcc	.+14     	; 0x73ba <vfprintf+0x66a>
    73ac:	b7 01       	movw	r22, r14
    73ae:	80 e3       	ldi	r24, 0x30	; 48
    73b0:	90 e0       	ldi	r25, 0x00	; 0
    73b2:	0e 94 87 3b 	call	0x770e	; 0x770e <fputc>
    73b6:	11 50       	subi	r17, 0x01	; 1
    73b8:	f7 cf       	rjmp	.-18     	; 0x73a8 <vfprintf+0x658>
    73ba:	ca 94       	dec	r12
    73bc:	f3 01       	movw	r30, r6
    73be:	ec 0d       	add	r30, r12
    73c0:	f1 1d       	adc	r31, r1
    73c2:	80 81       	ld	r24, Z
    73c4:	b7 01       	movw	r22, r14
    73c6:	90 e0       	ldi	r25, 0x00	; 0
    73c8:	0e 94 87 3b 	call	0x770e	; 0x770e <fputc>
    73cc:	c1 10       	cpse	r12, r1
    73ce:	f5 cf       	rjmp	.-22     	; 0x73ba <vfprintf+0x66a>
    73d0:	15 c0       	rjmp	.+42     	; 0x73fc <vfprintf+0x6ac>
    73d2:	f4 e0       	ldi	r31, 0x04	; 4
    73d4:	f5 15       	cp	r31, r5
    73d6:	60 f5       	brcc	.+88     	; 0x7430 <vfprintf+0x6e0>
    73d8:	84 e0       	ldi	r24, 0x04	; 4
    73da:	58 1a       	sub	r5, r24
    73dc:	93 fe       	sbrs	r9, 3
    73de:	1f c0       	rjmp	.+62     	; 0x741e <vfprintf+0x6ce>
    73e0:	01 11       	cpse	r16, r1
    73e2:	27 c0       	rjmp	.+78     	; 0x7432 <vfprintf+0x6e2>
    73e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    73e6:	23 ff       	sbrs	r18, 3
    73e8:	2a c0       	rjmp	.+84     	; 0x743e <vfprintf+0x6ee>
    73ea:	02 ec       	ldi	r16, 0xC2	; 194
    73ec:	12 e0       	ldi	r17, 0x02	; 2
    73ee:	39 2d       	mov	r19, r9
    73f0:	30 71       	andi	r19, 0x10	; 16
    73f2:	93 2e       	mov	r9, r19
    73f4:	f8 01       	movw	r30, r16
    73f6:	84 91       	lpm	r24, Z
    73f8:	81 11       	cpse	r24, r1
    73fa:	24 c0       	rjmp	.+72     	; 0x7444 <vfprintf+0x6f4>
    73fc:	55 20       	and	r5, r5
    73fe:	09 f4       	brne	.+2      	; 0x7402 <vfprintf+0x6b2>
    7400:	e4 cc       	rjmp	.-1592   	; 0x6dca <vfprintf+0x7a>
    7402:	b7 01       	movw	r22, r14
    7404:	80 e2       	ldi	r24, 0x20	; 32
    7406:	90 e0       	ldi	r25, 0x00	; 0
    7408:	0e 94 87 3b 	call	0x770e	; 0x770e <fputc>
    740c:	5a 94       	dec	r5
    740e:	f6 cf       	rjmp	.-20     	; 0x73fc <vfprintf+0x6ac>
    7410:	f7 01       	movw	r30, r14
    7412:	86 81       	ldd	r24, Z+6	; 0x06
    7414:	97 81       	ldd	r25, Z+7	; 0x07
    7416:	26 c0       	rjmp	.+76     	; 0x7464 <vfprintf+0x714>
    7418:	8f ef       	ldi	r24, 0xFF	; 255
    741a:	9f ef       	ldi	r25, 0xFF	; 255
    741c:	23 c0       	rjmp	.+70     	; 0x7464 <vfprintf+0x714>
    741e:	b7 01       	movw	r22, r14
    7420:	80 e2       	ldi	r24, 0x20	; 32
    7422:	90 e0       	ldi	r25, 0x00	; 0
    7424:	0e 94 87 3b 	call	0x770e	; 0x770e <fputc>
    7428:	5a 94       	dec	r5
    742a:	51 10       	cpse	r5, r1
    742c:	f8 cf       	rjmp	.-16     	; 0x741e <vfprintf+0x6ce>
    742e:	d8 cf       	rjmp	.-80     	; 0x73e0 <vfprintf+0x690>
    7430:	51 2c       	mov	r5, r1
    7432:	b7 01       	movw	r22, r14
    7434:	80 2f       	mov	r24, r16
    7436:	90 e0       	ldi	r25, 0x00	; 0
    7438:	0e 94 87 3b 	call	0x770e	; 0x770e <fputc>
    743c:	d3 cf       	rjmp	.-90     	; 0x73e4 <vfprintf+0x694>
    743e:	06 ec       	ldi	r16, 0xC6	; 198
    7440:	12 e0       	ldi	r17, 0x02	; 2
    7442:	d5 cf       	rjmp	.-86     	; 0x73ee <vfprintf+0x69e>
    7444:	91 10       	cpse	r9, r1
    7446:	80 52       	subi	r24, 0x20	; 32
    7448:	b7 01       	movw	r22, r14
    744a:	90 e0       	ldi	r25, 0x00	; 0
    744c:	0e 94 87 3b 	call	0x770e	; 0x770e <fputc>
    7450:	0f 5f       	subi	r16, 0xFF	; 255
    7452:	1f 4f       	sbci	r17, 0xFF	; 255
    7454:	cf cf       	rjmp	.-98     	; 0x73f4 <vfprintf+0x6a4>
    7456:	23 e0       	ldi	r18, 0x03	; 3
    7458:	25 15       	cp	r18, r5
    745a:	10 f4       	brcc	.+4      	; 0x7460 <vfprintf+0x710>
    745c:	83 e0       	ldi	r24, 0x03	; 3
    745e:	bd cf       	rjmp	.-134    	; 0x73da <vfprintf+0x68a>
    7460:	51 2c       	mov	r5, r1
    7462:	c0 cf       	rjmp	.-128    	; 0x73e4 <vfprintf+0x694>
    7464:	60 96       	adiw	r28, 0x10	; 16
    7466:	cd bf       	out	0x3d, r28	; 61
    7468:	de bf       	out	0x3e, r29	; 62
    746a:	df 91       	pop	r29
    746c:	cf 91       	pop	r28
    746e:	1f 91       	pop	r17
    7470:	0f 91       	pop	r16
    7472:	ff 90       	pop	r15
    7474:	ef 90       	pop	r14
    7476:	df 90       	pop	r13
    7478:	cf 90       	pop	r12
    747a:	bf 90       	pop	r11
    747c:	af 90       	pop	r10
    747e:	9f 90       	pop	r9
    7480:	8f 90       	pop	r8
    7482:	7f 90       	pop	r7
    7484:	6f 90       	pop	r6
    7486:	5f 90       	pop	r5
    7488:	4f 90       	pop	r4
    748a:	3f 90       	pop	r3
    748c:	2f 90       	pop	r2
    748e:	08 95       	ret

00007490 <__tablejump2__>:
    7490:	ee 0f       	add	r30, r30
    7492:	ff 1f       	adc	r31, r31
    7494:	88 1f       	adc	r24, r24
    7496:	8b bf       	out	0x3b, r24	; 59
    7498:	07 90       	elpm	r0, Z+
    749a:	f6 91       	elpm	r31, Z
    749c:	e0 2d       	mov	r30, r0
    749e:	19 94       	eijmp

000074a0 <__ftoa_engine>:
    74a0:	28 30       	cpi	r18, 0x08	; 8
    74a2:	08 f0       	brcs	.+2      	; 0x74a6 <__ftoa_engine+0x6>
    74a4:	27 e0       	ldi	r18, 0x07	; 7
    74a6:	33 27       	eor	r19, r19
    74a8:	da 01       	movw	r26, r20
    74aa:	99 0f       	add	r25, r25
    74ac:	31 1d       	adc	r19, r1
    74ae:	87 fd       	sbrc	r24, 7
    74b0:	91 60       	ori	r25, 0x01	; 1
    74b2:	00 96       	adiw	r24, 0x00	; 0
    74b4:	61 05       	cpc	r22, r1
    74b6:	71 05       	cpc	r23, r1
    74b8:	39 f4       	brne	.+14     	; 0x74c8 <__ftoa_engine+0x28>
    74ba:	32 60       	ori	r19, 0x02	; 2
    74bc:	2e 5f       	subi	r18, 0xFE	; 254
    74be:	3d 93       	st	X+, r19
    74c0:	30 e3       	ldi	r19, 0x30	; 48
    74c2:	2a 95       	dec	r18
    74c4:	e1 f7       	brne	.-8      	; 0x74be <__ftoa_engine+0x1e>
    74c6:	08 95       	ret
    74c8:	9f 3f       	cpi	r25, 0xFF	; 255
    74ca:	30 f0       	brcs	.+12     	; 0x74d8 <__ftoa_engine+0x38>
    74cc:	80 38       	cpi	r24, 0x80	; 128
    74ce:	71 05       	cpc	r23, r1
    74d0:	61 05       	cpc	r22, r1
    74d2:	09 f0       	breq	.+2      	; 0x74d6 <__ftoa_engine+0x36>
    74d4:	3c 5f       	subi	r19, 0xFC	; 252
    74d6:	3c 5f       	subi	r19, 0xFC	; 252
    74d8:	3d 93       	st	X+, r19
    74da:	91 30       	cpi	r25, 0x01	; 1
    74dc:	08 f0       	brcs	.+2      	; 0x74e0 <__ftoa_engine+0x40>
    74de:	80 68       	ori	r24, 0x80	; 128
    74e0:	91 1d       	adc	r25, r1
    74e2:	df 93       	push	r29
    74e4:	cf 93       	push	r28
    74e6:	1f 93       	push	r17
    74e8:	0f 93       	push	r16
    74ea:	ff 92       	push	r15
    74ec:	ef 92       	push	r14
    74ee:	19 2f       	mov	r17, r25
    74f0:	98 7f       	andi	r25, 0xF8	; 248
    74f2:	96 95       	lsr	r25
    74f4:	e9 2f       	mov	r30, r25
    74f6:	96 95       	lsr	r25
    74f8:	96 95       	lsr	r25
    74fa:	e9 0f       	add	r30, r25
    74fc:	ff 27       	eor	r31, r31
    74fe:	ec 5d       	subi	r30, 0xDC	; 220
    7500:	fc 4f       	sbci	r31, 0xFC	; 252
    7502:	99 27       	eor	r25, r25
    7504:	33 27       	eor	r19, r19
    7506:	ee 24       	eor	r14, r14
    7508:	ff 24       	eor	r15, r15
    750a:	a7 01       	movw	r20, r14
    750c:	e7 01       	movw	r28, r14
    750e:	05 90       	lpm	r0, Z+
    7510:	08 94       	sec
    7512:	07 94       	ror	r0
    7514:	28 f4       	brcc	.+10     	; 0x7520 <__ftoa_engine+0x80>
    7516:	36 0f       	add	r19, r22
    7518:	e7 1e       	adc	r14, r23
    751a:	f8 1e       	adc	r15, r24
    751c:	49 1f       	adc	r20, r25
    751e:	51 1d       	adc	r21, r1
    7520:	66 0f       	add	r22, r22
    7522:	77 1f       	adc	r23, r23
    7524:	88 1f       	adc	r24, r24
    7526:	99 1f       	adc	r25, r25
    7528:	06 94       	lsr	r0
    752a:	a1 f7       	brne	.-24     	; 0x7514 <__ftoa_engine+0x74>
    752c:	05 90       	lpm	r0, Z+
    752e:	07 94       	ror	r0
    7530:	28 f4       	brcc	.+10     	; 0x753c <__ftoa_engine+0x9c>
    7532:	e7 0e       	add	r14, r23
    7534:	f8 1e       	adc	r15, r24
    7536:	49 1f       	adc	r20, r25
    7538:	56 1f       	adc	r21, r22
    753a:	c1 1d       	adc	r28, r1
    753c:	77 0f       	add	r23, r23
    753e:	88 1f       	adc	r24, r24
    7540:	99 1f       	adc	r25, r25
    7542:	66 1f       	adc	r22, r22
    7544:	06 94       	lsr	r0
    7546:	a1 f7       	brne	.-24     	; 0x7530 <__ftoa_engine+0x90>
    7548:	05 90       	lpm	r0, Z+
    754a:	07 94       	ror	r0
    754c:	28 f4       	brcc	.+10     	; 0x7558 <__ftoa_engine+0xb8>
    754e:	f8 0e       	add	r15, r24
    7550:	49 1f       	adc	r20, r25
    7552:	56 1f       	adc	r21, r22
    7554:	c7 1f       	adc	r28, r23
    7556:	d1 1d       	adc	r29, r1
    7558:	88 0f       	add	r24, r24
    755a:	99 1f       	adc	r25, r25
    755c:	66 1f       	adc	r22, r22
    755e:	77 1f       	adc	r23, r23
    7560:	06 94       	lsr	r0
    7562:	a1 f7       	brne	.-24     	; 0x754c <__ftoa_engine+0xac>
    7564:	05 90       	lpm	r0, Z+
    7566:	07 94       	ror	r0
    7568:	20 f4       	brcc	.+8      	; 0x7572 <__ftoa_engine+0xd2>
    756a:	49 0f       	add	r20, r25
    756c:	56 1f       	adc	r21, r22
    756e:	c7 1f       	adc	r28, r23
    7570:	d8 1f       	adc	r29, r24
    7572:	99 0f       	add	r25, r25
    7574:	66 1f       	adc	r22, r22
    7576:	77 1f       	adc	r23, r23
    7578:	88 1f       	adc	r24, r24
    757a:	06 94       	lsr	r0
    757c:	a9 f7       	brne	.-22     	; 0x7568 <__ftoa_engine+0xc8>
    757e:	84 91       	lpm	r24, Z
    7580:	10 95       	com	r17
    7582:	17 70       	andi	r17, 0x07	; 7
    7584:	41 f0       	breq	.+16     	; 0x7596 <__ftoa_engine+0xf6>
    7586:	d6 95       	lsr	r29
    7588:	c7 95       	ror	r28
    758a:	57 95       	ror	r21
    758c:	47 95       	ror	r20
    758e:	f7 94       	ror	r15
    7590:	e7 94       	ror	r14
    7592:	1a 95       	dec	r17
    7594:	c1 f7       	brne	.-16     	; 0x7586 <__ftoa_engine+0xe6>
    7596:	ea ec       	ldi	r30, 0xCA	; 202
    7598:	f2 e0       	ldi	r31, 0x02	; 2
    759a:	68 94       	set
    759c:	15 90       	lpm	r1, Z+
    759e:	15 91       	lpm	r17, Z+
    75a0:	35 91       	lpm	r19, Z+
    75a2:	65 91       	lpm	r22, Z+
    75a4:	95 91       	lpm	r25, Z+
    75a6:	05 90       	lpm	r0, Z+
    75a8:	7f e2       	ldi	r23, 0x2F	; 47
    75aa:	73 95       	inc	r23
    75ac:	e1 18       	sub	r14, r1
    75ae:	f1 0a       	sbc	r15, r17
    75b0:	43 0b       	sbc	r20, r19
    75b2:	56 0b       	sbc	r21, r22
    75b4:	c9 0b       	sbc	r28, r25
    75b6:	d0 09       	sbc	r29, r0
    75b8:	c0 f7       	brcc	.-16     	; 0x75aa <__ftoa_engine+0x10a>
    75ba:	e1 0c       	add	r14, r1
    75bc:	f1 1e       	adc	r15, r17
    75be:	43 1f       	adc	r20, r19
    75c0:	56 1f       	adc	r21, r22
    75c2:	c9 1f       	adc	r28, r25
    75c4:	d0 1d       	adc	r29, r0
    75c6:	7e f4       	brtc	.+30     	; 0x75e6 <__ftoa_engine+0x146>
    75c8:	70 33       	cpi	r23, 0x30	; 48
    75ca:	11 f4       	brne	.+4      	; 0x75d0 <__ftoa_engine+0x130>
    75cc:	8a 95       	dec	r24
    75ce:	e6 cf       	rjmp	.-52     	; 0x759c <__ftoa_engine+0xfc>
    75d0:	e8 94       	clt
    75d2:	01 50       	subi	r16, 0x01	; 1
    75d4:	30 f0       	brcs	.+12     	; 0x75e2 <__ftoa_engine+0x142>
    75d6:	08 0f       	add	r16, r24
    75d8:	0a f4       	brpl	.+2      	; 0x75dc <__ftoa_engine+0x13c>
    75da:	00 27       	eor	r16, r16
    75dc:	02 17       	cp	r16, r18
    75de:	08 f4       	brcc	.+2      	; 0x75e2 <__ftoa_engine+0x142>
    75e0:	20 2f       	mov	r18, r16
    75e2:	23 95       	inc	r18
    75e4:	02 2f       	mov	r16, r18
    75e6:	7a 33       	cpi	r23, 0x3A	; 58
    75e8:	28 f0       	brcs	.+10     	; 0x75f4 <__ftoa_engine+0x154>
    75ea:	79 e3       	ldi	r23, 0x39	; 57
    75ec:	7d 93       	st	X+, r23
    75ee:	2a 95       	dec	r18
    75f0:	e9 f7       	brne	.-6      	; 0x75ec <__ftoa_engine+0x14c>
    75f2:	10 c0       	rjmp	.+32     	; 0x7614 <__ftoa_engine+0x174>
    75f4:	7d 93       	st	X+, r23
    75f6:	2a 95       	dec	r18
    75f8:	89 f6       	brne	.-94     	; 0x759c <__ftoa_engine+0xfc>
    75fa:	06 94       	lsr	r0
    75fc:	97 95       	ror	r25
    75fe:	67 95       	ror	r22
    7600:	37 95       	ror	r19
    7602:	17 95       	ror	r17
    7604:	17 94       	ror	r1
    7606:	e1 18       	sub	r14, r1
    7608:	f1 0a       	sbc	r15, r17
    760a:	43 0b       	sbc	r20, r19
    760c:	56 0b       	sbc	r21, r22
    760e:	c9 0b       	sbc	r28, r25
    7610:	d0 09       	sbc	r29, r0
    7612:	98 f0       	brcs	.+38     	; 0x763a <__ftoa_engine+0x19a>
    7614:	23 95       	inc	r18
    7616:	7e 91       	ld	r23, -X
    7618:	73 95       	inc	r23
    761a:	7a 33       	cpi	r23, 0x3A	; 58
    761c:	08 f0       	brcs	.+2      	; 0x7620 <__ftoa_engine+0x180>
    761e:	70 e3       	ldi	r23, 0x30	; 48
    7620:	7c 93       	st	X, r23
    7622:	20 13       	cpse	r18, r16
    7624:	b8 f7       	brcc	.-18     	; 0x7614 <__ftoa_engine+0x174>
    7626:	7e 91       	ld	r23, -X
    7628:	70 61       	ori	r23, 0x10	; 16
    762a:	7d 93       	st	X+, r23
    762c:	30 f0       	brcs	.+12     	; 0x763a <__ftoa_engine+0x19a>
    762e:	83 95       	inc	r24
    7630:	71 e3       	ldi	r23, 0x31	; 49
    7632:	7d 93       	st	X+, r23
    7634:	70 e3       	ldi	r23, 0x30	; 48
    7636:	2a 95       	dec	r18
    7638:	e1 f7       	brne	.-8      	; 0x7632 <__ftoa_engine+0x192>
    763a:	11 24       	eor	r1, r1
    763c:	ef 90       	pop	r14
    763e:	ff 90       	pop	r15
    7640:	0f 91       	pop	r16
    7642:	1f 91       	pop	r17
    7644:	cf 91       	pop	r28
    7646:	df 91       	pop	r29
    7648:	99 27       	eor	r25, r25
    764a:	87 fd       	sbrc	r24, 7
    764c:	90 95       	com	r25
    764e:	08 95       	ret

00007650 <strnlen_P>:
    7650:	fc 01       	movw	r30, r24
    7652:	05 90       	lpm	r0, Z+
    7654:	61 50       	subi	r22, 0x01	; 1
    7656:	70 40       	sbci	r23, 0x00	; 0
    7658:	01 10       	cpse	r0, r1
    765a:	d8 f7       	brcc	.-10     	; 0x7652 <strnlen_P+0x2>
    765c:	80 95       	com	r24
    765e:	90 95       	com	r25
    7660:	8e 0f       	add	r24, r30
    7662:	9f 1f       	adc	r25, r31
    7664:	08 95       	ret

00007666 <memcpy>:
    7666:	fb 01       	movw	r30, r22
    7668:	dc 01       	movw	r26, r24
    766a:	02 c0       	rjmp	.+4      	; 0x7670 <memcpy+0xa>
    766c:	01 90       	ld	r0, Z+
    766e:	0d 92       	st	X+, r0
    7670:	41 50       	subi	r20, 0x01	; 1
    7672:	50 40       	sbci	r21, 0x00	; 0
    7674:	d8 f7       	brcc	.-10     	; 0x766c <memcpy+0x6>
    7676:	08 95       	ret

00007678 <memset>:
    7678:	dc 01       	movw	r26, r24
    767a:	01 c0       	rjmp	.+2      	; 0x767e <memset+0x6>
    767c:	6d 93       	st	X+, r22
    767e:	41 50       	subi	r20, 0x01	; 1
    7680:	50 40       	sbci	r21, 0x00	; 0
    7682:	e0 f7       	brcc	.-8      	; 0x767c <memset+0x4>
    7684:	08 95       	ret

00007686 <strlen>:
    7686:	fc 01       	movw	r30, r24
    7688:	01 90       	ld	r0, Z+
    768a:	00 20       	and	r0, r0
    768c:	e9 f7       	brne	.-6      	; 0x7688 <strlen+0x2>
    768e:	80 95       	com	r24
    7690:	90 95       	com	r25
    7692:	8e 0f       	add	r24, r30
    7694:	9f 1f       	adc	r25, r31
    7696:	08 95       	ret

00007698 <strnlen>:
    7698:	fc 01       	movw	r30, r24
    769a:	61 50       	subi	r22, 0x01	; 1
    769c:	70 40       	sbci	r23, 0x00	; 0
    769e:	01 90       	ld	r0, Z+
    76a0:	01 10       	cpse	r0, r1
    76a2:	d8 f7       	brcc	.-10     	; 0x769a <strnlen+0x2>
    76a4:	80 95       	com	r24
    76a6:	90 95       	com	r25
    76a8:	8e 0f       	add	r24, r30
    76aa:	9f 1f       	adc	r25, r31
    76ac:	08 95       	ret

000076ae <itoa>:
    76ae:	45 32       	cpi	r20, 0x25	; 37
    76b0:	51 05       	cpc	r21, r1
    76b2:	20 f4       	brcc	.+8      	; 0x76bc <itoa+0xe>
    76b4:	42 30       	cpi	r20, 0x02	; 2
    76b6:	10 f0       	brcs	.+4      	; 0x76bc <itoa+0xe>
    76b8:	0c 94 62 3b 	jmp	0x76c4	; 0x76c4 <__itoa_ncheck>
    76bc:	fb 01       	movw	r30, r22
    76be:	10 82       	st	Z, r1
    76c0:	cb 01       	movw	r24, r22
    76c2:	08 95       	ret

000076c4 <__itoa_ncheck>:
    76c4:	bb 27       	eor	r27, r27
    76c6:	4a 30       	cpi	r20, 0x0A	; 10
    76c8:	31 f4       	brne	.+12     	; 0x76d6 <__itoa_ncheck+0x12>
    76ca:	99 23       	and	r25, r25
    76cc:	22 f4       	brpl	.+8      	; 0x76d6 <__itoa_ncheck+0x12>
    76ce:	bd e2       	ldi	r27, 0x2D	; 45
    76d0:	90 95       	com	r25
    76d2:	81 95       	neg	r24
    76d4:	9f 4f       	sbci	r25, 0xFF	; 255
    76d6:	0c 94 6e 3b 	jmp	0x76dc	; 0x76dc <__utoa_common>

000076da <__utoa_ncheck>:
    76da:	bb 27       	eor	r27, r27

000076dc <__utoa_common>:
    76dc:	fb 01       	movw	r30, r22
    76de:	55 27       	eor	r21, r21
    76e0:	aa 27       	eor	r26, r26
    76e2:	88 0f       	add	r24, r24
    76e4:	99 1f       	adc	r25, r25
    76e6:	aa 1f       	adc	r26, r26
    76e8:	a4 17       	cp	r26, r20
    76ea:	10 f0       	brcs	.+4      	; 0x76f0 <__utoa_common+0x14>
    76ec:	a4 1b       	sub	r26, r20
    76ee:	83 95       	inc	r24
    76f0:	50 51       	subi	r21, 0x10	; 16
    76f2:	b9 f7       	brne	.-18     	; 0x76e2 <__utoa_common+0x6>
    76f4:	a0 5d       	subi	r26, 0xD0	; 208
    76f6:	aa 33       	cpi	r26, 0x3A	; 58
    76f8:	08 f0       	brcs	.+2      	; 0x76fc <__utoa_common+0x20>
    76fa:	a9 5d       	subi	r26, 0xD9	; 217
    76fc:	a1 93       	st	Z+, r26
    76fe:	00 97       	sbiw	r24, 0x00	; 0
    7700:	79 f7       	brne	.-34     	; 0x76e0 <__utoa_common+0x4>
    7702:	b1 11       	cpse	r27, r1
    7704:	b1 93       	st	Z+, r27
    7706:	11 92       	st	Z+, r1
    7708:	cb 01       	movw	r24, r22
    770a:	0c 94 4a 3c 	jmp	0x7894	; 0x7894 <strrev>

0000770e <fputc>:
    770e:	0f 93       	push	r16
    7710:	1f 93       	push	r17
    7712:	cf 93       	push	r28
    7714:	df 93       	push	r29
    7716:	fb 01       	movw	r30, r22
    7718:	23 81       	ldd	r18, Z+3	; 0x03
    771a:	21 fd       	sbrc	r18, 1
    771c:	03 c0       	rjmp	.+6      	; 0x7724 <fputc+0x16>
    771e:	8f ef       	ldi	r24, 0xFF	; 255
    7720:	9f ef       	ldi	r25, 0xFF	; 255
    7722:	2c c0       	rjmp	.+88     	; 0x777c <fputc+0x6e>
    7724:	22 ff       	sbrs	r18, 2
    7726:	16 c0       	rjmp	.+44     	; 0x7754 <fputc+0x46>
    7728:	46 81       	ldd	r20, Z+6	; 0x06
    772a:	57 81       	ldd	r21, Z+7	; 0x07
    772c:	24 81       	ldd	r18, Z+4	; 0x04
    772e:	35 81       	ldd	r19, Z+5	; 0x05
    7730:	42 17       	cp	r20, r18
    7732:	53 07       	cpc	r21, r19
    7734:	44 f4       	brge	.+16     	; 0x7746 <fputc+0x38>
    7736:	a0 81       	ld	r26, Z
    7738:	b1 81       	ldd	r27, Z+1	; 0x01
    773a:	9d 01       	movw	r18, r26
    773c:	2f 5f       	subi	r18, 0xFF	; 255
    773e:	3f 4f       	sbci	r19, 0xFF	; 255
    7740:	20 83       	st	Z, r18
    7742:	31 83       	std	Z+1, r19	; 0x01
    7744:	8c 93       	st	X, r24
    7746:	26 81       	ldd	r18, Z+6	; 0x06
    7748:	37 81       	ldd	r19, Z+7	; 0x07
    774a:	2f 5f       	subi	r18, 0xFF	; 255
    774c:	3f 4f       	sbci	r19, 0xFF	; 255
    774e:	26 83       	std	Z+6, r18	; 0x06
    7750:	37 83       	std	Z+7, r19	; 0x07
    7752:	14 c0       	rjmp	.+40     	; 0x777c <fputc+0x6e>
    7754:	8b 01       	movw	r16, r22
    7756:	ec 01       	movw	r28, r24
    7758:	fb 01       	movw	r30, r22
    775a:	00 84       	ldd	r0, Z+8	; 0x08
    775c:	f1 85       	ldd	r31, Z+9	; 0x09
    775e:	e0 2d       	mov	r30, r0
    7760:	19 95       	eicall
    7762:	89 2b       	or	r24, r25
    7764:	e1 f6       	brne	.-72     	; 0x771e <fputc+0x10>
    7766:	d8 01       	movw	r26, r16
    7768:	16 96       	adiw	r26, 0x06	; 6
    776a:	8d 91       	ld	r24, X+
    776c:	9c 91       	ld	r25, X
    776e:	17 97       	sbiw	r26, 0x07	; 7
    7770:	01 96       	adiw	r24, 0x01	; 1
    7772:	16 96       	adiw	r26, 0x06	; 6
    7774:	8d 93       	st	X+, r24
    7776:	9c 93       	st	X, r25
    7778:	17 97       	sbiw	r26, 0x07	; 7
    777a:	ce 01       	movw	r24, r28
    777c:	df 91       	pop	r29
    777e:	cf 91       	pop	r28
    7780:	1f 91       	pop	r17
    7782:	0f 91       	pop	r16
    7784:	08 95       	ret

00007786 <sprintf>:
    7786:	0f 93       	push	r16
    7788:	1f 93       	push	r17
    778a:	cf 93       	push	r28
    778c:	df 93       	push	r29
    778e:	cd b7       	in	r28, 0x3d	; 61
    7790:	de b7       	in	r29, 0x3e	; 62
    7792:	2e 97       	sbiw	r28, 0x0e	; 14
    7794:	cd bf       	out	0x3d, r28	; 61
    7796:	de bf       	out	0x3e, r29	; 62
    7798:	0e 89       	ldd	r16, Y+22	; 0x16
    779a:	1f 89       	ldd	r17, Y+23	; 0x17
    779c:	86 e0       	ldi	r24, 0x06	; 6
    779e:	8c 83       	std	Y+4, r24	; 0x04
    77a0:	09 83       	std	Y+1, r16	; 0x01
    77a2:	1a 83       	std	Y+2, r17	; 0x02
    77a4:	8f ef       	ldi	r24, 0xFF	; 255
    77a6:	9f e7       	ldi	r25, 0x7F	; 127
    77a8:	8d 83       	std	Y+5, r24	; 0x05
    77aa:	9e 83       	std	Y+6, r25	; 0x06
    77ac:	ae 01       	movw	r20, r28
    77ae:	46 5e       	subi	r20, 0xE6	; 230
    77b0:	5f 4f       	sbci	r21, 0xFF	; 255
    77b2:	68 8d       	ldd	r22, Y+24	; 0x18
    77b4:	79 8d       	ldd	r23, Y+25	; 0x19
    77b6:	ce 01       	movw	r24, r28
    77b8:	01 96       	adiw	r24, 0x01	; 1
    77ba:	0e 94 a8 36 	call	0x6d50	; 0x6d50 <vfprintf>
    77be:	ef 81       	ldd	r30, Y+7	; 0x07
    77c0:	f8 85       	ldd	r31, Y+8	; 0x08
    77c2:	e0 0f       	add	r30, r16
    77c4:	f1 1f       	adc	r31, r17
    77c6:	10 82       	st	Z, r1
    77c8:	2e 96       	adiw	r28, 0x0e	; 14
    77ca:	cd bf       	out	0x3d, r28	; 61
    77cc:	de bf       	out	0x3e, r29	; 62
    77ce:	df 91       	pop	r29
    77d0:	cf 91       	pop	r28
    77d2:	1f 91       	pop	r17
    77d4:	0f 91       	pop	r16
    77d6:	08 95       	ret

000077d8 <__ultoa_invert>:
    77d8:	fa 01       	movw	r30, r20
    77da:	aa 27       	eor	r26, r26
    77dc:	28 30       	cpi	r18, 0x08	; 8
    77de:	51 f1       	breq	.+84     	; 0x7834 <__ultoa_invert+0x5c>
    77e0:	20 31       	cpi	r18, 0x10	; 16
    77e2:	81 f1       	breq	.+96     	; 0x7844 <__ultoa_invert+0x6c>
    77e4:	e8 94       	clt
    77e6:	6f 93       	push	r22
    77e8:	6e 7f       	andi	r22, 0xFE	; 254
    77ea:	6e 5f       	subi	r22, 0xFE	; 254
    77ec:	7f 4f       	sbci	r23, 0xFF	; 255
    77ee:	8f 4f       	sbci	r24, 0xFF	; 255
    77f0:	9f 4f       	sbci	r25, 0xFF	; 255
    77f2:	af 4f       	sbci	r26, 0xFF	; 255
    77f4:	b1 e0       	ldi	r27, 0x01	; 1
    77f6:	3e d0       	rcall	.+124    	; 0x7874 <__ultoa_invert+0x9c>
    77f8:	b4 e0       	ldi	r27, 0x04	; 4
    77fa:	3c d0       	rcall	.+120    	; 0x7874 <__ultoa_invert+0x9c>
    77fc:	67 0f       	add	r22, r23
    77fe:	78 1f       	adc	r23, r24
    7800:	89 1f       	adc	r24, r25
    7802:	9a 1f       	adc	r25, r26
    7804:	a1 1d       	adc	r26, r1
    7806:	68 0f       	add	r22, r24
    7808:	79 1f       	adc	r23, r25
    780a:	8a 1f       	adc	r24, r26
    780c:	91 1d       	adc	r25, r1
    780e:	a1 1d       	adc	r26, r1
    7810:	6a 0f       	add	r22, r26
    7812:	71 1d       	adc	r23, r1
    7814:	81 1d       	adc	r24, r1
    7816:	91 1d       	adc	r25, r1
    7818:	a1 1d       	adc	r26, r1
    781a:	20 d0       	rcall	.+64     	; 0x785c <__ultoa_invert+0x84>
    781c:	09 f4       	brne	.+2      	; 0x7820 <__ultoa_invert+0x48>
    781e:	68 94       	set
    7820:	3f 91       	pop	r19
    7822:	2a e0       	ldi	r18, 0x0A	; 10
    7824:	26 9f       	mul	r18, r22
    7826:	11 24       	eor	r1, r1
    7828:	30 19       	sub	r19, r0
    782a:	30 5d       	subi	r19, 0xD0	; 208
    782c:	31 93       	st	Z+, r19
    782e:	de f6       	brtc	.-74     	; 0x77e6 <__ultoa_invert+0xe>
    7830:	cf 01       	movw	r24, r30
    7832:	08 95       	ret
    7834:	46 2f       	mov	r20, r22
    7836:	47 70       	andi	r20, 0x07	; 7
    7838:	40 5d       	subi	r20, 0xD0	; 208
    783a:	41 93       	st	Z+, r20
    783c:	b3 e0       	ldi	r27, 0x03	; 3
    783e:	0f d0       	rcall	.+30     	; 0x785e <__ultoa_invert+0x86>
    7840:	c9 f7       	brne	.-14     	; 0x7834 <__ultoa_invert+0x5c>
    7842:	f6 cf       	rjmp	.-20     	; 0x7830 <__ultoa_invert+0x58>
    7844:	46 2f       	mov	r20, r22
    7846:	4f 70       	andi	r20, 0x0F	; 15
    7848:	40 5d       	subi	r20, 0xD0	; 208
    784a:	4a 33       	cpi	r20, 0x3A	; 58
    784c:	18 f0       	brcs	.+6      	; 0x7854 <__ultoa_invert+0x7c>
    784e:	49 5d       	subi	r20, 0xD9	; 217
    7850:	31 fd       	sbrc	r19, 1
    7852:	40 52       	subi	r20, 0x20	; 32
    7854:	41 93       	st	Z+, r20
    7856:	02 d0       	rcall	.+4      	; 0x785c <__ultoa_invert+0x84>
    7858:	a9 f7       	brne	.-22     	; 0x7844 <__ultoa_invert+0x6c>
    785a:	ea cf       	rjmp	.-44     	; 0x7830 <__ultoa_invert+0x58>
    785c:	b4 e0       	ldi	r27, 0x04	; 4
    785e:	a6 95       	lsr	r26
    7860:	97 95       	ror	r25
    7862:	87 95       	ror	r24
    7864:	77 95       	ror	r23
    7866:	67 95       	ror	r22
    7868:	ba 95       	dec	r27
    786a:	c9 f7       	brne	.-14     	; 0x785e <__ultoa_invert+0x86>
    786c:	00 97       	sbiw	r24, 0x00	; 0
    786e:	61 05       	cpc	r22, r1
    7870:	71 05       	cpc	r23, r1
    7872:	08 95       	ret
    7874:	9b 01       	movw	r18, r22
    7876:	ac 01       	movw	r20, r24
    7878:	0a 2e       	mov	r0, r26
    787a:	06 94       	lsr	r0
    787c:	57 95       	ror	r21
    787e:	47 95       	ror	r20
    7880:	37 95       	ror	r19
    7882:	27 95       	ror	r18
    7884:	ba 95       	dec	r27
    7886:	c9 f7       	brne	.-14     	; 0x787a <__ultoa_invert+0xa2>
    7888:	62 0f       	add	r22, r18
    788a:	73 1f       	adc	r23, r19
    788c:	84 1f       	adc	r24, r20
    788e:	95 1f       	adc	r25, r21
    7890:	a0 1d       	adc	r26, r0
    7892:	08 95       	ret

00007894 <strrev>:
    7894:	dc 01       	movw	r26, r24
    7896:	fc 01       	movw	r30, r24
    7898:	67 2f       	mov	r22, r23
    789a:	71 91       	ld	r23, Z+
    789c:	77 23       	and	r23, r23
    789e:	e1 f7       	brne	.-8      	; 0x7898 <strrev+0x4>
    78a0:	32 97       	sbiw	r30, 0x02	; 2
    78a2:	04 c0       	rjmp	.+8      	; 0x78ac <strrev+0x18>
    78a4:	7c 91       	ld	r23, X
    78a6:	6d 93       	st	X+, r22
    78a8:	70 83       	st	Z, r23
    78aa:	62 91       	ld	r22, -Z
    78ac:	ae 17       	cp	r26, r30
    78ae:	bf 07       	cpc	r27, r31
    78b0:	c8 f3       	brcs	.-14     	; 0x78a4 <strrev+0x10>
    78b2:	08 95       	ret

000078b4 <_exit>:
    78b4:	f8 94       	cli

000078b6 <__stop_program>:
    78b6:	ff cf       	rjmp	.-2      	; 0x78b6 <__stop_program>
